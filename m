Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id B868517177B
	for <lists+openrisc@lfdr.de>; Thu, 27 Feb 2020 13:35:49 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 906B1209EC;
	Thu, 27 Feb 2020 13:35:49 +0100 (CET)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 27EF72097C
 for <openrisc@lists.librecores.org>; Thu, 27 Feb 2020 09:49:36 +0100 (CET)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 7847A2468A;
 Thu, 27 Feb 2020 08:49:25 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1582793374;
 bh=S9VVqSy7zdpl8bBHwUL+s587RtkT4afSY+zyvdZYp1U=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=bdrzZtpGhN2cbRBM0mA0lge3R9x1mCWGMj3Zmw3b0O1QLN/Ii6+GCppEXrY6R7ejI
 UYM08ZM/2tdmOM42HuWnVsitVDUJ7d8AHHuBOSrdRD6bZ90+I/8wJzeHTau6yAeKja
 dmFfdfrK/ybdIUN+cc4F45pjeK701HwRBd6IedCs=
From: Mike Rapoport <rppt@kernel.org>
To: linux-kernel@vger.kernel.org
Date: Thu, 27 Feb 2020 10:46:02 +0200
Message-Id: <20200227084608.18223-9-rppt@kernel.org>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20200227084608.18223-1-rppt@kernel.org>
References: <20200227084608.18223-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Thu, 27 Feb 2020 13:35:25 +0100
Subject: [OpenRISC] [PATCH v3 08/14] powerpc: add support for folded p4d
 page tables
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 Geert Uytterhoeven <geert+renesas@glider.be>, linux-sh@vger.kernel.org,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>, linux-mm@kvack.org,
 Paul Mackerras <paulus@samba.org>, linux-hexagon@vger.kernel.org,
 Will Deacon <will@kernel.org>, kvmarm@lists.cs.columbia.edu,
 Jonas Bonn <jonas@southpole.se>, linux-arch@vger.kernel.org,
 Brian Cain <bcain@codeaurora.org>, Marc Zyngier <maz@kernel.org>,
 Russell King <linux@armlinux.org.uk>, Ley Foon Tan <ley.foon.tan@intel.com>,
 Mike Rapoport <rppt@linux.ibm.com>, Catalin Marinas <catalin.marinas@arm.com>,
 Julien Thierry <julien.thierry.kdev@gmail.com>,
 uclinux-h8-devel@lists.sourceforge.jp, Fenghua Yu <fenghua.yu@intel.com>,
 Arnd Bergmann <arnd@arndb.de>, Suzuki K Poulose <suzuki.poulose@arm.com>,
 kvm-ppc@vger.kernel.org, openrisc@lists.librecores.org,
 Guan Xuetao <gxt@pku.edu.cn>, linux-arm-kernel@lists.infradead.org,
 Christophe Leroy <christophe.leroy@c-s.fr>, Tony Luck <tony.luck@intel.com>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, James Morse <james.morse@arm.com>,
 Michael Ellerman <mpe@ellerman.id.au>, nios2-dev@lists.rocketboards.org,
 Andrew Morton <akpm@linux-foundation.org>, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKSW1wbGVtZW50IHByaW1p
dGl2ZXMgbmVjZXNzYXJ5IGZvciB0aGUgNHRoIGxldmVsIGZvbGRpbmcsIGFkZCB3YWxrcyBvZiBw
NGQKbGV2ZWwgd2hlcmUgYXBwcm9wcmlhdGUgYW5kIHJlcGxhY2UgNWxldmVsLWZpeHVwLmggd2l0
aCBwZ3RhYmxlLW5vcDRkLmguCgpTaWduZWQtb2ZmLWJ5OiBNaWtlIFJhcG9wb3J0IDxycHB0QGxp
bnV4LmlibS5jb20+ClRlc3RlZC1ieTogQ2hyaXN0b3BoZSBMZXJveSA8Y2hyaXN0b3BoZS5sZXJv
eUBjLXMuZnI+ICMgOHh4IGFuZCA4M3h4Ci0tLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jv
b2szcy8zMi9wZ3RhYmxlLmggIHwgIDEgLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2sz
cy82NC9oYXNoLmggICAgIHwgIDQgKy0KIGFyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3Mv
NjQvcGdhbGxvYy5oICB8ICA0ICstCiBhcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0
L3BndGFibGUuaCAgfCA2MCArKysrKysrKysrLS0tLS0tLS0tCiBhcmNoL3Bvd2VycGMvaW5jbHVk
ZS9hc20vYm9vazNzLzY0L3JhZGl4LmggICAgfCAgNiArLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUv
YXNtL25vaGFzaC8zMi9wZ3RhYmxlLmggIHwgIDEgLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNt
L25vaGFzaC82NC9wZ2FsbG9jLmggIHwgIDIgKy0KIC4uLi9pbmNsdWRlL2FzbS9ub2hhc2gvNjQv
cGd0YWJsZS00ay5oICAgICAgICB8IDMyICsrKysrLS0tLS0KIGFyY2gvcG93ZXJwYy9pbmNsdWRl
L2FzbS9ub2hhc2gvNjQvcGd0YWJsZS5oICB8ICA2ICstCiBhcmNoL3Bvd2VycGMvaW5jbHVkZS9h
c20vcGd0YWJsZS5oICAgICAgICAgICAgfCAgNiArLQogYXJjaC9wb3dlcnBjL2t2bS9ib29rM3Nf
NjRfbW11X3JhZGl4LmMgICAgICAgIHwgMzAgKysrKysrLS0tLQogYXJjaC9wb3dlcnBjL2xpYi9j
b2RlLXBhdGNoaW5nLmMgICAgICAgICAgICAgIHwgIDcgKystCiBhcmNoL3Bvd2VycGMvbW0vYm9v
azNzMzIvbW11LmMgICAgICAgICAgICAgICAgfCAgMiArLQogYXJjaC9wb3dlcnBjL21tL2Jvb2sz
czMyL3RsYi5jICAgICAgICAgICAgICAgIHwgIDQgKy0KIGFyY2gvcG93ZXJwYy9tbS9ib29rM3M2
NC9oYXNoX3BndGFibGUuYyAgICAgICB8ICA0ICstCiBhcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQv
cmFkaXhfcGd0YWJsZS5jICAgICAgfCAyNiArKysrKy0tLQogYXJjaC9wb3dlcnBjL21tL2Jvb2sz
czY0L3N1YnBhZ2VfcHJvdC5jICAgICAgIHwgIDYgKy0KIGFyY2gvcG93ZXJwYy9tbS9odWdldGxi
cGFnZS5jICAgICAgICAgICAgICAgICB8IDI4ICsrKysrLS0tLQogYXJjaC9wb3dlcnBjL21tL2th
c2FuL2thc2FuX2luaXRfMzIuYyAgICAgICAgIHwgIDggKy0tCiBhcmNoL3Bvd2VycGMvbW0vbWVt
LmMgICAgICAgICAgICAgICAgICAgICAgICAgfCAgNCArLQogYXJjaC9wb3dlcnBjL21tL25vaGFz
aC80MHguYyAgICAgICAgICAgICAgICAgIHwgIDQgKy0KIGFyY2gvcG93ZXJwYy9tbS9ub2hhc2gv
Ym9vazNlX3BndGFibGUuYyAgICAgICB8IDE1ICsrLS0tCiBhcmNoL3Bvd2VycGMvbW0vcGd0YWJs
ZS5jICAgICAgICAgICAgICAgICAgICAgfCAzMCArKysrKystLS0tCiBhcmNoL3Bvd2VycGMvbW0v
cGd0YWJsZV8zMi5jICAgICAgICAgICAgICAgICAgfCAgNCArLQogYXJjaC9wb3dlcnBjL21tL3Bn
dGFibGVfNjQuYyAgICAgICAgICAgICAgICAgIHwgMTAgKystLQogYXJjaC9wb3dlcnBjL21tL3B0
ZHVtcC9oYXNocGFnZXRhYmxlLmMgICAgICAgIHwgMjAgKysrKysrLQogYXJjaC9wb3dlcnBjL21t
L3B0ZHVtcC9wdGR1bXAuYyAgICAgICAgICAgICAgIHwgMTQgKysrLS0KIGFyY2gvcG93ZXJwYy94
bW9uL3htb24uYyAgICAgICAgICAgICAgICAgICAgICB8IDE4ICsrKy0tLQogMjggZmlsZXMgY2hh
bmdlZCwgMjA3IGluc2VydGlvbnMoKyksIDE0OSBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9h
cmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzMyL3BndGFibGUuaCBiL2FyY2gvcG93ZXJw
Yy9pbmNsdWRlL2FzbS9ib29rM3MvMzIvcGd0YWJsZS5oCmluZGV4IDViMzljMTFlODg0YS4uMzll
YzExMzcxYmUwIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzMy
L3BndGFibGUuaAorKysgYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzMyL3BndGFi
bGUuaApAQCAtMiw3ICsyLDYgQEAKICNpZm5kZWYgX0FTTV9QT1dFUlBDX0JPT0szU18zMl9QR1RB
QkxFX0gKICNkZWZpbmUgX0FTTV9QT1dFUlBDX0JPT0szU18zMl9QR1RBQkxFX0gKIAotI2RlZmlu
ZSBfX0FSQ0hfVVNFXzVMRVZFTF9IQUNLCiAjaW5jbHVkZSA8YXNtLWdlbmVyaWMvcGd0YWJsZS1u
b3BtZC5oPgogCiAjaW5jbHVkZSA8YXNtL2Jvb2szcy8zMi9oYXNoLmg+CmRpZmYgLS1naXQgYS9h
cmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0L2hhc2guaCBiL2FyY2gvcG93ZXJwYy9p
bmNsdWRlL2FzbS9ib29rM3MvNjQvaGFzaC5oCmluZGV4IDI3ODFlYmY2YWRkNC4uODc2ZDE1Mjhj
MmNmIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0L2hhc2gu
aAorKysgYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0L2hhc2guaApAQCAtMTM0
LDkgKzEzNCw5IEBAIHN0YXRpYyBpbmxpbmUgaW50IGdldF9yZWdpb25faWQodW5zaWduZWQgbG9u
ZyBlYSkKIAogI2RlZmluZQloYXNoX19wbWRfYmFkKHBtZCkJCShwbWRfdmFsKHBtZCkgJiBIX1BN
RF9CQURfQklUUykKICNkZWZpbmUJaGFzaF9fcHVkX2JhZChwdWQpCQkocHVkX3ZhbChwdWQpICYg
SF9QVURfQkFEX0JJVFMpCi1zdGF0aWMgaW5saW5lIGludCBoYXNoX19wZ2RfYmFkKHBnZF90IHBn
ZCkKK3N0YXRpYyBpbmxpbmUgaW50IGhhc2hfX3A0ZF9iYWQocDRkX3QgcDRkKQogewotCXJldHVy
biAocGdkX3ZhbChwZ2QpID09IDApOworCXJldHVybiAocDRkX3ZhbChwNGQpID09IDApOwogfQog
I2lmZGVmIENPTkZJR19TVFJJQ1RfS0VSTkVMX1JXWAogZXh0ZXJuIHZvaWQgaGFzaF9fbWFya19y
b2RhdGFfcm8odm9pZCk7CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9v
azNzLzY0L3BnYWxsb2MuaCBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3MvNjQvcGdh
bGxvYy5oCmluZGV4IGE0MWU5MWJkMDU4MC4uNjljNWIwNTE3MzRmIDEwMDY0NAotLS0gYS9hcmNo
L3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0L3BnYWxsb2MuaAorKysgYi9hcmNoL3Bvd2Vy
cGMvaW5jbHVkZS9hc20vYm9vazNzLzY0L3BnYWxsb2MuaApAQCAtODUsOSArODUsOSBAQCBzdGF0
aWMgaW5saW5lIHZvaWQgcGdkX2ZyZWUoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHBnZF90ICpwZ2Qp
CiAJa21lbV9jYWNoZV9mcmVlKFBHVF9DQUNIRShQR0RfSU5ERVhfU0laRSksIHBnZCk7CiB9CiAK
LXN0YXRpYyBpbmxpbmUgdm9pZCBwZ2RfcG9wdWxhdGUoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHBn
ZF90ICpwZ2QsIHB1ZF90ICpwdWQpCitzdGF0aWMgaW5saW5lIHZvaWQgcDRkX3BvcHVsYXRlKHN0
cnVjdCBtbV9zdHJ1Y3QgKm1tLCBwNGRfdCAqcGdkLCBwdWRfdCAqcHVkKQogewotCSpwZ2QgPSAg
X19wZ2QoX19wZ3RhYmxlX3B0cl92YWwocHVkKSB8IFBHRF9WQUxfQklUUyk7CisJKnBnZCA9ICBf
X3A0ZChfX3BndGFibGVfcHRyX3ZhbChwdWQpIHwgUEdEX1ZBTF9CSVRTKTsKIH0KIAogc3RhdGlj
IGlubGluZSBwdWRfdCAqcHVkX2FsbG9jX29uZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWdu
ZWQgbG9uZyBhZGRyKQpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2sz
cy82NC9wZ3RhYmxlLmggYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0L3BndGFi
bGUuaAppbmRleCAyMDFhNjllNmEzNTUuLmZhNjBlODU5NGI5ZiAxMDA2NDQKLS0tIGEvYXJjaC9w
b3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9wZ3RhYmxlLmgKKysrIGIvYXJjaC9wb3dlcnBj
L2luY2x1ZGUvYXNtL2Jvb2szcy82NC9wZ3RhYmxlLmgKQEAgLTIsNyArMiw3IEBACiAjaWZuZGVm
IF9BU01fUE9XRVJQQ19CT09LM1NfNjRfUEdUQUJMRV9IXwogI2RlZmluZSBfQVNNX1BPV0VSUENf
Qk9PSzNTXzY0X1BHVEFCTEVfSF8KIAotI2luY2x1ZGUgPGFzbS1nZW5lcmljLzVsZXZlbC1maXh1
cC5oPgorI2luY2x1ZGUgPGFzbS1nZW5lcmljL3BndGFibGUtbm9wNGQuaD4KIAogI2lmbmRlZiBf
X0FTU0VNQkxZX18KICNpbmNsdWRlIDxsaW51eC9tbWRlYnVnLmg+CkBAIC0yNTEsNyArMjUxLDcg
QEAgZXh0ZXJuIHVuc2lnbmVkIGxvbmcgX19wbWRfZnJhZ19zaXplX3NoaWZ0OwogLyogQml0cyB0
byBtYXNrIG91dCBmcm9tIGEgUFVEIHRvIGdldCB0byB0aGUgUE1EIHBhZ2UgKi8KICNkZWZpbmUg
UFVEX01BU0tFRF9CSVRTCQkweGMwMDAwMDAwMDAwMDAwZmZVTAogLyogQml0cyB0byBtYXNrIG91
dCBmcm9tIGEgUEdEIHRvIGdldCB0byB0aGUgUFVEIHBhZ2UgKi8KLSNkZWZpbmUgUEdEX01BU0tF
RF9CSVRTCQkweGMwMDAwMDAwMDAwMDAwZmZVTAorI2RlZmluZSBQNERfTUFTS0VEX0JJVFMJCTB4
YzAwMDAwMDAwMDAwMDBmZlVMCiAKIC8qCiAgKiBVc2VkIGFzIGFuIGluZGljYXRvciBmb3IgcmN1
IGNhbGxiYWNrIGZ1bmN0aW9ucwpAQCAtOTQ5LDU0ICs5NDksNjAgQEAgc3RhdGljIGlubGluZSBi
b29sIHB1ZF9hY2Nlc3NfcGVybWl0dGVkKHB1ZF90IHB1ZCwgYm9vbCB3cml0ZSkKIAlyZXR1cm4g
cHRlX2FjY2Vzc19wZXJtaXR0ZWQocHVkX3B0ZShwdWQpLCB3cml0ZSk7CiB9CiAKLSNkZWZpbmUg
cGdkX3dyaXRlKHBnZCkJCXB0ZV93cml0ZShwZ2RfcHRlKHBnZCkpCisjZGVmaW5lIF9fcDRkX3Jh
dyh4KQkoKHA0ZF90KSB7IF9fcGdkX3Jhdyh4KSB9KQorc3RhdGljIGlubGluZSBfX2JlNjQgcDRk
X3JhdyhwNGRfdCB4KQoreworCXJldHVybiBwZ2RfcmF3KHgucGdkKTsKK30KKworI2RlZmluZSBw
NGRfd3JpdGUocDRkKQkJcHRlX3dyaXRlKHA0ZF9wdGUocDRkKSkKIAotc3RhdGljIGlubGluZSB2
b2lkIHBnZF9jbGVhcihwZ2RfdCAqcGdkcCkKK3N0YXRpYyBpbmxpbmUgdm9pZCBwNGRfY2xlYXIo
cDRkX3QgKnA0ZHApCiB7Ci0JKnBnZHAgPSBfX3BnZCgwKTsKKwkqcDRkcCA9IF9fcDRkKDApOwog
fQogCi1zdGF0aWMgaW5saW5lIGludCBwZ2Rfbm9uZShwZ2RfdCBwZ2QpCitzdGF0aWMgaW5saW5l
IGludCBwNGRfbm9uZShwNGRfdCBwNGQpCiB7Ci0JcmV0dXJuICFwZ2RfcmF3KHBnZCk7CisJcmV0
dXJuICFwNGRfcmF3KHA0ZCk7CiB9CiAKLXN0YXRpYyBpbmxpbmUgaW50IHBnZF9wcmVzZW50KHBn
ZF90IHBnZCkKK3N0YXRpYyBpbmxpbmUgaW50IHA0ZF9wcmVzZW50KHA0ZF90IHA0ZCkKIHsKLQly
ZXR1cm4gISEocGdkX3JhdyhwZ2QpICYgY3B1X3RvX2JlNjQoX1BBR0VfUFJFU0VOVCkpOworCXJl
dHVybiAhIShwNGRfcmF3KHA0ZCkgJiBjcHVfdG9fYmU2NChfUEFHRV9QUkVTRU5UKSk7CiB9CiAK
LXN0YXRpYyBpbmxpbmUgcHRlX3QgcGdkX3B0ZShwZ2RfdCBwZ2QpCitzdGF0aWMgaW5saW5lIHB0
ZV90IHA0ZF9wdGUocDRkX3QgcDRkKQogewotCXJldHVybiBfX3B0ZV9yYXcocGdkX3JhdyhwZ2Qp
KTsKKwlyZXR1cm4gX19wdGVfcmF3KHA0ZF9yYXcocDRkKSk7CiB9CiAKLXN0YXRpYyBpbmxpbmUg
cGdkX3QgcHRlX3BnZChwdGVfdCBwdGUpCitzdGF0aWMgaW5saW5lIHA0ZF90IHB0ZV9wNGQocHRl
X3QgcHRlKQogewotCXJldHVybiBfX3BnZF9yYXcocHRlX3JhdyhwdGUpKTsKKwlyZXR1cm4gX19w
NGRfcmF3KHB0ZV9yYXcocHRlKSk7CiB9CiAKLXN0YXRpYyBpbmxpbmUgaW50IHBnZF9iYWQocGdk
X3QgcGdkKQorc3RhdGljIGlubGluZSBpbnQgcDRkX2JhZChwNGRfdCBwNGQpCiB7CiAJaWYgKHJh
ZGl4X2VuYWJsZWQoKSkKLQkJcmV0dXJuIHJhZGl4X19wZ2RfYmFkKHBnZCk7Ci0JcmV0dXJuIGhh
c2hfX3BnZF9iYWQocGdkKTsKKwkJcmV0dXJuIHJhZGl4X19wNGRfYmFkKHA0ZCk7CisJcmV0dXJu
IGhhc2hfX3A0ZF9iYWQocDRkKTsKIH0KIAotI2RlZmluZSBwZ2RfYWNjZXNzX3Blcm1pdHRlZCBw
Z2RfYWNjZXNzX3Blcm1pdHRlZAotc3RhdGljIGlubGluZSBib29sIHBnZF9hY2Nlc3NfcGVybWl0
dGVkKHBnZF90IHBnZCwgYm9vbCB3cml0ZSkKKyNkZWZpbmUgcDRkX2FjY2Vzc19wZXJtaXR0ZWQg
cDRkX2FjY2Vzc19wZXJtaXR0ZWQKK3N0YXRpYyBpbmxpbmUgYm9vbCBwNGRfYWNjZXNzX3Blcm1p
dHRlZChwNGRfdCBwNGQsIGJvb2wgd3JpdGUpCiB7Ci0JcmV0dXJuIHB0ZV9hY2Nlc3NfcGVybWl0
dGVkKHBnZF9wdGUocGdkKSwgd3JpdGUpOworCXJldHVybiBwdGVfYWNjZXNzX3Blcm1pdHRlZChw
NGRfcHRlKHA0ZCksIHdyaXRlKTsKIH0KIAotZXh0ZXJuIHN0cnVjdCBwYWdlICpwZ2RfcGFnZShw
Z2RfdCBwZ2QpOworZXh0ZXJuIHN0cnVjdCBwYWdlICpwNGRfcGFnZShwNGRfdCBwNGQpOwogCiAv
KiBQb2ludGVycyBpbiB0aGUgcGFnZSB0YWJsZSB0cmVlIGFyZSBwaHlzaWNhbCBhZGRyZXNzZXMg
Ki8KICNkZWZpbmUgX19wZ3RhYmxlX3B0cl92YWwocHRyKQlfX3BhKHB0cikKIAogI2RlZmluZSBw
bWRfcGFnZV92YWRkcihwbWQpCV9fdmEocG1kX3ZhbChwbWQpICYgflBNRF9NQVNLRURfQklUUykK
ICNkZWZpbmUgcHVkX3BhZ2VfdmFkZHIocHVkKQlfX3ZhKHB1ZF92YWwocHVkKSAmIH5QVURfTUFT
S0VEX0JJVFMpCi0jZGVmaW5lIHBnZF9wYWdlX3ZhZGRyKHBnZCkJX192YShwZ2RfdmFsKHBnZCkg
JiB+UEdEX01BU0tFRF9CSVRTKQorI2RlZmluZSBwNGRfcGFnZV92YWRkcihwNGQpCV9fdmEocDRk
X3ZhbChwNGQpICYgflA0RF9NQVNLRURfQklUUykKIAogI2RlZmluZSBwZ2RfaW5kZXgoYWRkcmVz
cykgKCgoYWRkcmVzcykgPj4gKFBHRElSX1NISUZUKSkgJiAoUFRSU19QRVJfUEdEIC0gMSkpCiAj
ZGVmaW5lIHB1ZF9pbmRleChhZGRyZXNzKSAoKChhZGRyZXNzKSA+PiAoUFVEX1NISUZUKSkgJiAo
UFRSU19QRVJfUFVEIC0gMSkpCkBAIC0xMDEwLDggKzEwMTYsOCBAQCBleHRlcm4gc3RydWN0IHBh
Z2UgKnBnZF9wYWdlKHBnZF90IHBnZCk7CiAKICNkZWZpbmUgcGdkX29mZnNldChtbSwgYWRkcmVz
cykJICgobW0pLT5wZ2QgKyBwZ2RfaW5kZXgoYWRkcmVzcykpCiAKLSNkZWZpbmUgcHVkX29mZnNl
dChwZ2RwLCBhZGRyKQlcCi0JKCgocHVkX3QgKikgcGdkX3BhZ2VfdmFkZHIoKihwZ2RwKSkpICsg
cHVkX2luZGV4KGFkZHIpKQorI2RlZmluZSBwdWRfb2Zmc2V0KHA0ZHAsIGFkZHIpCVwKKwkoKChw
dWRfdCAqKSBwNGRfcGFnZV92YWRkcigqKHA0ZHApKSkgKyBwdWRfaW5kZXgoYWRkcikpCiAjZGVm
aW5lIHBtZF9vZmZzZXQocHVkcCxhZGRyKSBcCiAJKCgocG1kX3QgKikgcHVkX3BhZ2VfdmFkZHIo
KihwdWRwKSkpICsgcG1kX2luZGV4KGFkZHIpKQogI2RlZmluZSBwdGVfb2Zmc2V0X2tlcm5lbChk
aXIsYWRkcikgXApAQCAtMTM2OCwxMSArMTM3NCwxMSBAQCBzdGF0aWMgaW5saW5lIGJvb2wgcHVk
X2lzX2xlYWYocHVkX3QgcHVkKQogCXJldHVybiAhIShwdWRfcmF3KHB1ZCkgJiBjcHVfdG9fYmU2
NChfUEFHRV9QVEUpKTsKIH0KIAotI2RlZmluZSBwZ2RfaXNfbGVhZiBwZ2RfaXNfbGVhZgotI2Rl
ZmluZSBwZ2RfbGVhZiBwZ2RfaXNfbGVhZgotc3RhdGljIGlubGluZSBib29sIHBnZF9pc19sZWFm
KHBnZF90IHBnZCkKKyNkZWZpbmUgcDRkX2lzX2xlYWYgcDRkX2lzX2xlYWYKKyNkZWZpbmUgcDRk
X2xlYWYgcDRkX2lzX2xlYWYKK3N0YXRpYyBpbmxpbmUgYm9vbCBwNGRfaXNfbGVhZihwNGRfdCBw
NGQpCiB7Ci0JcmV0dXJuICEhKHBnZF9yYXcocGdkKSAmIGNwdV90b19iZTY0KF9QQUdFX1BURSkp
OworCXJldHVybiAhIShwNGRfcmF3KHA0ZCkgJiBjcHVfdG9fYmU2NChfUEFHRV9QVEUpKTsKIH0K
IAogI2VuZGlmIC8qIF9fQVNTRU1CTFlfXyAqLwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2lu
Y2x1ZGUvYXNtL2Jvb2szcy82NC9yYWRpeC5oIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jv
b2szcy82NC9yYWRpeC5oCmluZGV4IGQ5N2RiM2FkOWFhZS4uOWJjYTJhYzY0MjIwIDEwMDY0NAot
LS0gYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0L3JhZGl4LmgKKysrIGIvYXJj
aC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9yYWRpeC5oCkBAIC0zMCw3ICszMCw3IEBA
CiAvKiBEb24ndCBoYXZlIGFueXRoaW5nIGluIHRoZSByZXNlcnZlZCBiaXRzIGFuZCBsZWFmIGJp
dHMgKi8KICNkZWZpbmUgUkFESVhfUE1EX0JBRF9CSVRTCQkweDYwMDAwMDAwMDAwMDAwZTBVTAog
I2RlZmluZSBSQURJWF9QVURfQkFEX0JJVFMJCTB4NjAwMDAwMDAwMDAwMDBlMFVMCi0jZGVmaW5l
IFJBRElYX1BHRF9CQURfQklUUwkJMHg2MDAwMDAwMDAwMDAwMGUwVUwKKyNkZWZpbmUgUkFESVhf
UDREX0JBRF9CSVRTCQkweDYwMDAwMDAwMDAwMDAwZTBVTAogCiAjZGVmaW5lIFJBRElYX1BNRF9T
SElGVAkJKFBBR0VfU0hJRlQgKyBSQURJWF9QVEVfSU5ERVhfU0laRSkKICNkZWZpbmUgUkFESVhf
UFVEX1NISUZUCQkoUkFESVhfUE1EX1NISUZUICsgUkFESVhfUE1EX0lOREVYX1NJWkUpCkBAIC0y
MjcsOSArMjI3LDkgQEAgc3RhdGljIGlubGluZSBpbnQgcmFkaXhfX3B1ZF9iYWQocHVkX3QgcHVk
KQogfQogCiAKLXN0YXRpYyBpbmxpbmUgaW50IHJhZGl4X19wZ2RfYmFkKHBnZF90IHBnZCkKK3N0
YXRpYyBpbmxpbmUgaW50IHJhZGl4X19wNGRfYmFkKHA0ZF90IHA0ZCkKIHsKLQlyZXR1cm4gISEo
cGdkX3ZhbChwZ2QpICYgUkFESVhfUEdEX0JBRF9CSVRTKTsKKwlyZXR1cm4gISEocDRkX3ZhbChw
NGQpICYgUkFESVhfUDREX0JBRF9CSVRTKTsKIH0KIAogI2lmZGVmIENPTkZJR19UUkFOU1BBUkVO
VF9IVUdFUEFHRQpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC8z
Mi9wZ3RhYmxlLmggYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vbm9oYXNoLzMyL3BndGFibGUu
aAppbmRleCA2MGM0ZDgyOTE1MmUuLmQ0YzJjNDI1OWZhMyAxMDA2NDQKLS0tIGEvYXJjaC9wb3dl
cnBjL2luY2x1ZGUvYXNtL25vaGFzaC8zMi9wZ3RhYmxlLmgKKysrIGIvYXJjaC9wb3dlcnBjL2lu
Y2x1ZGUvYXNtL25vaGFzaC8zMi9wZ3RhYmxlLmgKQEAgLTIsNyArMiw2IEBACiAjaWZuZGVmIF9B
U01fUE9XRVJQQ19OT0hBU0hfMzJfUEdUQUJMRV9ICiAjZGVmaW5lIF9BU01fUE9XRVJQQ19OT0hB
U0hfMzJfUEdUQUJMRV9ICiAKLSNkZWZpbmUgX19BUkNIX1VTRV81TEVWRUxfSEFDSwogI2luY2x1
ZGUgPGFzbS1nZW5lcmljL3BndGFibGUtbm9wbWQuaD4KIAogI2lmbmRlZiBfX0FTU0VNQkxZX18K
ZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvNjQvcGdhbGxvYy5o
IGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC82NC9wZ2FsbG9jLmgKaW5kZXggYjk1
MzRhNzkzMjkzLi42NjhhZWU2MDE3ZTcgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRl
L2FzbS9ub2hhc2gvNjQvcGdhbGxvYy5oCisrKyBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9u
b2hhc2gvNjQvcGdhbGxvYy5oCkBAIC0xNSw3ICsxNSw3IEBAIHN0cnVjdCB2bWVtbWFwX2JhY2tp
bmcgewogfTsKIGV4dGVybiBzdHJ1Y3Qgdm1lbW1hcF9iYWNraW5nICp2bWVtbWFwX2xpc3Q7CiAK
LSNkZWZpbmUgcGdkX3BvcHVsYXRlKE1NLCBQR0QsIFBVRCkJcGdkX3NldChQR0QsICh1bnNpZ25l
ZCBsb25nKVBVRCkKKyNkZWZpbmUgcDRkX3BvcHVsYXRlKE1NLCBQNEQsIFBVRCkJcDRkX3NldChQ
NEQsICh1bnNpZ25lZCBsb25nKVBVRCkKIAogc3RhdGljIGlubGluZSBwdWRfdCAqcHVkX2FsbG9j
X29uZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyKQogewpkaWZmIC0t
Z2l0IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC82NC9wZ3RhYmxlLTRrLmggYi9h
cmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vbm9oYXNoLzY0L3BndGFibGUtNGsuaAppbmRleCBjNDBl
YzMyYjgxOTQuLjgxYjFjNTRlM2NmMSAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUv
YXNtL25vaGFzaC82NC9wZ3RhYmxlLTRrLmgKKysrIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNt
L25vaGFzaC82NC9wZ3RhYmxlLTRrLmgKQEAgLTIsNyArMiw3IEBACiAjaWZuZGVmIF9BU01fUE9X
RVJQQ19OT0hBU0hfNjRfUEdUQUJMRV80S19ICiAjZGVmaW5lIF9BU01fUE9XRVJQQ19OT0hBU0hf
NjRfUEdUQUJMRV80S19ICiAKLSNpbmNsdWRlIDxhc20tZ2VuZXJpYy81bGV2ZWwtZml4dXAuaD4K
KyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9wZ3RhYmxlLW5vcDRkLmg+CiAKIC8qCiAgKiBFbnRyaWVz
IHBlciBwYWdlIGRpcmVjdG9yeSBsZXZlbC4gIFRoZSBQVEUgbGV2ZWwgbXVzdCB1c2UgYSA2NGIg
cmVjb3JkCkBAIC00NSw0MSArNDUsNDEgQEAKICNkZWZpbmUgUE1EX01BU0tFRF9CSVRTCQkwCiAv
KiBCaXRzIHRvIG1hc2sgb3V0IGZyb20gYSBQVUQgdG8gZ2V0IHRvIHRoZSBQTUQgcGFnZSAqLwog
I2RlZmluZSBQVURfTUFTS0VEX0JJVFMJCTAKLS8qIEJpdHMgdG8gbWFzayBvdXQgZnJvbSBhIFBH
RCB0byBnZXQgdG8gdGhlIFBVRCBwYWdlICovCi0jZGVmaW5lIFBHRF9NQVNLRURfQklUUwkJMAor
LyogQml0cyB0byBtYXNrIG91dCBmcm9tIGEgUDREIHRvIGdldCB0byB0aGUgUFVEIHBhZ2UgKi8K
KyNkZWZpbmUgUDREX01BU0tFRF9CSVRTCQkwCiAKIAogLyoKICAqIDQtbGV2ZWwgcGFnZSB0YWJs
ZXMgcmVsYXRlZCBiaXRzCiAgKi8KIAotI2RlZmluZSBwZ2Rfbm9uZShwZ2QpCQkoIXBnZF92YWwo
cGdkKSkKLSNkZWZpbmUgcGdkX2JhZChwZ2QpCQkocGdkX3ZhbChwZ2QpID09IDApCi0jZGVmaW5l
IHBnZF9wcmVzZW50KHBnZCkJKHBnZF92YWwocGdkKSAhPSAwKQotI2RlZmluZSBwZ2RfcGFnZV92
YWRkcihwZ2QpCShwZ2RfdmFsKHBnZCkgJiB+UEdEX01BU0tFRF9CSVRTKQorI2RlZmluZSBwNGRf
bm9uZShwNGQpCQkoIXA0ZF92YWwocDRkKSkKKyNkZWZpbmUgcDRkX2JhZChwNGQpCQkocDRkX3Zh
bChwNGQpID09IDApCisjZGVmaW5lIHA0ZF9wcmVzZW50KHA0ZCkJKHA0ZF92YWwocDRkKSAhPSAw
KQorI2RlZmluZSBwNGRfcGFnZV92YWRkcihwNGQpCShwNGRfdmFsKHA0ZCkgJiB+UDREX01BU0tF
RF9CSVRTKQogCiAjaWZuZGVmIF9fQVNTRU1CTFlfXwogCi1zdGF0aWMgaW5saW5lIHZvaWQgcGdk
X2NsZWFyKHBnZF90ICpwZ2RwKQorc3RhdGljIGlubGluZSB2b2lkIHA0ZF9jbGVhcihwNGRfdCAq
cDRkcCkKIHsKLQkqcGdkcCA9IF9fcGdkKDApOworCSpwNGRwID0gX19wNGQoMCk7CiB9CiAKLXN0
YXRpYyBpbmxpbmUgcHRlX3QgcGdkX3B0ZShwZ2RfdCBwZ2QpCitzdGF0aWMgaW5saW5lIHB0ZV90
IHA0ZF9wdGUocDRkX3QgcDRkKQogewotCXJldHVybiBfX3B0ZShwZ2RfdmFsKHBnZCkpOworCXJl
dHVybiBfX3B0ZShwNGRfdmFsKHA0ZCkpOwogfQogCi1zdGF0aWMgaW5saW5lIHBnZF90IHB0ZV9w
Z2QocHRlX3QgcHRlKQorc3RhdGljIGlubGluZSBwNGRfdCBwdGVfcDRkKHB0ZV90IHB0ZSkKIHsK
LQlyZXR1cm4gX19wZ2QocHRlX3ZhbChwdGUpKTsKKwlyZXR1cm4gX19wNGQocHRlX3ZhbChwdGUp
KTsKIH0KLWV4dGVybiBzdHJ1Y3QgcGFnZSAqcGdkX3BhZ2UocGdkX3QgcGdkKTsKK2V4dGVybiBz
dHJ1Y3QgcGFnZSAqcDRkX3BhZ2UocDRkX3QgcDRkKTsKIAogI2VuZGlmIC8qICFfX0FTU0VNQkxZ
X18gKi8KIAotI2RlZmluZSBwdWRfb2Zmc2V0KHBnZHAsIGFkZHIpCVwKLSAgKCgocHVkX3QgKikg
cGdkX3BhZ2VfdmFkZHIoKihwZ2RwKSkpICsgXAorI2RlZmluZSBwdWRfb2Zmc2V0KHA0ZHAsIGFk
ZHIpCVwKKyAgKCgocHVkX3QgKikgcDRkX3BhZ2VfdmFkZHIoKihwNGRwKSkpICsgXAogICAgICgo
KGFkZHIpID4+IFBVRF9TSElGVCkgJiAoUFRSU19QRVJfUFVEIC0gMSkpKQogCiAjZGVmaW5lIHB1
ZF9FUlJPUihlKSBcCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vbm9oYXNo
LzY0L3BndGFibGUuaCBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvNjQvcGd0YWJs
ZS5oCmluZGV4IDlhMzNiOGJkODQyZC4uYjM2MGYyNjJiOWM2IDEwMDY0NAotLS0gYS9hcmNoL3Bv
d2VycGMvaW5jbHVkZS9hc20vbm9oYXNoLzY0L3BndGFibGUuaAorKysgYi9hcmNoL3Bvd2VycGMv
aW5jbHVkZS9hc20vbm9oYXNoLzY0L3BndGFibGUuaApAQCAtMTc1LDExICsxNzUsMTEgQEAgc3Rh
dGljIGlubGluZSBwdWRfdCBwdGVfcHVkKHB0ZV90IHB0ZSkKIAlyZXR1cm4gX19wdWQocHRlX3Zh
bChwdGUpKTsKIH0KICNkZWZpbmUgcHVkX3dyaXRlKHB1ZCkJCXB0ZV93cml0ZShwdWRfcHRlKHB1
ZCkpCi0jZGVmaW5lIHBnZF93cml0ZShwZ2QpCQlwdGVfd3JpdGUocGdkX3B0ZShwZ2QpKQorI2Rl
ZmluZSBwNGRfd3JpdGUocGdkKQkJcHRlX3dyaXRlKHA0ZF9wdGUocDRkKSkKIAotc3RhdGljIGlu
bGluZSB2b2lkIHBnZF9zZXQocGdkX3QgKnBnZHAsIHVuc2lnbmVkIGxvbmcgdmFsKQorc3RhdGlj
IGlubGluZSB2b2lkIHA0ZF9zZXQocDRkX3QgKnA0ZHAsIHVuc2lnbmVkIGxvbmcgdmFsKQogewot
CSpwZ2RwID0gX19wZ2QodmFsKTsKKwkqcDRkcCA9IF9fcDRkKHZhbCk7CiB9CiAKIC8qCmRpZmYg
LS1naXQgYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vcGd0YWJsZS5oIGIvYXJjaC9wb3dlcnBj
L2luY2x1ZGUvYXNtL3BndGFibGUuaAppbmRleCA4Y2M1NDNlZDExNGMuLjA1MjA1ZDdhN2I0YSAx
MDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNo
L3Bvd2VycGMvaW5jbHVkZS9hc20vcGd0YWJsZS5oCkBAIC0xMzksOSArMTM5LDkgQEAgc3RhdGlj
IGlubGluZSBib29sIHB1ZF9pc19sZWFmKHB1ZF90IHB1ZCkKIH0KICNlbmRpZgogCi0jaWZuZGVm
IHBnZF9pc19sZWFmCi0jZGVmaW5lIHBnZF9pc19sZWFmIHBnZF9pc19sZWFmCi1zdGF0aWMgaW5s
aW5lIGJvb2wgcGdkX2lzX2xlYWYocGdkX3QgcGdkKQorI2lmbmRlZiBwNGRfaXNfbGVhZgorI2Rl
ZmluZSBwNGRfaXNfbGVhZiBwNGRfaXNfbGVhZgorc3RhdGljIGlubGluZSBib29sIHA0ZF9pc19s
ZWFmKHA0ZF90IHA0ZCkKIHsKIAlyZXR1cm4gZmFsc2U7CiB9CmRpZmYgLS1naXQgYS9hcmNoL3Bv
d2VycGMva3ZtL2Jvb2szc182NF9tbXVfcmFkaXguYyBiL2FyY2gvcG93ZXJwYy9rdm0vYm9vazNz
XzY0X21tdV9yYWRpeC5jCmluZGV4IDgwMzk0MGQ3OWI3My4uYmViNjk0Mjg1MTAwIDEwMDY0NAot
LS0gYS9hcmNoL3Bvd2VycGMva3ZtL2Jvb2szc182NF9tbXVfcmFkaXguYworKysgYi9hcmNoL3Bv
d2VycGMva3ZtL2Jvb2szc182NF9tbXVfcmFkaXguYwpAQCAtNDk5LDEzICs0OTksMTQgQEAgdm9p
ZCBrdm1wcGNfZnJlZV9wZ3RhYmxlX3JhZGl4KHN0cnVjdCBrdm0gKmt2bSwgcGdkX3QgKnBnZCwg
dW5zaWduZWQgaW50IGxwaWQpCiAJdW5zaWduZWQgbG9uZyBpZzsKIAogCWZvciAoaWcgPSAwOyBp
ZyA8IFBUUlNfUEVSX1BHRDsgKytpZywgKytwZ2QpIHsKKwkJcDRkX3QgKnA0ZCA9IHA0ZF9vZmZz
ZXQocGdkLCAwKTsKIAkJcHVkX3QgKnB1ZDsKIAotCQlpZiAoIXBnZF9wcmVzZW50KCpwZ2QpKQor
CQlpZiAoIXA0ZF9wcmVzZW50KCpwNGQpKQogCQkJY29udGludWU7Ci0JCXB1ZCA9IHB1ZF9vZmZz
ZXQocGdkLCAwKTsKKwkJcHVkID0gcHVkX29mZnNldChwNGQsIDApOwogCQlrdm1wcGNfdW5tYXBf
ZnJlZV9wdWQoa3ZtLCBwdWQsIGxwaWQpOwotCQlwZ2RfY2xlYXIocGdkKTsKKwkJcDRkX2NsZWFy
KHA0ZCk7CiAJfQogfQogCkBAIC01NjYsNiArNTY3LDcgQEAgaW50IGt2bXBwY19jcmVhdGVfcHRl
KHN0cnVjdCBrdm0gKmt2bSwgcGdkX3QgKnBndGFibGUsIHB0ZV90IHB0ZSwKIAkJICAgICAgdW5z
aWduZWQgbG9uZyAqcm1hcHAsIHN0cnVjdCBybWFwX25lc3RlZCAqKm5fcm1hcCkKIHsKIAlwZ2Rf
dCAqcGdkOworCXA0ZF90ICpwNGQ7CiAJcHVkX3QgKnB1ZCwgKm5ld19wdWQgPSBOVUxMOwogCXBt
ZF90ICpwbWQsICpuZXdfcG1kID0gTlVMTDsKIAlwdGVfdCAqcHRlcCwgKm5ld19wdGVwID0gTlVM
TDsKQEAgLTU3Myw5ICs1NzUsMTEgQEAgaW50IGt2bXBwY19jcmVhdGVfcHRlKHN0cnVjdCBrdm0g
Kmt2bSwgcGdkX3QgKnBndGFibGUsIHB0ZV90IHB0ZSwKIAogCS8qIFRyYXZlcnNlIHRoZSBndWVz
dCdzIDJuZC1sZXZlbCB0cmVlLCBhbGxvY2F0ZSBuZXcgbGV2ZWxzIG5lZWRlZCAqLwogCXBnZCA9
IHBndGFibGUgKyBwZ2RfaW5kZXgoZ3BhKTsKKwlwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgZ3BhKTsK
KwogCXB1ZCA9IE5VTEw7Ci0JaWYgKHBnZF9wcmVzZW50KCpwZ2QpKQotCQlwdWQgPSBwdWRfb2Zm
c2V0KHBnZCwgZ3BhKTsKKwlpZiAocDRkX3ByZXNlbnQoKnA0ZCkpCisJCXB1ZCA9IHB1ZF9vZmZz
ZXQocDRkLCBncGEpOwogCWVsc2UKIAkJbmV3X3B1ZCA9IHB1ZF9hbGxvY19vbmUoa3ZtLT5tbSwg
Z3BhKTsKIApAQCAtNTk2LDEzICs2MDAsMTMgQEAgaW50IGt2bXBwY19jcmVhdGVfcHRlKHN0cnVj
dCBrdm0gKmt2bSwgcGdkX3QgKnBndGFibGUsIHB0ZV90IHB0ZSwKIAogCS8qIE5vdyB0cmF2ZXJz
ZSBhZ2FpbiB1bmRlciB0aGUgbG9jayBhbmQgY2hhbmdlIHRoZSB0cmVlICovCiAJcmV0ID0gLUVO
T01FTTsKLQlpZiAocGdkX25vbmUoKnBnZCkpIHsKKwlpZiAocDRkX25vbmUoKnA0ZCkpIHsKIAkJ
aWYgKCFuZXdfcHVkKQogCQkJZ290byBvdXRfdW5sb2NrOwotCQlwZ2RfcG9wdWxhdGUoa3ZtLT5t
bSwgcGdkLCBuZXdfcHVkKTsKKwkJcDRkX3BvcHVsYXRlKGt2bS0+bW0sIHA0ZCwgbmV3X3B1ZCk7
CiAJCW5ld19wdWQgPSBOVUxMOwogCX0KLQlwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgZ3BhKTsKKwlw
dWQgPSBwdWRfb2Zmc2V0KHA0ZCwgZ3BhKTsKIAlpZiAocHVkX2lzX2xlYWYoKnB1ZCkpIHsKIAkJ
dW5zaWduZWQgbG9uZyBoZ3BhID0gZ3BhICYgUFVEX01BU0s7CiAKQEAgLTEyMjAsNiArMTIyNCw3
IEBAIHN0YXRpYyBzc2l6ZV90IGRlYnVnZnNfcmFkaXhfcmVhZChzdHJ1Y3QgZmlsZSAqZmlsZSwg
Y2hhciBfX3VzZXIgKmJ1ZiwKIAlwZ2RfdCAqcGd0OwogCXN0cnVjdCBrdm1fbmVzdGVkX2d1ZXN0
ICpuZXN0ZWQ7CiAJcGdkX3QgcGdkLCAqcGdkcDsKKwlwNGRfdCBwNGQsICpwNGRwOwogCXB1ZF90
IHB1ZCwgKnB1ZHA7CiAJcG1kX3QgcG1kLCAqcG1kcDsKIAlwdGVfdCAqcHRlcDsKQEAgLTEyOTIs
MTMgKzEyOTcsMTQgQEAgc3RhdGljIHNzaXplX3QgZGVidWdmc19yYWRpeF9yZWFkKHN0cnVjdCBm
aWxlICpmaWxlLCBjaGFyIF9fdXNlciAqYnVmLAogCQl9CiAKIAkJcGdkcCA9IHBndCArIHBnZF9p
bmRleChncGEpOwotCQlwZ2QgPSBSRUFEX09OQ0UoKnBnZHApOwotCQlpZiAoIShwZ2RfdmFsKHBn
ZCkgJiBfUEFHRV9QUkVTRU5UKSkgewotCQkJZ3BhID0gKGdwYSAmIFBHRElSX01BU0spICsgUEdE
SVJfU0laRTsKKwkJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgZ3BhKTsKKwkJcDRkID0gUkVBRF9P
TkNFKCpwNGRwKTsKKwkJaWYgKCEocDRkX3ZhbChwNGQpICYgX1BBR0VfUFJFU0VOVCkpIHsKKwkJ
CWdwYSA9IChncGEgJiBQNERfTUFTSykgKyBQNERfU0laRTsKIAkJCWNvbnRpbnVlOwogCQl9CiAK
LQkJcHVkcCA9IHB1ZF9vZmZzZXQoJnBnZCwgZ3BhKTsKKwkJcHVkcCA9IHB1ZF9vZmZzZXQoJnA0
ZCwgZ3BhKTsKIAkJcHVkID0gUkVBRF9PTkNFKCpwdWRwKTsKIAkJaWYgKCEocHVkX3ZhbChwdWQp
ICYgX1BBR0VfUFJFU0VOVCkpIHsKIAkJCWdwYSA9IChncGEgJiBQVURfTUFTSykgKyBQVURfU0la
RTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9saWIvY29kZS1wYXRjaGluZy5jIGIvYXJjaC9w
b3dlcnBjL2xpYi9jb2RlLXBhdGNoaW5nLmMKaW5kZXggMzM0NWYwMzlhODc2Li43YTU5ZjY4NjNj
ZWMgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9saWIvY29kZS1wYXRjaGluZy5jCisrKyBiL2Fy
Y2gvcG93ZXJwYy9saWIvY29kZS1wYXRjaGluZy5jCkBAIC0xMDcsMTMgKzEwNywxOCBAQCBzdGF0
aWMgaW5saW5lIGludCB1bm1hcF9wYXRjaF9hcmVhKHVuc2lnbmVkIGxvbmcgYWRkcikKIAlwdGVf
dCAqcHRlcDsKIAlwbWRfdCAqcG1kcDsKIAlwdWRfdCAqcHVkcDsKKwlwNGRfdCAqcDRkcDsKIAlw
Z2RfdCAqcGdkcDsKIAogCXBnZHAgPSBwZ2Rfb2Zmc2V0X2soYWRkcik7CiAJaWYgKHVubGlrZWx5
KCFwZ2RwKSkKIAkJcmV0dXJuIC1FSU5WQUw7CiAKLQlwdWRwID0gcHVkX29mZnNldChwZ2RwLCBh
ZGRyKTsKKwlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlpZiAodW5saWtlbHkoIXA0
ZHApKQorCQlyZXR1cm4gLUVJTlZBTDsKKworCXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIGFkZHIp
OwogCWlmICh1bmxpa2VseSghcHVkcCkpCiAJCXJldHVybiAtRUlOVkFMOwogCmRpZmYgLS1naXQg
YS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzMzIvbW11LmMgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNz
MzIvbW11LmMKaW5kZXggZjg4OGNiYjEwOWI5Li5lZGVmMTdjOTcyMDYgMTAwNjQ0Ci0tLSBhL2Fy
Y2gvcG93ZXJwYy9tbS9ib29rM3MzMi9tbXUuYworKysgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNz
MzIvbW11LmMKQEAgLTMxMiw3ICszMTIsNyBAQCB2b2lkIGhhc2hfcHJlbG9hZChzdHJ1Y3QgbW1f
c3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBlYSkKIAogCWlmICghSGFzaCkKIAkJcmV0dXJuOwot
CXBtZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwZ2Rfb2Zmc2V0KG1tLCBlYSksIGVhKSwgZWEp
OworCXBtZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwNGRfb2Zmc2V0KHBnZF9vZmZzZXQobW0s
IGVhKSwgZWEpLCBlYSksIGVhKTsKIAlpZiAoIXBtZF9ub25lKCpwbWQpKQogCQlhZGRfaGFzaF9w
YWdlKG1tLT5jb250ZXh0LmlkLCBlYSwgcG1kX3ZhbCgqcG1kKSk7CiB9CmRpZmYgLS1naXQgYS9h
cmNoL3Bvd2VycGMvbW0vYm9vazNzMzIvdGxiLmMgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzMzIv
dGxiLmMKaW5kZXggMmZjZDMyMTA0MGZmLi4xNzViYzMzYjQxYjcgMTAwNjQ0Ci0tLSBhL2FyY2gv
cG93ZXJwYy9tbS9ib29rM3MzMi90bGIuYworKysgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzMzIv
dGxiLmMKQEAgLTg3LDcgKzg3LDcgQEAgc3RhdGljIHZvaWQgZmx1c2hfcmFuZ2Uoc3RydWN0IG1t
X3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgc3RhcnQsCiAJaWYgKHN0YXJ0ID49IGVuZCkKIAkJ
cmV0dXJuOwogCWVuZCA9IChlbmQgLSAxKSB8IH5QQUdFX01BU0s7Ci0JcG1kID0gcG1kX29mZnNl
dChwdWRfb2Zmc2V0KHBnZF9vZmZzZXQobW0sIHN0YXJ0KSwgc3RhcnQpLCBzdGFydCk7CisJcG1k
ID0gcG1kX29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldChtbSwgc3RhcnQp
LCBzdGFydCksIHN0YXJ0KSwgc3RhcnQpOwogCWZvciAoOzspIHsKIAkJcG1kX2VuZCA9ICgoc3Rh
cnQgKyBQR0RJUl9TSVpFKSAmIFBHRElSX01BU0spIC0gMTsKIAkJaWYgKHBtZF9lbmQgPiBlbmQp
CkBAIC0xNDUsNyArMTQ1LDcgQEAgdm9pZCBmbHVzaF90bGJfcGFnZShzdHJ1Y3Qgdm1fYXJlYV9z
dHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyB2bWFkZHIpCiAJCXJldHVybjsKIAl9CiAJbW0gPSAo
dm1hZGRyIDwgVEFTS19TSVpFKT8gdm1hLT52bV9tbTogJmluaXRfbW07Ci0JcG1kID0gcG1kX29m
ZnNldChwdWRfb2Zmc2V0KHBnZF9vZmZzZXQobW0sIHZtYWRkciksIHZtYWRkciksIHZtYWRkcik7
CisJcG1kID0gcG1kX29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldChtbSwg
dm1hZGRyKSwgdm1hZGRyKSwgdm1hZGRyKSwgdm1hZGRyKTsKIAlpZiAoIXBtZF9ub25lKCpwbWQp
KQogCQlmbHVzaF9oYXNoX3BhZ2VzKG1tLT5jb250ZXh0LmlkLCB2bWFkZHIsIHBtZF92YWwoKnBt
ZCksIDEpOwogfQpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL2Jvb2szczY0L2hhc2hfcGd0
YWJsZS5jIGIvYXJjaC9wb3dlcnBjL21tL2Jvb2szczY0L2hhc2hfcGd0YWJsZS5jCmluZGV4IDY0
NzMzYjljYjIwYS4uOWNkMTU5MzdlODhhIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vYm9v
azNzNjQvaGFzaF9wZ3RhYmxlLmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL2Jvb2szczY0L2hhc2hf
cGd0YWJsZS5jCkBAIC0xNDgsNiArMTQ4LDcgQEAgdm9pZCBoYXNoX192bWVtbWFwX3JlbW92ZV9t
YXBwaW5nKHVuc2lnbmVkIGxvbmcgc3RhcnQsCiBpbnQgaGFzaF9fbWFwX2tlcm5lbF9wYWdlKHVu
c2lnbmVkIGxvbmcgZWEsIHVuc2lnbmVkIGxvbmcgcGEsIHBncHJvdF90IHByb3QpCiB7CiAJcGdk
X3QgKnBnZHA7CisJcDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7CiAJ
cHRlX3QgKnB0ZXA7CkBAIC0xNTUsNyArMTU2LDggQEAgaW50IGhhc2hfX21hcF9rZXJuZWxfcGFn
ZSh1bnNpZ25lZCBsb25nIGVhLCB1bnNpZ25lZCBsb25nIHBhLCBwZ3Byb3RfdCBwcm90KQogCUJV
SUxEX0JVR19PTihUQVNLX1NJWkVfVVNFUjY0ID4gSF9QR1RBQkxFX1JBTkdFKTsKIAlpZiAoc2xh
Yl9pc19hdmFpbGFibGUoKSkgewogCQlwZ2RwID0gcGdkX29mZnNldF9rKGVhKTsKLQkJcHVkcCA9
IHB1ZF9hbGxvYygmaW5pdF9tbSwgcGdkcCwgZWEpOworCQlwNGRwID0gcDRkX29mZnNldChwZ2Rw
LCBlYSk7CisJCXB1ZHAgPSBwdWRfYWxsb2MoJmluaXRfbW0sIHA0ZHAsIGVhKTsKIAkJaWYgKCFw
dWRwKQogCQkJcmV0dXJuIC1FTk9NRU07CiAJCXBtZHAgPSBwbWRfYWxsb2MoJmluaXRfbW0sIHB1
ZHAsIGVhKTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9yYWRpeF9wZ3Rh
YmxlLmMgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhfcGd0YWJsZS5jCmluZGV4IGRk
MWJlYTQ1MzI1Yy4uZmMzZDBiMDQ2MGIwIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vYm9v
azNzNjQvcmFkaXhfcGd0YWJsZS5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9yYWRp
eF9wZ3RhYmxlLmMKQEAgLTY0LDE3ICs2NCwxOSBAQCBzdGF0aWMgaW50IGVhcmx5X21hcF9rZXJu
ZWxfcGFnZSh1bnNpZ25lZCBsb25nIGVhLCB1bnNpZ25lZCBsb25nIHBhLAogewogCXVuc2lnbmVk
IGxvbmcgcGZuID0gcGEgPj4gUEFHRV9TSElGVDsKIAlwZ2RfdCAqcGdkcDsKKwlwNGRfdCAqcDRk
cDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAlwdGVfdCAqcHRlcDsKIAogCXBnZHAg
PSBwZ2Rfb2Zmc2V0X2soZWEpOwotCWlmIChwZ2Rfbm9uZSgqcGdkcCkpIHsKKwlwNGRwID0gcDRk
X29mZnNldChwZ2RwLCBlYSk7CisJaWYgKHA0ZF9ub25lKCpwNGRwKSkgewogCQlwdWRwID0gZWFy
bHlfYWxsb2NfcGd0YWJsZShQVURfVEFCTEVfU0laRSwgbmlkLAogCQkJCQkJcmVnaW9uX3N0YXJ0
LCByZWdpb25fZW5kKTsKLQkJcGdkX3BvcHVsYXRlKCZpbml0X21tLCBwZ2RwLCBwdWRwKTsKKwkJ
cDRkX3BvcHVsYXRlKCZpbml0X21tLCBwNGRwLCBwdWRwKTsKIAl9Ci0JcHVkcCA9IHB1ZF9vZmZz
ZXQocGdkcCwgZWEpOworCXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIGVhKTsKIAlpZiAobWFwX3Bh
Z2Vfc2l6ZSA9PSBQVURfU0laRSkgewogCQlwdGVwID0gKHB0ZV90ICopcHVkcDsKIAkJZ290byBz
ZXRfdGhlX3B0ZTsKQEAgLTExNCw2ICsxMTYsNyBAQCBzdGF0aWMgaW50IF9fbWFwX2tlcm5lbF9w
YWdlKHVuc2lnbmVkIGxvbmcgZWEsIHVuc2lnbmVkIGxvbmcgcGEsCiB7CiAJdW5zaWduZWQgbG9u
ZyBwZm4gPSBwYSA+PiBQQUdFX1NISUZUOwogCXBnZF90ICpwZ2RwOworCXA0ZF90ICpwNGRwOwog
CXB1ZF90ICpwdWRwOwogCXBtZF90ICpwbWRwOwogCXB0ZV90ICpwdGVwOwpAQCAtMTM2LDcgKzEz
OSw4IEBAIHN0YXRpYyBpbnQgX19tYXBfa2VybmVsX3BhZ2UodW5zaWduZWQgbG9uZyBlYSwgdW5z
aWduZWQgbG9uZyBwYSwKIAkgKiBib290LgogCSAqLwogCXBnZHAgPSBwZ2Rfb2Zmc2V0X2soZWEp
OwotCXB1ZHAgPSBwdWRfYWxsb2MoJmluaXRfbW0sIHBnZHAsIGVhKTsKKwlwNGRwID0gcDRkX29m
ZnNldChwZ2RwLCBlYSk7CisJcHVkcCA9IHB1ZF9hbGxvYygmaW5pdF9tbSwgcDRkcCwgZWEpOwog
CWlmICghcHVkcCkKIAkJcmV0dXJuIC1FTk9NRU07CiAJaWYgKG1hcF9wYWdlX3NpemUgPT0gUFVE
X1NJWkUpIHsKQEAgLTE3Myw2ICsxNzcsNyBAQCB2b2lkIHJhZGl4X19jaGFuZ2VfbWVtb3J5X3Jh
bmdlKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgZW5kLAogewogCXVuc2lnbmVk
IGxvbmcgaWR4OwogCXBnZF90ICpwZ2RwOworCXA0ZF90ICpwNGRwOwogCXB1ZF90ICpwdWRwOwog
CXBtZF90ICpwbWRwOwogCXB0ZV90ICpwdGVwOwpAQCAtMTg1LDcgKzE5MCw4IEBAIHZvaWQgcmFk
aXhfX2NoYW5nZV9tZW1vcnlfcmFuZ2UodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9u
ZyBlbmQsCiAKIAlmb3IgKGlkeCA9IHN0YXJ0OyBpZHggPCBlbmQ7IGlkeCArPSBQQUdFX1NJWkUp
IHsKIAkJcGdkcCA9IHBnZF9vZmZzZXRfayhpZHgpOwotCQlwdWRwID0gcHVkX2FsbG9jKCZpbml0
X21tLCBwZ2RwLCBpZHgpOworCQlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBpZHgpOworCQlwdWRw
ID0gcHVkX2FsbG9jKCZpbml0X21tLCBwNGRwLCBpZHgpOwogCQlpZiAoIXB1ZHApCiAJCQljb250
aW51ZTsKIAkJaWYgKHB1ZF9pc19sZWFmKCpwdWRwKSkgewpAQCAtODQ3LDYgKzg1Myw3IEBAIHN0
YXRpYyB2b2lkIF9fbWVtaW5pdCByZW1vdmVfcGFnZXRhYmxlKHVuc2lnbmVkIGxvbmcgc3RhcnQs
IHVuc2lnbmVkIGxvbmcgZW5kKQogCXVuc2lnbmVkIGxvbmcgYWRkciwgbmV4dDsKIAlwdWRfdCAq
cHVkX2Jhc2U7CiAJcGdkX3QgKnBnZDsKKwlwNGRfdCAqcDRkOwogCiAJc3Bpbl9sb2NrKCZpbml0
X21tLnBhZ2VfdGFibGVfbG9jayk7CiAKQEAgLTg1NCwxNSArODYxLDE2IEBAIHN0YXRpYyB2b2lk
IF9fbWVtaW5pdCByZW1vdmVfcGFnZXRhYmxlKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVk
IGxvbmcgZW5kKQogCQluZXh0ID0gcGdkX2FkZHJfZW5kKGFkZHIsIGVuZCk7CiAKIAkJcGdkID0g
cGdkX29mZnNldF9rKGFkZHIpOwotCQlpZiAoIXBnZF9wcmVzZW50KCpwZ2QpKQorCQlwNGQgPSBw
NGRfb2Zmc2V0KHBnZCwgYWRkcik7CisJCWlmICghcDRkX3ByZXNlbnQoKnA0ZCkpCiAJCQljb250
aW51ZTsKIAotCQlpZiAocGdkX2lzX2xlYWYoKnBnZCkpIHsKLQkJCXNwbGl0X2tlcm5lbF9tYXBw
aW5nKGFkZHIsIGVuZCwgUEdESVJfU0laRSwgKHB0ZV90ICopcGdkKTsKKwkJaWYgKHA0ZF9pc19s
ZWFmKCpwNGQpKSB7CisJCQlzcGxpdF9rZXJuZWxfbWFwcGluZyhhZGRyLCBlbmQsIFA0RF9TSVpF
LCAocHRlX3QgKilwNGQpOwogCQkJY29udGludWU7CiAJCX0KIAotCQlwdWRfYmFzZSA9IChwdWRf
dCAqKXBnZF9wYWdlX3ZhZGRyKCpwZ2QpOworCQlwdWRfYmFzZSA9IChwdWRfdCAqKXA0ZF9wYWdl
X3ZhZGRyKCpwNGQpOwogCQlyZW1vdmVfcHVkX3RhYmxlKHB1ZF9iYXNlLCBhZGRyLCBuZXh0KTsK
IAl9CiAKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9zdWJwYWdlX3Byb3Qu
YyBiL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9zdWJwYWdlX3Byb3QuYwppbmRleCAyZWYyNGE1
M2Y0YzkuLjI1YTBjMDQ0YmQ5MyAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL21tL2Jvb2szczY0
L3N1YnBhZ2VfcHJvdC5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9zdWJwYWdlX3By
b3QuYwpAQCAtNTQsMTUgKzU0LDE3IEBAIHN0YXRpYyB2b2lkIGhwdGVfZmx1c2hfcmFuZ2Uoc3Ry
dWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkciwKIAkJCSAgICAgaW50IG5wYWdl
cykKIHsKIAlwZ2RfdCAqcGdkOworCXA0ZF90ICpwNGQ7CiAJcHVkX3QgKnB1ZDsKIAlwbWRfdCAq
cG1kOwogCXB0ZV90ICpwdGU7CiAJc3BpbmxvY2tfdCAqcHRsOwogCiAJcGdkID0gcGdkX29mZnNl
dChtbSwgYWRkcik7Ci0JaWYgKHBnZF9ub25lKCpwZ2QpKQorCXA0ZCA9IHA0ZF9vZmZzZXQocGdk
LCBhZGRyKTsKKwlpZiAocDRkX25vbmUoKnA0ZCkpCiAJCXJldHVybjsKLQlwdWQgPSBwdWRfb2Zm
c2V0KHBnZCwgYWRkcik7CisJcHVkID0gcHVkX29mZnNldChwNGQsIGFkZHIpOwogCWlmIChwdWRf
bm9uZSgqcHVkKSkKIAkJcmV0dXJuOwogCXBtZCA9IHBtZF9vZmZzZXQocHVkLCBhZGRyKTsKZGlm
ZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9odWdldGxicGFnZS5jIGIvYXJjaC9wb3dlcnBjL21t
L2h1Z2V0bGJwYWdlLmMKaW5kZXggMzNiMzQ2MWQ5MWU4Li41NGY1OTk0ZDRjYmIgMTAwNjQ0Ci0t
LSBhL2FyY2gvcG93ZXJwYy9tbS9odWdldGxicGFnZS5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9o
dWdldGxicGFnZS5jCkBAIC0xMTksNiArMTE5LDcgQEAgc3RhdGljIGludCBfX2h1Z2VwdGVfYWxs
b2Moc3RydWN0IG1tX3N0cnVjdCAqbW0sIGh1Z2VwZF90ICpocGRwLAogcHRlX3QgKmh1Z2VfcHRl
X2FsbG9jKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVk
IGxvbmcgc3opCiB7CiAJcGdkX3QgKnBnOworCXA0ZF90ICpwNDsKIAlwdWRfdCAqcHU7CiAJcG1k
X3QgKnBtOwogCWh1Z2VwZF90ICpocGRwID0gTlVMTDsKQEAgLTEyOCwyMCArMTI5LDIxIEBAIHB0
ZV90ICpodWdlX3B0ZV9hbGxvYyhzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBh
ZGRyLCB1bnNpZ25lZCBsb25nIHN6CiAKIAlhZGRyICY9IH4oc3otMSk7CiAJcGcgPSBwZ2Rfb2Zm
c2V0KG1tLCBhZGRyKTsKKwlwNCA9IHA0ZF9vZmZzZXQocGcsIGFkZHIpOwogCiAjaWZkZWYgQ09O
RklHX1BQQ19CT09LM1NfNjQKIAlpZiAocHNoaWZ0ID09IFBHRElSX1NISUZUKQogCQkvKiAxNkdC
IGh1Z2UgcGFnZSAqLwotCQlyZXR1cm4gKHB0ZV90ICopIHBnOworCQlyZXR1cm4gKHB0ZV90ICop
IHA0OwogCWVsc2UgaWYgKHBzaGlmdCA+IFBVRF9TSElGVCkgewogCQkvKgogCQkgKiBXZSBuZWVk
IHRvIHVzZSBodWdlcGQgdGFibGUKIAkJICovCiAJCXB0bCA9ICZtbS0+cGFnZV90YWJsZV9sb2Nr
OwotCQlocGRwID0gKGh1Z2VwZF90ICopcGc7CisJCWhwZHAgPSAoaHVnZXBkX3QgKilwNDsKIAl9
IGVsc2UgewogCQlwZHNoaWZ0ID0gUFVEX1NISUZUOwotCQlwdSA9IHB1ZF9hbGxvYyhtbSwgcGcs
IGFkZHIpOworCQlwdSA9IHB1ZF9hbGxvYyhtbSwgcDQsIGFkZHIpOwogCQlpZiAoIXB1KQogCQkJ
cmV0dXJuIE5VTEw7CiAJCWlmIChwc2hpZnQgPT0gUFVEX1NISUZUKQpAQCAtMTY2LDEwICsxNjgs
MTAgQEAgcHRlX3QgKmh1Z2VfcHRlX2FsbG9jKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25l
ZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgc3oKICNlbHNlCiAJaWYgKHBzaGlmdCA+PSBQR0RJ
Ul9TSElGVCkgewogCQlwdGwgPSAmbW0tPnBhZ2VfdGFibGVfbG9jazsKLQkJaHBkcCA9IChodWdl
cGRfdCAqKXBnOworCQlocGRwID0gKGh1Z2VwZF90ICopcDQ7CiAJfSBlbHNlIHsKIAkJcGRzaGlm
dCA9IFBVRF9TSElGVDsKLQkJcHUgPSBwdWRfYWxsb2MobW0sIHBnLCBhZGRyKTsKKwkJcHUgPSBw
dWRfYWxsb2MobW0sIHA0LCBhZGRyKTsKIAkJaWYgKCFwdSkKIAkJCXJldHVybiBOVUxMOwogCQlp
ZiAocHNoaWZ0ID49IFBVRF9TSElGVCkgewpAQCAtMzkwLDcgKzM5Miw3IEBAIHN0YXRpYyB2b2lk
IGh1Z2V0bGJfZnJlZV9wbWRfcmFuZ2Uoc3RydWN0IG1tdV9nYXRoZXIgKnRsYiwgcHVkX3QgKnB1
ZCwKIAltbV9kZWNfbnJfcG1kcyh0bGItPm1tKTsKIH0KIAotc3RhdGljIHZvaWQgaHVnZXRsYl9m
cmVlX3B1ZF9yYW5nZShzdHJ1Y3QgbW11X2dhdGhlciAqdGxiLCBwZ2RfdCAqcGdkLAorc3RhdGlj
IHZvaWQgaHVnZXRsYl9mcmVlX3B1ZF9yYW5nZShzdHJ1Y3QgbW11X2dhdGhlciAqdGxiLCBwNGRf
dCAqcDRkLAogCQkJCSAgIHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBlbmQsCiAJ
CQkJICAgdW5zaWduZWQgbG9uZyBmbG9vciwgdW5zaWduZWQgbG9uZyBjZWlsaW5nKQogewpAQCAt
NDAwLDcgKzQwMiw3IEBAIHN0YXRpYyB2b2lkIGh1Z2V0bGJfZnJlZV9wdWRfcmFuZ2Uoc3RydWN0
IG1tdV9nYXRoZXIgKnRsYiwgcGdkX3QgKnBnZCwKIAogCXN0YXJ0ID0gYWRkcjsKIAlkbyB7Ci0J
CXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwkJcHVkID0gcHVkX29mZnNldChwNGQsIGFk
ZHIpOwogCQluZXh0ID0gcHVkX2FkZHJfZW5kKGFkZHIsIGVuZCk7CiAJCWlmICghaXNfaHVnZXBk
KF9faHVnZXBkKHB1ZF92YWwoKnB1ZCkpKSkgewogCQkJaWYgKHB1ZF9ub25lX29yX2NsZWFyX2Jh
ZChwdWQpKQpAQCAtNDM1LDggKzQzNyw4IEBAIHN0YXRpYyB2b2lkIGh1Z2V0bGJfZnJlZV9wdWRf
cmFuZ2Uoc3RydWN0IG1tdV9nYXRoZXIgKnRsYiwgcGdkX3QgKnBnZCwKIAlpZiAoZW5kIC0gMSA+
IGNlaWxpbmcgLSAxKQogCQlyZXR1cm47CiAKLQlwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgc3RhcnQp
OwotCXBnZF9jbGVhcihwZ2QpOworCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBzdGFydCk7CisJcDRk
X2NsZWFyKHA0ZCk7CiAJcHVkX2ZyZWVfdGxiKHRsYiwgcHVkLCBzdGFydCk7CiAJbW1fZGVjX25y
X3B1ZHModGxiLT5tbSk7CiB9CkBAIC00NDksNiArNDUxLDcgQEAgdm9pZCBodWdldGxiX2ZyZWVf
cGdkX3JhbmdlKHN0cnVjdCBtbXVfZ2F0aGVyICp0bGIsCiAJCQkgICAgdW5zaWduZWQgbG9uZyBm
bG9vciwgdW5zaWduZWQgbG9uZyBjZWlsaW5nKQogewogCXBnZF90ICpwZ2Q7CisJcDRkX3QgKnA0
ZDsKIAl1bnNpZ25lZCBsb25nIG5leHQ7CiAKIAkvKgpAQCAtNDcxLDEwICs0NzQsMTEgQEAgdm9p
ZCBodWdldGxiX2ZyZWVfcGdkX3JhbmdlKHN0cnVjdCBtbXVfZ2F0aGVyICp0bGIsCiAJZG8gewog
CQluZXh0ID0gcGdkX2FkZHJfZW5kKGFkZHIsIGVuZCk7CiAJCXBnZCA9IHBnZF9vZmZzZXQodGxi
LT5tbSwgYWRkcik7CisJCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKIAkJaWYgKCFpc19o
dWdlcGQoX19odWdlcGQocGdkX3ZhbCgqcGdkKSkpKSB7Ci0JCQlpZiAocGdkX25vbmVfb3JfY2xl
YXJfYmFkKHBnZCkpCisJCQlpZiAocDRkX25vbmVfb3JfY2xlYXJfYmFkKHA0ZCkpCiAJCQkJY29u
dGludWU7Ci0JCQlodWdldGxiX2ZyZWVfcHVkX3JhbmdlKHRsYiwgcGdkLCBhZGRyLCBuZXh0LCBm
bG9vciwgY2VpbGluZyk7CisJCQlodWdldGxiX2ZyZWVfcHVkX3JhbmdlKHRsYiwgcDRkLCBhZGRy
LCBuZXh0LCBmbG9vciwgY2VpbGluZyk7CiAJCX0gZWxzZSB7CiAJCQl1bnNpZ25lZCBsb25nIG1v
cmU7CiAJCQkvKgpAQCAtNDg3LDcgKzQ5MSw3IEBAIHZvaWQgaHVnZXRsYl9mcmVlX3BnZF9yYW5n
ZShzdHJ1Y3QgbW11X2dhdGhlciAqdGxiLAogCQkJaWYgKG1vcmUgPiBuZXh0KQogCQkJCW5leHQg
PSBtb3JlOwogCi0JCQlmcmVlX2h1Z2VwZF9yYW5nZSh0bGIsIChodWdlcGRfdCAqKXBnZCwgUEdE
SVJfU0hJRlQsCisJCQlmcmVlX2h1Z2VwZF9yYW5nZSh0bGIsIChodWdlcGRfdCAqKXA0ZCwgUEdE
SVJfU0hJRlQsCiAJCQkJCSAgYWRkciwgbmV4dCwgZmxvb3IsIGNlaWxpbmcpOwogCQl9CiAJfSB3
aGlsZSAoYWRkciA9IG5leHQsIGFkZHIgIT0gZW5kKTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJw
Yy9tbS9rYXNhbi9rYXNhbl9pbml0XzMyLmMgYi9hcmNoL3Bvd2VycGMvbW0va2FzYW4va2FzYW5f
aW5pdF8zMi5jCmluZGV4IGRiNTY2NGRkZTVmZi4uODhlMmUxNjM4MGI1IDEwMDY0NAotLS0gYS9h
cmNoL3Bvd2VycGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5jCisrKyBiL2FyY2gvcG93ZXJwYy9t
bS9rYXNhbi9rYXNhbl9pbml0XzMyLmMKQEAgLTM2LDcgKzM2LDcgQEAgc3RhdGljIGludCBfX2lu
aXQga2FzYW5faW5pdF9zaGFkb3dfcGFnZV90YWJsZXModW5zaWduZWQgbG9uZyBrX3N0YXJ0LCB1
bnNpZ25lZAogCXVuc2lnbmVkIGxvbmcga19jdXIsIGtfbmV4dDsKIAlwdGVfdCAqbmV3ID0gTlVM
TDsKIAotCXBtZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwZ2Rfb2Zmc2V0X2soa19zdGFydCks
IGtfc3RhcnQpLCBrX3N0YXJ0KTsKKwlwbWQgPSBwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocDRkX29m
ZnNldChwZ2Rfb2Zmc2V0X2soa19zdGFydCksIGtfc3RhcnQpLCBrX3N0YXJ0KSwga19zdGFydCk7
CiAKIAlmb3IgKGtfY3VyID0ga19zdGFydDsga19jdXIgIT0ga19lbmQ7IGtfY3VyID0ga19uZXh0
LCBwbWQrKykgewogCQlrX25leHQgPSBwZ2RfYWRkcl9lbmQoa19jdXIsIGtfZW5kKTsKQEAgLTc4
LDcgKzc4LDcgQEAgc3RhdGljIGludCBfX2luaXQga2FzYW5faW5pdF9yZWdpb24odm9pZCAqc3Rh
cnQsIHNpemVfdCBzaXplKQogCWJsb2NrID0gbWVtYmxvY2tfYWxsb2Moa19lbmQgLSBrX3N0YXJ0
LCBQQUdFX1NJWkUpOwogCiAJZm9yIChrX2N1ciA9IGtfc3RhcnQgJiBQQUdFX01BU0s7IGtfY3Vy
IDwga19lbmQ7IGtfY3VyICs9IFBBR0VfU0laRSkgewotCQlwbWRfdCAqcG1kID0gcG1kX29mZnNl
dChwdWRfb2Zmc2V0KHBnZF9vZmZzZXRfayhrX2N1ciksIGtfY3VyKSwga19jdXIpOworCQlwbWRf
dCAqcG1kID0gcG1kX29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKGtf
Y3VyKSwga19jdXIpLCBrX2N1ciksIGtfY3VyKTsKIAkJdm9pZCAqdmEgPSBibG9jayArIGtfY3Vy
IC0ga19zdGFydDsKIAkJcHRlX3QgcHRlID0gcGZuX3B0ZShQSFlTX1BGTihfX3BhKHZhKSksIFBB
R0VfS0VSTkVMKTsKIApAQCAtMTAyLDcgKzEwMiw3IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBrYXNh
bl9yZW1hcF9lYXJseV9zaGFkb3dfcm8odm9pZCkKIAlrYXNhbl9wb3B1bGF0ZV9wdGUoa2FzYW5f
ZWFybHlfc2hhZG93X3B0ZSwgcHJvdCk7CiAKIAlmb3IgKGtfY3VyID0ga19zdGFydCAmIFBBR0Vf
TUFTSzsga19jdXIgPCBrX2VuZDsga19jdXIgKz0gUEFHRV9TSVpFKSB7Ci0JCXBtZF90ICpwbWQg
PSBwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocGdkX29mZnNldF9rKGtfY3VyKSwga19jdXIpLCBrX2N1
cik7CisJCXBtZF90ICpwbWQgPSBwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocDRkX29mZnNldChwZ2Rf
b2Zmc2V0X2soa19jdXIpLCBrX2N1ciksIGtfY3VyKSwga19jdXIpOwogCQlwdGVfdCAqcHRlcCA9
IHB0ZV9vZmZzZXRfa2VybmVsKHBtZCwga19jdXIpOwogCiAJCWlmICgocHRlX3ZhbCgqcHRlcCkg
JiBQVEVfUlBOX01BU0spICE9IHBhKQpAQCAtMjAxLDcgKzIwMSw3IEBAIHZvaWQgX19pbml0IGth
c2FuX2Vhcmx5X2luaXQodm9pZCkKIAl1bnNpZ25lZCBsb25nIGFkZHIgPSBLQVNBTl9TSEFET1df
U1RBUlQ7CiAJdW5zaWduZWQgbG9uZyBlbmQgPSBLQVNBTl9TSEFET1dfRU5EOwogCXVuc2lnbmVk
IGxvbmcgbmV4dDsKLQlwbWRfdCAqcG1kID0gcG1kX29mZnNldChwdWRfb2Zmc2V0KHBnZF9vZmZz
ZXRfayhhZGRyKSwgYWRkciksIGFkZHIpOworCXBtZF90ICpwbWQgPSBwbWRfb2Zmc2V0KHB1ZF9v
ZmZzZXQocDRkX29mZnNldChwZ2Rfb2Zmc2V0X2soYWRkciksIGFkZHIpLCBhZGRyKSwgYWRkcik7
CiAKIAlCVUlMRF9CVUdfT04oS0FTQU5fU0hBRE9XX1NUQVJUICYgflBHRElSX01BU0spOwogCmRp
ZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vbWVtLmMgYi9hcmNoL3Bvd2VycGMvbW0vbWVtLmMK
aW5kZXggZWY3YjExMTliMmUyLi44MjYyYjM4NGRjZjMgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJw
Yy9tbS9tZW0uYworKysgYi9hcmNoL3Bvd2VycGMvbW0vbWVtLmMKQEAgLTY5LDggKzY5LDggQEAg
RVhQT1JUX1NZTUJPTChrbWFwX3Byb3QpOwogCiBzdGF0aWMgaW5saW5lIHB0ZV90ICp2aXJ0X3Rv
X2twdGUodW5zaWduZWQgbG9uZyB2YWRkcikKIHsKLQlyZXR1cm4gcHRlX29mZnNldF9rZXJuZWwo
cG1kX29mZnNldChwdWRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2YWRkciksCi0JCQl2YWRkciksIHZh
ZGRyKSwgdmFkZHIpOworCXJldHVybiBwdGVfb2Zmc2V0X2tlcm5lbChwbWRfb2Zmc2V0KHB1ZF9v
ZmZzZXQocDRkX29mZnNldChwZ2Rfb2Zmc2V0X2sodmFkZHIpLAorCQkJdmFkZHIpLCB2YWRkciks
IHZhZGRyKSwgdmFkZHIpOwogfQogI2VuZGlmCiAKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9t
bS9ub2hhc2gvNDB4LmMgYi9hcmNoL3Bvd2VycGMvbW0vbm9oYXNoLzQweC5jCmluZGV4IGYzNDgx
MDRlYjQ2MS4uN2FhZjcxNTVlMzUwIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vbm9oYXNo
LzQweC5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9ub2hhc2gvNDB4LmMKQEAgLTEwNCw3ICsxMDQs
NyBAQCB1bnNpZ25lZCBsb25nIF9faW5pdCBtbXVfbWFwaW5fcmFtKHVuc2lnbmVkIGxvbmcgYmFz
ZSwgdW5zaWduZWQgbG9uZyB0b3ApCiAJCXBtZF90ICpwbWRwOwogCQl1bnNpZ25lZCBsb25nIHZh
bCA9IHAgfCBfUE1EX1NJWkVfMTZNIHwgX1BBR0VfRVhFQyB8IF9QQUdFX0hXV1JJVEU7CiAKLQkJ
cG1kcCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwZ2Rfb2Zmc2V0X2sodiksIHYpLCB2KTsKKwkJ
cG1kcCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwNGRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2KSwg
diksIHYpLCB2KTsKIAkJKnBtZHArKyA9IF9fcG1kKHZhbCk7CiAJCSpwbWRwKysgPSBfX3BtZCh2
YWwpOwogCQkqcG1kcCsrID0gX19wbWQodmFsKTsKQEAgLTExOSw3ICsxMTksNyBAQCB1bnNpZ25l
ZCBsb25nIF9faW5pdCBtbXVfbWFwaW5fcmFtKHVuc2lnbmVkIGxvbmcgYmFzZSwgdW5zaWduZWQg
bG9uZyB0b3ApCiAJCXBtZF90ICpwbWRwOwogCQl1bnNpZ25lZCBsb25nIHZhbCA9IHAgfCBfUE1E
X1NJWkVfNE0gfCBfUEFHRV9FWEVDIHwgX1BBR0VfSFdXUklURTsKIAotCQlwbWRwID0gcG1kX29m
ZnNldChwdWRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2KSwgdiksIHYpOworCQlwbWRwID0gcG1kX29m
ZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKHYpLCB2KSwgdiksIHYpOwog
CQkqcG1kcCA9IF9fcG1kKHZhbCk7CiAKIAkJdiArPSBMQVJHRV9QQUdFX1NJWkVfNE07CmRpZmYg
LS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vbm9oYXNoL2Jvb2szZV9wZ3RhYmxlLmMgYi9hcmNoL3Bv
d2VycGMvbW0vbm9oYXNoL2Jvb2szZV9wZ3RhYmxlLmMKaW5kZXggNDYzN2ZkZDQ2OWNmLi43Nzg4
NGUyNDI4MWQgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9tbS9ub2hhc2gvYm9vazNlX3BndGFi
bGUuYworKysgYi9hcmNoL3Bvd2VycGMvbW0vbm9oYXNoL2Jvb2szZV9wZ3RhYmxlLmMKQEAgLTcz
LDYgKzczLDcgQEAgc3RhdGljIHZvaWQgX19pbml0ICplYXJseV9hbGxvY19wZ3RhYmxlKHVuc2ln
bmVkIGxvbmcgc2l6ZSkKIGludCBfX3JlZiBtYXBfa2VybmVsX3BhZ2UodW5zaWduZWQgbG9uZyBl
YSwgdW5zaWduZWQgbG9uZyBwYSwgcGdwcm90X3QgcHJvdCkKIHsKIAlwZ2RfdCAqcGdkcDsKKwlw
NGRfdCAqcDRkcDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAlwdGVfdCAqcHRlcDsK
QEAgLTgwLDcgKzgxLDggQEAgaW50IF9fcmVmIG1hcF9rZXJuZWxfcGFnZSh1bnNpZ25lZCBsb25n
IGVhLCB1bnNpZ25lZCBsb25nIHBhLCBwZ3Byb3RfdCBwcm90KQogCUJVSUxEX0JVR19PTihUQVNL
X1NJWkVfVVNFUjY0ID4gUEdUQUJMRV9SQU5HRSk7CiAJaWYgKHNsYWJfaXNfYXZhaWxhYmxlKCkp
IHsKIAkJcGdkcCA9IHBnZF9vZmZzZXRfayhlYSk7Ci0JCXB1ZHAgPSBwdWRfYWxsb2MoJmluaXRf
bW0sIHBnZHAsIGVhKTsKKwkJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgZWEpOworCQlwdWRwID0g
cHVkX2FsbG9jKCZpbml0X21tLCBwNGRwLCBlYSk7CiAJCWlmICghcHVkcCkKIAkJCXJldHVybiAt
RU5PTUVNOwogCQlwbWRwID0gcG1kX2FsbG9jKCZpbml0X21tLCBwdWRwLCBlYSk7CkBAIC05MSwx
MyArOTMsMTIgQEAgaW50IF9fcmVmIG1hcF9rZXJuZWxfcGFnZSh1bnNpZ25lZCBsb25nIGVhLCB1
bnNpZ25lZCBsb25nIHBhLCBwZ3Byb3RfdCBwcm90KQogCQkJcmV0dXJuIC1FTk9NRU07CiAJfSBl
bHNlIHsKIAkJcGdkcCA9IHBnZF9vZmZzZXRfayhlYSk7Ci0jaWZuZGVmIF9fUEFHRVRBQkxFX1BV
RF9GT0xERUQKLQkJaWYgKHBnZF9ub25lKCpwZ2RwKSkgewotCQkJcHVkcCA9IGVhcmx5X2FsbG9j
X3BndGFibGUoUFVEX1RBQkxFX1NJWkUpOwotCQkJcGdkX3BvcHVsYXRlKCZpbml0X21tLCBwZ2Rw
LCBwdWRwKTsKKwkJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgZWEpOworCQlpZiAocDRkX25vbmUo
KnA0ZHApKSB7CisJCQlwbWRwID0gZWFybHlfYWxsb2NfcGd0YWJsZShQTURfVEFCTEVfU0laRSk7
CisJCQlwNGRfcG9wdWxhdGUoJmluaXRfbW0sIHA0ZHAsIHBtZHApOwogCQl9Ci0jZW5kaWYgLyog
IV9fUEFHRVRBQkxFX1BVRF9GT0xERUQgKi8KLQkJcHVkcCA9IHB1ZF9vZmZzZXQocGdkcCwgZWEp
OworCQlwdWRwID0gcHVkX29mZnNldChwNGRwLCBlYSk7CiAJCWlmIChwdWRfbm9uZSgqcHVkcCkp
IHsKIAkJCXBtZHAgPSBlYXJseV9hbGxvY19wZ3RhYmxlKFBNRF9UQUJMRV9TSVpFKTsKIAkJCXB1
ZF9wb3B1bGF0ZSgmaW5pdF9tbSwgcHVkcCwgcG1kcCk7CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2Vy
cGMvbW0vcGd0YWJsZS5jIGIvYXJjaC9wb3dlcnBjL21tL3BndGFibGUuYwppbmRleCBlMzc1OWI2
OWY4MWIuLmMyNDk5MjcxZjZjMSAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL21tL3BndGFibGUu
YworKysgYi9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZS5jCkBAIC0yNjUsNiArMjY1LDcgQEAgaW50
IGh1Z2VfcHRlcF9zZXRfYWNjZXNzX2ZsYWdzKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLAog
dm9pZCBhc3NlcnRfcHRlX2xvY2tlZChzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9u
ZyBhZGRyKQogewogCXBnZF90ICpwZ2Q7CisJcDRkX3QgKnA0ZDsKIAlwdWRfdCAqcHVkOwogCXBt
ZF90ICpwbWQ7CiAKQEAgLTI3Miw3ICsyNzMsOSBAQCB2b2lkIGFzc2VydF9wdGVfbG9ja2VkKHN0
cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHIpCiAJCXJldHVybjsKIAlwZ2Qg
PSBtbS0+cGdkICsgcGdkX2luZGV4KGFkZHIpOwogCUJVR19PTihwZ2Rfbm9uZSgqcGdkKSk7Ci0J
cHVkID0gcHVkX29mZnNldChwZ2QsIGFkZHIpOworCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRy
KTsKKwlCVUdfT04ocDRkX25vbmUoKnA0ZCkpOworCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRy
KTsKIAlCVUdfT04ocHVkX25vbmUoKnB1ZCkpOwogCXBtZCA9IHBtZF9vZmZzZXQocHVkLCBhZGRy
KTsKIAkvKgpAQCAtMzEyLDEyICszMTUsMTMgQEAgRVhQT1JUX1NZTUJPTF9HUEwodm1hbGxvY190
b19waHlzKTsKIHB0ZV90ICpfX2ZpbmRfbGludXhfcHRlKHBnZF90ICpwZ2RpciwgdW5zaWduZWQg
bG9uZyBlYSwKIAkJCWJvb2wgKmlzX3RocCwgdW5zaWduZWQgKmhwYWdlX3NoaWZ0KQogewotCXBn
ZF90IHBnZCwgKnBnZHA7CisJcGdkX3QgKnBnZHA7CisJcDRkX3QgcDRkLCAqcDRkcDsKIAlwdWRf
dCBwdWQsICpwdWRwOwogCXBtZF90IHBtZCwgKnBtZHA7CiAJcHRlX3QgKnJldF9wdGU7CiAJaHVn
ZXBkX3QgKmhwZHAgPSBOVUxMOwotCXVuc2lnbmVkIHBkc2hpZnQgPSBQR0RJUl9TSElGVDsKKwl1
bnNpZ25lZCBwZHNoaWZ0OwogCiAJaWYgKGhwYWdlX3NoaWZ0KQogCQkqaHBhZ2Vfc2hpZnQgPSAw
OwpAQCAtMzI1LDI0ICszMjksMjggQEAgcHRlX3QgKl9fZmluZF9saW51eF9wdGUocGdkX3QgKnBn
ZGlyLCB1bnNpZ25lZCBsb25nIGVhLAogCWlmIChpc190aHApCiAJCSppc190aHAgPSBmYWxzZTsK
IAotCXBnZHAgPSBwZ2RpciArIHBnZF9pbmRleChlYSk7Ci0JcGdkICA9IFJFQURfT05DRSgqcGdk
cCk7CiAJLyoKIAkgKiBBbHdheXMgb3BlcmF0ZSBvbiB0aGUgbG9jYWwgc3RhY2sgdmFsdWUuIFRo
aXMgbWFrZSBzdXJlIHRoZQogCSAqIHZhbHVlIGRvbid0IGdldCB1cGRhdGVkIGJ5IGEgcGFyYWxs
ZWwgVEhQIHNwbGl0L2NvbGxhcHNlLAogCSAqIHBhZ2UgZmF1bHQgb3IgYSBwYWdlIHVubWFwLiBU
aGUgcmV0dXJuIHB0ZV90ICogaXMgc3RpbGwgbm90CiAJICogc3RhYmxlLiBTbyBzaG91bGQgYmUg
Y2hlY2tlZCB0aGVyZSBmb3IgYWJvdmUgY29uZGl0aW9ucy4KKwkgKiBUb3AgbGV2ZWwgaXMgYW4g
ZXhjZXB0aW9uIGJlY2F1c2UgaXQgaXMgZm9sZGVkIGludG8gcDRkLgogCSAqLwotCWlmIChwZ2Rf
bm9uZShwZ2QpKQorCXBnZHAgPSBwZ2RpciArIHBnZF9pbmRleChlYSk7CisJcDRkcCA9IHA0ZF9v
ZmZzZXQocGdkcCwgZWEpOworCXA0ZCAgPSBSRUFEX09OQ0UoKnA0ZHApOworCXBkc2hpZnQgPSBQ
NERfU0hJRlQ7CisKKwlpZiAocDRkX25vbmUocDRkKSkKIAkJcmV0dXJuIE5VTEw7CiAKLQlpZiAo
cGdkX2lzX2xlYWYocGdkKSkgewotCQlyZXRfcHRlID0gKHB0ZV90ICopcGdkcDsKKwlpZiAocDRk
X2lzX2xlYWYocDRkKSkgeworCQlyZXRfcHRlID0gKHB0ZV90ICopcDRkcDsKIAkJZ290byBvdXQ7
CiAJfQogCi0JaWYgKGlzX2h1Z2VwZChfX2h1Z2VwZChwZ2RfdmFsKHBnZCkpKSkgewotCQlocGRw
ID0gKGh1Z2VwZF90ICopJnBnZDsKKwlpZiAoaXNfaHVnZXBkKF9faHVnZXBkKHA0ZF92YWwocDRk
KSkpKSB7CisJCWhwZHAgPSAoaHVnZXBkX3QgKikmcDRkOwogCQlnb3RvIG91dF9odWdlOwogCX0K
IApAQCAtMzUyLDcgKzM2MCw3IEBAIHB0ZV90ICpfX2ZpbmRfbGludXhfcHRlKHBnZF90ICpwZ2Rp
ciwgdW5zaWduZWQgbG9uZyBlYSwKIAkgKiBpcnEgZGlzYWJsZWQKIAkgKi8KIAlwZHNoaWZ0ID0g
UFVEX1NISUZUOwotCXB1ZHAgPSBwdWRfb2Zmc2V0KCZwZ2QsIGVhKTsKKwlwdWRwID0gcHVkX29m
ZnNldCgmcDRkLCBlYSk7CiAJcHVkICA9IFJFQURfT05DRSgqcHVkcCk7CiAKIAlpZiAocHVkX25v
bmUocHVkKSkKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlXzMyLmMgYi9hcmNo
L3Bvd2VycGMvbW0vcGd0YWJsZV8zMi5jCmluZGV4IDQ4OTQ1NTU2MjJkNy4uNTc3NGQ0YmM5NGQw
IDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZV8zMi5jCisrKyBiL2FyY2gvcG93
ZXJwYy9tbS9wZ3RhYmxlXzMyLmMKQEAgLTYzLDcgKzYzLDcgQEAgaW50IF9fcmVmIG1hcF9rZXJu
ZWxfcGFnZSh1bnNpZ25lZCBsb25nIHZhLCBwaHlzX2FkZHJfdCBwYSwgcGdwcm90X3QgcHJvdCkK
IAlpbnQgZXJyID0gLUVOT01FTTsKIAogCS8qIFVzZSB1cHBlciAxMCBiaXRzIG9mIFZBIHRvIGlu
ZGV4IHRoZSBmaXJzdCBsZXZlbCBtYXAgKi8KLQlwZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChw
Z2Rfb2Zmc2V0X2sodmEpLCB2YSksIHZhKTsKKwlwZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChw
NGRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2YSksIHZhKSwgdmEpLCB2YSk7CiAJLyogVXNlIG1pZGRs
ZSAxMCBiaXRzIG9mIFZBIHRvIGluZGV4IHRoZSBzZWNvbmQtbGV2ZWwgbWFwICovCiAJaWYgKGxp
a2VseShzbGFiX2lzX2F2YWlsYWJsZSgpKSkKIAkJcGcgPSBwdGVfYWxsb2Nfa2VybmVsKHBkLCB2
YSk7CkBAIC0xMzQsNyArMTM0LDcgQEAgc3RhdGljIGludCBfX2NoYW5nZV9wYWdlX2F0dHJfbm9m
bHVzaChzdHJ1Y3QgcGFnZSAqcGFnZSwgcGdwcm90X3QgcHJvdCkKIAlpZiAodl9ibG9ja19tYXBw
ZWQoYWRkcmVzcykpCiAJCXJldHVybiAwOwogCi0Ja3BtZCA9IHBtZF9vZmZzZXQocHVkX29mZnNl
dChwZ2Rfb2Zmc2V0X2sodmEpLCB2YSksIHZhKTsKKwlrcG1kID0gcG1kX29mZnNldChwdWRfb2Zm
c2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKHZhKSwgdmEpLCB2YSksIHZhKTsKIAlpZiAoIXBt
ZF9wcmVzZW50KCprcG1kKSkKIAkJcmV0dXJuIC1FSU5WQUw7CiAKZGlmZiAtLWdpdCBhL2FyY2gv
cG93ZXJwYy9tbS9wZ3RhYmxlXzY0LmMgYi9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZV82NC5jCmlu
ZGV4IGU3ODgzMmRjZTdiYi4uMWY4NmE4OGZkNGJiIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMv
bW0vcGd0YWJsZV82NC5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlXzY0LmMKQEAgLTEw
MSwxMyArMTAxLDEzIEBAIEVYUE9SVF9TWU1CT0woX19wdGVfZnJhZ19zaXplX3NoaWZ0KTsKIAog
I2lmbmRlZiBfX1BBR0VUQUJMRV9QVURfRk9MREVECiAvKiA0IGxldmVsIHBhZ2UgdGFibGUgKi8K
LXN0cnVjdCBwYWdlICpwZ2RfcGFnZShwZ2RfdCBwZ2QpCitzdHJ1Y3QgcGFnZSAqcDRkX3BhZ2Uo
cDRkX3QgcDRkKQogewotCWlmIChwZ2RfaXNfbGVhZihwZ2QpKSB7Ci0JCVZNX1dBUk5fT04oIXBn
ZF9odWdlKHBnZCkpOwotCQlyZXR1cm4gcHRlX3BhZ2UocGdkX3B0ZShwZ2QpKTsKKwlpZiAocDRk
X2lzX2xlYWYocDRkKSkgeworCQlWTV9XQVJOX09OKCFwNGRfaHVnZShwNGQpKTsKKwkJcmV0dXJu
IHB0ZV9wYWdlKHA0ZF9wdGUocDRkKSk7CiAJfQotCXJldHVybiB2aXJ0X3RvX3BhZ2UocGdkX3Bh
Z2VfdmFkZHIocGdkKSk7CisJcmV0dXJuIHZpcnRfdG9fcGFnZShwNGRfcGFnZV92YWRkcihwNGQp
KTsKIH0KICNlbmRpZgogCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vcHRkdW1wL2hhc2hw
YWdldGFibGUuYyBiL2FyY2gvcG93ZXJwYy9tbS9wdGR1bXAvaGFzaHBhZ2V0YWJsZS5jCmluZGV4
IGEwNzI3ODAyN2M2Zi4uYWMzNjBhZDg2NWE4IDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0v
cHRkdW1wL2hhc2hwYWdldGFibGUuYworKysgYi9hcmNoL3Bvd2VycGMvbW0vcHRkdW1wL2hhc2hw
YWdldGFibGUuYwpAQCAtNDE3LDkgKzQxNyw5IEBAIHN0YXRpYyB2b2lkIHdhbGtfcG1kKHN0cnVj
dCBwZ19zdGF0ZSAqc3QsIHB1ZF90ICpwdWQsIHVuc2lnbmVkIGxvbmcgc3RhcnQpCiAJfQogfQog
Ci1zdGF0aWMgdm9pZCB3YWxrX3B1ZChzdHJ1Y3QgcGdfc3RhdGUgKnN0LCBwZ2RfdCAqcGdkLCB1
bnNpZ25lZCBsb25nIHN0YXJ0KQorc3RhdGljIHZvaWQgd2Fsa19wdWQoc3RydWN0IHBnX3N0YXRl
ICpzdCwgcDRkX3QgKnA0ZCwgdW5zaWduZWQgbG9uZyBzdGFydCkKIHsKLQlwdWRfdCAqcHVkID0g
cHVkX29mZnNldChwZ2QsIDApOworCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgMCk7CiAJ
dW5zaWduZWQgbG9uZyBhZGRyOwogCXVuc2lnbmVkIGludCBpOwogCkBAIC00MzEsNiArNDMxLDIw
IEBAIHN0YXRpYyB2b2lkIHdhbGtfcHVkKHN0cnVjdCBwZ19zdGF0ZSAqc3QsIHBnZF90ICpwZ2Qs
IHVuc2lnbmVkIGxvbmcgc3RhcnQpCiAJfQogfQogCitzdGF0aWMgdm9pZCB3YWxrX3A0ZChzdHJ1
Y3QgcGdfc3RhdGUgKnN0LCBwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIHN0YXJ0KQoreworCXA0
ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgMCk7CisJdW5zaWduZWQgbG9uZyBhZGRyOworCXVu
c2lnbmVkIGludCBpOworCisJZm9yIChpID0gMDsgaSA8IFBUUlNfUEVSX1A0RDsgaSsrLCBwNGQr
KykgeworCQlhZGRyID0gc3RhcnQgKyBpICogUDREX1NJWkU7CisJCWlmICghcDRkX25vbmUoKnA0
ZCkpCisJCQkvKiBwNGQgZXhpc3RzICovCisJCQl3YWxrX3B1ZChzdCwgcDRkLCBhZGRyKTsKKwl9
Cit9CisKIHN0YXRpYyB2b2lkIHdhbGtfcGFnZXRhYmxlcyhzdHJ1Y3QgcGdfc3RhdGUgKnN0KQog
ewogCXBnZF90ICpwZ2QgPSBwZ2Rfb2Zmc2V0X2soMFVMKTsKQEAgLTQ0NSw3ICs0NTksNyBAQCBz
dGF0aWMgdm9pZCB3YWxrX3BhZ2V0YWJsZXMoc3RydWN0IHBnX3N0YXRlICpzdCkKIAkJYWRkciA9
IEtFUk5fVklSVF9TVEFSVCArIGkgKiBQR0RJUl9TSVpFOwogCQlpZiAoIXBnZF9ub25lKCpwZ2Qp
KQogCQkJLyogcGdkIGV4aXN0cyAqLwotCQkJd2Fsa19wdWQoc3QsIHBnZCwgYWRkcik7CisJCQl3
YWxrX3A0ZChzdCwgcGdkLCBhZGRyKTsKIAl9CiB9CiAKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJw
Yy9tbS9wdGR1bXAvcHRkdW1wLmMgYi9hcmNoL3Bvd2VycGMvbW0vcHRkdW1wL3B0ZHVtcC5jCmlu
ZGV4IDIwNjE1NjI1NTI0Ny4uOWQ2MjU2YjYxZGYzIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMv
bW0vcHRkdW1wL3B0ZHVtcC5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9wdGR1bXAvcHRkdW1wLmMK
QEAgLTI3Nyw5ICsyNzcsOSBAQCBzdGF0aWMgdm9pZCB3YWxrX3BtZChzdHJ1Y3QgcGdfc3RhdGUg
KnN0LCBwdWRfdCAqcHVkLCB1bnNpZ25lZCBsb25nIHN0YXJ0KQogCX0KIH0KIAotc3RhdGljIHZv
aWQgd2Fsa19wdWQoc3RydWN0IHBnX3N0YXRlICpzdCwgcGdkX3QgKnBnZCwgdW5zaWduZWQgbG9u
ZyBzdGFydCkKK3N0YXRpYyB2b2lkIHdhbGtfcHVkKHN0cnVjdCBwZ19zdGF0ZSAqc3QsIHA0ZF90
ICpwNGQsIHVuc2lnbmVkIGxvbmcgc3RhcnQpCiB7Ci0JcHVkX3QgKnB1ZCA9IHB1ZF9vZmZzZXQo
cGdkLCAwKTsKKwlwdWRfdCAqcHVkID0gcHVkX29mZnNldChwNGQsIDApOwogCXVuc2lnbmVkIGxv
bmcgYWRkcjsKIAl1bnNpZ25lZCBpbnQgaTsKIApAQCAtMzA0LDExICszMDQsMTMgQEAgc3RhdGlj
IHZvaWQgd2Fsa19wYWdldGFibGVzKHN0cnVjdCBwZ19zdGF0ZSAqc3QpCiAJICogdGhlIGhhc2gg
cGFnZXRhYmxlLgogCSAqLwogCWZvciAoaSA9IHBnZF9pbmRleChhZGRyKTsgaSA8IFBUUlNfUEVS
X1BHRDsgaSsrLCBwZ2QrKywgYWRkciArPSBQR0RJUl9TSVpFKSB7Ci0JCWlmICghcGdkX25vbmUo
KnBnZCkgJiYgIXBnZF9pc19sZWFmKCpwZ2QpKQotCQkJLyogcGdkIGV4aXN0cyAqLwotCQkJd2Fs
a19wdWQoc3QsIHBnZCwgYWRkcik7CisJCXA0ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgMCk7
CisKKwkJaWYgKCFwNGRfbm9uZSgqcDRkKSAmJiAhcDRkX2lzX2xlYWYoKnA0ZCkpCisJCQkvKiBw
NGQgZXhpc3RzICovCisJCQl3YWxrX3B1ZChzdCwgcDRkLCBhZGRyKTsKIAkJZWxzZQotCQkJbm90
ZV9wYWdlKHN0LCBhZGRyLCAxLCBwZ2RfdmFsKCpwZ2QpKTsKKwkJCW5vdGVfcGFnZShzdCwgYWRk
ciwgMSwgcDRkX3ZhbCgqcDRkKSk7CiAJfQogfQogCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMv
eG1vbi94bW9uLmMgYi9hcmNoL3Bvd2VycGMveG1vbi94bW9uLmMKaW5kZXggMGVjOTY0MDMzNWJi
Li4zZTI5MTI4YzU4Y2MgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy94bW9uL3htb24uYworKysg
Yi9hcmNoL3Bvd2VycGMveG1vbi94bW9uLmMKQEAgLTMxMzAsNiArMzEzMCw3IEBAIHN0YXRpYyB2
b2lkIHNob3dfcHRlKHVuc2lnbmVkIGxvbmcgYWRkcikKIAlzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRz
ayA9IE5VTEw7CiAJc3RydWN0IG1tX3N0cnVjdCAqbW07CiAJcGdkX3QgKnBnZHAsICpwZ2RpcjsK
KwlwNGRfdCAqcDRkcDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAlwdGVfdCAqcHRl
cDsKQEAgLTMxNjEsMjAgKzMxNjIsMjEgQEAgc3RhdGljIHZvaWQgc2hvd19wdGUodW5zaWduZWQg
bG9uZyBhZGRyKQogCQlwZ2RpciA9IHBnZF9vZmZzZXQobW0sIDApOwogCX0KIAotCWlmIChwZ2Rf
bm9uZSgqcGdkcCkpIHsKLQkJcHJpbnRmKCJubyBsaW51eCBwYWdlIHRhYmxlIGZvciBhZGRyZXNz
XG4iKTsKKwlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKKworCWlmIChwNGRfbm9uZSgq
cDRkcCkpIHsKKwkJcHJpbnRmKCJObyB2YWxpZCBQNERcbiIpOwogCQlyZXR1cm47CiAJfQogCi0J
cHJpbnRmKCJwZ2QgIEAgMHglcHhcbiIsIHBnZGlyKTsKLQotCWlmIChwZ2RfaXNfbGVhZigqcGdk
cCkpIHsKLQkJZm9ybWF0X3B0ZShwZ2RwLCBwZ2RfdmFsKCpwZ2RwKSk7CisJaWYgKHA0ZF9pc19s
ZWFmKCpwNGRwKSkgeworCQlmb3JtYXRfcHRlKHA0ZHAsIHA0ZF92YWwoKnA0ZHApKTsKIAkJcmV0
dXJuOwogCX0KLQlwcmludGYoInBnZHAgQCAweCVweCA9IDB4JTAxNmx4XG4iLCBwZ2RwLCBwZ2Rf
dmFsKCpwZ2RwKSk7CiAKLQlwdWRwID0gcHVkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlwcmludGYo
InA0ZHAgQCAweCVweCA9IDB4JTAxNmx4XG4iLCBwNGRwLCBwNGRfdmFsKCpwNGRwKSk7CisKKwlw
dWRwID0gcHVkX29mZnNldChwNGRwLCBhZGRyKTsKIAogCWlmIChwdWRfbm9uZSgqcHVkcCkpIHsK
IAkJcHJpbnRmKCJObyB2YWxpZCBQVURcbiIpOwotLSAKMi4yNC4wCgpfX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3Bl
blJJU0NAbGlzdHMubGlicmVjb3Jlcy5vcmcKaHR0cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9s
aXN0aW5mby9vcGVucmlzYwo=
