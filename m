Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 09072163127
	for <lists+openrisc@lfdr.de>; Tue, 18 Feb 2020 21:00:24 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 969FD2097E;
	Tue, 18 Feb 2020 21:00:23 +0100 (CET)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 0BA4F20383
 for <openrisc@lists.librecores.org>; Sun, 16 Feb 2020 09:19:07 +0100 (CET)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 9E936227BF;
 Sun, 16 Feb 2020 08:18:56 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1581841145;
 bh=WRLzr7tqwev0BfkKd1kQXKJcxnznWCQAyY7+6jQ7mB4=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=uvefR+pDRuG+/dk9ON4dNNgTMLxGnJkFJOxhKWhIWPpNauX0meADIrd14ItNKHj6b
 9LcYBhoBVtXy9zVrNPiyE/PM65USytAW6nJI+l4CtZHfzh3iQYcWcp/95VqKvtEwv/
 Va+K7+8WcOmpb6IA9pmqFgRXlEUlb1BKTd1fAp8w=
From: Mike Rapoport <rppt@kernel.org>
To: linux-kernel@vger.kernel.org
Date: Sun, 16 Feb 2020 10:18:31 +0200
Message-Id: <20200216081843.28670-2-rppt@kernel.org>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20200216081843.28670-1-rppt@kernel.org>
References: <20200216081843.28670-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Tue, 18 Feb 2020 21:00:14 +0100
Subject: [OpenRISC] [PATCH v2 01/13] arm/arm64: add support for folded p4d
 page tables
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 Geert Uytterhoeven <geert+renesas@glider.be>, linux-sh@vger.kernel.org,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>, linux-mm@kvack.org,
 Paul Mackerras <paulus@samba.org>, linux-hexagon@vger.kernel.org,
 Will Deacon <will@kernel.org>, kvmarm@lists.cs.columbia.edu,
 Jonas Bonn <jonas@southpole.se>, linux-arch@vger.kernel.org,
 Brian Cain <bcain@codeaurora.org>, Marc Zyngier <maz@kernel.org>,
 Russell King <linux@armlinux.org.uk>, Ley Foon Tan <ley.foon.tan@intel.com>,
 Mike Rapoport <rppt@linux.ibm.com>, Catalin Marinas <catalin.marinas@arm.com>,
 Julien Thierry <julien.thierry.kdev@gmail.com>,
 uclinux-h8-devel@lists.sourceforge.jp, Fenghua Yu <fenghua.yu@intel.com>,
 Arnd Bergmann <arnd@arndb.de>, Suzuki K Poulose <suzuki.poulose@arm.com>,
 kvm-ppc@vger.kernel.org, openrisc@lists.librecores.org,
 Guan Xuetao <gxt@pku.edu.cn>, linux-arm-kernel@lists.infradead.org,
 Christophe Leroy <christophe.leroy@c-s.fr>, Tony Luck <tony.luck@intel.com>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, James Morse <james.morse@arm.com>,
 Michael Ellerman <mpe@ellerman.id.au>, nios2-dev@lists.rocketboards.org,
 Andrew Morton <akpm@linux-foundation.org>, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKSW1wbGVtZW50IHByaW1p
dGl2ZXMgbmVjZXNzYXJ5IGZvciB0aGUgNHRoIGxldmVsIGZvbGRpbmcsIGFkZCB3YWxrcyBvZiBw
NGQKbGV2ZWwgd2hlcmUgYXBwcm9wcmlhdGUsIHJlcGxhY2UgNWxldmVsLWZpeHVwLmggd2l0aCBw
Z3RhYmxlLW5vcDRkLmggYW5kCnJlbW92ZSBfX0FSQ0hfVVNFXzVMRVZFTF9IQUNLLgoKU2luY2Ug
YXJtIGFuZCBhcm02NCBzaGFyZSBrdm0gbWVtb3J5IG1hbmFnZW1lbnQgYml0cywgbWFrZSB0aGUg
Y29udmVyc2lvbgpmb3IgYm90aCB2YXJpYW50cyBhdCBvbmNlIHRvIGF2b2lkIGJyZWFraW5nIHRo
ZSBidWlsZHMgaW4gdGhlIG1pZGRsZS4KClNpZ25lZC1vZmYtYnk6IE1pa2UgUmFwb3BvcnQgPHJw
cHRAbGludXguaWJtLmNvbT4KLS0tCiBhcmNoL2FybS9pbmNsdWRlL2FzbS9rdm1fbW11LmggICAg
ICAgICAgfCAgIDUgKy0KIGFyY2gvYXJtL2luY2x1ZGUvYXNtL3BndGFibGUuaCAgICAgICAgICB8
ICAgMSAtCiBhcmNoL2FybS9pbmNsdWRlL2FzbS9zdGFnZTJfcGd0YWJsZS5oICAgfCAgMTUgKy0K
IGFyY2gvYXJtL2xpYi91YWNjZXNzX3dpdGhfbWVtY3B5LmMgICAgICB8ICAgOSArLQogYXJjaC9h
cm0vbWFjaC1zYTExMDAvYXNzYWJldC5jICAgICAgICAgIHwgICAyICstCiBhcmNoL2FybS9tbS9k
dW1wLmMgICAgICAgICAgICAgICAgICAgICAgfCAgMjkgKysrLQogYXJjaC9hcm0vbW0vZmF1bHQt
YXJtdi5jICAgICAgICAgICAgICAgIHwgICA3ICstCiBhcmNoL2FybS9tbS9mYXVsdC5jICAgICAg
ICAgICAgICAgICAgICAgfCAgMjggKysrLQogYXJjaC9hcm0vbW0vaWRtYXAuYyAgICAgICAgICAg
ICAgICAgICAgIHwgICAzICstCiBhcmNoL2FybS9tbS9pbml0LmMgICAgICAgICAgICAgICAgICAg
ICAgfCAgIDIgKy0KIGFyY2gvYXJtL21tL2lvcmVtYXAuYyAgICAgICAgICAgICAgICAgICB8ICAx
MiArLQogYXJjaC9hcm0vbW0vbW0uaCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAyICstCiBh
cmNoL2FybS9tbS9tbXUuYyAgICAgICAgICAgICAgICAgICAgICAgfCAgMzUgKysrLQogYXJjaC9h
cm0vbW0vcGdkLmMgICAgICAgICAgICAgICAgICAgICAgIHwgIDQwICsrKystCiBhcmNoL2FybTY0
L2luY2x1ZGUvYXNtL2t2bV9tbXUuaCAgICAgICAgfCAgMTAgKy0KIGFyY2gvYXJtNjQvaW5jbHVk
ZS9hc20vcGdhbGxvYy5oICAgICAgICB8ICAxMCArLQogYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9w
Z3RhYmxlLXR5cGVzLmggIHwgICA1ICstCiBhcmNoL2FybTY0L2luY2x1ZGUvYXNtL3BndGFibGUu
aCAgICAgICAgfCAgMzcgKysrLS0KIGFyY2gvYXJtNjQvaW5jbHVkZS9hc20vc3RhZ2UyX3BndGFi
bGUuaCB8ICA0OCArKysrLS0KIGFyY2gvYXJtNjQva2VybmVsL2hpYmVybmF0ZS5jICAgICAgICAg
ICB8ICA0NCArKysrLQogYXJjaC9hcm02NC9tbS9mYXVsdC5jICAgICAgICAgICAgICAgICAgIHwg
ICA5ICstCiBhcmNoL2FybTY0L21tL2h1Z2V0bGJwYWdlLmMgICAgICAgICAgICAgfCAgMTUgKy0K
IGFyY2gvYXJtNjQvbW0va2FzYW5faW5pdC5jICAgICAgICAgICAgICB8ICAyNiArKy0KIGFyY2gv
YXJtNjQvbW0vbW11LmMgICAgICAgICAgICAgICAgICAgICB8ICA1MiArKysrLS0KIGFyY2gvYXJt
NjQvbW0vcGFnZWF0dHIuYyAgICAgICAgICAgICAgICB8ICAgNyArLQogdmlydC9rdm0vYXJtL21t
dS5jICAgICAgICAgICAgICAgICAgICAgIHwgMjA5ICsrKysrKysrKysrKysrKysrKysrLS0tLQog
MjYgZmlsZXMgY2hhbmdlZCwgNTIyIGluc2VydGlvbnMoKyksIDE0MCBkZWxldGlvbnMoLSkKCmRp
ZmYgLS1naXQgYS9hcmNoL2FybS9pbmNsdWRlL2FzbS9rdm1fbW11LmggYi9hcmNoL2FybS9pbmNs
dWRlL2FzbS9rdm1fbW11LmgKaW5kZXggMGQ4NGQ1MGJmOWJhLi44YzUxMWJiOTllNGMgMTAwNjQ0
Ci0tLSBhL2FyY2gvYXJtL2luY2x1ZGUvYXNtL2t2bV9tbXUuaAorKysgYi9hcmNoL2FybS9pbmNs
dWRlL2FzbS9rdm1fbW11LmgKQEAgLTY4LDcgKzY4LDggQEAgdm9pZCBrdm1fY2xlYXJfaHlwX2lk
bWFwKHZvaWQpOwogCiAjZGVmaW5lIGt2bV9ta19wbWQocHRlcCkJX19wbWQoX19wYShwdGVwKSB8
IFBNRF9UWVBFX1RBQkxFKQogI2RlZmluZSBrdm1fbWtfcHVkKHBtZHApCV9fcHVkKF9fcGEocG1k
cCkgfCBQTURfVFlQRV9UQUJMRSkKLSNkZWZpbmUga3ZtX21rX3BnZChwdWRwKQkoeyBCVUlMRF9C
VUcoKTsgMDsgfSkKKyNkZWZpbmUga3ZtX21rX3A0ZChwdWRwKQkoeyBCVUlMRF9CVUcoKTsgX19w
NGQoMCk7IH0pCisjZGVmaW5lIGt2bV9ta19wZ2QocDRkcCkJKHsgQlVJTERfQlVHKCk7IDA7IH0p
CiAKICNkZWZpbmUga3ZtX3Bmbl9wdGUocGZuLCBwcm90KQlwZm5fcHRlKHBmbiwgcHJvdCkKICNk
ZWZpbmUga3ZtX3Bmbl9wbWQocGZuLCBwcm90KQlwZm5fcG1kKHBmbiwgcHJvdCkKQEAgLTE5NCwx
MCArMTk1LDEyIEBAIHN0YXRpYyBpbmxpbmUgYm9vbCBrdm1fcGFnZV9lbXB0eSh2b2lkICpwdHIp
CiAjZGVmaW5lIGt2bV9wdGVfdGFibGVfZW1wdHkoa3ZtLCBwdGVwKSBrdm1fcGFnZV9lbXB0eShw
dGVwKQogI2RlZmluZSBrdm1fcG1kX3RhYmxlX2VtcHR5KGt2bSwgcG1kcCkga3ZtX3BhZ2VfZW1w
dHkocG1kcCkKICNkZWZpbmUga3ZtX3B1ZF90YWJsZV9lbXB0eShrdm0sIHB1ZHApIGZhbHNlCisj
ZGVmaW5lIGt2bV9wNGRfdGFibGVfZW1wdHkoa3ZtLCBwNGRwKSBmYWxzZQogCiAjZGVmaW5lIGh5
cF9wdGVfdGFibGVfZW1wdHkocHRlcCkga3ZtX3BhZ2VfZW1wdHkocHRlcCkKICNkZWZpbmUgaHlw
X3BtZF90YWJsZV9lbXB0eShwbWRwKSBrdm1fcGFnZV9lbXB0eShwbWRwKQogI2RlZmluZSBoeXBf
cHVkX3RhYmxlX2VtcHR5KHB1ZHApIGZhbHNlCisjZGVmaW5lIGh5cF9wNGRfdGFibGVfZW1wdHko
cDRkcCkgZmFsc2UKIAogc3RydWN0IGt2bTsKIApkaWZmIC0tZ2l0IGEvYXJjaC9hcm0vaW5jbHVk
ZS9hc20vcGd0YWJsZS5oIGIvYXJjaC9hcm0vaW5jbHVkZS9hc20vcGd0YWJsZS5oCmluZGV4IGVh
YmNiNDhhNzg0MC4uOWUzNDY0ODQyZGZjIDEwMDY0NAotLS0gYS9hcmNoL2FybS9pbmNsdWRlL2Fz
bS9wZ3RhYmxlLmgKKysrIGIvYXJjaC9hcm0vaW5jbHVkZS9hc20vcGd0YWJsZS5oCkBAIC0xNyw3
ICsxNyw2IEBACiAKICNlbHNlCiAKLSNkZWZpbmUgX19BUkNIX1VTRV81TEVWRUxfSEFDSwogI2lu
Y2x1ZGUgPGFzbS1nZW5lcmljL3BndGFibGUtbm9wdWQuaD4KICNpbmNsdWRlIDxhc20vbWVtb3J5
Lmg+CiAjaW5jbHVkZSA8YXNtL3BndGFibGUtaHdkZWYuaD4KZGlmZiAtLWdpdCBhL2FyY2gvYXJt
L2luY2x1ZGUvYXNtL3N0YWdlMl9wZ3RhYmxlLmggYi9hcmNoL2FybS9pbmNsdWRlL2FzbS9zdGFn
ZTJfcGd0YWJsZS5oCmluZGV4IGFhY2VlYzc4NTVlYy4uN2VkNjZlMjE2YTVlIDEwMDY0NAotLS0g
YS9hcmNoL2FybS9pbmNsdWRlL2FzbS9zdGFnZTJfcGd0YWJsZS5oCisrKyBiL2FyY2gvYXJtL2lu
Y2x1ZGUvYXNtL3N0YWdlMl9wZ3RhYmxlLmgKQEAgLTE5LDggKzE5LDE3IEBACiAjZGVmaW5lIHN0
YWdlMl9wZ2Rfbm9uZShrdm0sIHBnZCkJCXBnZF9ub25lKHBnZCkKICNkZWZpbmUgc3RhZ2UyX3Bn
ZF9jbGVhcihrdm0sIHBnZCkJCXBnZF9jbGVhcihwZ2QpCiAjZGVmaW5lIHN0YWdlMl9wZ2RfcHJl
c2VudChrdm0sIHBnZCkJCXBnZF9wcmVzZW50KHBnZCkKLSNkZWZpbmUgc3RhZ2UyX3BnZF9wb3B1
bGF0ZShrdm0sIHBnZCwgcHVkKQlwZ2RfcG9wdWxhdGUoTlVMTCwgcGdkLCBwdWQpCi0jZGVmaW5l
IHN0YWdlMl9wdWRfb2Zmc2V0KGt2bSwgcGdkLCBhZGRyZXNzKQlwdWRfb2Zmc2V0KHBnZCwgYWRk
cmVzcykKKyNkZWZpbmUgc3RhZ2UyX3BnZF9wb3B1bGF0ZShrdm0sIHBnZCwgcDRkKQlwZ2RfcG9w
dWxhdGUoTlVMTCwgcGdkLCBwNGQpCisKKyNkZWZpbmUgc3RhZ2UyX3A0ZF9vZmZzZXQoa3ZtLCBw
Z2QsIGFkZHJlc3MpCXA0ZF9vZmZzZXQocGdkLCBhZGRyZXNzKQorI2RlZmluZSBzdGFnZTJfcDRk
X2ZyZWUoa3ZtLCBwNGQpCQlkbyB7IH0gd2hpbGUgKDApCisKKyNkZWZpbmUgc3RhZ2UyX3A0ZF9u
b25lKGt2bSwgcDRkKQkJcDRkX25vbmUocDRkKQorI2RlZmluZSBzdGFnZTJfcDRkX2NsZWFyKGt2
bSwgcDRkKQkJcDRkX2NsZWFyKHA0ZCkKKyNkZWZpbmUgc3RhZ2UyX3A0ZF9wcmVzZW50KGt2bSwg
cDRkKQkJcDRkX3ByZXNlbnQocDRkKQorI2RlZmluZSBzdGFnZTJfcDRkX3BvcHVsYXRlKGt2bSwg
cDRkLCBwdWQpCXA0ZF9wb3B1bGF0ZShOVUxMLCBwNGQsIHB1ZCkKKworI2RlZmluZSBzdGFnZTJf
cHVkX29mZnNldChrdm0sIHA0ZCwgYWRkcmVzcykJcHVkX29mZnNldChwNGQsIGFkZHJlc3MpCiAj
ZGVmaW5lIHN0YWdlMl9wdWRfZnJlZShrdm0sIHB1ZCkJCWRvIHsgfSB3aGlsZSAoMCkKIAogI2Rl
ZmluZSBzdGFnZTJfcHVkX25vbmUoa3ZtLCBwdWQpCQlwdWRfbm9uZShwdWQpCkBAIC00MSw2ICs1
MCw3IEBAIHN0YWdlMl9wZ2RfYWRkcl9lbmQoc3RydWN0IGt2bSAqa3ZtLCBwaHlzX2FkZHJfdCBh
ZGRyLCBwaHlzX2FkZHJfdCBlbmQpCiAJcmV0dXJuIChib3VuZGFyeSAtIDEgPCBlbmQgLSAxKSA/
IGJvdW5kYXJ5IDogZW5kOwogfQogCisjZGVmaW5lIHN0YWdlMl9wNGRfYWRkcl9lbmQoa3ZtLCBh
ZGRyLCBlbmQpCShlbmQpCiAjZGVmaW5lIHN0YWdlMl9wdWRfYWRkcl9lbmQoa3ZtLCBhZGRyLCBl
bmQpCShlbmQpCiAKIHN0YXRpYyBpbmxpbmUgcGh5c19hZGRyX3QKQEAgLTU2LDYgKzY2LDcgQEAg
c3RhZ2UyX3BtZF9hZGRyX2VuZChzdHJ1Y3Qga3ZtICprdm0sIHBoeXNfYWRkcl90IGFkZHIsIHBo
eXNfYWRkcl90IGVuZCkKICNkZWZpbmUgc3RhZ2UyX3B0ZV90YWJsZV9lbXB0eShrdm0sIHB0ZXAp
CWt2bV9wYWdlX2VtcHR5KHB0ZXApCiAjZGVmaW5lIHN0YWdlMl9wbWRfdGFibGVfZW1wdHkoa3Zt
LCBwbWRwKQlrdm1fcGFnZV9lbXB0eShwbWRwKQogI2RlZmluZSBzdGFnZTJfcHVkX3RhYmxlX2Vt
cHR5KGt2bSwgcHVkcCkJZmFsc2UKKyNkZWZpbmUgc3RhZ2UyX3A0ZF90YWJsZV9lbXB0eShrdm0s
IHA0ZHApCWZhbHNlCiAKIHN0YXRpYyBpbmxpbmUgYm9vbCBrdm1fc3RhZ2UyX2hhc19wdWQoc3Ry
dWN0IGt2bSAqa3ZtKQogewpkaWZmIC0tZ2l0IGEvYXJjaC9hcm0vbGliL3VhY2Nlc3Nfd2l0aF9t
ZW1jcHkuYyBiL2FyY2gvYXJtL2xpYi91YWNjZXNzX3dpdGhfbWVtY3B5LmMKaW5kZXggYzk0NTA5
ODJhMTU1Li5jYWJmMTExOWMyNTYgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL2xpYi91YWNjZXNzX3dp
dGhfbWVtY3B5LmMKKysrIGIvYXJjaC9hcm0vbGliL3VhY2Nlc3Nfd2l0aF9tZW1jcHkuYwpAQCAt
MjQsNiArMjQsNyBAQCBwaW5fcGFnZV9mb3Jfd3JpdGUoY29uc3Qgdm9pZCBfX3VzZXIgKl9hZGRy
LCBwdGVfdCAqKnB0ZXAsIHNwaW5sb2NrX3QgKipwdGxwKQogewogCXVuc2lnbmVkIGxvbmcgYWRk
ciA9ICh1bnNpZ25lZCBsb25nKV9hZGRyOwogCXBnZF90ICpwZ2Q7CisJcDRkX3QgKnA0ZDsKIAlw
bWRfdCAqcG1kOwogCXB0ZV90ICpwdGU7CiAJcHVkX3QgKnB1ZDsKQEAgLTMzLDcgKzM0LDExIEBA
IHBpbl9wYWdlX2Zvcl93cml0ZShjb25zdCB2b2lkIF9fdXNlciAqX2FkZHIsIHB0ZV90ICoqcHRl
cCwgc3BpbmxvY2tfdCAqKnB0bHApCiAJaWYgKHVubGlrZWx5KHBnZF9ub25lKCpwZ2QpIHx8IHBn
ZF9iYWQoKnBnZCkpKQogCQlyZXR1cm4gMDsKIAotCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRy
KTsKKwlwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcik7CisJaWYgKHVubGlrZWx5KHA0ZF9ub25l
KCpwNGQpIHx8IHA0ZF9iYWQoKnA0ZCkpKQorCQlyZXR1cm4gMDsKKworCXB1ZCA9IHB1ZF9vZmZz
ZXQocDRkLCBhZGRyKTsKIAlpZiAodW5saWtlbHkocHVkX25vbmUoKnB1ZCkgfHwgcHVkX2JhZCgq
cHVkKSkpCiAJCXJldHVybiAwOwogCkBAIC0xNTQsNyArMTU5LDcgQEAgYXJtX2NvcHlfdG9fdXNl
cih2b2lkIF9fdXNlciAqdG8sIGNvbnN0IHZvaWQgKmZyb20sIHVuc2lnbmVkIGxvbmcgbikKIAl9
CiAJcmV0dXJuIG47CiB9Ci0JCisKIHN0YXRpYyB1bnNpZ25lZCBsb25nIG5vaW5saW5lCiBfX2Ns
ZWFyX3VzZXJfbWVtc2V0KHZvaWQgX191c2VyICphZGRyLCB1bnNpZ25lZCBsb25nIG4pCiB7CmRp
ZmYgLS1naXQgYS9hcmNoL2FybS9tYWNoLXNhMTEwMC9hc3NhYmV0LmMgYi9hcmNoL2FybS9tYWNo
LXNhMTEwMC9hc3NhYmV0LmMKaW5kZXggZDk2YTEwMWU1NTA0Li4wNjMxYTdiMDI2NzggMTAwNjQ0
Ci0tLSBhL2FyY2gvYXJtL21hY2gtc2ExMTAwL2Fzc2FiZXQuYworKysgYi9hcmNoL2FybS9tYWNo
LXNhMTEwMC9hc3NhYmV0LmMKQEAgLTYzMyw3ICs2MzMsNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQg
bWFwX3NhMTEwMF9ncGlvX3JlZ3MoIHZvaWQgKQogCWludCBwcm90ID0gUE1EX1RZUEVfU0VDVCB8
IFBNRF9TRUNUX0FQX1dSSVRFIHwgUE1EX0RPTUFJTihET01BSU5fSU8pOwogCXBtZF90ICpwbWQ7
CiAKLQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocGdkX29mZnNldF9rKHZpcnQpLCB2aXJ0
KSwgdmlydCk7CisJcG1kID0gcG1kX29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29m
ZnNldF9rKHZpcnQpLCB2aXJ0KSwgdmlydCksIHZpcnQpOwogCSpwbWQgPSBfX3BtZChwaHlzIHwg
cHJvdCk7CiAJZmx1c2hfcG1kX2VudHJ5KHBtZCk7CiB9CmRpZmYgLS1naXQgYS9hcmNoL2FybS9t
bS9kdW1wLmMgYi9hcmNoL2FybS9tbS9kdW1wLmMKaW5kZXggN2Q2MjkxZjIzMjUxLi42Nzc1NDlk
Njg1NGMgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL21tL2R1bXAuYworKysgYi9hcmNoL2FybS9tbS9k
dW1wLmMKQEAgLTIwNyw2ICsyMDcsNyBAQCBzdHJ1Y3QgcGdfbGV2ZWwgewogc3RhdGljIHN0cnVj
dCBwZ19sZXZlbCBwZ19sZXZlbFtdID0gewogCXsKIAl9LCB7IC8qIHBnZCAqLworCX0sIHsgLyog
cDRkICovCiAJfSwgeyAvKiBwdWQgKi8KIAl9LCB7IC8qIHBtZCAqLwogCQkuYml0cwk9IHNlY3Rp
b25fYml0cywKQEAgLTMwOCw3ICszMDksNyBAQCBzdGF0aWMgdm9pZCB3YWxrX3B0ZShzdHJ1Y3Qg
cGdfc3RhdGUgKnN0LCBwbWRfdCAqcG1kLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAogCiAJZm9yIChp
ID0gMDsgaSA8IFBUUlNfUEVSX1BURTsgaSsrLCBwdGUrKykgewogCQlhZGRyID0gc3RhcnQgKyBp
ICogUEFHRV9TSVpFOwotCQlub3RlX3BhZ2Uoc3QsIGFkZHIsIDQsIHB0ZV92YWwoKnB0ZSksIGRv
bWFpbik7CisJCW5vdGVfcGFnZShzdCwgYWRkciwgNSwgcHRlX3ZhbCgqcHRlKSwgZG9tYWluKTsK
IAl9CiB9CiAKQEAgLTM1MCwxNCArMzUxLDE0IEBAIHN0YXRpYyB2b2lkIHdhbGtfcG1kKHN0cnVj
dCBwZ19zdGF0ZSAqc3QsIHB1ZF90ICpwdWQsIHVuc2lnbmVkIGxvbmcgc3RhcnQpCiAJCQlhZGRy
ICs9IFNFQ1RJT05fU0laRTsKIAkJCXBtZCsrOwogCQkJZG9tYWluID0gZ2V0X2RvbWFpbl9uYW1l
KHBtZCk7Ci0JCQlub3RlX3BhZ2Uoc3QsIGFkZHIsIDMsIHBtZF92YWwoKnBtZCksIGRvbWFpbik7
CisJCQlub3RlX3BhZ2Uoc3QsIGFkZHIsIDQsIHBtZF92YWwoKnBtZCksIGRvbWFpbik7CiAJCX0K
IAl9CiB9CiAKLXN0YXRpYyB2b2lkIHdhbGtfcHVkKHN0cnVjdCBwZ19zdGF0ZSAqc3QsIHBnZF90
ICpwZ2QsIHVuc2lnbmVkIGxvbmcgc3RhcnQpCitzdGF0aWMgdm9pZCB3YWxrX3B1ZChzdHJ1Y3Qg
cGdfc3RhdGUgKnN0LCBwNGRfdCAqcDRkLCB1bnNpZ25lZCBsb25nIHN0YXJ0KQogewotCXB1ZF90
ICpwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgMCk7CisJcHVkX3QgKnB1ZCA9IHB1ZF9vZmZzZXQocDRk
LCAwKTsKIAl1bnNpZ25lZCBsb25nIGFkZHI7CiAJdW5zaWduZWQgaTsKIApAQCAtMzY2LDcgKzM2
NywyMyBAQCBzdGF0aWMgdm9pZCB3YWxrX3B1ZChzdHJ1Y3QgcGdfc3RhdGUgKnN0LCBwZ2RfdCAq
cGdkLCB1bnNpZ25lZCBsb25nIHN0YXJ0KQogCQlpZiAoIXB1ZF9ub25lKCpwdWQpKSB7CiAJCQl3
YWxrX3BtZChzdCwgcHVkLCBhZGRyKTsKIAkJfSBlbHNlIHsKLQkJCW5vdGVfcGFnZShzdCwgYWRk
ciwgMiwgcHVkX3ZhbCgqcHVkKSwgTlVMTCk7CisJCQlub3RlX3BhZ2Uoc3QsIGFkZHIsIDMsIHB1
ZF92YWwoKnB1ZCksIE5VTEwpOworCQl9CisJfQorfQorCitzdGF0aWMgdm9pZCB3YWxrX3A0ZChz
dHJ1Y3QgcGdfc3RhdGUgKnN0LCBwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIHN0YXJ0KQorewor
CXA0ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgMCk7CisJdW5zaWduZWQgbG9uZyBhZGRyOwor
CXVuc2lnbmVkIGk7CisKKwlmb3IgKGkgPSAwOyBpIDwgUFRSU19QRVJfUDREOyBpKyssIHA0ZCsr
KSB7CisJCWFkZHIgPSBzdGFydCArIGkgKiBQNERfU0laRTsKKwkJaWYgKCFwNGRfbm9uZSgqcDRk
KSkgeworCQkJd2Fsa19wdWQoc3QsIHA0ZCwgYWRkcik7CisJCX0gZWxzZSB7CisJCQlub3RlX3Bh
Z2Uoc3QsIGFkZHIsIDIsIHA0ZF92YWwoKnA0ZCksIE5VTEwpOwogCQl9CiAJfQogfQpAQCAtMzgx
LDcgKzM5OCw3IEBAIHN0YXRpYyB2b2lkIHdhbGtfcGdkKHN0cnVjdCBwZ19zdGF0ZSAqc3QsIHN0
cnVjdCBtbV9zdHJ1Y3QgKm1tLAogCWZvciAoaSA9IDA7IGkgPCBQVFJTX1BFUl9QR0Q7IGkrKywg
cGdkKyspIHsKIAkJYWRkciA9IHN0YXJ0ICsgaSAqIFBHRElSX1NJWkU7CiAJCWlmICghcGdkX25v
bmUoKnBnZCkpIHsKLQkJCXdhbGtfcHVkKHN0LCBwZ2QsIGFkZHIpOworCQkJd2Fsa19wNGQoc3Qs
IHBnZCwgYWRkcik7CiAJCX0gZWxzZSB7CiAJCQlub3RlX3BhZ2Uoc3QsIGFkZHIsIDEsIHBnZF92
YWwoKnBnZCksIE5VTEwpOwogCQl9CmRpZmYgLS1naXQgYS9hcmNoL2FybS9tbS9mYXVsdC1hcm12
LmMgYi9hcmNoL2FybS9tbS9mYXVsdC1hcm12LmMKaW5kZXggYWU4NTdmNDFmNjhkLi40ODlhYWFm
YTZlYmQgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL21tL2ZhdWx0LWFybXYuYworKysgYi9hcmNoL2Fy
bS9tbS9mYXVsdC1hcm12LmMKQEAgLTkxLDYgKzkxLDcgQEAgc3RhdGljIGludCBhZGp1c3RfcHRl
KHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MsCiB7CiAJ
c3BpbmxvY2tfdCAqcHRsOwogCXBnZF90ICpwZ2Q7CisJcDRkX3QgKnA0ZDsKIAlwdWRfdCAqcHVk
OwogCXBtZF90ICpwbWQ7CiAJcHRlX3QgKnB0ZTsKQEAgLTEwMCw3ICsxMDEsMTEgQEAgc3RhdGlj
IGludCBhZGp1c3RfcHRlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25n
IGFkZHJlc3MsCiAJaWYgKHBnZF9ub25lX29yX2NsZWFyX2JhZChwZ2QpKQogCQlyZXR1cm4gMDsK
IAotCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRyZXNzKTsKKwlwNGQgPSBwNGRfb2Zmc2V0KHBn
ZCwgYWRkcmVzcyk7CisJaWYgKHA0ZF9ub25lX29yX2NsZWFyX2JhZChwNGQpKQorCQlyZXR1cm4g
MDsKKworCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyZXNzKTsKIAlpZiAocHVkX25vbmVfb3Jf
Y2xlYXJfYmFkKHB1ZCkpCiAJCXJldHVybiAwOwogCmRpZmYgLS1naXQgYS9hcmNoL2FybS9tbS9m
YXVsdC5jIGIvYXJjaC9hcm0vbW0vZmF1bHQuYwppbmRleCBiZDBmNDgyMWY3ZTEuLmMyYmQzNWE4
MjJlMyAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vZmF1bHQuYworKysgYi9hcmNoL2FybS9tbS9m
YXVsdC5jCkBAIC00Myw2ICs0Myw3IEBAIHZvaWQgc2hvd19wdGUoY29uc3QgY2hhciAqbHZsLCBz
dHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyKQogCXByaW50aygiJXNbJTA4
bHhdICpwZ2Q9JTA4bGx4IiwgbHZsLCBhZGRyLCAobG9uZyBsb25nKXBnZF92YWwoKnBnZCkpOwog
CiAJZG8geworCQlwNGRfdCAqcDRkOwogCQlwdWRfdCAqcHVkOwogCQlwbWRfdCAqcG1kOwogCQlw
dGVfdCAqcHRlOwpAQCAtNTUsNyArNTYsMTkgQEAgdm9pZCBzaG93X3B0ZShjb25zdCBjaGFyICps
dmwsIHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHIpCiAJCQlicmVhazsK
IAkJfQogCi0JCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwkJcDRkID0gcDRkX29mZnNl
dChwZ2QsIGFkZHIpOworCQlpZiAoUFRSU19QRVJfUDREICE9IDEpCisJCQlwcl9jb250KCIsICpw
NGQ9JTA4bGx4IiwgKGxvbmcgbG9uZylwNGRfdmFsKCpwNGQpKTsKKworCQlpZiAocDRkX25vbmUo
KnA0ZCkpCisJCQlicmVhazsKKworCQlpZiAocDRkX2JhZCgqcDRkKSkgeworCQkJcHJfY29udCgi
KGJhZCkiKTsKKwkJCWJyZWFrOworCQl9CisKKwkJcHVkID0gcHVkX29mZnNldChwNGQsIGFkZHIp
OwogCQlpZiAoUFRSU19QRVJfUFVEICE9IDEpCiAJCQlwcl9jb250KCIsICpwdWQ9JTA4bGx4Iiwg
KGxvbmcgbG9uZylwdWRfdmFsKCpwdWQpKTsKIApAQCAtNDA4LDYgKzQyMSw3IEBAIGRvX3RyYW5z
bGF0aW9uX2ZhdWx0KHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgaW50IGZzciwKIHsKIAl1
bnNpZ25lZCBpbnQgaW5kZXg7CiAJcGdkX3QgKnBnZCwgKnBnZF9rOworCXA0ZF90ICpwNGQsICpw
NGRfazsKIAlwdWRfdCAqcHVkLCAqcHVkX2s7CiAJcG1kX3QgKnBtZCwgKnBtZF9rOwogCkBAIC00
MjcsOCArNDQxLDE2IEBAIGRvX3RyYW5zbGF0aW9uX2ZhdWx0KHVuc2lnbmVkIGxvbmcgYWRkciwg
dW5zaWduZWQgaW50IGZzciwKIAlpZiAoIXBnZF9wcmVzZW50KCpwZ2QpKQogCQlzZXRfcGdkKHBn
ZCwgKnBnZF9rKTsKIAotCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRyKTsKLQlwdWRfayA9IHB1
ZF9vZmZzZXQocGdkX2ssIGFkZHIpOworCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwlw
NGRfayA9IHA0ZF9vZmZzZXQocGdkX2ssIGFkZHIpOworCisJaWYgKHA0ZF9ub25lKCpwNGRfaykp
CisJCWdvdG8gYmFkX2FyZWE7CisJaWYgKCFwNGRfcHJlc2VudCgqcDRkKSkKKwkJc2V0X3A0ZChw
NGQsICpwNGRfayk7CisKKwlwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgYWRkcik7CisJcHVkX2sgPSBw
dWRfb2Zmc2V0KHA0ZF9rLCBhZGRyKTsKIAogCWlmIChwdWRfbm9uZSgqcHVkX2spKQogCQlnb3Rv
IGJhZF9hcmVhOwpkaWZmIC0tZ2l0IGEvYXJjaC9hcm0vbW0vaWRtYXAuYyBiL2FyY2gvYXJtL21t
L2lkbWFwLmMKaW5kZXggYTAzM2Y2MTM0YTY0Li5jZDU0NDExZWYxYjggMTAwNjQ0Ci0tLSBhL2Fy
Y2gvYXJtL21tL2lkbWFwLmMKKysrIGIvYXJjaC9hcm0vbW0vaWRtYXAuYwpAQCAtNjgsNyArNjgs
OCBAQCBzdGF0aWMgdm9pZCBpZG1hcF9hZGRfcG1kKHB1ZF90ICpwdWQsIHVuc2lnbmVkIGxvbmcg
YWRkciwgdW5zaWduZWQgbG9uZyBlbmQsCiBzdGF0aWMgdm9pZCBpZG1hcF9hZGRfcHVkKHBnZF90
ICpwZ2QsIHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBlbmQsCiAJdW5zaWduZWQg
bG9uZyBwcm90KQogewotCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgYWRkcik7CisJcDRk
X3QgKnA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwlwdWRfdCAqcHVkID0gcHVkX29mZnNl
dChwNGQsIGFkZHIpOwogCXVuc2lnbmVkIGxvbmcgbmV4dDsKIAogCWRvIHsKZGlmZiAtLWdpdCBh
L2FyY2gvYXJtL21tL2luaXQuYyBiL2FyY2gvYXJtL21tL2luaXQuYwppbmRleCAwNTRiZTQ0ZDFj
ZGIuLjk2M2I1Mjg0ZDI4NCAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vaW5pdC5jCisrKyBiL2Fy
Y2gvYXJtL21tL2luaXQuYwpAQCAtNTcxLDcgKzU3MSw3IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBz
ZWN0aW9uX3VwZGF0ZSh1bnNpZ25lZCBsb25nIGFkZHIsIHBtZHZhbF90IG1hc2ssCiB7CiAJcG1k
X3QgKnBtZDsKIAotCXBtZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwZ2Rfb2Zmc2V0KG1tLCBh
ZGRyKSwgYWRkciksIGFkZHIpOworCXBtZCA9IHBtZF9vZmZfayhhZGRyKTsKIAogI2lmZGVmIENP
TkZJR19BUk1fTFBBRQogCXBtZFswXSA9IF9fcG1kKChwbWRfdmFsKHBtZFswXSkgJiBtYXNrKSB8
IHByb3QpOwpkaWZmIC0tZ2l0IGEvYXJjaC9hcm0vbW0vaW9yZW1hcC5jIGIvYXJjaC9hcm0vbW0v
aW9yZW1hcC5jCmluZGV4IDcyMjg2ZjlhNGQzMC4uNzU1MjlkNzZkMjhjIDEwMDY0NAotLS0gYS9h
cmNoL2FybS9tbS9pb3JlbWFwLmMKKysrIGIvYXJjaC9hcm0vbW0vaW9yZW1hcC5jCkBAIC0xNDIs
MTIgKzE0MiwxNCBAQCBzdGF0aWMgdm9pZCB1bm1hcF9hcmVhX3NlY3Rpb25zKHVuc2lnbmVkIGxv
bmcgdmlydCwgdW5zaWduZWQgbG9uZyBzaXplKQogewogCXVuc2lnbmVkIGxvbmcgYWRkciA9IHZp
cnQsIGVuZCA9IHZpcnQgKyAoc2l6ZSAmIH4oU1pfMU0gLSAxKSk7CiAJcGdkX3QgKnBnZDsKKwlw
NGRfdCAqcDRkOwogCXB1ZF90ICpwdWQ7CiAJcG1kX3QgKnBtZHA7CiAKIAlmbHVzaF9jYWNoZV92
dW5tYXAoYWRkciwgZW5kKTsKIAlwZ2QgPSBwZ2Rfb2Zmc2V0X2soYWRkcik7Ci0JcHVkID0gcHVk
X29mZnNldChwZ2QsIGFkZHIpOworCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwlwdWQg
PSBwdWRfb2Zmc2V0KHA0ZCwgYWRkcik7CiAJcG1kcCA9IHBtZF9vZmZzZXQocHVkLCBhZGRyKTsK
IAlkbyB7CiAJCXBtZF90IHBtZCA9ICpwbWRwOwpAQCAtMTkwLDYgKzE5Miw3IEBAIHJlbWFwX2Fy
ZWFfc2VjdGlvbnModW5zaWduZWQgbG9uZyB2aXJ0LCB1bnNpZ25lZCBsb25nIHBmbiwKIHsKIAl1
bnNpZ25lZCBsb25nIGFkZHIgPSB2aXJ0LCBlbmQgPSB2aXJ0ICsgc2l6ZTsKIAlwZ2RfdCAqcGdk
OworCXA0ZF90ICpwNGQ7CiAJcHVkX3QgKnB1ZDsKIAlwbWRfdCAqcG1kOwogCkBAIC0yMDAsNyAr
MjAzLDggQEAgcmVtYXBfYXJlYV9zZWN0aW9ucyh1bnNpZ25lZCBsb25nIHZpcnQsIHVuc2lnbmVk
IGxvbmcgcGZuLAogCXVubWFwX2FyZWFfc2VjdGlvbnModmlydCwgc2l6ZSk7CiAKIAlwZ2QgPSBw
Z2Rfb2Zmc2V0X2soYWRkcik7Ci0JcHVkID0gcHVkX29mZnNldChwZ2QsIGFkZHIpOworCXA0ZCA9
IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwlwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgYWRkcik7CiAJ
cG1kID0gcG1kX29mZnNldChwdWQsIGFkZHIpOwogCWRvIHsKIAkJcG1kWzBdID0gX19wbWQoX19w
Zm5fdG9fcGh5cyhwZm4pIHwgdHlwZS0+cHJvdF9zZWN0KTsKQEAgLTIyMiw2ICsyMjYsNyBAQCBy
ZW1hcF9hcmVhX3N1cGVyc2VjdGlvbnModW5zaWduZWQgbG9uZyB2aXJ0LCB1bnNpZ25lZCBsb25n
IHBmbiwKIHsKIAl1bnNpZ25lZCBsb25nIGFkZHIgPSB2aXJ0LCBlbmQgPSB2aXJ0ICsgc2l6ZTsK
IAlwZ2RfdCAqcGdkOworCXA0ZF90ICpwNGQ7CiAJcHVkX3QgKnB1ZDsKIAlwbWRfdCAqcG1kOwog
CkBAIC0yMzIsNyArMjM3LDggQEAgcmVtYXBfYXJlYV9zdXBlcnNlY3Rpb25zKHVuc2lnbmVkIGxv
bmcgdmlydCwgdW5zaWduZWQgbG9uZyBwZm4sCiAJdW5tYXBfYXJlYV9zZWN0aW9ucyh2aXJ0LCBz
aXplKTsKIAogCXBnZCA9IHBnZF9vZmZzZXRfayh2aXJ0KTsKLQlwdWQgPSBwdWRfb2Zmc2V0KHBn
ZCwgYWRkcik7CisJcDRkID0gcDRkX29mZnNldChwZ2QsIGFkZHIpOworCXB1ZCA9IHB1ZF9vZmZz
ZXQocDRkLCBhZGRyKTsKIAlwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRkcik7CiAJZG8gewogCQl1
bnNpZ25lZCBsb25nIHN1cGVyX3BtZF92YWwsIGk7CmRpZmYgLS1naXQgYS9hcmNoL2FybS9tbS9t
bS5oIGIvYXJjaC9hcm0vbW0vbW0uaAppbmRleCA4OGMxMjFhYzE0YjMuLjRmMWY3MmI3NTg5MCAx
MDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vbW0uaAorKysgYi9hcmNoL2FybS9tbS9tbS5oCkBAIC0z
OCw3ICszOCw3IEBAIHN0YXRpYyBpbmxpbmUgcHRlX3QgZ2V0X3RvcF9wdGUodW5zaWduZWQgbG9u
ZyB2YSkKIAogc3RhdGljIGlubGluZSBwbWRfdCAqcG1kX29mZl9rKHVuc2lnbmVkIGxvbmcgdmly
dCkKIHsKLQlyZXR1cm4gcG1kX29mZnNldChwdWRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2aXJ0KSwg
dmlydCksIHZpcnQpOworCXJldHVybiBwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocDRkX29mZnNldChw
Z2Rfb2Zmc2V0X2sodmlydCksIHZpcnQpLCB2aXJ0KSwgdmlydCk7CiB9CiAKIHN0cnVjdCBtZW1f
dHlwZSB7CmRpZmYgLS1naXQgYS9hcmNoL2FybS9tbS9tbXUuYyBiL2FyY2gvYXJtL21tL21tdS5j
CmluZGV4IDVkMGQwZjg2ZTc5MC4uYWZkOTczNDJiNjM0IDEwMDY0NAotLS0gYS9hcmNoL2FybS9t
bS9tbXUuYworKysgYi9hcmNoL2FybS9tbS9tbXUuYwpAQCAtMzc1LDcgKzM3NSw4IEBAIHN0YXRp
YyBwdGVfdCAqcHRlX29mZnNldF9sYXRlX2ZpeG1hcChwbWRfdCAqZGlyLCB1bnNpZ25lZCBsb25n
IGFkZHIpCiBzdGF0aWMgaW5saW5lIHBtZF90ICogX19pbml0IGZpeG1hcF9wbWQodW5zaWduZWQg
bG9uZyBhZGRyKQogewogCXBnZF90ICpwZ2QgPSBwZ2Rfb2Zmc2V0X2soYWRkcik7Ci0JcHVkX3Qg
KnB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwlwNGRfdCAqcDRkID0gcDRkX29mZnNldChw
Z2QsIGFkZHIpOworCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgYWRkcik7CiAJcG1kX3Qg
KnBtZCA9IHBtZF9vZmZzZXQocHVkLCBhZGRyKTsKIAogCXJldHVybiBwbWQ7CkBAIC04MjcsMTIg
KzgyOCwxMiBAQCBzdGF0aWMgdm9pZCBfX2luaXQgYWxsb2NfaW5pdF9wbWQocHVkX3QgKnB1ZCwg
dW5zaWduZWQgbG9uZyBhZGRyLAogCX0gd2hpbGUgKHBtZCsrLCBhZGRyID0gbmV4dCwgYWRkciAh
PSBlbmQpOwogfQogCi1zdGF0aWMgdm9pZCBfX2luaXQgYWxsb2NfaW5pdF9wdWQocGdkX3QgKnBn
ZCwgdW5zaWduZWQgbG9uZyBhZGRyLAorc3RhdGljIHZvaWQgX19pbml0IGFsbG9jX2luaXRfcHVk
KHA0ZF90ICpwNGQsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAkJCQkgIHVuc2lnbmVkIGxvbmcgZW5k
LCBwaHlzX2FkZHJfdCBwaHlzLAogCQkJCSAgY29uc3Qgc3RydWN0IG1lbV90eXBlICp0eXBlLAog
CQkJCSAgdm9pZCAqKCphbGxvYykodW5zaWduZWQgbG9uZyBzeiksIGJvb2wgbmcpCiB7Ci0JcHVk
X3QgKnB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwlwdWRfdCAqcHVkID0gcHVkX29mZnNl
dChwNGQsIGFkZHIpOwogCXVuc2lnbmVkIGxvbmcgbmV4dDsKIAogCWRvIHsKQEAgLTg0Miw2ICs4
NDMsMjEgQEAgc3RhdGljIHZvaWQgX19pbml0IGFsbG9jX2luaXRfcHVkKHBnZF90ICpwZ2QsIHVu
c2lnbmVkIGxvbmcgYWRkciwKIAl9IHdoaWxlIChwdWQrKywgYWRkciA9IG5leHQsIGFkZHIgIT0g
ZW5kKTsKIH0KIAorc3RhdGljIHZvaWQgX19pbml0IGFsbG9jX2luaXRfcDRkKHBnZF90ICpwZ2Qs
IHVuc2lnbmVkIGxvbmcgYWRkciwKKwkJCQkgIHVuc2lnbmVkIGxvbmcgZW5kLCBwaHlzX2FkZHJf
dCBwaHlzLAorCQkJCSAgY29uc3Qgc3RydWN0IG1lbV90eXBlICp0eXBlLAorCQkJCSAgdm9pZCAq
KCphbGxvYykodW5zaWduZWQgbG9uZyBzeiksIGJvb2wgbmcpCit7CisJcDRkX3QgKnA0ZCA9IHA0
ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwl1bnNpZ25lZCBsb25nIG5leHQ7CisKKwlkbyB7CisJCW5l
eHQgPSBwNGRfYWRkcl9lbmQoYWRkciwgZW5kKTsKKwkJYWxsb2NfaW5pdF9wdWQocDRkLCBhZGRy
LCBuZXh0LCBwaHlzLCB0eXBlLCBhbGxvYywgbmcpOworCQlwaHlzICs9IG5leHQgLSBhZGRyOwor
CX0gd2hpbGUgKHA0ZCsrLCBhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQpOworfQorCiAjaWZuZGVm
IENPTkZJR19BUk1fTFBBRQogc3RhdGljIHZvaWQgX19pbml0IGNyZWF0ZV8zNmJpdF9tYXBwaW5n
KHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLAogCQkJCQlzdHJ1Y3QgbWFwX2Rlc2MgKm1kLApAQCAtODg5
LDcgKzkwNSw4IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBjcmVhdGVfMzZiaXRfbWFwcGluZyhzdHJ1
Y3QgbW1fc3RydWN0ICptbSwKIAlwZ2QgPSBwZ2Rfb2Zmc2V0KG1tLCBhZGRyKTsKIAllbmQgPSBh
ZGRyICsgbGVuZ3RoOwogCWRvIHsKLQkJcHVkX3QgKnB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRy
KTsKKwkJcDRkX3QgKnA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwkJcHVkX3QgKnB1ZCA9
IHB1ZF9vZmZzZXQocDRkLCBhZGRyKTsKIAkJcG1kX3QgKnBtZCA9IHBtZF9vZmZzZXQocHVkLCBh
ZGRyKTsKIAkJaW50IGk7CiAKQEAgLTk0MCw3ICs5NTcsNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQg
X19jcmVhdGVfbWFwcGluZyhzdHJ1Y3QgbW1fc3RydWN0ICptbSwgc3RydWN0IG1hcF9kZXNjICpt
ZCwKIAlkbyB7CiAJCXVuc2lnbmVkIGxvbmcgbmV4dCA9IHBnZF9hZGRyX2VuZChhZGRyLCBlbmQp
OwogCi0JCWFsbG9jX2luaXRfcHVkKHBnZCwgYWRkciwgbmV4dCwgcGh5cywgdHlwZSwgYWxsb2Ms
IG5nKTsKKwkJYWxsb2NfaW5pdF9wNGQocGdkLCBhZGRyLCBuZXh0LCBwaHlzLCB0eXBlLCBhbGxv
YywgbmcpOwogCiAJCXBoeXMgKz0gbmV4dCAtIGFkZHI7CiAJCWFkZHIgPSBuZXh0OwpAQCAtOTc2
LDcgKzk5MywxMyBAQCB2b2lkIF9faW5pdCBjcmVhdGVfbWFwcGluZ19sYXRlKHN0cnVjdCBtbV9z
dHJ1Y3QgKm1tLCBzdHJ1Y3QgbWFwX2Rlc2MgKm1kLAogCQkJCWJvb2wgbmcpCiB7CiAjaWZkZWYg
Q09ORklHX0FSTV9MUEFFCi0JcHVkX3QgKnB1ZCA9IHB1ZF9hbGxvYyhtbSwgcGdkX29mZnNldCht
bSwgbWQtPnZpcnR1YWwpLCBtZC0+dmlydHVhbCk7CisJcDRkX3QgKnA0ZDsKKwlwdWRfdCAqcHVk
OworCisJcDRkID0gcDRkX2FsbG9jKG1tLCBwZ2Rfb2Zmc2V0KG1tLCBtZC0+dmlydHVhbCksIG1k
LT52aXJ0dWFsKTsKKwlpZiAoIVdBUk5fT04oIXA0ZCkpCisJCXJldHVybjsKKwlwdWQgPSBwdWRf
YWxsb2MobW0sIHA0ZCwgbWQtPnZpcnR1YWwpOwogCWlmIChXQVJOX09OKCFwdWQpKQogCQlyZXR1
cm47CiAJcG1kX2FsbG9jKG1tLCBwdWQsIDApOwpkaWZmIC0tZ2l0IGEvYXJjaC9hcm0vbW0vcGdk
LmMgYi9hcmNoL2FybS9tbS9wZ2QuYwppbmRleCA0NzhiZDJjNmFhNTAuLmM1ZTFiMjcwNDZhOCAx
MDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vcGdkLmMKKysrIGIvYXJjaC9hcm0vbW0vcGdkLmMKQEAg
LTMwLDYgKzMwLDcgQEAKIHBnZF90ICpwZ2RfYWxsb2Moc3RydWN0IG1tX3N0cnVjdCAqbW0pCiB7
CiAJcGdkX3QgKm5ld19wZ2QsICppbml0X3BnZDsKKwlwNGRfdCAqbmV3X3A0ZCwgKmluaXRfcDRk
OwogCXB1ZF90ICpuZXdfcHVkLCAqaW5pdF9wdWQ7CiAJcG1kX3QgKm5ld19wbWQsICppbml0X3Bt
ZDsKIAlwdGVfdCAqbmV3X3B0ZSwgKmluaXRfcHRlOwpAQCAtNTMsOCArNTQsMTIgQEAgcGdkX3Qg
KnBnZF9hbGxvYyhzdHJ1Y3QgbW1fc3RydWN0ICptbSkKIAkvKgogCSAqIEFsbG9jYXRlIFBNRCB0
YWJsZSBmb3IgbW9kdWxlcyBhbmQgcGttYXAgbWFwcGluZ3MuCiAJICovCi0JbmV3X3B1ZCA9IHB1
ZF9hbGxvYyhtbSwgbmV3X3BnZCArIHBnZF9pbmRleChNT0RVTEVTX1ZBRERSKSwKKwluZXdfcDRk
ID0gcDRkX2FsbG9jKG1tLCBuZXdfcGdkICsgcGdkX2luZGV4KE1PRFVMRVNfVkFERFIpLAogCQkJ
ICAgIE1PRFVMRVNfVkFERFIpOworCWlmICghbmV3X3A0ZCkKKwkJZ290byBub19wNGQ7CisKKwlu
ZXdfcHVkID0gcHVkX2FsbG9jKG1tLCBuZXdfcDRkLCBNT0RVTEVTX1ZBRERSKTsKIAlpZiAoIW5l
d19wdWQpCiAJCWdvdG8gbm9fcHVkOwogCkBAIC02OSw3ICs3NCwxMSBAQCBwZ2RfdCAqcGdkX2Fs
bG9jKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tKQogCQkgKiBjb250YWlucyB0aGUgbWFjaGluZSB2ZWN0
b3JzLiBUaGUgdmVjdG9ycyBhcmUgYWx3YXlzIGhpZ2gKIAkJICogd2l0aCBMUEFFLgogCQkgKi8K
LQkJbmV3X3B1ZCA9IHB1ZF9hbGxvYyhtbSwgbmV3X3BnZCwgMCk7CisJCW5ld19wNGQgPSBwNGRf
YWxsb2MobW0sIG5ld19wZ2QsIDApOworCQlpZiAoIW5ld19wNGQpCisJCQlnb3RvIG5vX3A0ZDsK
KworCQluZXdfcHVkID0gcHVkX2FsbG9jKG1tLCBuZXdfcDRkLCAwKTsKIAkJaWYgKCFuZXdfcHVk
KQogCQkJZ290byBub19wdWQ7CiAKQEAgLTkxLDcgKzEwMCw4IEBAIHBnZF90ICpwZ2RfYWxsb2Mo
c3RydWN0IG1tX3N0cnVjdCAqbW0pCiAJCXBtZF92YWwoKm5ld19wbWQpIHw9IFBNRF9ET01BSU4o
RE9NQUlOX1ZFQ1RPUlMpOwogI2VuZGlmCiAKLQkJaW5pdF9wdWQgPSBwdWRfb2Zmc2V0KGluaXRf
cGdkLCAwKTsKKwkJaW5pdF9wNGQgPSBwNGRfb2Zmc2V0KGluaXRfcGdkLCAwKTsKKwkJaW5pdF9w
dWQgPSBwdWRfb2Zmc2V0KGluaXRfcDRkLCAwKTsKIAkJaW5pdF9wbWQgPSBwbWRfb2Zmc2V0KGlu
aXRfcHVkLCAwKTsKIAkJaW5pdF9wdGUgPSBwdGVfb2Zmc2V0X21hcChpbml0X3BtZCwgMCk7CiAJ
CXNldF9wdGVfZXh0KG5ld19wdGUgKyAwLCBpbml0X3B0ZVswXSwgMCk7CkBAIC0xMDgsNiArMTE4
LDggQEAgcGdkX3QgKnBnZF9hbGxvYyhzdHJ1Y3QgbW1fc3RydWN0ICptbSkKIG5vX3BtZDoKIAlw
dWRfZnJlZShtbSwgbmV3X3B1ZCk7CiBub19wdWQ6CisJcDRkX2ZyZWUobW0sIG5ld19wNGQpOwor
bm9fcDRkOgogCV9fcGdkX2ZyZWUobmV3X3BnZCk7CiBub19wZ2Q6CiAJcmV0dXJuIE5VTEw7CkBA
IC0xMTYsNiArMTI4LDcgQEAgcGdkX3QgKnBnZF9hbGxvYyhzdHJ1Y3QgbW1fc3RydWN0ICptbSkK
IHZvaWQgcGdkX2ZyZWUoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHBnZF90ICpwZ2RfYmFzZSkKIHsK
IAlwZ2RfdCAqcGdkOworCXA0ZF90ICpwNGQ7CiAJcHVkX3QgKnB1ZDsKIAlwbWRfdCAqcG1kOwog
CXBndGFibGVfdCBwdGU7CkBAIC0xMjcsNyArMTQwLDExIEBAIHZvaWQgcGdkX2ZyZWUoc3RydWN0
IG1tX3N0cnVjdCAqbW0sIHBnZF90ICpwZ2RfYmFzZSkKIAlpZiAocGdkX25vbmVfb3JfY2xlYXJf
YmFkKHBnZCkpCiAJCWdvdG8gbm9fcGdkOwogCi0JcHVkID0gcHVkX29mZnNldChwZ2QsIDApOwor
CXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCAwKTsKKwlpZiAocDRkX25vbmVfb3JfY2xlYXJfYmFkKHA0
ZCkpCisJCWdvdG8gbm9fcDRkOworCisJcHVkID0gcHVkX29mZnNldChwNGQsIDApOwogCWlmIChw
dWRfbm9uZV9vcl9jbGVhcl9iYWQocHVkKSkKIAkJZ290byBub19wdWQ7CiAKQEAgLTE0NCw4ICsx
NjEsMTEgQEAgdm9pZCBwZ2RfZnJlZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgcGdkX3QgKnBnZF9i
YXNlKQogCXBtZF9mcmVlKG1tLCBwbWQpOwogCW1tX2RlY19ucl9wbWRzKG1tKTsKIG5vX3B1ZDoK
LQlwZ2RfY2xlYXIocGdkKTsKKwlwNGRfY2xlYXIocDRkKTsKIAlwdWRfZnJlZShtbSwgcHVkKTsK
K25vX3A0ZDoKKwlwZ2RfY2xlYXIocGdkKTsKKwlwNGRfZnJlZShtbSwgcDRkKTsKIG5vX3BnZDoK
ICNpZmRlZiBDT05GSUdfQVJNX0xQQUUKIAkvKgpAQCAtMTU2LDE1ICsxNzYsMjEgQEAgdm9pZCBw
Z2RfZnJlZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgcGdkX3QgKnBnZF9iYXNlKQogCQkJY29udGlu
dWU7CiAJCWlmIChwZ2RfdmFsKCpwZ2QpICYgTF9QR0RfU1dBUFBFUikKIAkJCWNvbnRpbnVlOwot
CQlwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgMCk7CisJCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCAwKTsK
KwkJaWYgKHA0ZF9ub25lX29yX2NsZWFyX2JhZChwNGQpKQorCQkJY29udGludWU7CisJCXB1ZCA9
IHB1ZF9vZmZzZXQocDRkLCAwKTsKIAkJaWYgKHB1ZF9ub25lX29yX2NsZWFyX2JhZChwdWQpKQog
CQkJY29udGludWU7CiAJCXBtZCA9IHBtZF9vZmZzZXQocHVkLCAwKTsKIAkJcHVkX2NsZWFyKHB1
ZCk7CiAJCXBtZF9mcmVlKG1tLCBwbWQpOwogCQltbV9kZWNfbnJfcG1kcyhtbSk7Ci0JCXBnZF9j
bGVhcihwZ2QpOworCQlwNGRfY2xlYXIocDRkKTsKIAkJcHVkX2ZyZWUobW0sIHB1ZCk7CisJCW1t
X2RlY19ucl9wdWRzKG1tKTsKKwkJcGdkX2NsZWFyKHBnZCk7CisJCXA0ZF9mcmVlKG1tLCBwNGQp
OwogCX0KICNlbmRpZgogCV9fcGdkX2ZyZWUocGdkX2Jhc2UpOwpkaWZmIC0tZ2l0IGEvYXJjaC9h
cm02NC9pbmNsdWRlL2FzbS9rdm1fbW11LmggYi9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL2t2bV9t
bXUuaAppbmRleCA1M2Q4NDZmMWJmZTcuLjFmOWJmMTlhYzU1MyAxMDA2NDQKLS0tIGEvYXJjaC9h
cm02NC9pbmNsdWRlL2FzbS9rdm1fbW11LmgKKysrIGIvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9r
dm1fbW11LmgKQEAgLTE3Miw4ICsxNzIsOCBAQCB2b2lkIGt2bV9jbGVhcl9oeXBfaWRtYXAodm9p
ZCk7CiAJX19wbWQoX19waHlzX3RvX3BtZF92YWwoX19wYShwdGVwKSkgfCBQTURfVFlQRV9UQUJM
RSkKICNkZWZpbmUga3ZtX21rX3B1ZChwbWRwKQkJCQkJXAogCV9fcHVkKF9fcGh5c190b19wdWRf
dmFsKF9fcGEocG1kcCkpIHwgUE1EX1RZUEVfVEFCTEUpCi0jZGVmaW5lIGt2bV9ta19wZ2QocHVk
cCkJCQkJCVwKLQlfX3BnZChfX3BoeXNfdG9fcGdkX3ZhbChfX3BhKHB1ZHApKSB8IFBVRF9UWVBF
X1RBQkxFKQorI2RlZmluZSBrdm1fbWtfcDRkKHBtZHApCQkJCQlcCisJX19wNGQoX19waHlzX3Rv
X3A0ZF92YWwoX19wYShwbWRwKSkgfCBQVURfVFlQRV9UQUJMRSkKIAogI2RlZmluZSBrdm1fc2V0
X3B1ZChwdWRwLCBwdWQpCQlzZXRfcHVkKHB1ZHAsIHB1ZCkKIApAQCAtMjk5LDYgKzI5OSwxMiBA
QCBzdGF0aWMgaW5saW5lIGJvb2wga3ZtX3MycHVkX3lvdW5nKHB1ZF90IHB1ZCkKICNkZWZpbmUg
aHlwX3B1ZF90YWJsZV9lbXB0eShwdWRwKSBrdm1fcGFnZV9lbXB0eShwdWRwKQogI2VuZGlmCiAK
KyNpZmRlZiBfX1BBR0VUQUJMRV9QNERfRk9MREVECisjZGVmaW5lIGh5cF9wNGRfdGFibGVfZW1w
dHkocDRkcCkgKDApCisjZWxzZQorI2RlZmluZSBoeXBfcDRkX3RhYmxlX2VtcHR5KHA0ZHApIGt2
bV9wYWdlX2VtcHR5KHA0ZHApCisjZW5kaWYKKwogc3RydWN0IGt2bTsKIAogI2RlZmluZSBrdm1f
Zmx1c2hfZGNhY2hlX3RvX3BvYyhhLGwpCV9fZmx1c2hfZGNhY2hlX2FyZWEoKGEpLCAobCkpCmRp
ZmYgLS1naXQgYS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3BnYWxsb2MuaCBiL2FyY2gvYXJtNjQv
aW5jbHVkZS9hc20vcGdhbGxvYy5oCmluZGV4IDE3MmQ3NmZhMDI0NS4uNThlOTM1ODNkZGI2IDEw
MDY0NAotLS0gYS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3BnYWxsb2MuaAorKysgYi9hcmNoL2Fy
bTY0L2luY2x1ZGUvYXNtL3BnYWxsb2MuaApAQCAtNzMsMTcgKzczLDE3IEBAIHN0YXRpYyBpbmxp
bmUgdm9pZCBwdWRfZnJlZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgcHVkX3QgKnB1ZHApCiAJZnJl
ZV9wYWdlKCh1bnNpZ25lZCBsb25nKXB1ZHApOwogfQogCi1zdGF0aWMgaW5saW5lIHZvaWQgX19w
Z2RfcG9wdWxhdGUocGdkX3QgKnBnZHAsIHBoeXNfYWRkcl90IHB1ZHAsIHBnZHZhbF90IHByb3Qp
CitzdGF0aWMgaW5saW5lIHZvaWQgX19wNGRfcG9wdWxhdGUocDRkX3QgKnA0ZHAsIHBoeXNfYWRk
cl90IHB1ZHAsIHA0ZHZhbF90IHByb3QpCiB7Ci0Jc2V0X3BnZChwZ2RwLCBfX3BnZChfX3BoeXNf
dG9fcGdkX3ZhbChwdWRwKSB8IHByb3QpKTsKKwlzZXRfcDRkKHA0ZHAsIF9fcDRkKF9fcGh5c190
b19wNGRfdmFsKHB1ZHApIHwgcHJvdCkpOwogfQogCi1zdGF0aWMgaW5saW5lIHZvaWQgcGdkX3Bv
cHVsYXRlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBwZ2RfdCAqcGdkcCwgcHVkX3QgKnB1ZHApCitz
dGF0aWMgaW5saW5lIHZvaWQgcDRkX3BvcHVsYXRlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBwNGRf
dCAqcDRkcCwgcHVkX3QgKnB1ZHApCiB7Ci0JX19wZ2RfcG9wdWxhdGUocGdkcCwgX19wYShwdWRw
KSwgUFVEX1RZUEVfVEFCTEUpOworCV9fcDRkX3BvcHVsYXRlKHA0ZHAsIF9fcGEocHVkcCksIFBV
RF9UWVBFX1RBQkxFKTsKIH0KICNlbHNlCi1zdGF0aWMgaW5saW5lIHZvaWQgX19wZ2RfcG9wdWxh
dGUocGdkX3QgKnBnZHAsIHBoeXNfYWRkcl90IHB1ZHAsIHBnZHZhbF90IHByb3QpCitzdGF0aWMg
aW5saW5lIHZvaWQgX19wNGRfcG9wdWxhdGUocDRkX3QgKnA0ZHAsIHBoeXNfYWRkcl90IHB1ZHAs
IHA0ZHZhbF90IHByb3QpCiB7CiAJQlVJTERfQlVHKCk7CiB9CmRpZmYgLS1naXQgYS9hcmNoL2Fy
bTY0L2luY2x1ZGUvYXNtL3BndGFibGUtdHlwZXMuaCBiL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20v
cGd0YWJsZS10eXBlcy5oCmluZGV4IGFjYjA3NTFhNjYwNi4uYjhmMTU4YWUyNTI3IDEwMDY0NAot
LS0gYS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3BndGFibGUtdHlwZXMuaAorKysgYi9hcmNoL2Fy
bTY0L2luY2x1ZGUvYXNtL3BndGFibGUtdHlwZXMuaApAQCAtMTQsNiArMTQsNyBAQAogdHlwZWRl
ZiB1NjQgcHRldmFsX3Q7CiB0eXBlZGVmIHU2NCBwbWR2YWxfdDsKIHR5cGVkZWYgdTY0IHB1ZHZh
bF90OwordHlwZWRlZiB1NjQgcDRkdmFsX3Q7CiB0eXBlZGVmIHU2NCBwZ2R2YWxfdDsKIAogLyoK
QEAgLTQ0LDEzICs0NSwxMSBAQCB0eXBlZGVmIHN0cnVjdCB7IHB0ZXZhbF90IHBncHJvdDsgfSBw
Z3Byb3RfdDsKICNkZWZpbmUgX19wZ3Byb3QoeCkJKChwZ3Byb3RfdCkgeyAoeCkgfSApCiAKICNp
ZiBDT05GSUdfUEdUQUJMRV9MRVZFTFMgPT0gMgotI2RlZmluZSBfX0FSQ0hfVVNFXzVMRVZFTF9I
QUNLCiAjaW5jbHVkZSA8YXNtLWdlbmVyaWMvcGd0YWJsZS1ub3BtZC5oPgogI2VsaWYgQ09ORklH
X1BHVEFCTEVfTEVWRUxTID09IDMKLSNkZWZpbmUgX19BUkNIX1VTRV81TEVWRUxfSEFDSwogI2lu
Y2x1ZGUgPGFzbS1nZW5lcmljL3BndGFibGUtbm9wdWQuaD4KICNlbGlmIENPTkZJR19QR1RBQkxF
X0xFVkVMUyA9PSA0Ci0jaW5jbHVkZSA8YXNtLWdlbmVyaWMvNWxldmVsLWZpeHVwLmg+CisjaW5j
bHVkZSA8YXNtLWdlbmVyaWMvcGd0YWJsZS1ub3A0ZC5oPgogI2VuZGlmCiAKICNlbmRpZgkvKiBf
X0FTTV9QR1RBQkxFX1RZUEVTX0ggKi8KZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQvaW5jbHVkZS9h
c20vcGd0YWJsZS5oIGIvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKaW5kZXggNTM4
Yzg1ZTYyZjg2Li5jMjNjNWE0ZTZkYzYgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtNjQvaW5jbHVkZS9h
c20vcGd0YWJsZS5oCisrKyBiL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20vcGd0YWJsZS5oCkBAIC0y
OTgsNiArMjk4LDExIEBAIHN0YXRpYyBpbmxpbmUgcHRlX3QgcGdkX3B0ZShwZ2RfdCBwZ2QpCiAJ
cmV0dXJuIF9fcHRlKHBnZF92YWwocGdkKSk7CiB9CiAKK3N0YXRpYyBpbmxpbmUgcHRlX3QgcDRk
X3B0ZShwNGRfdCBwNGQpCit7CisJcmV0dXJuIF9fcHRlKHA0ZF92YWwocDRkKSk7Cit9CisKIHN0
YXRpYyBpbmxpbmUgcHRlX3QgcHVkX3B0ZShwdWRfdCBwdWQpCiB7CiAJcmV0dXJuIF9fcHRlKHB1
ZF92YWwocHVkKSk7CkBAIC00MDEsNiArNDA2LDkgQEAgc3RhdGljIGlubGluZSBwbWRfdCBwbWRf
bWtkZXZtYXAocG1kX3QgcG1kKQogCiAjZGVmaW5lIHNldF9wbWRfYXQobW0sIGFkZHIsIHBtZHAs
IHBtZCkJc2V0X3B0ZV9hdChtbSwgYWRkciwgKHB0ZV90ICopcG1kcCwgcG1kX3B0ZShwbWQpKQog
CisjZGVmaW5lIF9fcDRkX3RvX3BoeXMocDRkKQlfX3B0ZV90b19waHlzKHA0ZF9wdGUocDRkKSkK
KyNkZWZpbmUgX19waHlzX3RvX3A0ZF92YWwocGh5cykJX19waHlzX3RvX3B0ZV92YWwocGh5cykK
KwogI2RlZmluZSBfX3BnZF90b19waHlzKHBnZCkJX19wdGVfdG9fcGh5cyhwZ2RfcHRlKHBnZCkp
CiAjZGVmaW5lIF9fcGh5c190b19wZ2RfdmFsKHBoeXMpCV9fcGh5c190b19wdGVfdmFsKHBoeXMp
CiAKQEAgLTU4OCw0OSArNTk2LDUwIEBAIHN0YXRpYyBpbmxpbmUgcGh5c19hZGRyX3QgcHVkX3Bh
Z2VfcGFkZHIocHVkX3QgcHVkKQogCiAjZGVmaW5lIHB1ZF9FUlJPUihwdWQpCQlfX3B1ZF9lcnJv
cihfX0ZJTEVfXywgX19MSU5FX18sIHB1ZF92YWwocHVkKSkKIAotI2RlZmluZSBwZ2Rfbm9uZShw
Z2QpCQkoIXBnZF92YWwocGdkKSkKLSNkZWZpbmUgcGdkX2JhZChwZ2QpCQkoIShwZ2RfdmFsKHBn
ZCkgJiAyKSkKLSNkZWZpbmUgcGdkX3ByZXNlbnQocGdkKQkocGdkX3ZhbChwZ2QpKQorI2RlZmlu
ZSBwNGRfbm9uZShwNGQpCQkoIXA0ZF92YWwocDRkKSkKKyNkZWZpbmUgcDRkX2JhZChwNGQpCQko
IShwNGRfdmFsKHA0ZCkgJiAyKSkKKyNkZWZpbmUgcDRkX3ByZXNlbnQocDRkKQkocDRkX3ZhbChw
NGQpKQogCi1zdGF0aWMgaW5saW5lIHZvaWQgc2V0X3BnZChwZ2RfdCAqcGdkcCwgcGdkX3QgcGdk
KQorc3RhdGljIGlubGluZSB2b2lkIHNldF9wNGQocDRkX3QgKnA0ZHAsIHA0ZF90IHA0ZCkKIHsK
LQlpZiAoaW5fc3dhcHBlcl9wZ2RpcihwZ2RwKSkgewotCQlzZXRfc3dhcHBlcl9wZ2QocGdkcCwg
cGdkKTsKKwlpZiAoaW5fc3dhcHBlcl9wZ2RpcihwNGRwKSkgeworCQlzZXRfc3dhcHBlcl9wZ2Qo
KHBnZF90ICopcDRkcCwgX19wZ2QocDRkX3ZhbChwNGQpKSk7CiAJCXJldHVybjsKIAl9CiAKLQlX
UklURV9PTkNFKCpwZ2RwLCBwZ2QpOworCVdSSVRFX09OQ0UoKnA0ZHAsIHA0ZCk7CiAJZHNiKGlz
aHN0KTsKIAlpc2IoKTsKIH0KIAotc3RhdGljIGlubGluZSB2b2lkIHBnZF9jbGVhcihwZ2RfdCAq
cGdkcCkKK3N0YXRpYyBpbmxpbmUgdm9pZCBwNGRfY2xlYXIocDRkX3QgKnA0ZHApCiB7Ci0Jc2V0
X3BnZChwZ2RwLCBfX3BnZCgwKSk7CisJc2V0X3A0ZChwNGRwLCBfX3A0ZCgwKSk7CiB9CiAKLXN0
YXRpYyBpbmxpbmUgcGh5c19hZGRyX3QgcGdkX3BhZ2VfcGFkZHIocGdkX3QgcGdkKQorc3RhdGlj
IGlubGluZSBwaHlzX2FkZHJfdCBwNGRfcGFnZV9wYWRkcihwNGRfdCBwNGQpCiB7Ci0JcmV0dXJu
IF9fcGdkX3RvX3BoeXMocGdkKTsKKwlyZXR1cm4gX19wNGRfdG9fcGh5cyhwNGQpOwogfQogCiAv
KiBGaW5kIGFuIGVudHJ5IGluIHRoZSBmcnN0LWxldmVsIHBhZ2UgdGFibGUuICovCiAjZGVmaW5l
IHB1ZF9pbmRleChhZGRyKQkJKCgoYWRkcikgPj4gUFVEX1NISUZUKSAmIChQVFJTX1BFUl9QVUQg
LSAxKSkKIAotI2RlZmluZSBwdWRfb2Zmc2V0X3BoeXMoZGlyLCBhZGRyKQkocGdkX3BhZ2VfcGFk
ZHIoUkVBRF9PTkNFKCooZGlyKSkpICsgcHVkX2luZGV4KGFkZHIpICogc2l6ZW9mKHB1ZF90KSkK
KyNkZWZpbmUgcHVkX29mZnNldF9waHlzKGRpciwgYWRkcikJKHA0ZF9wYWdlX3BhZGRyKFJFQURf
T05DRSgqKGRpcikpKSArIHB1ZF9pbmRleChhZGRyKSAqIHNpemVvZihwdWRfdCkpCiAjZGVmaW5l
IHB1ZF9vZmZzZXQoZGlyLCBhZGRyKQkJKChwdWRfdCAqKV9fdmEocHVkX29mZnNldF9waHlzKChk
aXIpLCAoYWRkcikpKSkKIAogI2RlZmluZSBwdWRfc2V0X2ZpeG1hcChhZGRyKQkJKChwdWRfdCAq
KXNldF9maXhtYXBfb2Zmc2V0KEZJWF9QVUQsIGFkZHIpKQotI2RlZmluZSBwdWRfc2V0X2ZpeG1h
cF9vZmZzZXQocGdkLCBhZGRyKQlwdWRfc2V0X2ZpeG1hcChwdWRfb2Zmc2V0X3BoeXMocGdkLCBh
ZGRyKSkKKyNkZWZpbmUgcHVkX3NldF9maXhtYXBfb2Zmc2V0KHA0ZCwgYWRkcikJcHVkX3NldF9m
aXhtYXAocHVkX29mZnNldF9waHlzKHA0ZCwgYWRkcikpCiAjZGVmaW5lIHB1ZF9jbGVhcl9maXht
YXAoKQkJY2xlYXJfZml4bWFwKEZJWF9QVUQpCiAKLSNkZWZpbmUgcGdkX3BhZ2UocGdkKQkJcGZu
X3RvX3BhZ2UoX19waHlzX3RvX3BmbihfX3BnZF90b19waHlzKHBnZCkpKQorI2RlZmluZSBwNGRf
cGFnZShwNGQpCQlwZm5fdG9fcGFnZShfX3BoeXNfdG9fcGZuKF9fcDRkX3RvX3BoeXMocDRkKSkp
CiAKIC8qIHVzZSBPTkxZIGZvciBzdGF0aWNhbGx5IGFsbG9jYXRlZCB0cmFuc2xhdGlvbiB0YWJs
ZXMgKi8KICNkZWZpbmUgcHVkX29mZnNldF9raW1nKGRpcixhZGRyKQkoKHB1ZF90ICopX19waHlz
X3RvX2tpbWcocHVkX29mZnNldF9waHlzKChkaXIpLCAoYWRkcikpKSkKIAogI2Vsc2UKIAorI2Rl
ZmluZSBwNGRfcGFnZV9wYWRkcihwNGQpCSh7IEJVSUxEX0JVRygpOyAwO30pCiAjZGVmaW5lIHBn
ZF9wYWdlX3BhZGRyKHBnZCkJKHsgQlVJTERfQlVHKCk7IDA7fSkKIAogLyogTWF0Y2ggcHVkX29m
ZnNldCBmb2xkaW5nIGluIDxhc20vZ2VuZXJpYy9wZ3RhYmxlLW5vcHVkLmg+ICovCmRpZmYgLS1n
aXQgYS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3N0YWdlMl9wZ3RhYmxlLmggYi9hcmNoL2FybTY0
L2luY2x1ZGUvYXNtL3N0YWdlMl9wZ3RhYmxlLmgKaW5kZXggMzI2YWFjNjU4YjlkLi45YTM2NGFl
YWU1ZmIgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20vc3RhZ2UyX3BndGFibGUu
aAorKysgYi9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3N0YWdlMl9wZ3RhYmxlLmgKQEAgLTY4LDQx
ICs2OCw2NyBAQCBzdGF0aWMgaW5saW5lIGJvb2wga3ZtX3N0YWdlMl9oYXNfcHVkKHN0cnVjdCBr
dm0gKmt2bSkKICNkZWZpbmUgUzJfUFVEX1NJWkUJCQkoMVVMIDw8IFMyX1BVRF9TSElGVCkKICNk
ZWZpbmUgUzJfUFVEX01BU0sJCQkofihTMl9QVURfU0laRSAtIDEpKQogCi1zdGF0aWMgaW5saW5l
IGJvb2wgc3RhZ2UyX3BnZF9ub25lKHN0cnVjdCBrdm0gKmt2bSwgcGdkX3QgcGdkKQorI2RlZmlu
ZSBzdGFnZTJfcGdkX25vbmUoa3ZtLCBwZ2QpCQlwZ2Rfbm9uZShwZ2QpCisjZGVmaW5lIHN0YWdl
Ml9wZ2RfY2xlYXIoa3ZtLCBwZ2QpCQlwZ2RfY2xlYXIocGdkKQorI2RlZmluZSBzdGFnZTJfcGdk
X3ByZXNlbnQoa3ZtLCBwZ2QpCQlwZ2RfcHJlc2VudChwZ2QpCisjZGVmaW5lIHN0YWdlMl9wZ2Rf
cG9wdWxhdGUoa3ZtLCBwZ2QsIHA0ZCkJcGdkX3BvcHVsYXRlKE5VTEwsIHBnZCwgcDRkKQorCitz
dGF0aWMgaW5saW5lIHA0ZF90ICpzdGFnZTJfcDRkX29mZnNldChzdHJ1Y3Qga3ZtICprdm0sCisJ
CQkJICAgICAgIHBnZF90ICpwZ2QsIHVuc2lnbmVkIGxvbmcgYWRkcmVzcykKK3sKKwlyZXR1cm4g
cDRkX29mZnNldChwZ2QsIGFkZHJlc3MpOworfQorCitzdGF0aWMgaW5saW5lIHZvaWQgc3RhZ2Uy
X3A0ZF9mcmVlKHN0cnVjdCBrdm0gKmt2bSwgcDRkX3QgKnA0ZCkKK3sKK30KKworc3RhdGljIGlu
bGluZSBib29sIHN0YWdlMl9wNGRfdGFibGVfZW1wdHkoc3RydWN0IGt2bSAqa3ZtLCBwNGRfdCAq
cDRkcCkKK3sKKwlyZXR1cm4gZmFsc2U7Cit9CisKK3N0YXRpYyBpbmxpbmUgcGh5c19hZGRyX3Qg
c3RhZ2UyX3A0ZF9hZGRyX2VuZChzdHJ1Y3Qga3ZtICprdm0sCisJCQkJCSAgICAgIHBoeXNfYWRk
cl90IGFkZHIsIHBoeXNfYWRkcl90IGVuZCkKK3sKKwlyZXR1cm4gZW5kOworfQorCitzdGF0aWMg
aW5saW5lIGJvb2wgc3RhZ2UyX3A0ZF9ub25lKHN0cnVjdCBrdm0gKmt2bSwgcDRkX3QgcDRkKQog
ewogCWlmIChrdm1fc3RhZ2UyX2hhc19wdWQoa3ZtKSkKLQkJcmV0dXJuIHBnZF9ub25lKHBnZCk7
CisJCXJldHVybiBwNGRfbm9uZShwNGQpOwogCWVsc2UKIAkJcmV0dXJuIDA7CiB9CiAKLXN0YXRp
YyBpbmxpbmUgdm9pZCBzdGFnZTJfcGdkX2NsZWFyKHN0cnVjdCBrdm0gKmt2bSwgcGdkX3QgKnBn
ZHApCitzdGF0aWMgaW5saW5lIHZvaWQgc3RhZ2UyX3A0ZF9jbGVhcihzdHJ1Y3Qga3ZtICprdm0s
IHA0ZF90ICpwNGRwKQogewogCWlmIChrdm1fc3RhZ2UyX2hhc19wdWQoa3ZtKSkKLQkJcGdkX2Ns
ZWFyKHBnZHApOworCQlwNGRfY2xlYXIocDRkcCk7CiB9CiAKLXN0YXRpYyBpbmxpbmUgYm9vbCBz
dGFnZTJfcGdkX3ByZXNlbnQoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCBwZ2QpCitzdGF0aWMgaW5s
aW5lIGJvb2wgc3RhZ2UyX3A0ZF9wcmVzZW50KHN0cnVjdCBrdm0gKmt2bSwgcDRkX3QgcDRkKQog
ewogCWlmIChrdm1fc3RhZ2UyX2hhc19wdWQoa3ZtKSkKLQkJcmV0dXJuIHBnZF9wcmVzZW50KHBn
ZCk7CisJCXJldHVybiBwNGRfcHJlc2VudChwNGQpOwogCWVsc2UKIAkJcmV0dXJuIDE7CiB9CiAK
LXN0YXRpYyBpbmxpbmUgdm9pZCBzdGFnZTJfcGdkX3BvcHVsYXRlKHN0cnVjdCBrdm0gKmt2bSwg
cGdkX3QgKnBnZCwgcHVkX3QgKnB1ZCkKK3N0YXRpYyBpbmxpbmUgdm9pZCBzdGFnZTJfcDRkX3Bv
cHVsYXRlKHN0cnVjdCBrdm0gKmt2bSwgcDRkX3QgKnA0ZCwgcHVkX3QgKnB1ZCkKIHsKIAlpZiAo
a3ZtX3N0YWdlMl9oYXNfcHVkKGt2bSkpCi0JCXBnZF9wb3B1bGF0ZShOVUxMLCBwZ2QsIHB1ZCk7
CisJCXA0ZF9wb3B1bGF0ZShOVUxMLCBwNGQsIHB1ZCk7CiB9CiAKIHN0YXRpYyBpbmxpbmUgcHVk
X3QgKnN0YWdlMl9wdWRfb2Zmc2V0KHN0cnVjdCBrdm0gKmt2bSwKLQkJCQkgICAgICAgcGdkX3Qg
KnBnZCwgdW5zaWduZWQgbG9uZyBhZGRyZXNzKQorCQkJCSAgICAgICBwNGRfdCAqcDRkLCB1bnNp
Z25lZCBsb25nIGFkZHJlc3MpCiB7CiAJaWYgKGt2bV9zdGFnZTJfaGFzX3B1ZChrdm0pKQotCQly
ZXR1cm4gcHVkX29mZnNldChwZ2QsIGFkZHJlc3MpOworCQlyZXR1cm4gcHVkX29mZnNldChwNGQs
IGFkZHJlc3MpOwogCWVsc2UKLQkJcmV0dXJuIChwdWRfdCAqKXBnZDsKKwkJcmV0dXJuIChwdWRf
dCAqKXA0ZDsKIH0KIAogc3RhdGljIGlubGluZSB2b2lkIHN0YWdlMl9wdWRfZnJlZShzdHJ1Y3Qg
a3ZtICprdm0sIHB1ZF90ICpwdWQpCmRpZmYgLS1naXQgYS9hcmNoL2FybTY0L2tlcm5lbC9oaWJl
cm5hdGUuYyBiL2FyY2gvYXJtNjQva2VybmVsL2hpYmVybmF0ZS5jCmluZGV4IDU5MDk2M2M5YzYw
OS4uYTM3MGIxYWZlYWUwIDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L2tlcm5lbC9oaWJlcm5hdGUu
YworKysgYi9hcmNoL2FybTY0L2tlcm5lbC9oaWJlcm5hdGUuYwpAQCAtMTg3LDYgKzE4Nyw3IEBA
IHN0YXRpYyBpbnQgdHJhbnNfcGdkX21hcF9wYWdlKHBnZF90ICp0cmFuc19wZ2QsIHZvaWQgKnBh
Z2UsCiAJCSAgICAgICBwZ3Byb3RfdCBwZ3Byb3QpCiB7CiAJcGdkX3QgKnBnZHA7CisJcDRkX3Qg
KnA0ZHA7CiAJcHVkX3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7CiAJcHRlX3QgKnB0ZXA7CkBAIC0x
OTksNyArMjAwLDE1IEBAIHN0YXRpYyBpbnQgdHJhbnNfcGdkX21hcF9wYWdlKHBnZF90ICp0cmFu
c19wZ2QsIHZvaWQgKnBhZ2UsCiAJCXBnZF9wb3B1bGF0ZSgmaW5pdF9tbSwgcGdkcCwgcHVkcCk7
CiAJfQogCi0JcHVkcCA9IHB1ZF9vZmZzZXQocGdkcCwgZHN0X2FkZHIpOworCXA0ZHAgPSBwNGRf
b2Zmc2V0KHBnZHAsIGRzdF9hZGRyKTsKKwlpZiAocDRkX25vbmUoUkVBRF9PTkNFKCpwNGRwKSkp
IHsKKwkJcHVkcCA9ICh2b2lkICopZ2V0X3NhZmVfcGFnZShHRlBfQVRPTUlDKTsKKwkJaWYgKCFw
dWRwKQorCQkJcmV0dXJuIC1FTk9NRU07CisJCXA0ZF9wb3B1bGF0ZSgmaW5pdF9tbSwgcDRkcCwg
cHVkcCk7CisJfQorCisJcHVkcCA9IHB1ZF9vZmZzZXQocDRkcCwgZHN0X2FkZHIpOwogCWlmIChw
dWRfbm9uZShSRUFEX09OQ0UoKnB1ZHApKSkgewogCQlwbWRwID0gKHZvaWQgKilnZXRfc2FmZV9w
YWdlKEdGUF9BVE9NSUMpOwogCQlpZiAoIXBtZHApCkBAIC00MjIsNyArNDMxLDcgQEAgc3RhdGlj
IGludCBjb3B5X3BtZChwdWRfdCAqZHN0X3B1ZHAsIHB1ZF90ICpzcmNfcHVkcCwgdW5zaWduZWQg
bG9uZyBzdGFydCwKIAlyZXR1cm4gMDsKIH0KIAotc3RhdGljIGludCBjb3B5X3B1ZChwZ2RfdCAq
ZHN0X3BnZHAsIHBnZF90ICpzcmNfcGdkcCwgdW5zaWduZWQgbG9uZyBzdGFydCwKK3N0YXRpYyBp
bnQgY29weV9wdWQocDRkX3QgKmRzdF9wNGRwLCBwNGRfdCAqc3JjX3A0ZHAsIHVuc2lnbmVkIGxv
bmcgc3RhcnQsCiAJCSAgICB1bnNpZ25lZCBsb25nIGVuZCkKIHsKIAlwdWRfdCAqZHN0X3B1ZHA7
CkBAIC00MzAsMTUgKzQzOSwxNSBAQCBzdGF0aWMgaW50IGNvcHlfcHVkKHBnZF90ICpkc3RfcGdk
cCwgcGdkX3QgKnNyY19wZ2RwLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAogCXVuc2lnbmVkIGxvbmcg
bmV4dDsKIAl1bnNpZ25lZCBsb25nIGFkZHIgPSBzdGFydDsKIAotCWlmIChwZ2Rfbm9uZShSRUFE
X09OQ0UoKmRzdF9wZ2RwKSkpIHsKKwlpZiAocDRkX25vbmUoUkVBRF9PTkNFKCpkc3RfcDRkcCkp
KSB7CiAJCWRzdF9wdWRwID0gKHB1ZF90ICopZ2V0X3NhZmVfcGFnZShHRlBfQVRPTUlDKTsKIAkJ
aWYgKCFkc3RfcHVkcCkKIAkJCXJldHVybiAtRU5PTUVNOwotCQlwZ2RfcG9wdWxhdGUoJmluaXRf
bW0sIGRzdF9wZ2RwLCBkc3RfcHVkcCk7CisJCXA0ZF9wb3B1bGF0ZSgmaW5pdF9tbSwgZHN0X3A0
ZHAsIGRzdF9wdWRwKTsKIAl9Ci0JZHN0X3B1ZHAgPSBwdWRfb2Zmc2V0KGRzdF9wZ2RwLCBzdGFy
dCk7CisJZHN0X3B1ZHAgPSBwdWRfb2Zmc2V0KGRzdF9wNGRwLCBzdGFydCk7CiAKLQlzcmNfcHVk
cCA9IHB1ZF9vZmZzZXQoc3JjX3BnZHAsIHN0YXJ0KTsKKwlzcmNfcHVkcCA9IHB1ZF9vZmZzZXQo
c3JjX3A0ZHAsIHN0YXJ0KTsKIAlkbyB7CiAJCXB1ZF90IHB1ZCA9IFJFQURfT05DRSgqc3JjX3B1
ZHApOwogCkBAIC00NTcsNiArNDY2LDI3IEBAIHN0YXRpYyBpbnQgY29weV9wdWQocGdkX3QgKmRz
dF9wZ2RwLCBwZ2RfdCAqc3JjX3BnZHAsIHVuc2lnbmVkIGxvbmcgc3RhcnQsCiAJcmV0dXJuIDA7
CiB9CiAKK3N0YXRpYyBpbnQgY29weV9wNGQocGdkX3QgKmRzdF9wZ2RwLCBwZ2RfdCAqc3JjX3Bn
ZHAsIHVuc2lnbmVkIGxvbmcgc3RhcnQsCisJCSAgICB1bnNpZ25lZCBsb25nIGVuZCkKK3sKKwlw
NGRfdCAqZHN0X3A0ZHA7CisJcDRkX3QgKnNyY19wNGRwOworCXVuc2lnbmVkIGxvbmcgbmV4dDsK
Kwl1bnNpZ25lZCBsb25nIGFkZHIgPSBzdGFydDsKKworCWRzdF9wNGRwID0gcDRkX29mZnNldChk
c3RfcGdkcCwgc3RhcnQpOworCXNyY19wNGRwID0gcDRkX29mZnNldChzcmNfcGdkcCwgc3RhcnQp
OworCWRvIHsKKwkJbmV4dCA9IHA0ZF9hZGRyX2VuZChhZGRyLCBlbmQpOworCQlpZiAocDRkX25v
bmUoUkVBRF9PTkNFKCpzcmNfcDRkcCkpKQorCQkJY29udGludWU7CisJCWlmIChjb3B5X3B1ZChk
c3RfcDRkcCwgc3JjX3A0ZHAsIGFkZHIsIG5leHQpKQorCQkJcmV0dXJuIC1FTk9NRU07CisJfSB3
aGlsZSAoZHN0X3A0ZHArKywgc3JjX3A0ZHArKywgYWRkciA9IG5leHQsIGFkZHIgIT0gZW5kKTsK
KworCXJldHVybiAwOworfQorCiBzdGF0aWMgaW50IGNvcHlfcGFnZV90YWJsZXMocGdkX3QgKmRz
dF9wZ2RwLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAogCQkJICAgIHVuc2lnbmVkIGxvbmcgZW5kKQog
ewpAQCAtNDY5LDcgKzQ5OSw3IEBAIHN0YXRpYyBpbnQgY29weV9wYWdlX3RhYmxlcyhwZ2RfdCAq
ZHN0X3BnZHAsIHVuc2lnbmVkIGxvbmcgc3RhcnQsCiAJCW5leHQgPSBwZ2RfYWRkcl9lbmQoYWRk
ciwgZW5kKTsKIAkJaWYgKHBnZF9ub25lKFJFQURfT05DRSgqc3JjX3BnZHApKSkKIAkJCWNvbnRp
bnVlOwotCQlpZiAoY29weV9wdWQoZHN0X3BnZHAsIHNyY19wZ2RwLCBhZGRyLCBuZXh0KSkKKwkJ
aWYgKGNvcHlfcDRkKGRzdF9wZ2RwLCBzcmNfcGdkcCwgYWRkciwgbmV4dCkpCiAJCQlyZXR1cm4g
LUVOT01FTTsKIAl9IHdoaWxlIChkc3RfcGdkcCsrLCBzcmNfcGdkcCsrLCBhZGRyID0gbmV4dCwg
YWRkciAhPSBlbmQpOwogCmRpZmYgLS1naXQgYS9hcmNoL2FybTY0L21tL2ZhdWx0LmMgYi9hcmNo
L2FybTY0L21tL2ZhdWx0LmMKaW5kZXggODU1NjZkMzI5NThmLi5mYTZlNzk2MGY3ZDEgMTAwNjQ0
Ci0tLSBhL2FyY2gvYXJtNjQvbW0vZmF1bHQuYworKysgYi9hcmNoL2FybTY0L21tL2ZhdWx0LmMK
QEAgLTE0NSw2ICsxNDUsNyBAQCBzdGF0aWMgdm9pZCBzaG93X3B0ZSh1bnNpZ25lZCBsb25nIGFk
ZHIpCiAJcHJfYWxlcnQoIlslMDE2bHhdIHBnZD0lMDE2bGx4IiwgYWRkciwgcGdkX3ZhbChwZ2Qp
KTsKIAogCWRvIHsKKwkJcDRkX3QgKnA0ZHAsIHA0ZDsKIAkJcHVkX3QgKnB1ZHAsIHB1ZDsKIAkJ
cG1kX3QgKnBtZHAsIHBtZDsKIAkJcHRlX3QgKnB0ZXAsIHB0ZTsKQEAgLTE1Miw3ICsxNTMsMTMg
QEAgc3RhdGljIHZvaWQgc2hvd19wdGUodW5zaWduZWQgbG9uZyBhZGRyKQogCQlpZiAocGdkX25v
bmUocGdkKSB8fCBwZ2RfYmFkKHBnZCkpCiAJCQlicmVhazsKIAotCQlwdWRwID0gcHVkX29mZnNl
dChwZ2RwLCBhZGRyKTsKKwkJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgYWRkcik7CisJCXA0ZCA9
IFJFQURfT05DRSgqcDRkcCk7CisJCXByX2NvbnQoIiwgcDRkPSUwMTZsbHgiLCBwNGRfdmFsKHA0
ZCkpOworCQlpZiAocDRkX25vbmUocDRkKSB8fCBwNGRfYmFkKHA0ZCkpCisJCQlicmVhazsKKwor
CQlwdWRwID0gcHVkX29mZnNldChwNGRwLCBhZGRyKTsKIAkJcHVkID0gUkVBRF9PTkNFKCpwdWRw
KTsKIAkJcHJfY29udCgiLCBwdWQ9JTAxNmxseCIsIHB1ZF92YWwocHVkKSk7CiAJCWlmIChwdWRf
bm9uZShwdWQpIHx8IHB1ZF9iYWQocHVkKSkKZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQvbW0vaHVn
ZXRsYnBhZ2UuYyBiL2FyY2gvYXJtNjQvbW0vaHVnZXRsYnBhZ2UuYwppbmRleCBiYmViNmE1YTZi
YTYuLmI4YTlmMjZmMzc5MCAxMDA2NDQKLS0tIGEvYXJjaC9hcm02NC9tbS9odWdldGxicGFnZS5j
CisrKyBiL2FyY2gvYXJtNjQvbW0vaHVnZXRsYnBhZ2UuYwpAQCAtNjcsMTEgKzY3LDEzIEBAIHN0
YXRpYyBpbnQgZmluZF9udW1fY29udGlnKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBs
b25nIGFkZHIsCiAJCQkgICBwdGVfdCAqcHRlcCwgc2l6ZV90ICpwZ3NpemUpCiB7CiAJcGdkX3Qg
KnBnZHAgPSBwZ2Rfb2Zmc2V0KG1tLCBhZGRyKTsKKwlwNGRfdCAqcDRkcDsKIAlwdWRfdCAqcHVk
cDsKIAlwbWRfdCAqcG1kcDsKIAogCSpwZ3NpemUgPSBQQUdFX1NJWkU7Ci0JcHVkcCA9IHB1ZF9v
ZmZzZXQocGdkcCwgYWRkcik7CisJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgYWRkcik7CisJcHVk
cCA9IHB1ZF9vZmZzZXQocDRkcCwgYWRkcik7CiAJcG1kcCA9IHBtZF9vZmZzZXQocHVkcCwgYWRk
cik7CiAJaWYgKChwdGVfdCAqKXBtZHAgPT0gcHRlcCkgewogCQkqcGdzaXplID0gUE1EX1NJWkU7
CkBAIC0yMTcsMTIgKzIxOSwxNCBAQCBwdGVfdCAqaHVnZV9wdGVfYWxsb2Moc3RydWN0IG1tX3N0
cnVjdCAqbW0sCiAJCSAgICAgIHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBzeikK
IHsKIAlwZ2RfdCAqcGdkcDsKKwlwNGRfdCAqcDRkcDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAq
cG1kcDsKIAlwdGVfdCAqcHRlcCA9IE5VTEw7CiAKIAlwZ2RwID0gcGdkX29mZnNldChtbSwgYWRk
cik7Ci0JcHVkcCA9IHB1ZF9hbGxvYyhtbSwgcGdkcCwgYWRkcik7CisJcDRkcCA9IHA0ZF9vZmZz
ZXQocGdkcCwgYWRkcik7CisJcHVkcCA9IHB1ZF9hbGxvYyhtbSwgcDRkcCwgYWRkcik7CiAJaWYg
KCFwdWRwKQogCQlyZXR1cm4gTlVMTDsKIApAQCAtMjU5LDYgKzI2Myw3IEBAIHB0ZV90ICpodWdl
X3B0ZV9vZmZzZXQoc3RydWN0IG1tX3N0cnVjdCAqbW0sCiAJCSAgICAgICB1bnNpZ25lZCBsb25n
IGFkZHIsIHVuc2lnbmVkIGxvbmcgc3opCiB7CiAJcGdkX3QgKnBnZHA7CisJcDRkX3QgKnA0ZHA7
CiAJcHVkX3QgKnB1ZHAsIHB1ZDsKIAlwbWRfdCAqcG1kcCwgcG1kOwogCkBAIC0yNjYsNyArMjcx
LDExIEBAIHB0ZV90ICpodWdlX3B0ZV9vZmZzZXQoc3RydWN0IG1tX3N0cnVjdCAqbW0sCiAJaWYg
KCFwZ2RfcHJlc2VudChSRUFEX09OQ0UoKnBnZHApKSkKIAkJcmV0dXJuIE5VTEw7CiAKLQlwdWRw
ID0gcHVkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRy
KTsKKwlpZiAoIXA0ZF9wcmVzZW50KFJFQURfT05DRSgqcDRkcCkpKQorCQlyZXR1cm4gTlVMTDsK
KworCXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIGFkZHIpOwogCXB1ZCA9IFJFQURfT05DRSgqcHVk
cCk7CiAJaWYgKHN6ICE9IFBVRF9TSVpFICYmIHB1ZF9ub25lKHB1ZCkpCiAJCXJldHVybiBOVUxM
OwpkaWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9tbS9rYXNhbl9pbml0LmMgYi9hcmNoL2FybTY0L21t
L2thc2FuX2luaXQuYwppbmRleCBmODdhMzI0ODRlYTguLjIzMzk4MTFmMzE3YiAxMDA2NDQKLS0t
IGEvYXJjaC9hcm02NC9tbS9rYXNhbl9pbml0LmMKKysrIGIvYXJjaC9hcm02NC9tbS9rYXNhbl9p
bml0LmMKQEAgLTg0LDE3ICs4NCwxNyBAQCBzdGF0aWMgcG1kX3QgKl9faW5pdCBrYXNhbl9wbWRf
b2Zmc2V0KHB1ZF90ICpwdWRwLCB1bnNpZ25lZCBsb25nIGFkZHIsIGludCBub2RlLAogCXJldHVy
biBlYXJseSA/IHBtZF9vZmZzZXRfa2ltZyhwdWRwLCBhZGRyKSA6IHBtZF9vZmZzZXQocHVkcCwg
YWRkcik7CiB9CiAKLXN0YXRpYyBwdWRfdCAqX19pbml0IGthc2FuX3B1ZF9vZmZzZXQocGdkX3Qg
KnBnZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwgaW50IG5vZGUsCitzdGF0aWMgcHVkX3QgKl9faW5p
dCBrYXNhbl9wdWRfb2Zmc2V0KHA0ZF90ICpwNGRwLCB1bnNpZ25lZCBsb25nIGFkZHIsIGludCBu
b2RlLAogCQkJCSAgICAgIGJvb2wgZWFybHkpCiB7Ci0JaWYgKHBnZF9ub25lKFJFQURfT05DRSgq
cGdkcCkpKSB7CisJaWYgKHA0ZF9ub25lKFJFQURfT05DRSgqcDRkcCkpKSB7CiAJCXBoeXNfYWRk
cl90IHB1ZF9waHlzID0gZWFybHkgPwogCQkJCV9fcGFfc3ltYm9sKGthc2FuX2Vhcmx5X3NoYWRv
d19wdWQpCiAJCQkJCToga2FzYW5fYWxsb2NfemVyb2VkX3BhZ2Uobm9kZSk7Ci0JCV9fcGdkX3Bv
cHVsYXRlKHBnZHAsIHB1ZF9waHlzLCBQTURfVFlQRV9UQUJMRSk7CisJCV9fcDRkX3BvcHVsYXRl
KHA0ZHAsIHB1ZF9waHlzLCBQTURfVFlQRV9UQUJMRSk7CiAJfQogCi0JcmV0dXJuIGVhcmx5ID8g
cHVkX29mZnNldF9raW1nKHBnZHAsIGFkZHIpIDogcHVkX29mZnNldChwZ2RwLCBhZGRyKTsKKwly
ZXR1cm4gZWFybHkgPyBwdWRfb2Zmc2V0X2tpbWcocDRkcCwgYWRkcikgOiBwdWRfb2Zmc2V0KHA0
ZHAsIGFkZHIpOwogfQogCiBzdGF0aWMgdm9pZCBfX2luaXQga2FzYW5fcHRlX3BvcHVsYXRlKHBt
ZF90ICpwbWRwLCB1bnNpZ25lZCBsb25nIGFkZHIsCkBAIC0xMjYsMTEgKzEyNiwxMSBAQCBzdGF0
aWMgdm9pZCBfX2luaXQga2FzYW5fcG1kX3BvcHVsYXRlKHB1ZF90ICpwdWRwLCB1bnNpZ25lZCBs
b25nIGFkZHIsCiAJfSB3aGlsZSAocG1kcCsrLCBhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQgJiYg
cG1kX25vbmUoUkVBRF9PTkNFKCpwbWRwKSkpOwogfQogCi1zdGF0aWMgdm9pZCBfX2luaXQga2Fz
YW5fcHVkX3BvcHVsYXRlKHBnZF90ICpwZ2RwLCB1bnNpZ25lZCBsb25nIGFkZHIsCitzdGF0aWMg
dm9pZCBfX2luaXQga2FzYW5fcHVkX3BvcHVsYXRlKHA0ZF90ICpwNGRwLCB1bnNpZ25lZCBsb25n
IGFkZHIsCiAJCQkJICAgICAgdW5zaWduZWQgbG9uZyBlbmQsIGludCBub2RlLCBib29sIGVhcmx5
KQogewogCXVuc2lnbmVkIGxvbmcgbmV4dDsKLQlwdWRfdCAqcHVkcCA9IGthc2FuX3B1ZF9vZmZz
ZXQocGdkcCwgYWRkciwgbm9kZSwgZWFybHkpOworCXB1ZF90ICpwdWRwID0ga2FzYW5fcHVkX29m
ZnNldChwNGRwLCBhZGRyLCBub2RlLCBlYXJseSk7CiAKIAlkbyB7CiAJCW5leHQgPSBwdWRfYWRk
cl9lbmQoYWRkciwgZW5kKTsKQEAgLTEzOCw2ICsxMzgsMTggQEAgc3RhdGljIHZvaWQgX19pbml0
IGthc2FuX3B1ZF9wb3B1bGF0ZShwZ2RfdCAqcGdkcCwgdW5zaWduZWQgbG9uZyBhZGRyLAogCX0g
d2hpbGUgKHB1ZHArKywgYWRkciA9IG5leHQsIGFkZHIgIT0gZW5kICYmIHB1ZF9ub25lKFJFQURf
T05DRSgqcHVkcCkpKTsKIH0KIAorc3RhdGljIHZvaWQgX19pbml0IGthc2FuX3A0ZF9wb3B1bGF0
ZShwZ2RfdCAqcGdkcCwgdW5zaWduZWQgbG9uZyBhZGRyLAorCQkJCSAgICAgIHVuc2lnbmVkIGxv
bmcgZW5kLCBpbnQgbm9kZSwgYm9vbCBlYXJseSkKK3sKKwl1bnNpZ25lZCBsb25nIG5leHQ7CisJ
cDRkX3QgKnA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGFkZHIpOworCisJZG8geworCQluZXh0ID0g
cDRkX2FkZHJfZW5kKGFkZHIsIGVuZCk7CisJCWthc2FuX3B1ZF9wb3B1bGF0ZShwNGRwLCBhZGRy
LCBuZXh0LCBub2RlLCBlYXJseSk7CisJfSB3aGlsZSAocDRkcCsrLCBhZGRyID0gbmV4dCwgYWRk
ciAhPSBlbmQpOworfQorCiBzdGF0aWMgdm9pZCBfX2luaXQga2FzYW5fcGdkX3BvcHVsYXRlKHVu
c2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBlbmQsCiAJCQkJICAgICAgaW50IG5vZGUs
IGJvb2wgZWFybHkpCiB7CkBAIC0xNDcsNyArMTU5LDcgQEAgc3RhdGljIHZvaWQgX19pbml0IGth
c2FuX3BnZF9wb3B1bGF0ZSh1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgZW5kLAog
CXBnZHAgPSBwZ2Rfb2Zmc2V0X2soYWRkcik7CiAJZG8gewogCQluZXh0ID0gcGdkX2FkZHJfZW5k
KGFkZHIsIGVuZCk7Ci0JCWthc2FuX3B1ZF9wb3B1bGF0ZShwZ2RwLCBhZGRyLCBuZXh0LCBub2Rl
LCBlYXJseSk7CisJCWthc2FuX3A0ZF9wb3B1bGF0ZShwZ2RwLCBhZGRyLCBuZXh0LCBub2RlLCBl
YXJseSk7CiAJfSB3aGlsZSAocGdkcCsrLCBhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQpOwogfQog
CmRpZmYgLS1naXQgYS9hcmNoL2FybTY0L21tL21tdS5jIGIvYXJjaC9hcm02NC9tbS9tbXUuYwpp
bmRleCAxMjhmNzA4NTJiZjMuLmFkNGJlM2U4ZTBjMSAxMDA2NDQKLS0tIGEvYXJjaC9hcm02NC9t
bS9tbXUuYworKysgYi9hcmNoL2FybTY0L21tL21tdS5jCkBAIC0yODksMTggKzI4OSwxOSBAQCBz
dGF0aWMgdm9pZCBhbGxvY19pbml0X3B1ZChwZ2RfdCAqcGdkcCwgdW5zaWduZWQgbG9uZyBhZGRy
LCB1bnNpZ25lZCBsb25nIGVuZCwKIHsKIAl1bnNpZ25lZCBsb25nIG5leHQ7CiAJcHVkX3QgKnB1
ZHA7Ci0JcGdkX3QgcGdkID0gUkVBRF9PTkNFKCpwZ2RwKTsKKwlwNGRfdCAqcDRkcCA9IHA0ZF9v
ZmZzZXQocGdkcCwgYWRkcik7CisJcDRkX3QgcDRkID0gUkVBRF9PTkNFKCpwNGRwKTsKIAotCWlm
IChwZ2Rfbm9uZShwZ2QpKSB7CisJaWYgKHA0ZF9ub25lKHA0ZCkpIHsKIAkJcGh5c19hZGRyX3Qg
cHVkX3BoeXM7CiAJCUJVR19PTighcGd0YWJsZV9hbGxvYyk7CiAJCXB1ZF9waHlzID0gcGd0YWJs
ZV9hbGxvYyhQVURfU0hJRlQpOwotCQlfX3BnZF9wb3B1bGF0ZShwZ2RwLCBwdWRfcGh5cywgUFVE
X1RZUEVfVEFCTEUpOwotCQlwZ2QgPSBSRUFEX09OQ0UoKnBnZHApOworCQlfX3A0ZF9wb3B1bGF0
ZShwNGRwLCBwdWRfcGh5cywgUFVEX1RZUEVfVEFCTEUpOworCQlwNGQgPSBSRUFEX09OQ0UoKnA0
ZHApOwogCX0KLQlCVUdfT04ocGdkX2JhZChwZ2QpKTsKKwlCVUdfT04ocDRkX2JhZChwNGQpKTsK
IAotCXB1ZHAgPSBwdWRfc2V0X2ZpeG1hcF9vZmZzZXQocGdkcCwgYWRkcik7CisJcHVkcCA9IHB1
ZF9zZXRfZml4bWFwX29mZnNldChwNGRwLCBhZGRyKTsKIAlkbyB7CiAJCXB1ZF90IG9sZF9wdWQg
PSBSRUFEX09OQ0UoKnB1ZHApOwogCkBAIC02NDcsNiArNjQ4LDcgQEAgc3RhdGljIHZvaWQgX19p
bml0IG1hcF9rZXJuZWwocGdkX3QgKnBnZHApCiAJCQlSRUFEX09OQ0UoKnBnZF9vZmZzZXRfayhG
SVhBRERSX1NUQVJUKSkpOwogCX0gZWxzZSBpZiAoQ09ORklHX1BHVEFCTEVfTEVWRUxTID4gMykg
ewogCQlwZ2RfdCAqYm1fcGdkcDsKKwkJcDRkX3QgKmJtX3A0ZHA7CiAJCXB1ZF90ICpibV9wdWRw
OwogCQkvKgogCQkgKiBUaGUgZml4bWFwIHNoYXJlcyBpdHMgdG9wIGxldmVsIHBnZCBlbnRyeSB3
aXRoIHRoZSBrZXJuZWwKQEAgLTY1Niw3ICs2NTgsOCBAQCBzdGF0aWMgdm9pZCBfX2luaXQgbWFw
X2tlcm5lbChwZ2RfdCAqcGdkcCkKIAkJICovCiAJCUJVR19PTighSVNfRU5BQkxFRChDT05GSUdf
QVJNNjRfMTZLX1BBR0VTKSk7CiAJCWJtX3BnZHAgPSBwZ2Rfb2Zmc2V0X3JhdyhwZ2RwLCBGSVhB
RERSX1NUQVJUKTsKLQkJYm1fcHVkcCA9IHB1ZF9zZXRfZml4bWFwX29mZnNldChibV9wZ2RwLCBG
SVhBRERSX1NUQVJUKTsKKwkJYm1fcDRkcCA9IHA0ZF9vZmZzZXQoYm1fcGdkcCwgRklYQUREUl9T
VEFSVCk7CisJCWJtX3B1ZHAgPSBwdWRfc2V0X2ZpeG1hcF9vZmZzZXQoYm1fcDRkcCwgRklYQURE
Ul9TVEFSVCk7CiAJCXB1ZF9wb3B1bGF0ZSgmaW5pdF9tbSwgYm1fcHVkcCwgbG1fYWxpYXMoYm1f
cG1kKSk7CiAJCXB1ZF9jbGVhcl9maXhtYXAoKTsKIAl9IGVsc2UgewpAQCAtNjkwLDYgKzY5Myw3
IEBAIHZvaWQgX19pbml0IHBhZ2luZ19pbml0KHZvaWQpCiBpbnQga2Vybl9hZGRyX3ZhbGlkKHVu
c2lnbmVkIGxvbmcgYWRkcikKIHsKIAlwZ2RfdCAqcGdkcDsKKwlwNGRfdCAqcDRkcDsKIAlwdWRf
dCAqcHVkcCwgcHVkOwogCXBtZF90ICpwbWRwLCBwbWQ7CiAJcHRlX3QgKnB0ZXAsIHB0ZTsKQEAg
LTcwMSw3ICs3MDUsMTEgQEAgaW50IGtlcm5fYWRkcl92YWxpZCh1bnNpZ25lZCBsb25nIGFkZHIp
CiAJaWYgKHBnZF9ub25lKFJFQURfT05DRSgqcGdkcCkpKQogCQlyZXR1cm4gMDsKIAotCXB1ZHAg
PSBwdWRfb2Zmc2V0KHBnZHAsIGFkZHIpOworCXA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGFkZHIp
OworCWlmIChwNGRfbm9uZShSRUFEX09OQ0UoKnA0ZHApKSkKKwkJcmV0dXJuIDA7CisKKwlwdWRw
ID0gcHVkX29mZnNldChwNGRwLCBhZGRyKTsKIAlwdWQgPSBSRUFEX09OQ0UoKnB1ZHApOwogCWlm
IChwdWRfbm9uZShwdWQpKQogCQlyZXR1cm4gMDsKQEAgLTczOCw2ICs3NDYsNyBAQCBpbnQgX19t
ZW1pbml0IHZtZW1tYXBfcG9wdWxhdGUodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9u
ZyBlbmQsIGludCBub2RlLAogCXVuc2lnbmVkIGxvbmcgYWRkciA9IHN0YXJ0OwogCXVuc2lnbmVk
IGxvbmcgbmV4dDsKIAlwZ2RfdCAqcGdkcDsKKwlwNGRfdCAqcDRkcDsKIAlwdWRfdCAqcHVkcDsK
IAlwbWRfdCAqcG1kcDsKIApAQCAtNzQ4LDcgKzc1NywxMSBAQCBpbnQgX19tZW1pbml0IHZtZW1t
YXBfcG9wdWxhdGUodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBlbmQsIGludCBu
b2RlLAogCQlpZiAoIXBnZHApCiAJCQlyZXR1cm4gLUVOT01FTTsKIAotCQlwdWRwID0gdm1lbW1h
cF9wdWRfcG9wdWxhdGUocGdkcCwgYWRkciwgbm9kZSk7CisJCXA0ZHAgPSB2bWVtbWFwX3A0ZF9w
b3B1bGF0ZShwZ2RwLCBhZGRyLCBub2RlKTsKKwkJaWYgKCFwNGRwKQorCQkJcmV0dXJuIC1FTk9N
RU07CisKKwkJcHVkcCA9IHZtZW1tYXBfcHVkX3BvcHVsYXRlKHA0ZHAsIGFkZHIsIG5vZGUpOwog
CQlpZiAoIXB1ZHApCiAJCQlyZXR1cm4gLUVOT01FTTsKIApAQCAtNzc3LDExICs3OTAsMTIgQEAg
dm9pZCB2bWVtbWFwX2ZyZWUodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBlbmQs
CiBzdGF0aWMgaW5saW5lIHB1ZF90ICogZml4bWFwX3B1ZCh1bnNpZ25lZCBsb25nIGFkZHIpCiB7
CiAJcGdkX3QgKnBnZHAgPSBwZ2Rfb2Zmc2V0X2soYWRkcik7Ci0JcGdkX3QgcGdkID0gUkVBRF9P
TkNFKCpwZ2RwKTsKKwlwNGRfdCAqcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgYWRkcik7CisJcDRk
X3QgcDRkID0gUkVBRF9PTkNFKCpwNGRwKTsKIAotCUJVR19PTihwZ2Rfbm9uZShwZ2QpIHx8IHBn
ZF9iYWQocGdkKSk7CisJQlVHX09OKHA0ZF9ub25lKHA0ZCkgfHwgcDRkX2JhZChwNGQpKTsKIAot
CXJldHVybiBwdWRfb2Zmc2V0X2tpbWcocGdkcCwgYWRkcik7CisJcmV0dXJuIHB1ZF9vZmZzZXRf
a2ltZyhwNGRwLCBhZGRyKTsKIH0KIAogc3RhdGljIGlubGluZSBwbWRfdCAqIGZpeG1hcF9wbWQo
dW5zaWduZWQgbG9uZyBhZGRyKQpAQCAtODA3LDI1ICs4MjEsMjcgQEAgc3RhdGljIGlubGluZSBw
dGVfdCAqIGZpeG1hcF9wdGUodW5zaWduZWQgbG9uZyBhZGRyKQogICovCiB2b2lkIF9faW5pdCBl
YXJseV9maXhtYXBfaW5pdCh2b2lkKQogewotCXBnZF90ICpwZ2RwLCBwZ2Q7CisJcGdkX3QgKnBn
ZHA7CisJcDRkX3QgKnA0ZHAsIHA0ZDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAl1
bnNpZ25lZCBsb25nIGFkZHIgPSBGSVhBRERSX1NUQVJUOwogCiAJcGdkcCA9IHBnZF9vZmZzZXRf
ayhhZGRyKTsKLQlwZ2QgPSBSRUFEX09OQ0UoKnBnZHApOworCXA0ZHAgPSBwNGRfb2Zmc2V0KHBn
ZHAsIGFkZHIpOworCXA0ZCA9IFJFQURfT05DRSgqcDRkcCk7CiAJaWYgKENPTkZJR19QR1RBQkxF
X0xFVkVMUyA+IDMgJiYKLQkgICAgIShwZ2Rfbm9uZShwZ2QpIHx8IHBnZF9wYWdlX3BhZGRyKHBn
ZCkgPT0gX19wYV9zeW1ib2woYm1fcHVkKSkpIHsKKwkgICAgIShwNGRfbm9uZShwNGQpIHx8IHA0
ZF9wYWdlX3BhZGRyKHA0ZCkgPT0gX19wYV9zeW1ib2woYm1fcHVkKSkpIHsKIAkJLyoKIAkJICog
V2Ugb25seSBlbmQgdXAgaGVyZSBpZiB0aGUga2VybmVsIG1hcHBpbmcgYW5kIHRoZSBmaXhtYXAK
IAkJICogc2hhcmUgdGhlIHRvcCBsZXZlbCBwZ2QgZW50cnksIHdoaWNoIHNob3VsZCBvbmx5IGhh
cHBlbiBvbgogCQkgKiAxNmsvNCBsZXZlbHMgY29uZmlndXJhdGlvbnMuCiAJCSAqLwogCQlCVUdf
T04oIUlTX0VOQUJMRUQoQ09ORklHX0FSTTY0XzE2S19QQUdFUykpOwotCQlwdWRwID0gcHVkX29m
ZnNldF9raW1nKHBnZHAsIGFkZHIpOworCQlwdWRwID0gcHVkX29mZnNldF9raW1nKHA0ZHAsIGFk
ZHIpOwogCX0gZWxzZSB7Ci0JCWlmIChwZ2Rfbm9uZShwZ2QpKQotCQkJX19wZ2RfcG9wdWxhdGUo
cGdkcCwgX19wYV9zeW1ib2woYm1fcHVkKSwgUFVEX1RZUEVfVEFCTEUpOworCQlpZiAocDRkX25v
bmUocDRkKSkKKwkJCV9fcDRkX3BvcHVsYXRlKHA0ZHAsIF9fcGFfc3ltYm9sKGJtX3B1ZCksIFBV
RF9UWVBFX1RBQkxFKTsKIAkJcHVkcCA9IGZpeG1hcF9wdWQoYWRkcik7CiAJfQogCWlmIChwdWRf
bm9uZShSRUFEX09OQ0UoKnB1ZHApKSkKZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQvbW0vcGFnZWF0
dHIuYyBiL2FyY2gvYXJtNjQvbW0vcGFnZWF0dHIuYwppbmRleCAyNTBjNDkwMDhkNzMuLjVhMzEw
OTkxZmY3MyAxMDA2NDQKLS0tIGEvYXJjaC9hcm02NC9tbS9wYWdlYXR0ci5jCisrKyBiL2FyY2gv
YXJtNjQvbW0vcGFnZWF0dHIuYwpAQCAtMTk4LDYgKzE5OCw3IEBAIHZvaWQgX19rZXJuZWxfbWFw
X3BhZ2VzKHN0cnVjdCBwYWdlICpwYWdlLCBpbnQgbnVtcGFnZXMsIGludCBlbmFibGUpCiBib29s
IGtlcm5lbF9wYWdlX3ByZXNlbnQoc3RydWN0IHBhZ2UgKnBhZ2UpCiB7CiAJcGdkX3QgKnBnZHA7
CisJcDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1ZHAsIHB1ZDsKIAlwbWRfdCAqcG1kcCwgcG1kOwog
CXB0ZV90ICpwdGVwOwpAQCAtMjEwLDcgKzIxMSwxMSBAQCBib29sIGtlcm5lbF9wYWdlX3ByZXNl
bnQoc3RydWN0IHBhZ2UgKnBhZ2UpCiAJaWYgKHBnZF9ub25lKFJFQURfT05DRSgqcGdkcCkpKQog
CQlyZXR1cm4gZmFsc2U7CiAKLQlwdWRwID0gcHVkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlwNGRw
ID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlpZiAocDRkX25vbmUoUkVBRF9PTkNFKCpwNGRw
KSkpCisJCXJldHVybiBmYWxzZTsKKworCXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIGFkZHIpOwog
CXB1ZCA9IFJFQURfT05DRSgqcHVkcCk7CiAJaWYgKHB1ZF9ub25lKHB1ZCkpCiAJCXJldHVybiBm
YWxzZTsKZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2FybS9tbXUuYyBiL3ZpcnQva3ZtL2FybS9tbXUu
YwppbmRleCAxOWM5NjFhYzRlM2MuLjNkMjUwZmEzZDJiOSAxMDA2NDQKLS0tIGEvdmlydC9rdm0v
YXJtL21tdS5jCisrKyBiL3ZpcnQva3ZtL2FybS9tbXUuYwpAQCAtMTU4LDEzICsxNTgsMjIgQEAg
c3RhdGljIHZvaWQgKm1tdV9tZW1vcnlfY2FjaGVfYWxsb2Moc3RydWN0IGt2bV9tbXVfbWVtb3J5
X2NhY2hlICptYykKIAogc3RhdGljIHZvaWQgY2xlYXJfc3RhZ2UyX3BnZF9lbnRyeShzdHJ1Y3Qg
a3ZtICprdm0sIHBnZF90ICpwZ2QsIHBoeXNfYWRkcl90IGFkZHIpCiB7Ci0JcHVkX3QgKnB1ZF90
YWJsZSBfX21heWJlX3VudXNlZCA9IHN0YWdlMl9wdWRfb2Zmc2V0KGt2bSwgcGdkLCAwVUwpOwor
CXA0ZF90ICpwNGRfdGFibGUgX19tYXliZV91bnVzZWQgPSBzdGFnZTJfcDRkX29mZnNldChrdm0s
IHBnZCwgMFVMKTsKIAlzdGFnZTJfcGdkX2NsZWFyKGt2bSwgcGdkKTsKIAlrdm1fdGxiX2ZsdXNo
X3ZtaWRfaXBhKGt2bSwgYWRkcik7Ci0Jc3RhZ2UyX3B1ZF9mcmVlKGt2bSwgcHVkX3RhYmxlKTsK
KwlzdGFnZTJfcDRkX2ZyZWUoa3ZtLCBwNGRfdGFibGUpOwogCXB1dF9wYWdlKHZpcnRfdG9fcGFn
ZShwZ2QpKTsKIH0KIAorc3RhdGljIHZvaWQgY2xlYXJfc3RhZ2UyX3A0ZF9lbnRyeShzdHJ1Y3Qg
a3ZtICprdm0sIHA0ZF90ICpwNGQsIHBoeXNfYWRkcl90IGFkZHIpCit7CisJcHVkX3QgKnB1ZF90
YWJsZSBfX21heWJlX3VudXNlZCA9IHN0YWdlMl9wdWRfb2Zmc2V0KGt2bSwgcDRkLCAwKTsKKwlz
dGFnZTJfcDRkX2NsZWFyKGt2bSwgcDRkKTsKKwlrdm1fdGxiX2ZsdXNoX3ZtaWRfaXBhKGt2bSwg
YWRkcik7CisJc3RhZ2UyX3B1ZF9mcmVlKGt2bSwgcHVkX3RhYmxlKTsKKwlwdXRfcGFnZSh2aXJ0
X3RvX3BhZ2UocDRkKSk7Cit9CisKIHN0YXRpYyB2b2lkIGNsZWFyX3N0YWdlMl9wdWRfZW50cnko
c3RydWN0IGt2bSAqa3ZtLCBwdWRfdCAqcHVkLCBwaHlzX2FkZHJfdCBhZGRyKQogewogCXBtZF90
ICpwbWRfdGFibGUgX19tYXliZV91bnVzZWQgPSBzdGFnZTJfcG1kX29mZnNldChrdm0sIHB1ZCwg
MCk7CkBAIC0yMDgsMTIgKzIxNywyMCBAQCBzdGF0aWMgaW5saW5lIHZvaWQga3ZtX3B1ZF9wb3B1
bGF0ZShwdWRfdCAqcHVkcCwgcG1kX3QgKnBtZHApCiAJZHNiKGlzaHN0KTsKIH0KIAotc3RhdGlj
IGlubGluZSB2b2lkIGt2bV9wZ2RfcG9wdWxhdGUocGdkX3QgKnBnZHAsIHB1ZF90ICpwdWRwKQor
c3RhdGljIGlubGluZSB2b2lkIGt2bV9wNGRfcG9wdWxhdGUocDRkX3QgKnA0ZHAsIHB1ZF90ICpw
dWRwKQogewotCVdSSVRFX09OQ0UoKnBnZHAsIGt2bV9ta19wZ2QocHVkcCkpOworCVdSSVRFX09O
Q0UoKnA0ZHAsIGt2bV9ta19wNGQocHVkcCkpOwogCWRzYihpc2hzdCk7CiB9CiAKK3N0YXRpYyBp
bmxpbmUgdm9pZCBrdm1fcGdkX3BvcHVsYXRlKHBnZF90ICpwZ2RwLCBwNGRfdCAqcDRkcCkKK3sK
KyNpZm5kZWYgX19QQUdFVEFCTEVfUDREX0ZPTERFRAorCVdSSVRFX09OQ0UoKnBnZHAsIGt2bV9t
a19wZ2QocDRkcCkpOworCWRzYihpc2hzdCk7CisjZW5kaWYKK30KKwogLyoKICAqIFVubWFwcGlu
ZyB2cyBkY2FjaGUgbWFuYWdlbWVudDoKICAqCkBAIC0yOTMsMTMgKzMxMCwxMyBAQCBzdGF0aWMg
dm9pZCB1bm1hcF9zdGFnZTJfcG1kcyhzdHJ1Y3Qga3ZtICprdm0sIHB1ZF90ICpwdWQsCiAJCWNs
ZWFyX3N0YWdlMl9wdWRfZW50cnkoa3ZtLCBwdWQsIHN0YXJ0X2FkZHIpOwogfQogCi1zdGF0aWMg
dm9pZCB1bm1hcF9zdGFnZTJfcHVkcyhzdHJ1Y3Qga3ZtICprdm0sIHBnZF90ICpwZ2QsCitzdGF0
aWMgdm9pZCB1bm1hcF9zdGFnZTJfcHVkcyhzdHJ1Y3Qga3ZtICprdm0sIHA0ZF90ICpwNGQsCiAJ
CSAgICAgICBwaHlzX2FkZHJfdCBhZGRyLCBwaHlzX2FkZHJfdCBlbmQpCiB7CiAJcGh5c19hZGRy
X3QgbmV4dCwgc3RhcnRfYWRkciA9IGFkZHI7CiAJcHVkX3QgKnB1ZCwgKnN0YXJ0X3B1ZDsKIAot
CXN0YXJ0X3B1ZCA9IHB1ZCA9IHN0YWdlMl9wdWRfb2Zmc2V0KGt2bSwgcGdkLCBhZGRyKTsKKwlz
dGFydF9wdWQgPSBwdWQgPSBzdGFnZTJfcHVkX29mZnNldChrdm0sIHA0ZCwgYWRkcik7CiAJZG8g
ewogCQluZXh0ID0gc3RhZ2UyX3B1ZF9hZGRyX2VuZChrdm0sIGFkZHIsIGVuZCk7CiAJCWlmICgh
c3RhZ2UyX3B1ZF9ub25lKGt2bSwgKnB1ZCkpIHsKQEAgLTMxNyw2ICszMzQsMjMgQEAgc3RhdGlj
IHZvaWQgdW5tYXBfc3RhZ2UyX3B1ZHMoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGdkLAogCX0g
d2hpbGUgKHB1ZCsrLCBhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQpOwogCiAJaWYgKHN0YWdlMl9w
dWRfdGFibGVfZW1wdHkoa3ZtLCBzdGFydF9wdWQpKQorCQljbGVhcl9zdGFnZTJfcDRkX2VudHJ5
KGt2bSwgcDRkLCBzdGFydF9hZGRyKTsKK30KKworc3RhdGljIHZvaWQgdW5tYXBfc3RhZ2UyX3A0
ZHMoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGdkLAorCQkgICAgICAgcGh5c19hZGRyX3QgYWRk
ciwgcGh5c19hZGRyX3QgZW5kKQoreworCXBoeXNfYWRkcl90IG5leHQsIHN0YXJ0X2FkZHIgPSBh
ZGRyOworCXA0ZF90ICpwNGQsICpzdGFydF9wNGQ7CisKKwlzdGFydF9wNGQgPSBwNGQgPSBzdGFn
ZTJfcDRkX29mZnNldChrdm0sIHBnZCwgYWRkcik7CisJZG8geworCQluZXh0ID0gc3RhZ2UyX3A0
ZF9hZGRyX2VuZChrdm0sIGFkZHIsIGVuZCk7CisJCWlmICghc3RhZ2UyX3A0ZF9ub25lKGt2bSwg
KnA0ZCkpCisJCQl1bm1hcF9zdGFnZTJfcHVkcyhrdm0sIHA0ZCwgYWRkciwgbmV4dCk7CisJfSB3
aGlsZSAocDRkKyssIGFkZHIgPSBuZXh0LCBhZGRyICE9IGVuZCk7CisKKwlpZiAoc3RhZ2UyX3A0
ZF90YWJsZV9lbXB0eShrdm0sIHN0YXJ0X3A0ZCkpCiAJCWNsZWFyX3N0YWdlMl9wZ2RfZW50cnko
a3ZtLCBwZ2QsIHN0YXJ0X2FkZHIpOwogfQogCkBAIC0zNTEsNyArMzg1LDcgQEAgc3RhdGljIHZv
aWQgdW5tYXBfc3RhZ2UyX3JhbmdlKHN0cnVjdCBrdm0gKmt2bSwgcGh5c19hZGRyX3Qgc3RhcnQs
IHU2NCBzaXplKQogCQkJYnJlYWs7CiAJCW5leHQgPSBzdGFnZTJfcGdkX2FkZHJfZW5kKGt2bSwg
YWRkciwgZW5kKTsKIAkJaWYgKCFzdGFnZTJfcGdkX25vbmUoa3ZtLCAqcGdkKSkKLQkJCXVubWFw
X3N0YWdlMl9wdWRzKGt2bSwgcGdkLCBhZGRyLCBuZXh0KTsKKwkJCXVubWFwX3N0YWdlMl9wNGRz
KGt2bSwgcGdkLCBhZGRyLCBuZXh0KTsKIAkJLyoKIAkJICogSWYgdGhlIHJhbmdlIGlzIHRvbyBs
YXJnZSwgcmVsZWFzZSB0aGUga3ZtLT5tbXVfbG9jawogCQkgKiB0byBwcmV2ZW50IHN0YXJ2YXRp
b24gYW5kIGxvY2t1cCBkZXRlY3RvciB3YXJuaW5ncy4KQEAgLTM5MSwxMyArNDI1LDEzIEBAIHN0
YXRpYyB2b2lkIHN0YWdlMl9mbHVzaF9wbWRzKHN0cnVjdCBrdm0gKmt2bSwgcHVkX3QgKnB1ZCwK
IAl9IHdoaWxlIChwbWQrKywgYWRkciA9IG5leHQsIGFkZHIgIT0gZW5kKTsKIH0KIAotc3RhdGlj
IHZvaWQgc3RhZ2UyX2ZsdXNoX3B1ZHMoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGdkLAorc3Rh
dGljIHZvaWQgc3RhZ2UyX2ZsdXNoX3B1ZHMoc3RydWN0IGt2bSAqa3ZtLCBwNGRfdCAqcDRkLAog
CQkJICAgICAgcGh5c19hZGRyX3QgYWRkciwgcGh5c19hZGRyX3QgZW5kKQogewogCXB1ZF90ICpw
dWQ7CiAJcGh5c19hZGRyX3QgbmV4dDsKIAotCXB1ZCA9IHN0YWdlMl9wdWRfb2Zmc2V0KGt2bSwg
cGdkLCBhZGRyKTsKKwlwdWQgPSBzdGFnZTJfcHVkX29mZnNldChrdm0sIHA0ZCwgYWRkcik7CiAJ
ZG8gewogCQluZXh0ID0gc3RhZ2UyX3B1ZF9hZGRyX2VuZChrdm0sIGFkZHIsIGVuZCk7CiAJCWlm
ICghc3RhZ2UyX3B1ZF9ub25lKGt2bSwgKnB1ZCkpIHsKQEAgLTQwOSw2ICs0NDMsMjAgQEAgc3Rh
dGljIHZvaWQgc3RhZ2UyX2ZsdXNoX3B1ZHMoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGdkLAog
CX0gd2hpbGUgKHB1ZCsrLCBhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQpOwogfQogCitzdGF0aWMg
dm9pZCBzdGFnZTJfZmx1c2hfcDRkcyhzdHJ1Y3Qga3ZtICprdm0sIHBnZF90ICpwZ2QsCisJCQkg
ICAgICBwaHlzX2FkZHJfdCBhZGRyLCBwaHlzX2FkZHJfdCBlbmQpCit7CisJcDRkX3QgKnA0ZDsK
KwlwaHlzX2FkZHJfdCBuZXh0OworCisJcDRkID0gc3RhZ2UyX3A0ZF9vZmZzZXQoa3ZtLCBwZ2Qs
IGFkZHIpOworCWRvIHsKKwkJbmV4dCA9IHN0YWdlMl9wNGRfYWRkcl9lbmQoa3ZtLCBhZGRyLCBl
bmQpOworCQlpZiAoIXN0YWdlMl9wNGRfbm9uZShrdm0sICpwNGQpKQorCQkJc3RhZ2UyX2ZsdXNo
X3B1ZHMoa3ZtLCBwNGQsIGFkZHIsIG5leHQpOworCX0gd2hpbGUgKHA0ZCsrLCBhZGRyID0gbmV4
dCwgYWRkciAhPSBlbmQpOworfQorCiBzdGF0aWMgdm9pZCBzdGFnZTJfZmx1c2hfbWVtc2xvdChz
dHJ1Y3Qga3ZtICprdm0sCiAJCQkJIHN0cnVjdCBrdm1fbWVtb3J5X3Nsb3QgKm1lbXNsb3QpCiB7
CkBAIC00MjEsNyArNDY5LDcgQEAgc3RhdGljIHZvaWQgc3RhZ2UyX2ZsdXNoX21lbXNsb3Qoc3Ry
dWN0IGt2bSAqa3ZtLAogCWRvIHsKIAkJbmV4dCA9IHN0YWdlMl9wZ2RfYWRkcl9lbmQoa3ZtLCBh
ZGRyLCBlbmQpOwogCQlpZiAoIXN0YWdlMl9wZ2Rfbm9uZShrdm0sICpwZ2QpKQotCQkJc3RhZ2Uy
X2ZsdXNoX3B1ZHMoa3ZtLCBwZ2QsIGFkZHIsIG5leHQpOworCQkJc3RhZ2UyX2ZsdXNoX3A0ZHMo
a3ZtLCBwZ2QsIGFkZHIsIG5leHQpOwogCX0gd2hpbGUgKHBnZCsrLCBhZGRyID0gbmV4dCwgYWRk
ciAhPSBlbmQpOwogfQogCkBAIC00NTEsMTIgKzQ5OSwyMSBAQCBzdGF0aWMgdm9pZCBzdGFnZTJf
Zmx1c2hfdm0oc3RydWN0IGt2bSAqa3ZtKQogCiBzdGF0aWMgdm9pZCBjbGVhcl9oeXBfcGdkX2Vu
dHJ5KHBnZF90ICpwZ2QpCiB7Ci0JcHVkX3QgKnB1ZF90YWJsZSBfX21heWJlX3VudXNlZCA9IHB1
ZF9vZmZzZXQocGdkLCAwVUwpOworCXA0ZF90ICpwNGRfdGFibGUgX19tYXliZV91bnVzZWQgPSBw
NGRfb2Zmc2V0KHBnZCwgMFVMKTsKIAlwZ2RfY2xlYXIocGdkKTsKLQlwdWRfZnJlZShOVUxMLCBw
dWRfdGFibGUpOworCXA0ZF9mcmVlKE5VTEwsIHA0ZF90YWJsZSk7CiAJcHV0X3BhZ2UodmlydF90
b19wYWdlKHBnZCkpOwogfQogCitzdGF0aWMgdm9pZCBjbGVhcl9oeXBfcDRkX2VudHJ5KHA0ZF90
ICpwNGQpCit7CisJcHVkX3QgKnB1ZF90YWJsZSBfX21heWJlX3VudXNlZCA9IHB1ZF9vZmZzZXQo
cDRkLCAwKTsKKwlWTV9CVUdfT04ocDRkX2h1Z2UoKnA0ZCkpOworCXA0ZF9jbGVhcihwNGQpOwor
CXB1ZF9mcmVlKE5VTEwsIHB1ZF90YWJsZSk7CisJcHV0X3BhZ2UodmlydF90b19wYWdlKHA0ZCkp
OworfQorCiBzdGF0aWMgdm9pZCBjbGVhcl9oeXBfcHVkX2VudHJ5KHB1ZF90ICpwdWQpCiB7CiAJ
cG1kX3QgKnBtZF90YWJsZSBfX21heWJlX3VudXNlZCA9IHBtZF9vZmZzZXQocHVkLCAwKTsKQEAg
LTUwOCwxMiArNTY1LDEyIEBAIHN0YXRpYyB2b2lkIHVubWFwX2h5cF9wbWRzKHB1ZF90ICpwdWQs
IHBoeXNfYWRkcl90IGFkZHIsIHBoeXNfYWRkcl90IGVuZCkKIAkJY2xlYXJfaHlwX3B1ZF9lbnRy
eShwdWQpOwogfQogCi1zdGF0aWMgdm9pZCB1bm1hcF9oeXBfcHVkcyhwZ2RfdCAqcGdkLCBwaHlz
X2FkZHJfdCBhZGRyLCBwaHlzX2FkZHJfdCBlbmQpCitzdGF0aWMgdm9pZCB1bm1hcF9oeXBfcHVk
cyhwNGRfdCAqcDRkLCBwaHlzX2FkZHJfdCBhZGRyLCBwaHlzX2FkZHJfdCBlbmQpCiB7CiAJcGh5
c19hZGRyX3QgbmV4dDsKIAlwdWRfdCAqcHVkLCAqc3RhcnRfcHVkOwogCi0Jc3RhcnRfcHVkID0g
cHVkID0gcHVkX29mZnNldChwZ2QsIGFkZHIpOworCXN0YXJ0X3B1ZCA9IHB1ZCA9IHB1ZF9vZmZz
ZXQocDRkLCBhZGRyKTsKIAlkbyB7CiAJCW5leHQgPSBwdWRfYWRkcl9lbmQoYWRkciwgZW5kKTsK
IAkJLyogSHlwIGRvZXNuJ3QgdXNlIGh1Z2UgcHVkcyAqLwpAQCAtNTIyLDYgKzU3OSwyMyBAQCBz
dGF0aWMgdm9pZCB1bm1hcF9oeXBfcHVkcyhwZ2RfdCAqcGdkLCBwaHlzX2FkZHJfdCBhZGRyLCBw
aHlzX2FkZHJfdCBlbmQpCiAJfSB3aGlsZSAocHVkKyssIGFkZHIgPSBuZXh0LCBhZGRyICE9IGVu
ZCk7CiAKIAlpZiAoaHlwX3B1ZF90YWJsZV9lbXB0eShzdGFydF9wdWQpKQorCQljbGVhcl9oeXBf
cDRkX2VudHJ5KHA0ZCk7Cit9CisKK3N0YXRpYyB2b2lkIHVubWFwX2h5cF9wNGRzKHBnZF90ICpw
Z2QsIHBoeXNfYWRkcl90IGFkZHIsIHBoeXNfYWRkcl90IGVuZCkKK3sKKwlwaHlzX2FkZHJfdCBu
ZXh0OworCXA0ZF90ICpwNGQsICpzdGFydF9wNGQ7CisKKwlzdGFydF9wNGQgPSBwNGQgPSBwNGRf
b2Zmc2V0KHBnZCwgYWRkcik7CisJZG8geworCQluZXh0ID0gcDRkX2FkZHJfZW5kKGFkZHIsIGVu
ZCk7CisJCS8qIEh5cCBkb2Vzbid0IHVzZSBodWdlIHA0ZHMgKi8KKwkJaWYgKCFwNGRfbm9uZSgq
cDRkKSkKKwkJCXVubWFwX2h5cF9wdWRzKHA0ZCwgYWRkciwgbmV4dCk7CisJfSB3aGlsZSAocDRk
KyssIGFkZHIgPSBuZXh0LCBhZGRyICE9IGVuZCk7CisKKwlpZiAoaHlwX3A0ZF90YWJsZV9lbXB0
eShzdGFydF9wNGQpKQogCQljbGVhcl9oeXBfcGdkX2VudHJ5KHBnZCk7CiB9CiAKQEAgLTU0NSw3
ICs2MTksNyBAQCBzdGF0aWMgdm9pZCBfX3VubWFwX2h5cF9yYW5nZShwZ2RfdCAqcGdkcCwgdW5z
aWduZWQgbG9uZyBwdHJzX3Blcl9wZ2QsCiAJZG8gewogCQluZXh0ID0gcGdkX2FkZHJfZW5kKGFk
ZHIsIGVuZCk7CiAJCWlmICghcGdkX25vbmUoKnBnZCkpCi0JCQl1bm1hcF9oeXBfcHVkcyhwZ2Qs
IGFkZHIsIG5leHQpOworCQkJdW5tYXBfaHlwX3A0ZHMocGdkLCBhZGRyLCBuZXh0KTsKIAl9IHdo
aWxlIChwZ2QrKywgYWRkciA9IG5leHQsIGFkZHIgIT0gZW5kKTsKIH0KIApAQCAtNjU1LDcgKzcy
OSw3IEBAIHN0YXRpYyBpbnQgY3JlYXRlX2h5cF9wbWRfbWFwcGluZ3MocHVkX3QgKnB1ZCwgdW5z
aWduZWQgbG9uZyBzdGFydCwKIAlyZXR1cm4gMDsKIH0KIAotc3RhdGljIGludCBjcmVhdGVfaHlw
X3B1ZF9tYXBwaW5ncyhwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAorc3RhdGljIGlu
dCBjcmVhdGVfaHlwX3B1ZF9tYXBwaW5ncyhwNGRfdCAqcDRkLCB1bnNpZ25lZCBsb25nIHN0YXJ0
LAogCQkJCSAgIHVuc2lnbmVkIGxvbmcgZW5kLCB1bnNpZ25lZCBsb25nIHBmbiwKIAkJCQkgICBw
Z3Byb3RfdCBwcm90KQogewpAQCAtNjY2LDcgKzc0MCw3IEBAIHN0YXRpYyBpbnQgY3JlYXRlX2h5
cF9wdWRfbWFwcGluZ3MocGdkX3QgKnBnZCwgdW5zaWduZWQgbG9uZyBzdGFydCwKIAogCWFkZHIg
PSBzdGFydDsKIAlkbyB7Ci0JCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwkJcHVkID0g
cHVkX29mZnNldChwNGQsIGFkZHIpOwogCiAJCWlmIChwdWRfbm9uZV9vcl9jbGVhcl9iYWQocHVk
KSkgewogCQkJcG1kID0gcG1kX2FsbG9jX29uZShOVUxMLCBhZGRyKTsKQEAgLTY4OCwxMiArNzYy
LDQ1IEBAIHN0YXRpYyBpbnQgY3JlYXRlX2h5cF9wdWRfbWFwcGluZ3MocGdkX3QgKnBnZCwgdW5z
aWduZWQgbG9uZyBzdGFydCwKIAlyZXR1cm4gMDsKIH0KIAorc3RhdGljIGludCBjcmVhdGVfaHlw
X3A0ZF9tYXBwaW5ncyhwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAorCQkJCSAgIHVu
c2lnbmVkIGxvbmcgZW5kLCB1bnNpZ25lZCBsb25nIHBmbiwKKwkJCQkgICBwZ3Byb3RfdCBwcm90
KQoreworCXA0ZF90ICpwNGQ7CisJcHVkX3QgKnB1ZDsKKwl1bnNpZ25lZCBsb25nIGFkZHIsIG5l
eHQ7CisJaW50IHJldDsKKworCWFkZHIgPSBzdGFydDsKKwlkbyB7CisJCXA0ZCA9IHA0ZF9vZmZz
ZXQocGdkLCBhZGRyKTsKKworCQlpZiAocDRkX25vbmUoKnA0ZCkpIHsKKwkJCXB1ZCA9IHB1ZF9h
bGxvY19vbmUoTlVMTCwgYWRkcik7CisJCQlpZiAoIXB1ZCkgeworCQkJCWt2bV9lcnIoIkNhbm5v
dCBhbGxvY2F0ZSBIeXAgcHVkXG4iKTsKKwkJCQlyZXR1cm4gLUVOT01FTTsKKwkJCX0KKwkJCWt2
bV9wNGRfcG9wdWxhdGUocDRkLCBwdWQpOworCQkJZ2V0X3BhZ2UodmlydF90b19wYWdlKHA0ZCkp
OworCQl9CisKKwkJbmV4dCA9IHA0ZF9hZGRyX2VuZChhZGRyLCBlbmQpOworCQlyZXQgPSBjcmVh
dGVfaHlwX3B1ZF9tYXBwaW5ncyhwNGQsIGFkZHIsIG5leHQsIHBmbiwgcHJvdCk7CisJCWlmIChy
ZXQpCisJCQlyZXR1cm4gcmV0OworCQlwZm4gKz0gKG5leHQgLSBhZGRyKSA+PiBQQUdFX1NISUZU
OworCX0gd2hpbGUgKGFkZHIgPSBuZXh0LCBhZGRyICE9IGVuZCk7CisKKwlyZXR1cm4gMDsKK30K
Kwogc3RhdGljIGludCBfX2NyZWF0ZV9oeXBfbWFwcGluZ3MocGdkX3QgKnBnZHAsIHVuc2lnbmVk
IGxvbmcgcHRyc19wZXJfcGdkLAogCQkJCSB1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBs
b25nIGVuZCwKIAkJCQkgdW5zaWduZWQgbG9uZyBwZm4sIHBncHJvdF90IHByb3QpCiB7CiAJcGdk
X3QgKnBnZDsKLQlwdWRfdCAqcHVkOworCXA0ZF90ICpwNGQ7CiAJdW5zaWduZWQgbG9uZyBhZGRy
LCBuZXh0OwogCWludCBlcnIgPSAwOwogCkBAIC03MDQsMTggKzgxMSwxOCBAQCBzdGF0aWMgaW50
IF9fY3JlYXRlX2h5cF9tYXBwaW5ncyhwZ2RfdCAqcGdkcCwgdW5zaWduZWQgbG9uZyBwdHJzX3Bl
cl9wZ2QsCiAJCXBnZCA9IHBnZHAgKyBrdm1fcGdkX2luZGV4KGFkZHIsIHB0cnNfcGVyX3BnZCk7
CiAKIAkJaWYgKHBnZF9ub25lKCpwZ2QpKSB7Ci0JCQlwdWQgPSBwdWRfYWxsb2Nfb25lKE5VTEws
IGFkZHIpOwotCQkJaWYgKCFwdWQpIHsKLQkJCQlrdm1fZXJyKCJDYW5ub3QgYWxsb2NhdGUgSHlw
IHB1ZFxuIik7CisJCQlwNGQgPSBwNGRfYWxsb2Nfb25lKE5VTEwsIGFkZHIpOworCQkJaWYgKCFw
NGQpIHsKKwkJCQlrdm1fZXJyKCJDYW5ub3QgYWxsb2NhdGUgSHlwIHA0ZFxuIik7CiAJCQkJZXJy
ID0gLUVOT01FTTsKIAkJCQlnb3RvIG91dDsKIAkJCX0KLQkJCWt2bV9wZ2RfcG9wdWxhdGUocGdk
LCBwdWQpOworCQkJa3ZtX3BnZF9wb3B1bGF0ZShwZ2QsIHA0ZCk7CiAJCQlnZXRfcGFnZSh2aXJ0
X3RvX3BhZ2UocGdkKSk7CiAJCX0KIAogCQluZXh0ID0gcGdkX2FkZHJfZW5kKGFkZHIsIGVuZCk7
Ci0JCWVyciA9IGNyZWF0ZV9oeXBfcHVkX21hcHBpbmdzKHBnZCwgYWRkciwgbmV4dCwgcGZuLCBw
cm90KTsKKwkJZXJyID0gY3JlYXRlX2h5cF9wNGRfbWFwcGluZ3MocGdkLCBhZGRyLCBuZXh0LCBw
Zm4sIHByb3QpOwogCQlpZiAoZXJyKQogCQkJZ290byBvdXQ7CiAJCXBmbiArPSAobmV4dCAtIGFk
ZHIpID4+IFBBR0VfU0hJRlQ7CkBAIC0xMDEyLDIyICsxMTE5LDQwIEBAIHZvaWQga3ZtX2ZyZWVf
c3RhZ2UyX3BnZChzdHJ1Y3Qga3ZtICprdm0pCiAJCWZyZWVfcGFnZXNfZXhhY3QocGdkLCBzdGFn
ZTJfcGdkX3NpemUoa3ZtKSk7CiB9CiAKLXN0YXRpYyBwdWRfdCAqc3RhZ2UyX2dldF9wdWQoc3Ry
dWN0IGt2bSAqa3ZtLCBzdHJ1Y3Qga3ZtX21tdV9tZW1vcnlfY2FjaGUgKmNhY2hlLAorc3RhdGlj
IHA0ZF90ICpzdGFnZTJfZ2V0X3A0ZChzdHJ1Y3Qga3ZtICprdm0sIHN0cnVjdCBrdm1fbW11X21l
bW9yeV9jYWNoZSAqY2FjaGUsCiAJCQkgICAgIHBoeXNfYWRkcl90IGFkZHIpCiB7CiAJcGdkX3Qg
KnBnZDsKLQlwdWRfdCAqcHVkOworCXA0ZF90ICpwNGQ7CiAKIAlwZ2QgPSBrdm0tPmFyY2gucGdk
ICsgc3RhZ2UyX3BnZF9pbmRleChrdm0sIGFkZHIpOwogCWlmIChzdGFnZTJfcGdkX25vbmUoa3Zt
LCAqcGdkKSkgewogCQlpZiAoIWNhY2hlKQogCQkJcmV0dXJuIE5VTEw7Ci0JCXB1ZCA9IG1tdV9t
ZW1vcnlfY2FjaGVfYWxsb2MoY2FjaGUpOwotCQlzdGFnZTJfcGdkX3BvcHVsYXRlKGt2bSwgcGdk
LCBwdWQpOworCQlwNGQgPSBtbXVfbWVtb3J5X2NhY2hlX2FsbG9jKGNhY2hlKTsKKwkJc3RhZ2Uy
X3BnZF9wb3B1bGF0ZShrdm0sIHBnZCwgcDRkKTsKIAkJZ2V0X3BhZ2UodmlydF90b19wYWdlKHBn
ZCkpOwogCX0KIAotCXJldHVybiBzdGFnZTJfcHVkX29mZnNldChrdm0sIHBnZCwgYWRkcik7CisJ
cmV0dXJuIHN0YWdlMl9wNGRfb2Zmc2V0KGt2bSwgcGdkLCBhZGRyKTsKK30KKworc3RhdGljIHB1
ZF90ICpzdGFnZTJfZ2V0X3B1ZChzdHJ1Y3Qga3ZtICprdm0sIHN0cnVjdCBrdm1fbW11X21lbW9y
eV9jYWNoZSAqY2FjaGUsCisJCQkgICAgIHBoeXNfYWRkcl90IGFkZHIpCit7CisJcDRkX3QgKnA0
ZDsKKwlwdWRfdCAqcHVkOworCisJcDRkID0gc3RhZ2UyX2dldF9wNGQoa3ZtLCBjYWNoZSwgYWRk
cik7CisJaWYgKHN0YWdlMl9wNGRfbm9uZShrdm0sICpwNGQpKSB7CisJCWlmICghY2FjaGUpCisJ
CQlyZXR1cm4gTlVMTDsKKwkJcHVkID0gbW11X21lbW9yeV9jYWNoZV9hbGxvYyhjYWNoZSk7CisJ
CXN0YWdlMl9wNGRfcG9wdWxhdGUoa3ZtLCBwNGQsIHB1ZCk7CisJCWdldF9wYWdlKHZpcnRfdG9f
cGFnZShwNGQpKTsKKwl9CisKKwlyZXR1cm4gc3RhZ2UyX3B1ZF9vZmZzZXQoa3ZtLCBwNGQsIGFk
ZHIpOwogfQogCiBzdGF0aWMgcG1kX3QgKnN0YWdlMl9nZXRfcG1kKHN0cnVjdCBrdm0gKmt2bSwg
c3RydWN0IGt2bV9tbXVfbWVtb3J5X2NhY2hlICpjYWNoZSwKQEAgLTE0NjEsMTggKzE1ODYsMTgg
QEAgc3RhdGljIHZvaWQgc3RhZ2UyX3dwX3BtZHMoc3RydWN0IGt2bSAqa3ZtLCBwdWRfdCAqcHVk
LAogfQogCiAvKioKLSAqIHN0YWdlMl93cF9wdWRzIC0gd3JpdGUgcHJvdGVjdCBQR0QgcmFuZ2UK
KyAqIHN0YWdlMl93cF9wdWRzIC0gd3JpdGUgcHJvdGVjdCBQNEQgcmFuZ2UKICAqIEBwZ2Q6CXBv
aW50ZXIgdG8gcGdkIGVudHJ5CiAgKiBAYWRkcjoJcmFuZ2Ugc3RhcnQgYWRkcmVzcwogICogQGVu
ZDoJcmFuZ2UgZW5kIGFkZHJlc3MKICAqLwotc3RhdGljIHZvaWQgIHN0YWdlMl93cF9wdWRzKHN0
cnVjdCBrdm0gKmt2bSwgcGdkX3QgKnBnZCwKK3N0YXRpYyB2b2lkICBzdGFnZTJfd3BfcHVkcyhz
dHJ1Y3Qga3ZtICprdm0sIHA0ZF90ICpwNGQsCiAJCQkgICAgcGh5c19hZGRyX3QgYWRkciwgcGh5
c19hZGRyX3QgZW5kKQogewogCXB1ZF90ICpwdWQ7CiAJcGh5c19hZGRyX3QgbmV4dDsKIAotCXB1
ZCA9IHN0YWdlMl9wdWRfb2Zmc2V0KGt2bSwgcGdkLCBhZGRyKTsKKwlwdWQgPSBzdGFnZTJfcHVk
X29mZnNldChrdm0sIHA0ZCwgYWRkcik7CiAJZG8gewogCQluZXh0ID0gc3RhZ2UyX3B1ZF9hZGRy
X2VuZChrdm0sIGFkZHIsIGVuZCk7CiAJCWlmICghc3RhZ2UyX3B1ZF9ub25lKGt2bSwgKnB1ZCkp
IHsKQEAgLTE0ODYsNiArMTYxMSwyNiBAQCBzdGF0aWMgdm9pZCAgc3RhZ2UyX3dwX3B1ZHMoc3Ry
dWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGdkLAogCX0gd2hpbGUgKHB1ZCsrLCBhZGRyID0gbmV4dCwg
YWRkciAhPSBlbmQpOwogfQogCisvKioKKyAqIHN0YWdlMl93cF9wNGRzIC0gd3JpdGUgcHJvdGVj
dCBQR0QgcmFuZ2UKKyAqIEBwZ2Q6CXBvaW50ZXIgdG8gcGdkIGVudHJ5CisgKiBAYWRkcjoJcmFu
Z2Ugc3RhcnQgYWRkcmVzcworICogQGVuZDoJcmFuZ2UgZW5kIGFkZHJlc3MKKyAqLworc3RhdGlj
IHZvaWQgIHN0YWdlMl93cF9wNGRzKHN0cnVjdCBrdm0gKmt2bSwgcGdkX3QgKnBnZCwKKwkJCSAg
ICBwaHlzX2FkZHJfdCBhZGRyLCBwaHlzX2FkZHJfdCBlbmQpCit7CisJcDRkX3QgKnA0ZDsKKwlw
aHlzX2FkZHJfdCBuZXh0OworCisJcDRkID0gc3RhZ2UyX3A0ZF9vZmZzZXQoa3ZtLCBwZ2QsIGFk
ZHIpOworCWRvIHsKKwkJbmV4dCA9IHN0YWdlMl9wNGRfYWRkcl9lbmQoa3ZtLCBhZGRyLCBlbmQp
OworCQlpZiAoIXN0YWdlMl9wNGRfbm9uZShrdm0sICpwNGQpKQorCQkJc3RhZ2UyX3dwX3B1ZHMo
a3ZtLCBwNGQsIGFkZHIsIG5leHQpOworCX0gd2hpbGUgKHA0ZCsrLCBhZGRyID0gbmV4dCwgYWRk
ciAhPSBlbmQpOworfQorCiAvKioKICAqIHN0YWdlMl93cF9yYW5nZSgpIC0gd3JpdGUgcHJvdGVj
dCBzdGFnZTIgbWVtb3J5IHJlZ2lvbiByYW5nZQogICogQGt2bToJVGhlIEtWTSBwb2ludGVyCkBA
IC0xNTEzLDcgKzE2NTgsNyBAQCBzdGF0aWMgdm9pZCBzdGFnZTJfd3BfcmFuZ2Uoc3RydWN0IGt2
bSAqa3ZtLCBwaHlzX2FkZHJfdCBhZGRyLCBwaHlzX2FkZHJfdCBlbmQpCiAJCQlicmVhazsKIAkJ
bmV4dCA9IHN0YWdlMl9wZ2RfYWRkcl9lbmQoa3ZtLCBhZGRyLCBlbmQpOwogCQlpZiAoc3RhZ2Uy
X3BnZF9wcmVzZW50KGt2bSwgKnBnZCkpCi0JCQlzdGFnZTJfd3BfcHVkcyhrdm0sIHBnZCwgYWRk
ciwgbmV4dCk7CisJCQlzdGFnZTJfd3BfcDRkcyhrdm0sIHBnZCwgYWRkciwgbmV4dCk7CiAJfSB3
aGlsZSAocGdkKyssIGFkZHIgPSBuZXh0LCBhZGRyICE9IGVuZCk7CiB9CiAKLS0gCjIuMjQuMAoK
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KT3BlblJJU0Mg
bWFpbGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMub3JnCmh0dHBzOi8vbGlzdHMu
bGlicmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJpc2MK
