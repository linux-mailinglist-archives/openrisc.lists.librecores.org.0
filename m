Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 7BBE92E2933
	for <lists+openrisc@lfdr.de>; Fri, 25 Dec 2020 00:15:32 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id CC80E20F9B;
	Fri, 25 Dec 2020 00:15:31 +0100 (CET)
Received: from mout.kundenserver.de (mout.kundenserver.de [212.227.126.133])
 by mail.librecores.org (Postfix) with ESMTPS id CB85820EEB
 for <openrisc@lists.librecores.org>; Tue, 22 Dec 2020 19:48:55 +0100 (CET)
Received: from orion.localdomain ([95.118.68.26]) by mrelayeu.kundenserver.de
 (mreue011 [212.227.15.167]) with ESMTPSA (Nemesis) id
 1M3D3N-1kvLYf3Bb3-003gAL; Tue, 22 Dec 2020 19:45:17 +0100
From: "Enrico Weigelt, metux IT consult" <info@metux.net>
To: linux-kernel@vger.kernel.org
Date: Tue, 22 Dec 2020 19:45:10 +0100
Message-Id: <20201222184510.19415-1-info@metux.net>
X-Mailer: git-send-email 2.11.0
X-Provags-ID: V03:K1:n4hqwhh7LIjEQSp9rLWYAb9MND0ZkRP95+g1E+jzaHcC8BjMZKX
 bRX7HDy98scHqJv/TvEudskGuZFxlSq4AtOv/qPJ5NAPv6cGBsTGa6ax8noKD/hgjjLO09l
 f5Needsa/iXKi3HojJrBH233VwZxpoVLzcPV6Nl/UGu4HwbcHoixH76JoYvRIU8c0xxI+B+
 Wed4rfrftuXiD3ZhBWV/g==
X-Spam-Flag: NO
X-UI-Out-Filterresults: notjunk:1;V03:K0:ZYY3bhRqRrE=:9Z7+Ttntpc/yZ0ONUaW5+X
 y6uHceCsl3e2HplEDGgS4EFL2eghEQvTFn4w7NTu9QXh3AH/FIvI+UZmyV0s8t/6vx0aml4RL
 Zut2vYA2aVk8OWgJiDj5Agz0Gjh/B6BgIsYIAfckjDIiepL3IfcRF4Sh491jL5phu1uisMhTW
 +e0BCNzTZbKom2EeX6gSHewwhdeI1a0pk/FcRHiTvdpTtCzMPQ2MqY091fdBXnoXMxOaIWiwa
 nfGBsEpd21MGuxqgE0x7F5khOKrOvkY3ydOk77hP7VIRipf69SRZlprj8ecbFvkYGF97o/x26
 wPD01yvWzKtEucv8YUz7YjauAKprIUvFXkMEcBi9bse7DyYb2+fjtV9xCe9eRFTYuT3JL/A7h
 SlU9NhNG5n0ZLlQGjml/4UrjChq0cs1aMzc5MTMPVEAootea1kqsuVV94Go6V
X-Mailman-Approved-At: Fri, 25 Dec 2020 00:15:22 +0100
Subject: [OpenRISC] [PATCH] arch: consolidate pm_power_off callback
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: dalias@libc.org, linux-ia64@vger.kernel.org, linux-sh@vger.kernel.org,
 benh@kernel.crashing.org, James.Bottomley@HansenPartnership.com,
 jcmvbkbc@gmail.com, paulus@samba.org, linux-csky@vger.kernel.org,
 hpa@zytor.com, linux-riscv@lists.infradead.org, will@kernel.org,
 tglx@linutronix.de, jonas@southpole.se, linux-s390@vger.kernel.org,
 sstabellini@kernel.org, linux-c6x-dev@linux-c6x.org,
 ysato@users.sourceforge.jp, linux-hexagon@vger.kernel.org, deller@gmx.de,
 x86@kernel.org, ley.foon.tan@intel.com, mingo@redhat.com,
 catalin.marinas@arm.com, linux-snps-arc@lists.infradead.org,
 linux-xtensa@linux-xtensa.org, linux-pm@vger.kernel.org, msalter@redhat.com,
 jacquiot.aurelien@gmail.com, linux-m68k@lists.linux-m68k.org,
 openrisc@lists.librecores.org, bp@alien8.de, christian@brauner.io,
 chris@zankel.net, tsbogend@alpha.franken.de, linux-parisc@vger.kernel.org,
 linux-mips@vger.kernel.org, linux-alpha@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

TW92ZSB0aGUgcG1fcG93ZXJfb2ZmIGNhbGxiYWNrIGludG8gb25lIGdsb2JhbCBwbGFjZSBhbmQg
YWxzbyBhZGQgYW4KZnVuY3Rpb24gZm9yIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBpdCAod2hlbiBu
b3QgTlVMTCksIGluIG9yZGVyIHRvIHJlbW92ZQpjb2RlIGR1cGxpY2F0aW9uIGluIGFsbCBpbmRp
dmlkdWFsIGFyY2hzLgoKU2lnbmVkLW9mZi1ieTogRW5yaWNvIFdlaWdlbHQsIG1ldHV4IElUIGNv
bnN1bHQgPGluZm9AbWV0dXgubmV0PgotLS0KIGFyY2gvYWxwaGEva2VybmVsL3Byb2Nlc3MuYyAg
ICAgICAgfCAgNiAtLS0tLS0KIGFyY2gvYXJjL2tlcm5lbC9yZXNldC5jICAgICAgICAgICAgfCAg
MyAtLS0KIGFyY2gvYXJtL2tlcm5lbC9yZWJvb3QuYyAgICAgICAgICAgfCAgNiArKy0tLS0KIGFy
Y2gvYXJtNjQva2VybmVsL3Byb2Nlc3MuYyAgICAgICAgfCAgNiArLS0tLS0KIGFyY2gvYzZ4L2tl
cm5lbC9wcm9jZXNzLmMgICAgICAgICAgfCAxMCArKy0tLS0tLS0tCiBhcmNoL2Nza3kva2VybmVs
L3Bvd2VyLmMgICAgICAgICAgIHwgMTAgKysrLS0tLS0tLQogYXJjaC9oODMwMC9rZXJuZWwvcHJv
Y2Vzcy5jICAgICAgICB8ICAzIC0tLQogYXJjaC9oZXhhZ29uL2tlcm5lbC9yZXNldC5jICAgICAg
ICB8ICAzIC0tLQogYXJjaC9pYTY0L2tlcm5lbC9wcm9jZXNzLmMgICAgICAgICB8ICA1ICstLS0t
CiBhcmNoL202OGsva2VybmVsL3Byb2Nlc3MuYyAgICAgICAgIHwgIDMgLS0tCiBhcmNoL21pY3Jv
YmxhemUva2VybmVsL3Byb2Nlc3MuYyAgIHwgIDMgLS0tCiBhcmNoL21pcHMva2VybmVsL3Jlc2V0
LmMgICAgICAgICAgIHwgIDYgKy0tLS0tCiBhcmNoL25kczMyL2tlcm5lbC9wcm9jZXNzLmMgICAg
ICAgIHwgIDcgKystLS0tLQogYXJjaC9uaW9zMi9rZXJuZWwvcHJvY2Vzcy5jICAgICAgICB8ICAz
IC0tLQogYXJjaC9vcGVucmlzYy9rZXJuZWwvcHJvY2Vzcy5jICAgICB8ICAzIC0tLQogYXJjaC9w
YXJpc2Mva2VybmVsL3Byb2Nlc3MuYyAgICAgICB8ICA5ICsrKy0tLS0tLQogYXJjaC9wb3dlcnBj
L2tlcm5lbC9zZXR1cC1jb21tb24uYyB8ICA1ICsrLS0tCiBhcmNoL3Bvd2VycGMveG1vbi94bW9u
LmMgICAgICAgICAgIHwgIDQgKystLQogYXJjaC9yaXNjdi9rZXJuZWwvcmVzZXQuYyAgICAgICAg
ICB8ICA5ICsrKystLS0tLQogYXJjaC9zMzkwL2tlcm5lbC9zZXR1cC5jICAgICAgICAgICB8ICAz
IC0tLQogYXJjaC9zaC9rZXJuZWwvcmVib290LmMgICAgICAgICAgICB8ICA2ICstLS0tLQogYXJj
aC94ODYva2VybmVsL3JlYm9vdC5jICAgICAgICAgICB8IDE1ICsrKystLS0tLS0tLS0tLQogYXJj
aC94ODYveGVuL2VubGlnaHRlbl9wdi5jICAgICAgICB8ICA0ICsrLS0KIGFyY2gveHRlbnNhL2tl
cm5lbC9wcm9jZXNzLmMgICAgICAgfCAgNCAtLS0tCiBpbmNsdWRlL2xpbnV4L3BtLmggICAgICAg
ICAgICAgICAgIHwgIDIgKysKIGtlcm5lbC9yZWJvb3QuYyAgICAgICAgICAgICAgICAgICAgfCAx
MCArKysrKysrKysrCiAyNiBmaWxlcyBjaGFuZ2VkLCA0MiBpbnNlcnRpb25zKCspLCAxMDYgZGVs
ZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvYXJjaC9hbHBoYS9rZXJuZWwvcHJvY2Vzcy5jIGIvYXJj
aC9hbHBoYS9rZXJuZWwvcHJvY2Vzcy5jCmluZGV4IDZjNzE1NTQyMDZjYy4uZGYwZGY4Njk3NTFk
IDEwMDY0NAotLS0gYS9hcmNoL2FscGhhL2tlcm5lbC9wcm9jZXNzLmMKKysrIGIvYXJjaC9hbHBo
YS9rZXJuZWwvcHJvY2Vzcy5jCkBAIC00MywxMiArNDMsNiBAQAogI2luY2x1ZGUgInByb3RvLmgi
CiAjaW5jbHVkZSAicGNpX2ltcGwuaCIKIAotLyoKLSAqIFBvd2VyIG9mZiBmdW5jdGlvbiwgaWYg
YW55Ci0gKi8KLXZvaWQgKCpwbV9wb3dlcl9vZmYpKHZvaWQpID0gbWFjaGluZV9wb3dlcl9vZmY7
Ci1FWFBPUlRfU1lNQk9MKHBtX3Bvd2VyX29mZik7Ci0KICNpZmRlZiBDT05GSUdfQUxQSEFfV1RJ
TlQKIC8qCiAgKiBTbGVlcCB0aGUgQ1BVLgpkaWZmIC0tZ2l0IGEvYXJjaC9hcmMva2VybmVsL3Jl
c2V0LmMgYi9hcmNoL2FyYy9rZXJuZWwvcmVzZXQuYwppbmRleCBmZDZjM2ViOTMwYmEuLjNhMjdi
NmEyMDJkNCAxMDA2NDQKLS0tIGEvYXJjaC9hcmMva2VybmVsL3Jlc2V0LmMKKysrIGIvYXJjaC9h
cmMva2VybmVsL3Jlc2V0LmMKQEAgLTI2LDYgKzI2LDMgQEAgdm9pZCBtYWNoaW5lX3Bvd2VyX29m
Zih2b2lkKQogCS8qIEZJWE1FIDo6ICBwb3dlciBvZmYgPz8/ICovCiAJbWFjaGluZV9oYWx0KCk7
CiB9Ci0KLXZvaWQgKCpwbV9wb3dlcl9vZmYpICh2b2lkKSA9IE5VTEw7Ci1FWFBPUlRfU1lNQk9M
KHBtX3Bvd2VyX29mZik7CmRpZmYgLS1naXQgYS9hcmNoL2FybS9rZXJuZWwvcmVib290LmMgYi9h
cmNoL2FybS9rZXJuZWwvcmVib290LmMKaW5kZXggMGNlMzg4ZjE1NDIyLi45ZTFiZjBlOWIzZTAg
MTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL2tlcm5lbC9yZWJvb3QuYworKysgYi9hcmNoL2FybS9rZXJu
ZWwvcmVib290LmMKQEAgLTYsNiArNiw3IEBACiAjaW5jbHVkZSA8bGludXgvY3B1Lmg+CiAjaW5j
bHVkZSA8bGludXgvZGVsYXkuaD4KICNpbmNsdWRlIDxsaW51eC9yZWJvb3QuaD4KKyNpbmNsdWRl
IDxsaW51eC9wbS5oPgogCiAjaW5jbHVkZSA8YXNtL2NhY2hlZmx1c2guaD4KICNpbmNsdWRlIDxh
c20vaWRtYXAuaD4KQEAgLTE5LDggKzIwLDYgQEAgdHlwZWRlZiB2b2lkICgqcGh5c19yZXNldF90
KSh1bnNpZ25lZCBsb25nLCBib29sKTsKICAqIEZ1bmN0aW9uIHBvaW50ZXJzIHRvIG9wdGlvbmFs
IG1hY2hpbmUgc3BlY2lmaWMgZnVuY3Rpb25zCiAgKi8KIHZvaWQgKCphcm1fcG1fcmVzdGFydCko
ZW51bSByZWJvb3RfbW9kZSByZWJvb3RfbW9kZSwgY29uc3QgY2hhciAqY21kKTsKLXZvaWQgKCpw
bV9wb3dlcl9vZmYpKHZvaWQpOwotRVhQT1JUX1NZTUJPTChwbV9wb3dlcl9vZmYpOwogCiAvKgog
ICogQSB0ZW1wb3Jhcnkgc3RhY2sgdG8gdXNlIGZvciBDUFUgcmVzZXQuIFRoaXMgaXMgc3RhdGlj
IHNvIHRoYXQgd2UKQEAgLTExOCw4ICsxMTcsNyBAQCB2b2lkIG1hY2hpbmVfcG93ZXJfb2ZmKHZv
aWQpCiAJbG9jYWxfaXJxX2Rpc2FibGUoKTsKIAlzbXBfc2VuZF9zdG9wKCk7CiAKLQlpZiAocG1f
cG93ZXJfb2ZmKQotCQlwbV9wb3dlcl9vZmYoKTsKKwlkb19wb3dlcl9vZmYoKTsKIH0KIAogLyoK
ZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQva2VybmVsL3Byb2Nlc3MuYyBiL2FyY2gvYXJtNjQva2Vy
bmVsL3Byb2Nlc3MuYwppbmRleCA2NjE2NDg2YTU4ZmUuLmE1ZDRjMWU4MGFiZCAxMDA2NDQKLS0t
IGEvYXJjaC9hcm02NC9rZXJuZWwvcHJvY2Vzcy5jCisrKyBiL2FyY2gvYXJtNjQva2VybmVsL3By
b2Nlc3MuYwpAQCAtNjcsOSArNjcsNiBAQCBFWFBPUlRfU1lNQk9MKF9fc3RhY2tfY2hrX2d1YXJk
KTsKIC8qCiAgKiBGdW5jdGlvbiBwb2ludGVycyB0byBvcHRpb25hbCBtYWNoaW5lIHNwZWNpZmlj
IGZ1bmN0aW9ucwogICovCi12b2lkICgqcG1fcG93ZXJfb2ZmKSh2b2lkKTsKLUVYUE9SVF9TWU1C
T0xfR1BMKHBtX3Bvd2VyX29mZik7Ci0KIHZvaWQgKCphcm1fcG1fcmVzdGFydCkoZW51bSByZWJv
b3RfbW9kZSByZWJvb3RfbW9kZSwgY29uc3QgY2hhciAqY21kKTsKIAogc3RhdGljIHZvaWQgbm9p
bnN0ciBfX2NwdV9kb19pZGxlKHZvaWQpCkBAIC0xNzIsOCArMTY5LDcgQEAgdm9pZCBtYWNoaW5l
X3Bvd2VyX29mZih2b2lkKQogewogCWxvY2FsX2lycV9kaXNhYmxlKCk7CiAJc21wX3NlbmRfc3Rv
cCgpOwotCWlmIChwbV9wb3dlcl9vZmYpCi0JCXBtX3Bvd2VyX29mZigpOworCWRvX3Bvd2VyX29m
ZigpOwogfQogCiAvKgpkaWZmIC0tZ2l0IGEvYXJjaC9jNngva2VybmVsL3Byb2Nlc3MuYyBiL2Fy
Y2gvYzZ4L2tlcm5lbC9wcm9jZXNzLmMKaW5kZXggOWY0ZmQ2YTQwYTEwLi44YjRiMjQ0NzYxNjIg
MTAwNjQ0Ci0tLSBhL2FyY2gvYzZ4L2tlcm5lbC9wcm9jZXNzLmMKKysrIGIvYXJjaC9jNngva2Vy
bmVsL3Byb2Nlc3MuYwpAQCAtMTUsNiArMTUsNyBAQAogI2luY2x1ZGUgPGxpbnV4L3JlYm9vdC5o
PgogI2luY2x1ZGUgPGxpbnV4L3NjaGVkL3Rhc2suaD4KICNpbmNsdWRlIDxsaW51eC9zY2hlZC90
YXNrX3N0YWNrLmg+CisjaW5jbHVkZSA8bGludXgvcG0uaD4KIAogI2luY2x1ZGUgPGFzbS9zeXNj
YWxscy5oPgogCkBAIC0yNSwxMiArMjYsNiBAQCB2b2lkCSgqYzZ4X2hhbHQpKHZvaWQpOwogZXh0
ZXJuIGFzbWxpbmthZ2Ugdm9pZCByZXRfZnJvbV9mb3JrKHZvaWQpOwogZXh0ZXJuIGFzbWxpbmth
Z2Ugdm9pZCByZXRfZnJvbV9rZXJuZWxfdGhyZWFkKHZvaWQpOwogCi0vKgotICogcG93ZXIgb2Zm
IGZ1bmN0aW9uLCBpZiBhbnkKLSAqLwotdm9pZCAoKnBtX3Bvd2VyX29mZikodm9pZCk7Ci1FWFBP
UlRfU1lNQk9MKHBtX3Bvd2VyX29mZik7Ci0KIHZvaWQgYXJjaF9jcHVfaWRsZSh2b2lkKQogewog
CXVuc2lnbmVkIGxvbmcgdG1wOwpAQCAtNzEsOCArNjYsNyBAQCB2b2lkIG1hY2hpbmVfaGFsdCh2
b2lkKQogCiB2b2lkIG1hY2hpbmVfcG93ZXJfb2ZmKHZvaWQpCiB7Ci0JaWYgKHBtX3Bvd2VyX29m
ZikKLQkJcG1fcG93ZXJfb2ZmKCk7CisJZG9fcG93ZXJfb2ZmKCk7CiAJaGFsdF9sb29wKCk7CiB9
CiAKZGlmZiAtLWdpdCBhL2FyY2gvY3NreS9rZXJuZWwvcG93ZXIuYyBiL2FyY2gvY3NreS9rZXJu
ZWwvcG93ZXIuYwppbmRleCA5MjNlZTRlMzgxYjguLmM3MDJlNjZjZTAzYSAxMDA2NDQKLS0tIGEv
YXJjaC9jc2t5L2tlcm5lbC9wb3dlci5jCisrKyBiL2FyY2gvY3NreS9rZXJuZWwvcG93ZXIuYwpA
QCAtMiwyMyArMiwxOSBAQAogLy8gQ29weXJpZ2h0IChDKSAyMDE4IEhhbmd6aG91IEMtU0tZIE1p
Y3Jvc3lzdGVtcyBjby4sbHRkLgogCiAjaW5jbHVkZSA8bGludXgvcmVib290Lmg+Ci0KLXZvaWQg
KCpwbV9wb3dlcl9vZmYpKHZvaWQpOwotRVhQT1JUX1NZTUJPTChwbV9wb3dlcl9vZmYpOworI2lu
Y2x1ZGUgPGxpbnV4L3BtLmg+CiAKIHZvaWQgbWFjaGluZV9wb3dlcl9vZmYodm9pZCkKIHsKIAls
b2NhbF9pcnFfZGlzYWJsZSgpOwotCWlmIChwbV9wb3dlcl9vZmYpCi0JCXBtX3Bvd2VyX29mZigp
OworCWRvX3Bvd2VyX29mZigpOwogCWFzbSB2b2xhdGlsZSAoImJrcHQiKTsKIH0KIAogdm9pZCBt
YWNoaW5lX2hhbHQodm9pZCkKIHsKIAlsb2NhbF9pcnFfZGlzYWJsZSgpOwotCWlmIChwbV9wb3dl
cl9vZmYpCi0JCXBtX3Bvd2VyX29mZigpOworCWRvX3Bvd2VyX29mZigpOwogCWFzbSB2b2xhdGls
ZSAoImJrcHQiKTsKIH0KIApkaWZmIC0tZ2l0IGEvYXJjaC9oODMwMC9rZXJuZWwvcHJvY2Vzcy5j
IGIvYXJjaC9oODMwMC9rZXJuZWwvcHJvY2Vzcy5jCmluZGV4IGJjMTM2NGRiNThmZS4uMDIwYmY3
OGE3NzljIDEwMDY0NAotLS0gYS9hcmNoL2g4MzAwL2tlcm5lbC9wcm9jZXNzLmMKKysrIGIvYXJj
aC9oODMwMC9rZXJuZWwvcHJvY2Vzcy5jCkBAIC00Niw5ICs0Niw2IEBACiAjaW5jbHVkZSA8YXNt
L3RyYXBzLmg+CiAjaW5jbHVkZSA8YXNtL3NldHVwLmg+CiAKLXZvaWQgKCpwbV9wb3dlcl9vZmYp
KHZvaWQpID0gTlVMTDsKLUVYUE9SVF9TWU1CT0wocG1fcG93ZXJfb2ZmKTsKLQogYXNtbGlua2Fn
ZSB2b2lkIHJldF9mcm9tX2Zvcmsodm9pZCk7CiBhc21saW5rYWdlIHZvaWQgcmV0X2Zyb21fa2Vy
bmVsX3RocmVhZCh2b2lkKTsKIApkaWZmIC0tZ2l0IGEvYXJjaC9oZXhhZ29uL2tlcm5lbC9yZXNl
dC5jIGIvYXJjaC9oZXhhZ29uL2tlcm5lbC9yZXNldC5jCmluZGV4IGRhMzYxMTRkOTI4Zi4uODM3
MGRkYmNkZmQ5IDEwMDY0NAotLS0gYS9hcmNoL2hleGFnb24va2VybmVsL3Jlc2V0LmMKKysrIGIv
YXJjaC9oZXhhZ29uL2tlcm5lbC9yZXNldC5jCkBAIC0xOSw2ICsxOSwzIEBAIHZvaWQgbWFjaGlu
ZV9oYWx0KHZvaWQpCiB2b2lkIG1hY2hpbmVfcmVzdGFydChjaGFyICpjbWQpCiB7CiB9Ci0KLXZv
aWQgKCpwbV9wb3dlcl9vZmYpKHZvaWQpID0gTlVMTDsKLUVYUE9SVF9TWU1CT0wocG1fcG93ZXJf
b2ZmKTsKZGlmZiAtLWdpdCBhL2FyY2gvaWE2NC9rZXJuZWwvcHJvY2Vzcy5jIGIvYXJjaC9pYTY0
L2tlcm5lbC9wcm9jZXNzLmMKaW5kZXggNGViYmZhMDc2YTI2Li43MjEwNGI5Njc2NjggMTAwNjQ0
Ci0tLSBhL2FyY2gvaWE2NC9rZXJuZWwvcHJvY2Vzcy5jCisrKyBiL2FyY2gvaWE2NC9rZXJuZWwv
cHJvY2Vzcy5jCkBAIC01Nyw4ICs1Nyw2IEBAIHZvaWQgKCppYTY0X21hcmtfaWRsZSkoaW50KTsK
IAogdW5zaWduZWQgbG9uZyBib290X29wdGlvbl9pZGxlX292ZXJyaWRlID0gSURMRV9OT19PVkVS
UklERTsKIEVYUE9SVF9TWU1CT0woYm9vdF9vcHRpb25faWRsZV9vdmVycmlkZSk7Ci12b2lkICgq
cG1fcG93ZXJfb2ZmKSAodm9pZCk7Ci1FWFBPUlRfU1lNQk9MKHBtX3Bvd2VyX29mZik7CiAKIHN0
YXRpYyB2b2lkCiBpYTY0X2RvX3Nob3dfc3RhY2sgKHN0cnVjdCB1bndfZnJhbWVfaW5mbyAqaW5m
bywgdm9pZCAqYXJnKQpAQCAtNjAyLDggKzYwMCw3IEBAIG1hY2hpbmVfaGFsdCAodm9pZCkKIHZv
aWQKIG1hY2hpbmVfcG93ZXJfb2ZmICh2b2lkKQogewotCWlmIChwbV9wb3dlcl9vZmYpCi0JCXBt
X3Bvd2VyX29mZigpOworCWRvX3Bvd2VyX29mZigpCiAJbWFjaGluZV9oYWx0KCk7CiB9CiAKZGlm
ZiAtLWdpdCBhL2FyY2gvbTY4ay9rZXJuZWwvcHJvY2Vzcy5jIGIvYXJjaC9tNjhrL2tlcm5lbC9w
cm9jZXNzLmMKaW5kZXggMDgzNTlhNmUwNThmLi5iOGRjMTBhNjMwZTEgMTAwNjQ0Ci0tLSBhL2Fy
Y2gvbTY4ay9rZXJuZWwvcHJvY2Vzcy5jCisrKyBiL2FyY2gvbTY4ay9rZXJuZWwvcHJvY2Vzcy5j
CkBAIC03Miw5ICs3Miw2IEBAIHZvaWQgbWFjaGluZV9wb3dlcl9vZmYodm9pZCkKIAlmb3IgKDs7
KTsKIH0KIAotdm9pZCAoKnBtX3Bvd2VyX29mZikodm9pZCkgPSBtYWNoaW5lX3Bvd2VyX29mZjsK
LUVYUE9SVF9TWU1CT0wocG1fcG93ZXJfb2ZmKTsKLQogdm9pZCBzaG93X3JlZ3Moc3RydWN0IHB0
X3JlZ3MgKiByZWdzKQogewogCXByX2luZm8oIkZvcm1hdCAlMDJ4ICBWZWN0b3I6ICUwNHggIFBD
OiAlMDhseCAgU3RhdHVzOiAlMDR4ICAgICVzXG4iLApkaWZmIC0tZ2l0IGEvYXJjaC9taWNyb2Js
YXplL2tlcm5lbC9wcm9jZXNzLmMgYi9hcmNoL21pY3JvYmxhemUva2VybmVsL3Byb2Nlc3MuYwpp
bmRleCA2NTdjMmJlYjY2NWUuLmYxZGQ2NmExNGFiNiAxMDA2NDQKLS0tIGEvYXJjaC9taWNyb2Js
YXplL2tlcm5lbC9wcm9jZXNzLmMKKysrIGIvYXJjaC9taWNyb2JsYXplL2tlcm5lbC9wcm9jZXNz
LmMKQEAgLTQ2LDkgKzQ2LDYgQEAgdm9pZCBzaG93X3JlZ3Moc3RydWN0IHB0X3JlZ3MgKnJlZ3Mp
CiAJCQkJcmVncy0+bXNyLCByZWdzLT5lYXIsIHJlZ3MtPmVzciwgcmVncy0+ZnNyKTsKIH0KIAot
dm9pZCAoKnBtX3Bvd2VyX29mZikodm9pZCkgPSBOVUxMOwotRVhQT1JUX1NZTUJPTChwbV9wb3dl
cl9vZmYpOwotCiB2b2lkIGZsdXNoX3RocmVhZCh2b2lkKQogewogfQpkaWZmIC0tZ2l0IGEvYXJj
aC9taXBzL2tlcm5lbC9yZXNldC5jIGIvYXJjaC9taXBzL2tlcm5lbC9yZXNldC5jCmluZGV4IDYy
ODg3ODBiNzc5ZS4uNzNlMzJlYmE0MjJmIDEwMDY0NAotLS0gYS9hcmNoL21pcHMva2VybmVsL3Jl
c2V0LmMKKysrIGIvYXJjaC9taXBzL2tlcm5lbC9yZXNldC5jCkBAIC0yNSw5ICsyNSw2IEBACiAg
Ki8KIHZvaWQgKCpfbWFjaGluZV9yZXN0YXJ0KShjaGFyICpjb21tYW5kKTsKIHZvaWQgKCpfbWFj
aGluZV9oYWx0KSh2b2lkKTsKLXZvaWQgKCpwbV9wb3dlcl9vZmYpKHZvaWQpOwotCi1FWFBPUlRf
U1lNQk9MKHBtX3Bvd2VyX29mZik7CiAKIHN0YXRpYyB2b2lkIG1hY2hpbmVfaGFuZyh2b2lkKQog
ewpAQCAtMTE0LDggKzExMSw3IEBAIHZvaWQgbWFjaGluZV9oYWx0KHZvaWQpCiAKIHZvaWQgbWFj
aGluZV9wb3dlcl9vZmYodm9pZCkKIHsKLQlpZiAocG1fcG93ZXJfb2ZmKQotCQlwbV9wb3dlcl9v
ZmYoKTsKKwlkb19wb3dlcl9vZmYoKTsKIAogI2lmZGVmIENPTkZJR19TTVAKIAlwcmVlbXB0X2Rp
c2FibGUoKTsKZGlmZiAtLWdpdCBhL2FyY2gvbmRzMzIva2VybmVsL3Byb2Nlc3MuYyBiL2FyY2gv
bmRzMzIva2VybmVsL3Byb2Nlc3MuYwppbmRleCBlMDFhZDVkMTcyMjQuLjYyNGUyYTU2MzA4MiAx
MDA2NDQKLS0tIGEvYXJjaC9uZHMzMi9rZXJuZWwvcHJvY2Vzcy5jCisrKyBiL2FyY2gvbmRzMzIv
a2VybmVsL3Byb2Nlc3MuYwpAQCAtMTIsNiArMTIsNyBAQAogI2luY2x1ZGUgPGFzbS9mcHUuaD4K
ICNpbmNsdWRlIDxsaW51eC9wdHJhY2UuaD4KICNpbmNsdWRlIDxsaW51eC9yZWJvb3QuaD4KKyNp
bmNsdWRlIDxsaW51eC9wbS5oPgogCiAjaWYgSVNfRU5BQkxFRChDT05GSUdfTEFaWV9GUFUpCiBz
dHJ1Y3QgdGFza19zdHJ1Y3QgKmxhc3RfdGFza191c2VkX21hdGg7CkBAIC0yNyw5ICsyOCw2IEBA
IGV4dGVybiBpbmxpbmUgdm9pZCBhcmNoX3Jlc2V0KGNoYXIgbW9kZSkKIAl9CiB9CiAKLXZvaWQg
KCpwbV9wb3dlcl9vZmYpICh2b2lkKTsKLUVYUE9SVF9TWU1CT0wocG1fcG93ZXJfb2ZmKTsKLQog
c3RhdGljIGNoYXIgcmVib290X21vZGVfbmRzMzIgPSAnaCc7CiAKIGludCBfX2luaXQgcmVib290
X3NldHVwKGNoYXIgKnN0cikKQEAgLTU0LDggKzUyLDcgQEAgRVhQT1JUX1NZTUJPTChtYWNoaW5l
X2hhbHQpOwogCiB2b2lkIG1hY2hpbmVfcG93ZXJfb2ZmKHZvaWQpCiB7Ci0JaWYgKHBtX3Bvd2Vy
X29mZikKLQkJcG1fcG93ZXJfb2ZmKCk7CisJZG9fcG93ZXJfb2ZmKCk7CiB9CiAKIEVYUE9SVF9T
WU1CT0wobWFjaGluZV9wb3dlcl9vZmYpOwpkaWZmIC0tZ2l0IGEvYXJjaC9uaW9zMi9rZXJuZWwv
cHJvY2Vzcy5jIGIvYXJjaC9uaW9zMi9rZXJuZWwvcHJvY2Vzcy5jCmluZGV4IDUwYjRlYjE5YTZj
Yy4uYTYxOTVjYzAyZWE0IDEwMDY0NAotLS0gYS9hcmNoL25pb3MyL2tlcm5lbC9wcm9jZXNzLmMK
KysrIGIvYXJjaC9uaW9zMi9rZXJuZWwvcHJvY2Vzcy5jCkBAIC0yOCw5ICsyOCw2IEBACiBhc21s
aW5rYWdlIHZvaWQgcmV0X2Zyb21fZm9yayh2b2lkKTsKIGFzbWxpbmthZ2Ugdm9pZCByZXRfZnJv
bV9rZXJuZWxfdGhyZWFkKHZvaWQpOwogCi12b2lkICgqcG1fcG93ZXJfb2ZmKSh2b2lkKSA9IE5V
TEw7Ci1FWFBPUlRfU1lNQk9MKHBtX3Bvd2VyX29mZik7Ci0KIHZvaWQgYXJjaF9jcHVfaWRsZSh2
b2lkKQogewogCXJhd19sb2NhbF9pcnFfZW5hYmxlKCk7CmRpZmYgLS1naXQgYS9hcmNoL29wZW5y
aXNjL2tlcm5lbC9wcm9jZXNzLmMgYi9hcmNoL29wZW5yaXNjL2tlcm5lbC9wcm9jZXNzLmMKaW5k
ZXggM2M5ODcyOGNjZTI0Li5jMDIzNDNiYWNmNTkgMTAwNjQ0Ci0tLSBhL2FyY2gvb3BlbnJpc2Mv
a2VybmVsL3Byb2Nlc3MuYworKysgYi9hcmNoL29wZW5yaXNjL2tlcm5lbC9wcm9jZXNzLmMKQEAg
LTg0LDkgKzg0LDYgQEAgdm9pZCBhcmNoX2NwdV9pZGxlKHZvaWQpCiAJCW10c3ByKFNQUl9QTVIs
IG1mc3ByKFNQUl9QTVIpIHwgU1BSX1BNUl9ETUUpOwogfQogCi12b2lkICgqcG1fcG93ZXJfb2Zm
KSAodm9pZCkgPSBtYWNoaW5lX3Bvd2VyX29mZjsKLUVYUE9SVF9TWU1CT0wocG1fcG93ZXJfb2Zm
KTsKLQogLyoKICAqIFdoZW4gYSBwcm9jZXNzIGRvZXMgYW4gImV4ZWMiLCBtYWNoaW5lIHN0YXRl
IGxpa2UgRlBVIGFuZCBkZWJ1ZwogICogcmVnaXN0ZXJzIG5lZWQgdG8gYmUgcmVzZXQuICBUaGlz
IGlzIGEgaG9vayBmdW5jdGlvbiBmb3IgdGhhdC4KZGlmZiAtLWdpdCBhL2FyY2gvcGFyaXNjL2tl
cm5lbC9wcm9jZXNzLmMgYi9hcmNoL3BhcmlzYy9rZXJuZWwvcHJvY2Vzcy5jCmluZGV4IGE5MmEy
M2Q2YWNkOS4uOGI5NDU5OWM5NDgwIDEwMDY0NAotLS0gYS9hcmNoL3BhcmlzYy9rZXJuZWwvcHJv
Y2Vzcy5jCisrKyBiL2FyY2gvcGFyaXNjL2tlcm5lbC9wcm9jZXNzLmMKQEAgLTQxLDYgKzQxLDcg
QEAKICNpbmNsdWRlIDxsaW51eC9yY3VwZGF0ZS5oPgogI2luY2x1ZGUgPGxpbnV4L3JhbmRvbS5o
PgogI2luY2x1ZGUgPGxpbnV4L25taS5oPgorI2luY2x1ZGUgPGxpbnV4L3BtLmg+CiAKICNpbmNs
dWRlIDxhc20vaW8uaD4KICNpbmNsdWRlIDxhc20vYXNtLW9mZnNldHMuaD4KQEAgLTExNyw5ICsx
MTgsOCBAQCB2b2lkIG1hY2hpbmVfcG93ZXJfb2ZmKHZvaWQpCiAJcGRjX2NoYXNzaXNfc2VuZF9z
dGF0dXMoUERDX0NIQVNTSVNfRElSRUNUX1NIVVRET1dOKTsKIAogCS8qIGlwbWlfcG93ZXJvZmYg
bWF5IGhhdmUgYmVlbiBpbnN0YWxsZWQuICovCi0JaWYgKHBtX3Bvd2VyX29mZikKLQkJcG1fcG93
ZXJfb2ZmKCk7Ci0JCQorCWRvX3Bvd2VyX29mZigpOworCiAJLyogSXQgc2VlbXMgd2UgaGF2ZSBu
byB3YXkgdG8gcG93ZXIgdGhlIHN5c3RlbSBvZmYgdmlhCiAJICogc29mdHdhcmUuIFRoZSB1c2Vy
IGhhcyB0byBwcmVzcyB0aGUgYnV0dG9uIGhpbXNlbGYuICovCiAKQEAgLTEzMiw5ICsxMzIsNiBA
QCB2b2lkIG1hY2hpbmVfcG93ZXJfb2ZmKHZvaWQpCiAJZm9yICg7Oyk7CiB9CiAKLXZvaWQgKCpw
bV9wb3dlcl9vZmYpKHZvaWQpOwotRVhQT1JUX1NZTUJPTChwbV9wb3dlcl9vZmYpOwotCiB2b2lk
IG1hY2hpbmVfaGFsdCh2b2lkKQogewogCW1hY2hpbmVfcG93ZXJfb2ZmKCk7CmRpZmYgLS1naXQg
YS9hcmNoL3Bvd2VycGMva2VybmVsL3NldHVwLWNvbW1vbi5jIGIvYXJjaC9wb3dlcnBjL2tlcm5l
bC9zZXR1cC1jb21tb24uYwppbmRleCA3MWYzOGU5MjQ4YmUuLmIzNjM0NjMyNjE3NiAxMDA2NDQK
LS0tIGEvYXJjaC9wb3dlcnBjL2tlcm5lbC9zZXR1cC1jb21tb24uYworKysgYi9hcmNoL3Bvd2Vy
cGMva2VybmVsL3NldHVwLWNvbW1vbi5jCkBAIC0zMiw2ICszMiw3IEBACiAjaW5jbHVkZSA8bGlu
dXgvb2ZfcGxhdGZvcm0uaD4KICNpbmNsdWRlIDxsaW51eC9odWdldGxiLmg+CiAjaW5jbHVkZSA8
bGludXgvcGd0YWJsZS5oPgorI2luY2x1ZGUgPGxpbnV4L3BtLmg+CiAjaW5jbHVkZSA8YXNtL2Rl
YnVnZnMuaD4KICNpbmNsdWRlIDxhc20vaW8uaD4KICNpbmNsdWRlIDxhc20vcGFjYS5oPgpAQCAt
MTYzLDkgKzE2NCw3IEBAIHZvaWQgbWFjaGluZV9yZXN0YXJ0KGNoYXIgKmNtZCkKIHZvaWQgbWFj
aGluZV9wb3dlcl9vZmYodm9pZCkKIHsKIAltYWNoaW5lX3NodXRkb3duKCk7Ci0JaWYgKHBtX3Bv
d2VyX29mZikKLQkJcG1fcG93ZXJfb2ZmKCk7Ci0KKwlkb19wb3dlcl9vZmYoKTsKIAlzbXBfc2Vu
ZF9zdG9wKCk7CiAJbWFjaGluZV9oYW5nKCk7CiB9CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMv
eG1vbi94bW9uLmMgYi9hcmNoL3Bvd2VycGMveG1vbi94bW9uLmMKaW5kZXggZGNkODE3Y2EyZWRm
Li4zOGQ3NmMyODM0MTIgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy94bW9uL3htb24uYworKysg
Yi9hcmNoL3Bvd2VycGMveG1vbi94bW9uLmMKQEAgLTI2LDYgKzI2LDcgQEAKICNpbmNsdWRlIDxs
aW51eC9jdHlwZS5oPgogI2luY2x1ZGUgPGxpbnV4L2hpZ2htZW0uaD4KICNpbmNsdWRlIDxsaW51
eC9zZWN1cml0eS5oPgorI2luY2x1ZGUgPGxpbnV4L3BtLmg+CiAKICNpbmNsdWRlIDxhc20vZGVi
dWdmcy5oPgogI2luY2x1ZGUgPGFzbS9wdHJhY2UuaD4KQEAgLTEyMzcsOCArMTIzOCw3IEBAIHN0
YXRpYyB2b2lkIGJvb3RjbWRzKHZvaWQpCiAJfSBlbHNlIGlmIChjbWQgPT0gJ2gnKSB7CiAJCXBw
Y19tZC5oYWx0KCk7CiAJfSBlbHNlIGlmIChjbWQgPT0gJ3AnKSB7Ci0JCWlmIChwbV9wb3dlcl9v
ZmYpCi0JCQlwbV9wb3dlcl9vZmYoKTsKKwkJZG9fcG93ZXJfb2ZmKCk7CiAJfQogfQogCmRpZmYg
LS1naXQgYS9hcmNoL3Jpc2N2L2tlcm5lbC9yZXNldC5jIGIvYXJjaC9yaXNjdi9rZXJuZWwvcmVz
ZXQuYwppbmRleCBlZTU4NzhkOTY4Y2MuLmY4YmNmNGQ4YjE5YiAxMDA2NDQKLS0tIGEvYXJjaC9y
aXNjdi9rZXJuZWwvcmVzZXQuYworKysgYi9hcmNoL3Jpc2N2L2tlcm5lbC9yZXNldC5jCkBAIC0x
Miw5ICsxMiw2IEBAIHN0YXRpYyB2b2lkIGRlZmF1bHRfcG93ZXJfb2ZmKHZvaWQpCiAJCXdhaXRf
Zm9yX2ludGVycnVwdCgpOwogfQogCi12b2lkICgqcG1fcG93ZXJfb2ZmKSh2b2lkKSA9IGRlZmF1
bHRfcG93ZXJfb2ZmOwotRVhQT1JUX1NZTUJPTChwbV9wb3dlcl9vZmYpOwotCiB2b2lkIG1hY2hp
bmVfcmVzdGFydChjaGFyICpjbWQpCiB7CiAJZG9fa2VybmVsX3Jlc3RhcnQoY21kKTsKQEAgLTIz
LDEwICsyMCwxMiBAQCB2b2lkIG1hY2hpbmVfcmVzdGFydChjaGFyICpjbWQpCiAKIHZvaWQgbWFj
aGluZV9oYWx0KHZvaWQpCiB7Ci0JcG1fcG93ZXJfb2ZmKCk7CisJZG9fcG93ZXJfb2ZmKCk7CisJ
ZGVmYXVsdF9wb3dlcl9vZmYoKTsKIH0KIAogdm9pZCBtYWNoaW5lX3Bvd2VyX29mZih2b2lkKQog
ewotCXBtX3Bvd2VyX29mZigpOworCWRvX3Bvd2VyX29mZigpOworCWRlZmF1bHRfcG93ZXJfb2Zm
KCk7CiB9CmRpZmYgLS1naXQgYS9hcmNoL3MzOTAva2VybmVsL3NldHVwLmMgYi9hcmNoL3MzOTAv
a2VybmVsL3NldHVwLmMKaW5kZXggMWZiZWQ5MWM3M2JjLi40ZTM0OGQzYjcxMWYgMTAwNjQ0Ci0t
LSBhL2FyY2gvczM5MC9rZXJuZWwvc2V0dXAuYworKysgYi9hcmNoL3MzOTAva2VybmVsL3NldHVw
LmMKQEAgLTMwMiw5ICszMDIsNiBAQCB2b2lkIG1hY2hpbmVfcG93ZXJfb2ZmKHZvaWQpCiAvKgog
ICogRHVtbXkgcG93ZXIgb2ZmIGZ1bmN0aW9uLgogICovCi12b2lkICgqcG1fcG93ZXJfb2ZmKSh2
b2lkKSA9IG1hY2hpbmVfcG93ZXJfb2ZmOwotRVhQT1JUX1NZTUJPTF9HUEwocG1fcG93ZXJfb2Zm
KTsKLQogdm9pZCAqcmVzdGFydF9zdGFjazsKIAogdW5zaWduZWQgbG9uZyBzdGFja19hbGxvYyh2
b2lkKQpkaWZmIC0tZ2l0IGEvYXJjaC9zaC9rZXJuZWwvcmVib290LmMgYi9hcmNoL3NoL2tlcm5l
bC9yZWJvb3QuYwppbmRleCA1YzMzZjAzNjQxOGIuLjhjOWI2M2UxZGJiYSAxMDA2NDQKLS0tIGEv
YXJjaC9zaC9rZXJuZWwvcmVib290LmMKKysrIGIvYXJjaC9zaC9rZXJuZWwvcmVib290LmMKQEAg
LTEwLDkgKzEwLDYgQEAKICNpbmNsdWRlIDxhc20vdGxiZmx1c2guaD4KICNpbmNsdWRlIDxhc20v
dHJhcHMuaD4KIAotdm9pZCAoKnBtX3Bvd2VyX29mZikodm9pZCk7Ci1FWFBPUlRfU1lNQk9MKHBt
X3Bvd2VyX29mZik7Ci0KIHN0YXRpYyB2b2lkIHdhdGNoZG9nX3RyaWdnZXJfaW1tZWRpYXRlKHZv
aWQpCiB7CiAJc2hfd2R0X3dyaXRlX2NudCgweEZGKTsKQEAgLTQ2LDggKzQzLDcgQEAgc3RhdGlj
IHZvaWQgbmF0aXZlX21hY2hpbmVfc2h1dGRvd24odm9pZCkKIAogc3RhdGljIHZvaWQgbmF0aXZl
X21hY2hpbmVfcG93ZXJfb2ZmKHZvaWQpCiB7Ci0JaWYgKHBtX3Bvd2VyX29mZikKLQkJcG1fcG93
ZXJfb2ZmKCk7CisJZG9fcG93ZXJfb2ZmKCk7CiB9CiAKIHN0YXRpYyB2b2lkIG5hdGl2ZV9tYWNo
aW5lX2hhbHQodm9pZCkKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2tlcm5lbC9yZWJvb3QuYyBiL2Fy
Y2gveDg2L2tlcm5lbC9yZWJvb3QuYwppbmRleCBkYjExNTk0M2U4YmQuLmNkZGY5Y2E0ZTZmNiAx
MDA2NDQKLS0tIGEvYXJjaC94ODYva2VybmVsL3JlYm9vdC5jCisrKyBiL2FyY2gveDg2L2tlcm5l
bC9yZWJvb3QuYwpAQCAtMzQsMTIgKzM0LDYgQEAKICNpbmNsdWRlIDxhc20vZWZpLmg+CiAKIC8q
Ci0gKiBQb3dlciBvZmYgZnVuY3Rpb24sIGlmIGFueQotICovCi12b2lkICgqcG1fcG93ZXJfb2Zm
KSh2b2lkKTsKLUVYUE9SVF9TWU1CT0wocG1fcG93ZXJfb2ZmKTsKLQotLyoKICAqIFRoaXMgaXMg
c2V0IGlmIHdlIG5lZWQgdG8gZ28gdGhyb3VnaCB0aGUgJ2VtZXJnZW5jeScgcGF0aC4KICAqIFdo
ZW4gbWFjaGluZV9lbWVyZ2VuY3lfcmVzdGFydCgpIGlzIGNhbGxlZCwgd2UgbWF5IGJlIG9uCiAg
KiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgYW5kIHdvbid0IGJlIGFibGUgdG8gZG8gYSBjbGVhbiBj
bGVhbnVwCkBAIC03NDcsMTEgKzc0MSwxMCBAQCBzdGF0aWMgdm9pZCBuYXRpdmVfbWFjaGluZV9o
YWx0KHZvaWQpCiAKIHN0YXRpYyB2b2lkIG5hdGl2ZV9tYWNoaW5lX3Bvd2VyX29mZih2b2lkKQog
ewotCWlmIChwbV9wb3dlcl9vZmYpIHsKLQkJaWYgKCFyZWJvb3RfZm9yY2UpCi0JCQltYWNoaW5l
X3NodXRkb3duKCk7Ci0JCXBtX3Bvd2VyX29mZigpOwotCX0KKwlpZiAoIXJlYm9vdF9mb3JjZSkK
KwkJbWFjaGluZV9zaHV0ZG93bigpOworCWRvX3Bvd2VyX29mZigpOworCiAJLyogQSBmYWxsYmFj
ayBpbiBjYXNlIHRoZXJlIGlzIG5vIFBNIGluZm8gYXZhaWxhYmxlICovCiAJdGJvb3Rfc2h1dGRv
d24oVEJfU0hVVERPV05fSEFMVCk7CiB9CmRpZmYgLS1naXQgYS9hcmNoL3g4Ni94ZW4vZW5saWdo
dGVuX3B2LmMgYi9hcmNoL3g4Ni94ZW4vZW5saWdodGVuX3B2LmMKaW5kZXggNDQwOTMwNjM2NGRj
Li43ZTU0MTZjMzE2ZDMgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L3hlbi9lbmxpZ2h0ZW5fcHYuYwor
KysgYi9hcmNoL3g4Ni94ZW4vZW5saWdodGVuX3B2LmMKQEAgLTMzLDYgKzMzLDcgQEAKICNpbmNs
dWRlIDxsaW51eC9nZnAuaD4KICNpbmNsdWRlIDxsaW51eC9lZGQuaD4KICNpbmNsdWRlIDxsaW51
eC9vYmp0b29sLmg+CisjaW5jbHVkZSA8bGludXgvcG0uaD4KIAogI2luY2x1ZGUgPHhlbi94ZW4u
aD4KICNpbmNsdWRlIDx4ZW4vZXZlbnRzLmg+CkBAIC0xMDg0LDggKzEwODUsNyBAQCBzdGF0aWMg
dm9pZCB4ZW5fbWFjaGluZV9oYWx0KHZvaWQpCiAKIHN0YXRpYyB2b2lkIHhlbl9tYWNoaW5lX3Bv
d2VyX29mZih2b2lkKQogewotCWlmIChwbV9wb3dlcl9vZmYpCi0JCXBtX3Bvd2VyX29mZigpOwor
CWRvX3Bvd2VyX29mZigpOwogCXhlbl9yZWJvb3QoU0hVVERPV05fcG93ZXJvZmYpOwogfQogCmRp
ZmYgLS1naXQgYS9hcmNoL3h0ZW5zYS9rZXJuZWwvcHJvY2Vzcy5jIGIvYXJjaC94dGVuc2Eva2Vy
bmVsL3Byb2Nlc3MuYwppbmRleCAzOTdhN2RlNTYzNzcuLmZiOGQ1ZTk4MjliYSAxMDA2NDQKLS0t
IGEvYXJjaC94dGVuc2Eva2VybmVsL3Byb2Nlc3MuYworKysgYi9hcmNoL3h0ZW5zYS9rZXJuZWwv
cHJvY2Vzcy5jCkBAIC01MSwxMCArNTEsNiBAQAogZXh0ZXJuIHZvaWQgcmV0X2Zyb21fZm9yayh2
b2lkKTsKIGV4dGVybiB2b2lkIHJldF9mcm9tX2tlcm5lbF90aHJlYWQodm9pZCk7CiAKLXZvaWQg
KCpwbV9wb3dlcl9vZmYpKHZvaWQpID0gTlVMTDsKLUVYUE9SVF9TWU1CT0wocG1fcG93ZXJfb2Zm
KTsKLQotCiAjaWZkZWYgQ09ORklHX1NUQUNLUFJPVEVDVE9SCiAjaW5jbHVkZSA8bGludXgvc3Rh
Y2twcm90ZWN0b3IuaD4KIHVuc2lnbmVkIGxvbmcgX19zdGFja19jaGtfZ3VhcmQgX19yZWFkX21v
c3RseTsKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvcG0uaCBiL2luY2x1ZGUvbGludXgvcG0u
aAppbmRleCA0N2FjYTZiYWMxZDYuLjc4NjI3Yzk3MGJlMCAxMDA2NDQKLS0tIGEvaW5jbHVkZS9s
aW51eC9wbS5oCisrKyBiL2luY2x1ZGUvbGludXgvcG0uaApAQCAtMjIsNiArMjIsOCBAQAogZXh0
ZXJuIHZvaWQgKCpwbV9wb3dlcl9vZmYpKHZvaWQpOwogZXh0ZXJuIHZvaWQgKCpwbV9wb3dlcl9v
ZmZfcHJlcGFyZSkodm9pZCk7CiAKK2V4dGVybiB2b2lkIGRvX3Bvd2VyX29mZih2b2lkKTsKKwog
c3RydWN0IGRldmljZTsgLyogd2UgaGF2ZSBhIGNpcmN1bGFyIGRlcCB3aXRoIGRldmljZS5oICov
CiAjaWZkZWYgQ09ORklHX1ZUX0NPTlNPTEVfU0xFRVAKIGV4dGVybiB2b2lkIHBtX3Z0X3N3aXRj
aF9yZXF1aXJlZChzdHJ1Y3QgZGV2aWNlICpkZXYsIGJvb2wgcmVxdWlyZWQpOwpkaWZmIC0tZ2l0
IGEva2VybmVsL3JlYm9vdC5jIGIva2VybmVsL3JlYm9vdC5jCmluZGV4IGViMWIxNTg1MDc2MS4u
ZWM0Y2Q2NmRkMWFlIDEwMDY0NAotLS0gYS9rZXJuZWwvcmVib290LmMKKysrIGIva2VybmVsL3Jl
Ym9vdC5jCkBAIC01Myw2ICs1MywxNiBAQCBpbnQgcmVib290X2ZvcmNlOwogdm9pZCAoKnBtX3Bv
d2VyX29mZl9wcmVwYXJlKSh2b2lkKTsKIEVYUE9SVF9TWU1CT0xfR1BMKHBtX3Bvd2VyX29mZl9w
cmVwYXJlKTsKIAordm9pZCAoKnBtX3Bvd2VyX29mZikodm9pZCk7CitFWFBPUlRfU1lNQk9MX0dQ
TChwbV9wb3dlcl9vZmYpOworCit2b2lkIGRvX3Bvd2VyX29mZih2b2lkKQoreworCWlmIChwbV9w
b3dlcl9vZmYpCisJCXBtX3Bvd2VyX29mZigpOworfQorRVhQT1JUX1NZTUJPTF9HUEwoZG9fcG93
ZXJfb2ZmKTsKKwogLyoqCiAgKgllbWVyZ2VuY3lfcmVzdGFydCAtIHJlYm9vdCB0aGUgc3lzdGVt
CiAgKgotLSAKMi4xMS4wCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fXwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMubGlicmVjb3Jlcy5v
cmcKaHR0cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVucmlzYwo=
