Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 7034237BB05
	for <lists+openrisc@lfdr.de>; Wed, 12 May 2021 12:43:13 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 1AC0120D79;
	Wed, 12 May 2021 12:43:13 +0200 (CEST)
Received: from foss.arm.com (foss.arm.com [217.140.110.172])
 by mail.librecores.org (Postfix) with ESMTP id D225620E2D
 for <openrisc@lists.librecores.org>; Wed, 12 May 2021 11:47:47 +0200 (CEST)
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.121.207.14])
 by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id A3064D6E;
 Wed, 12 May 2021 02:47:46 -0700 (PDT)
Received: from e113632-lin.cambridge.arm.com (e113632-lin.cambridge.arm.com
 [10.1.194.46])
 by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id 742143F719;
 Wed, 12 May 2021 02:47:43 -0700 (PDT)
From: Valentin Schneider <valentin.schneider@arm.com>
To: linux-kernel@vger.kernel.org, linux-alpha@vger.kernel.org,
 linux-snps-arc@lists.infradead.org, linux-arm-kernel@lists.infradead.org,
 linux-csky@vger.kernel.org, linux-ia64@vger.kernel.org,
 linux-mips@vger.kernel.org, openrisc@lists.librecores.org,
 linux-parisc@vger.kernel.org, linuxppc-dev@lists.ozlabs.org,
 linux-riscv@lists.infradead.org, linux-s390@vger.kernel.org,
 linux-sh@vger.kernel.org, sparclinux@vger.kernel.org,
 linux-xtensa@linux-xtensa.org, linux-arch@vger.kernel.org
Date: Wed, 12 May 2021 10:46:36 +0100
Message-Id: <20210512094636.2958515-1-valentin.schneider@arm.com>
X-Mailer: git-send-email 2.25.1
MIME-Version: 1.0
X-Mailman-Approved-At: Wed, 12 May 2021 12:43:10 +0200
Subject: [OpenRISC] [PATCH] sched: Initialize the idle task with preemption
 disabled
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Juri Lelli <juri.lelli@redhat.com>,
 Vincent Guittot <vincent.guittot@linaro.org>, yejune.deng@gmail.com,
 peterz@infradead.org, Steven Rostedt <rostedt@goodmis.org>,
 Dietmar Eggemann <dietmar.eggemann@arm.com>, tglx@linutronix.de,
 bristot@redhat.com, mingo@kernel.org
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

QXMgcG9pbnRlZCBvdXQgYnkgY29tbWl0CgogIGRlOWI4ZjVkY2JkOSAoInNjaGVkOiBGaXggY3Jh
c2ggdHJ5aW5nIHRvIGRlcXVldWUvZW5xdWV1ZSB0aGUgaWRsZSB0aHJlYWQiKQoKaW5pdF9pZGxl
KCkgY2FuIGFuZCB3aWxsIGJlIGludm9rZWQgbW9yZSB0aGFuIG9uY2Ugb24gdGhlIHNhbWUgaWRs
ZQp0YXNrLiBBdCBib290IHRpbWUsIGl0IGlzIGludm9rZWQgZm9yIHRoZSBib290IENQVSB0aHJl
YWQgYnkKc2NoZWRfaW5pdCgpLiBUaGVuIHNtcF9pbml0KCkgY3JlYXRlcyB0aGUgdGhyZWFkcyBm
b3IgYWxsIHRoZSBzZWNvbmRhcnkKQ1BVcyBhbmQgaW52b2tlcyBpbml0X2lkbGUoKSBvbiB0aGVt
LgoKQXMgdGhlIGhvdHBsdWcgbWFjaGluZXJ5IGJyaW5ncyB0aGUgc2Vjb25kYXJpZXMgdG8gbGlm
ZSwgaXQgd2lsbCBpc3N1ZQpjYWxscyB0byBpZGxlX3RocmVhZF9nZXQoKSwgd2hpY2ggaXRzZWxm
IGludm9rZXMgaW5pdF9pZGxlKCkgeWV0IGFnYWluLgpJbiB0aGlzIGNhc2UgaXQncyBpbnZva2Vk
IHR3aWNlIG1vcmUgcGVyIHNlY29uZGFyeTogYXQgX2NwdV91cCgpLCBhbmQgYXQKYnJpbmd1cF9j
cHUoKS4KCkdpdmVuIHNtcF9pbml0KCkgYWxyZWFkeSBpbml0aWFsaXplcyB0aGUgaWRsZSB0YXNr
cyBmb3IgYWxsICpwb3NzaWJsZSoKQ1BVcywgbm8gZnVydGhlciBpbml0aWFsaXphdGlvbiBzaG91
bGQgYmUgcmVxdWlyZWQuIE5vdywgcmVtb3ZpbmcKaW5pdF9pZGxlKCkgZnJvbSBpZGxlX3RocmVh
ZF9nZXQoKSBleHBvc2VzIHNvbWUgaW50ZXJlc3RpbmcgZXhwZWN0YXRpb25zCndpdGggcmVnYXJk
cyB0byB0aGUgaWRsZSB0YXNrJ3MgcHJlZW1wdF9jb3VudDogdGhlIHNlY29uZGFyeSBzdGFydHVw
IGFsd2F5cwppc3N1ZXMgYSBwcmVlbXB0X2Rpc2FibGUoKSwgcmVxdWlyaW5nIHNvbWUgcmVzZXQg
b2YgdGhlIHByZWVtcHQgY291bnQgdG8gMApiZXR3ZWVuIGhvdC11bnBsdWcgYW5kIGhvdHBsdWcs
IHdoaWNoIGlzIGN1cnJlbnRseSBzZXJ2ZWQgYnkKaWRsZV90aHJlYWRfZ2V0KCkgLT4gaWRsZV9p
bml0KCkuCgpHaXZlbiB0aGUgaWRsZSB0YXNrIGlzIHN1cHBvc2VkIHRvIGhhdmUgcHJlZW1wdGlv
biBkaXNhYmxlZCBvbmNlIGFuZCBuZXZlcgpzZWUgaXQgcmUtZW5hYmxlZCwgaXQgc2VlbXMgdGhh
dCB3aGF0IHdlIGFjdHVhbGx5IHdhbnQgaXMgdG8gaW5pdGlhbGl6ZSBpdHMKcHJlZW1wdF9jb3Vu
dCB0byBQUkVFTVBUX0RJU0FCTEVEIGFuZCBsZWF2ZSBpdCB0aGVyZS4gRG8gdGhhdCwgYW5kIHJl
bW92ZQppbml0X2lkbGUoKSBmcm9tIGlkbGVfdGhyZWFkX2dldCgpLgoKU2Vjb25kYXJ5IHN0YXJ0
dXBzIHdlcmUgcGF0Y2hlZCB2aWEgY29jY2luZWxsZToKCiAgQGJlZ29uZUAKICBAQAoKICAtcHJl
ZW1wdF9kaXNhYmxlKCk7CiAgLi4uCiAgY3B1X3N0YXJ0dXBfZW50cnkoQ1BVSFBfQVBfT05MSU5F
X0lETEUpOwoKU2lnbmVkLW9mZi1ieTogVmFsZW50aW4gU2NobmVpZGVyIDx2YWxlbnRpbi5zY2hu
ZWlkZXJAYXJtLmNvbT4KLS0tCiBhcmNoL2FscGhhL2tlcm5lbC9zbXAuYyAgICAgICAgICB8IDEg
LQogYXJjaC9hcmMva2VybmVsL3NtcC5jICAgICAgICAgICAgfCAxIC0KIGFyY2gvYXJtL2tlcm5l
bC9zbXAuYyAgICAgICAgICAgIHwgMSAtCiBhcmNoL2FybTY0L2luY2x1ZGUvYXNtL3ByZWVtcHQu
aCB8IDIgKy0KIGFyY2gvYXJtNjQva2VybmVsL3NtcC5jICAgICAgICAgIHwgMSAtCiBhcmNoL2Nz
a3kva2VybmVsL3NtcC5jICAgICAgICAgICB8IDEgLQogYXJjaC9pYTY0L2tlcm5lbC9zbXBib290
LmMgICAgICAgfCAxIC0KIGFyY2gvbWlwcy9rZXJuZWwvc21wLmMgICAgICAgICAgIHwgMSAtCiBh
cmNoL29wZW5yaXNjL2tlcm5lbC9zbXAuYyAgICAgICB8IDIgLS0KIGFyY2gvcGFyaXNjL2tlcm5l
bC9zbXAuYyAgICAgICAgIHwgMSAtCiBhcmNoL3Bvd2VycGMva2VybmVsL3NtcC5jICAgICAgICB8
IDEgLQogYXJjaC9yaXNjdi9rZXJuZWwvc21wYm9vdC5jICAgICAgfCAxIC0KIGFyY2gvczM5MC9p
bmNsdWRlL2FzbS9wcmVlbXB0LmggIHwgNCArKy0tCiBhcmNoL3MzOTAva2VybmVsL3NtcC5jICAg
ICAgICAgICB8IDEgLQogYXJjaC9zaC9rZXJuZWwvc21wLmMgICAgICAgICAgICAgfCAyIC0tCiBh
cmNoL3NwYXJjL2tlcm5lbC9zbXBfMzIuYyAgICAgICB8IDEgLQogYXJjaC9zcGFyYy9rZXJuZWwv
c21wXzY0LmMgICAgICAgfCAzIC0tLQogYXJjaC94ODYvaW5jbHVkZS9hc20vcHJlZW1wdC5oICAg
fCAyICstCiBhcmNoL3g4Ni9rZXJuZWwvc21wYm9vdC5jICAgICAgICB8IDEgLQogYXJjaC94dGVu
c2Eva2VybmVsL3NtcC5jICAgICAgICAgfCAxIC0KIGluY2x1ZGUvYXNtLWdlbmVyaWMvcHJlZW1w
dC5oICAgIHwgMiArLQogaW5pdC9tYWluLmMgICAgICAgICAgICAgICAgICAgICAgfCA2ICstLS0t
LQoga2VybmVsL2ZvcmsuYyAgICAgICAgICAgICAgICAgICAgfCAyICstCiBrZXJuZWwvc2NoZWQv
Y29yZS5jICAgICAgICAgICAgICB8IDIgKy0KIGtlcm5lbC9zbXBib290LmMgICAgICAgICAgICAg
ICAgIHwgMSAtCiAyNSBmaWxlcyBjaGFuZ2VkLCA4IGluc2VydGlvbnMoKyksIDM0IGRlbGV0aW9u
cygtKQoKZGlmZiAtLWdpdCBhL2FyY2gvYWxwaGEva2VybmVsL3NtcC5jIGIvYXJjaC9hbHBoYS9r
ZXJuZWwvc21wLmMKaW5kZXggZjRkZDlmM2YzMDAxLi40YjI1NzVmOTM2ZDQgMTAwNjQ0Ci0tLSBh
L2FyY2gvYWxwaGEva2VybmVsL3NtcC5jCisrKyBiL2FyY2gvYWxwaGEva2VybmVsL3NtcC5jCkBA
IC0xNjYsNyArMTY2LDYgQEAgc21wX2NhbGxpbih2b2lkKQogCURCR1MoKCJzbXBfY2FsbGluOiBj
b21tZW5jaW5nIENQVSAlZCBjdXJyZW50ICVwIGFjdGl2ZV9tbSAlcFxuIiwKIAkgICAgICBjcHVp
ZCwgY3VycmVudCwgY3VycmVudC0+YWN0aXZlX21tKSk7CiAKLQlwcmVlbXB0X2Rpc2FibGUoKTsK
IAljcHVfc3RhcnR1cF9lbnRyeShDUFVIUF9BUF9PTkxJTkVfSURMRSk7CiB9CiAKZGlmZiAtLWdp
dCBhL2FyY2gvYXJjL2tlcm5lbC9zbXAuYyBiL2FyY2gvYXJjL2tlcm5lbC9zbXAuYwppbmRleCA1
MjkwNmQzMTQ1MzcuLmRiMGUxMDRkNjgzNSAxMDA2NDQKLS0tIGEvYXJjaC9hcmMva2VybmVsL3Nt
cC5jCisrKyBiL2FyY2gvYXJjL2tlcm5lbC9zbXAuYwpAQCAtMTg5LDcgKzE4OSw2IEBAIHZvaWQg
c3RhcnRfa2VybmVsX3NlY29uZGFyeSh2b2lkKQogCXByX2luZm8oIiMjIENQVSV1IExJVkUgIyM6
IEV4ZWN1dGluZyBDb2RlLi4uXG4iLCBjcHUpOwogCiAJbG9jYWxfaXJxX2VuYWJsZSgpOwotCXBy
ZWVtcHRfZGlzYWJsZSgpOwogCWNwdV9zdGFydHVwX2VudHJ5KENQVUhQX0FQX09OTElORV9JRExF
KTsKIH0KIApkaWZmIC0tZ2l0IGEvYXJjaC9hcm0va2VybmVsL3NtcC5jIGIvYXJjaC9hcm0va2Vy
bmVsL3NtcC5jCmluZGV4IDc0Njc5MjQwYTlkOC4uYzdiYjE2OGIwZDk3IDEwMDY0NAotLS0gYS9h
cmNoL2FybS9rZXJuZWwvc21wLmMKKysrIGIvYXJjaC9hcm0va2VybmVsL3NtcC5jCkBAIC00MzIs
NyArNDMyLDYgQEAgYXNtbGlua2FnZSB2b2lkIHNlY29uZGFyeV9zdGFydF9rZXJuZWwodm9pZCkK
ICNlbmRpZgogCXByX2RlYnVnKCJDUFUldTogQm9vdGVkIHNlY29uZGFyeSBwcm9jZXNzb3JcbiIs
IGNwdSk7CiAKLQlwcmVlbXB0X2Rpc2FibGUoKTsKIAl0cmFjZV9oYXJkaXJxc19vZmYoKTsKIAog
CS8qCmRpZmYgLS1naXQgYS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3ByZWVtcHQuaCBiL2FyY2gv
YXJtNjQvaW5jbHVkZS9hc20vcHJlZW1wdC5oCmluZGV4IDgwZTk0NmIyYWJlZS4uZTgzZjA5ODJi
OTljIDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3ByZWVtcHQuaAorKysgYi9h
cmNoL2FybTY0L2luY2x1ZGUvYXNtL3ByZWVtcHQuaApAQCAtMjMsNyArMjMsNyBAQCBzdGF0aWMg
aW5saW5lIHZvaWQgcHJlZW1wdF9jb3VudF9zZXQodTY0IHBjKQogfSB3aGlsZSAoMCkKIAogI2Rl
ZmluZSBpbml0X2lkbGVfcHJlZW1wdF9jb3VudChwLCBjcHUpIGRvIHsgXAotCXRhc2tfdGhyZWFk
X2luZm8ocCktPnByZWVtcHRfY291bnQgPSBQUkVFTVBUX0VOQUJMRUQ7IFwKKwl0YXNrX3RocmVh
ZF9pbmZvKHApLT5wcmVlbXB0X2NvdW50ID0gUFJFRU1QVF9ESVNBQkxFRDsgXAogfSB3aGlsZSAo
MCkKIAogc3RhdGljIGlubGluZSB2b2lkIHNldF9wcmVlbXB0X25lZWRfcmVzY2hlZCh2b2lkKQpk
aWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9rZXJuZWwvc21wLmMgYi9hcmNoL2FybTY0L2tlcm5lbC9z
bXAuYwppbmRleCAzNTc1OTBiZWFhYmIuLjQ4ZmQ4OTI1NjczOSAxMDA2NDQKLS0tIGEvYXJjaC9h
cm02NC9rZXJuZWwvc21wLmMKKysrIGIvYXJjaC9hcm02NC9rZXJuZWwvc21wLmMKQEAgLTIyMyw3
ICsyMjMsNiBAQCBhc21saW5rYWdlIG5vdHJhY2Ugdm9pZCBzZWNvbmRhcnlfc3RhcnRfa2VybmVs
KHZvaWQpCiAJCWluaXRfZ2ljX3ByaW9yaXR5X21hc2tpbmcoKTsKIAogCXJjdV9jcHVfc3RhcnRp
bmcoY3B1KTsKLQlwcmVlbXB0X2Rpc2FibGUoKTsKIAl0cmFjZV9oYXJkaXJxc19vZmYoKTsKIAog
CS8qCmRpZmYgLS1naXQgYS9hcmNoL2Nza3kva2VybmVsL3NtcC5jIGIvYXJjaC9jc2t5L2tlcm5l
bC9zbXAuYwppbmRleCAwZjlmNWVlZjkzMzguLmUyOTkzNTM5YWY4ZSAxMDA2NDQKLS0tIGEvYXJj
aC9jc2t5L2tlcm5lbC9zbXAuYworKysgYi9hcmNoL2Nza3kva2VybmVsL3NtcC5jCkBAIC0yODEs
NyArMjgxLDYgQEAgdm9pZCBjc2t5X3N0YXJ0X3NlY29uZGFyeSh2b2lkKQogCXByX2luZm8oIkNQ
VSV1IE9ubGluZTogJXMuLi5cbiIsIGNwdSwgX19mdW5jX18pOwogCiAJbG9jYWxfaXJxX2VuYWJs
ZSgpOwotCXByZWVtcHRfZGlzYWJsZSgpOwogCWNwdV9zdGFydHVwX2VudHJ5KENQVUhQX0FQX09O
TElORV9JRExFKTsKIH0KIApkaWZmIC0tZ2l0IGEvYXJjaC9pYTY0L2tlcm5lbC9zbXBib290LmMg
Yi9hcmNoL2lhNjQva2VybmVsL3NtcGJvb3QuYwppbmRleCA0OWI0ODg1ODA5MzkuLmQxMGY3ODBj
MTNiOSAxMDA2NDQKLS0tIGEvYXJjaC9pYTY0L2tlcm5lbC9zbXBib290LmMKKysrIGIvYXJjaC9p
YTY0L2tlcm5lbC9zbXBib290LmMKQEAgLTQ0MSw3ICs0NDEsNiBAQCBzdGFydF9zZWNvbmRhcnkg
KHZvaWQgKnVudXNlZCkKICNlbmRpZgogCWVmaV9tYXBfcGFsX2NvZGUoKTsKIAljcHVfaW5pdCgp
OwotCXByZWVtcHRfZGlzYWJsZSgpOwogCXNtcF9jYWxsaW4oKTsKIAogCWNwdV9zdGFydHVwX2Vu
dHJ5KENQVUhQX0FQX09OTElORV9JRExFKTsKZGlmZiAtLWdpdCBhL2FyY2gvbWlwcy9rZXJuZWwv
c21wLmMgYi9hcmNoL21pcHMva2VybmVsL3NtcC5jCmluZGV4IGVmODZmYmFkODU0Ni4uZDU0MmZi
N2FmM2JhIDEwMDY0NAotLS0gYS9hcmNoL21pcHMva2VybmVsL3NtcC5jCisrKyBiL2FyY2gvbWlw
cy9rZXJuZWwvc21wLmMKQEAgLTM0OCw3ICszNDgsNiBAQCBhc21saW5rYWdlIHZvaWQgc3RhcnRf
c2Vjb25kYXJ5KHZvaWQpCiAJICovCiAKIAljYWxpYnJhdGVfZGVsYXkoKTsKLQlwcmVlbXB0X2Rp
c2FibGUoKTsKIAljcHUgPSBzbXBfcHJvY2Vzc29yX2lkKCk7CiAJY3B1X2RhdGFbY3B1XS51ZGVs
YXlfdmFsID0gbG9vcHNfcGVyX2ppZmZ5OwogCmRpZmYgLS1naXQgYS9hcmNoL29wZW5yaXNjL2tl
cm5lbC9zbXAuYyBiL2FyY2gvb3BlbnJpc2Mva2VybmVsL3NtcC5jCmluZGV4IDQ4ZTEwOTJhNjRk
ZS4uNDE1ZTIwOTczMmEzIDEwMDY0NAotLS0gYS9hcmNoL29wZW5yaXNjL2tlcm5lbC9zbXAuYwor
KysgYi9hcmNoL29wZW5yaXNjL2tlcm5lbC9zbXAuYwpAQCAtMTQ1LDggKzE0NSw2IEBAIGFzbWxp
bmthZ2UgX19pbml0IHZvaWQgc2Vjb25kYXJ5X3N0YXJ0X2tlcm5lbCh2b2lkKQogCXNldF9jcHVf
b25saW5lKGNwdSwgdHJ1ZSk7CiAKIAlsb2NhbF9pcnFfZW5hYmxlKCk7Ci0KLQlwcmVlbXB0X2Rp
c2FibGUoKTsKIAkvKgogCSAqIE9LLCBpdCdzIG9mZiB0byB0aGUgaWRsZSB0aHJlYWQgZm9yIHVz
CiAJICovCmRpZmYgLS1naXQgYS9hcmNoL3BhcmlzYy9rZXJuZWwvc21wLmMgYi9hcmNoL3Bhcmlz
Yy9rZXJuZWwvc21wLmMKaW5kZXggMTAyMjdmNjY3YzhhLi4xNDA1YjYwM2I5MWIgMTAwNjQ0Ci0t
LSBhL2FyY2gvcGFyaXNjL2tlcm5lbC9zbXAuYworKysgYi9hcmNoL3BhcmlzYy9rZXJuZWwvc21w
LmMKQEAgLTMwMiw3ICszMDIsNiBAQCB2b2lkIF9faW5pdCBzbXBfY2FsbGluKHVuc2lnbmVkIGxv
bmcgcGRjZV9wcm9jKQogI2VuZGlmCiAKIAlzbXBfY3B1X2luaXQoc2xhdmVfaWQpOwotCXByZWVt
cHRfZGlzYWJsZSgpOwogCiAJZmx1c2hfY2FjaGVfYWxsX2xvY2FsKCk7IC8qIHN0YXJ0IHdpdGgg
a25vd24gc3RhdGUgKi8KIAlmbHVzaF90bGJfYWxsX2xvY2FsKE5VTEwpOwpkaWZmIC0tZ2l0IGEv
YXJjaC9wb3dlcnBjL2tlcm5lbC9zbXAuYyBiL2FyY2gvcG93ZXJwYy9rZXJuZWwvc21wLmMKaW5k
ZXggNWE0ZDU5YTEwNzBkLi4wNTVjYTM4MTZlYjcgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9r
ZXJuZWwvc21wLmMKKysrIGIvYXJjaC9wb3dlcnBjL2tlcm5lbC9zbXAuYwpAQCAtMTUwNSw3ICsx
NTA1LDYgQEAgdm9pZCBzdGFydF9zZWNvbmRhcnkodm9pZCAqdW51c2VkKQogCXNtcF9zdG9yZV9j
cHVfaW5mbyhjcHUpOwogCXNldF9kZWModGJfdGlja3NfcGVyX2ppZmZ5KTsKIAlyY3VfY3B1X3N0
YXJ0aW5nKGNwdSk7Ci0JcHJlZW1wdF9kaXNhYmxlKCk7CiAJY3B1X2NhbGxpbl9tYXBbY3B1XSA9
IDE7CiAKIAlpZiAoc21wX29wcy0+c2V0dXBfY3B1KQpkaWZmIC0tZ2l0IGEvYXJjaC9yaXNjdi9r
ZXJuZWwvc21wYm9vdC5jIGIvYXJjaC9yaXNjdi9rZXJuZWwvc21wYm9vdC5jCmluZGV4IDVlMjc2
YzI1NjQ2Zi4uMTk0MWE2Y2U4NmExIDEwMDY0NAotLS0gYS9hcmNoL3Jpc2N2L2tlcm5lbC9zbXBi
b290LmMKKysrIGIvYXJjaC9yaXNjdi9rZXJuZWwvc21wYm9vdC5jCkBAIC0xNzYsNyArMTc2LDYg
QEAgYXNtbGlua2FnZSBfX3Zpc2libGUgdm9pZCBzbXBfY2FsbGluKHZvaWQpCiAJICogRGlzYWJs
ZSBwcmVlbXB0aW9uIGJlZm9yZSBlbmFibGluZyBpbnRlcnJ1cHRzLCBzbyB3ZSBkb24ndCB0cnkg
dG8KIAkgKiBzY2hlZHVsZSBhIENQVSB0aGF0IGhhc24ndCBhY3R1YWxseSBzdGFydGVkIHlldC4K
IAkgKi8KLQlwcmVlbXB0X2Rpc2FibGUoKTsKIAlsb2NhbF9pcnFfZW5hYmxlKCk7CiAJY3B1X3N0
YXJ0dXBfZW50cnkoQ1BVSFBfQVBfT05MSU5FX0lETEUpOwogfQpkaWZmIC0tZ2l0IGEvYXJjaC9z
MzkwL2luY2x1ZGUvYXNtL3ByZWVtcHQuaCBiL2FyY2gvczM5MC9pbmNsdWRlL2FzbS9wcmVlbXB0
LmgKaW5kZXggYjQ5ZTA0OTI4NDJjLi4yM2ZmNTFiZTdlMjkgMTAwNjQ0Ci0tLSBhL2FyY2gvczM5
MC9pbmNsdWRlL2FzbS9wcmVlbXB0LmgKKysrIGIvYXJjaC9zMzkwL2luY2x1ZGUvYXNtL3ByZWVt
cHQuaApAQCAtMzIsNyArMzIsNyBAQCBzdGF0aWMgaW5saW5lIHZvaWQgcHJlZW1wdF9jb3VudF9z
ZXQoaW50IHBjKQogI2RlZmluZSBpbml0X3Rhc2tfcHJlZW1wdF9jb3VudChwKQlkbyB7IH0gd2hp
bGUgKDApCiAKICNkZWZpbmUgaW5pdF9pZGxlX3ByZWVtcHRfY291bnQocCwgY3B1KQlkbyB7IFwK
LQlTMzkwX2xvd2NvcmUucHJlZW1wdF9jb3VudCA9IFBSRUVNUFRfRU5BQkxFRDsgXAorCVMzOTBf
bG93Y29yZS5wcmVlbXB0X2NvdW50ID0gUFJFRU1QVF9ESVNBQkxFRDsgXAogfSB3aGlsZSAoMCkK
IAogc3RhdGljIGlubGluZSB2b2lkIHNldF9wcmVlbXB0X25lZWRfcmVzY2hlZCh2b2lkKQpAQCAt
OTEsNyArOTEsNyBAQCBzdGF0aWMgaW5saW5lIHZvaWQgcHJlZW1wdF9jb3VudF9zZXQoaW50IHBj
KQogI2RlZmluZSBpbml0X3Rhc2tfcHJlZW1wdF9jb3VudChwKQlkbyB7IH0gd2hpbGUgKDApCiAK
ICNkZWZpbmUgaW5pdF9pZGxlX3ByZWVtcHRfY291bnQocCwgY3B1KQlkbyB7IFwKLQlTMzkwX2xv
d2NvcmUucHJlZW1wdF9jb3VudCA9IFBSRUVNUFRfRU5BQkxFRDsgXAorCVMzOTBfbG93Y29yZS5w
cmVlbXB0X2NvdW50ID0gUFJFRU1QVF9ESVNBQkxFRDsgXAogfSB3aGlsZSAoMCkKIAogc3RhdGlj
IGlubGluZSB2b2lkIHNldF9wcmVlbXB0X25lZWRfcmVzY2hlZCh2b2lkKQpkaWZmIC0tZ2l0IGEv
YXJjaC9zMzkwL2tlcm5lbC9zbXAuYyBiL2FyY2gvczM5MC9rZXJuZWwvc21wLmMKaW5kZXggNThj
OGFmYTNkYTY1Li5kNjBjNzM3NGQ4MDcgMTAwNjQ0Ci0tLSBhL2FyY2gvczM5MC9rZXJuZWwvc21w
LmMKKysrIGIvYXJjaC9zMzkwL2tlcm5lbC9zbXAuYwpAQCAtODc3LDcgKzg3Nyw2IEBAIHN0YXRp
YyB2b2lkIHNtcF9pbml0X3NlY29uZGFyeSh2b2lkKQogCXJlc3RvcmVfYWNjZXNzX3JlZ3MoUzM5
MF9sb3djb3JlLmFjY2Vzc19yZWdzX3NhdmVfYXJlYSk7CiAJY3B1X2luaXQoKTsKIAlyY3VfY3B1
X3N0YXJ0aW5nKGNwdSk7Ci0JcHJlZW1wdF9kaXNhYmxlKCk7CiAJaW5pdF9jcHVfdGltZXIoKTsK
IAl2dGltZV9pbml0KCk7CiAJdmRzb19nZXRjcHVfaW5pdCgpOwpkaWZmIC0tZ2l0IGEvYXJjaC9z
aC9rZXJuZWwvc21wLmMgYi9hcmNoL3NoL2tlcm5lbC9zbXAuYwppbmRleCAzNzJhY2RjOTAzM2Uu
LjY1OTI0ZDllYzI0NSAxMDA2NDQKLS0tIGEvYXJjaC9zaC9rZXJuZWwvc21wLmMKKysrIGIvYXJj
aC9zaC9rZXJuZWwvc21wLmMKQEAgLTE4Niw4ICsxODYsNiBAQCBhc21saW5rYWdlIHZvaWQgc3Rh
cnRfc2Vjb25kYXJ5KHZvaWQpCiAKIAlwZXJfY3B1X3RyYXBfaW5pdCgpOwogCi0JcHJlZW1wdF9k
aXNhYmxlKCk7Ci0KIAlub3RpZnlfY3B1X3N0YXJ0aW5nKGNwdSk7CiAKIAlsb2NhbF9pcnFfZW5h
YmxlKCk7CmRpZmYgLS1naXQgYS9hcmNoL3NwYXJjL2tlcm5lbC9zbXBfMzIuYyBiL2FyY2gvc3Bh
cmMva2VybmVsL3NtcF8zMi5jCmluZGV4IDUwYzEyN2FiNDZkNS4uMjJiMTQ4ZTVhNWY4IDEwMDY0
NAotLS0gYS9hcmNoL3NwYXJjL2tlcm5lbC9zbXBfMzIuYworKysgYi9hcmNoL3NwYXJjL2tlcm5l
bC9zbXBfMzIuYwpAQCAtMzQ4LDcgKzM0OCw2IEBAIHN0YXRpYyB2b2lkIHNwYXJjX3N0YXJ0X3Nl
Y29uZGFyeSh2b2lkICphcmcpCiAJICovCiAJYXJjaF9jcHVfcHJlX3N0YXJ0aW5nKGFyZyk7CiAK
LQlwcmVlbXB0X2Rpc2FibGUoKTsKIAljcHUgPSBzbXBfcHJvY2Vzc29yX2lkKCk7CiAKIAlub3Rp
ZnlfY3B1X3N0YXJ0aW5nKGNwdSk7CmRpZmYgLS1naXQgYS9hcmNoL3NwYXJjL2tlcm5lbC9zbXBf
NjQuYyBiL2FyY2gvc3BhcmMva2VybmVsL3NtcF82NC5jCmluZGV4IGUzOGQ4YmY0NTRlOC4uYWU1
ZmFhMWQ5ODlkIDEwMDY0NAotLS0gYS9hcmNoL3NwYXJjL2tlcm5lbC9zbXBfNjQuYworKysgYi9h
cmNoL3NwYXJjL2tlcm5lbC9zbXBfNjQuYwpAQCAtMTM4LDkgKzEzOCw2IEBAIHZvaWQgc21wX2Nh
bGxpbih2b2lkKQogCiAJc2V0X2NwdV9vbmxpbmUoY3B1aWQsIHRydWUpOwogCi0JLyogaWRsZSB0
aHJlYWQgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBwcmVlbXB0IGRpc2FibGVkICovCi0JcHJlZW1wdF9k
aXNhYmxlKCk7Ci0KIAlsb2NhbF9pcnFfZW5hYmxlKCk7CiAKIAljcHVfc3RhcnR1cF9lbnRyeShD
UFVIUF9BUF9PTkxJTkVfSURMRSk7CmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9w
cmVlbXB0LmggYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9wcmVlbXB0LmgKaW5kZXggZjhjYjhhZjRk
ZTVjLi5mZTVlZmJjYmE4MjQgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2luY2x1ZGUvYXNtL3ByZWVt
cHQuaAorKysgYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9wcmVlbXB0LmgKQEAgLTQ0LDcgKzQ0LDcg
QEAgc3RhdGljIF9fYWx3YXlzX2lubGluZSB2b2lkIHByZWVtcHRfY291bnRfc2V0KGludCBwYykK
ICNkZWZpbmUgaW5pdF90YXNrX3ByZWVtcHRfY291bnQocCkgZG8geyB9IHdoaWxlICgwKQogCiAj
ZGVmaW5lIGluaXRfaWRsZV9wcmVlbXB0X2NvdW50KHAsIGNwdSkgZG8geyBcCi0JcGVyX2NwdShf
X3ByZWVtcHRfY291bnQsIChjcHUpKSA9IFBSRUVNUFRfRU5BQkxFRDsgXAorCXBlcl9jcHUoX19w
cmVlbXB0X2NvdW50LCAoY3B1KSkgPSBQUkVFTVBUX0RJU0FCTEVEOyBcCiB9IHdoaWxlICgwKQog
CiAvKgpkaWZmIC0tZ2l0IGEvYXJjaC94ODYva2VybmVsL3NtcGJvb3QuYyBiL2FyY2gveDg2L2tl
cm5lbC9zbXBib290LmMKaW5kZXggMTY3MDNjMzVhOTQ0Li4yOTcxM2QwY2YxNTUgMTAwNjQ0Ci0t
LSBhL2FyY2gveDg2L2tlcm5lbC9zbXBib290LmMKKysrIGIvYXJjaC94ODYva2VybmVsL3NtcGJv
b3QuYwpAQCAtMjM2LDcgKzIzNiw2IEBAIHN0YXRpYyB2b2lkIG5vdHJhY2Ugc3RhcnRfc2Vjb25k
YXJ5KHZvaWQgKnVudXNlZCkKIAljcHVfaW5pdCgpOwogCXJjdV9jcHVfc3RhcnRpbmcocmF3X3Nt
cF9wcm9jZXNzb3JfaWQoKSk7CiAJeDg2X2NwdWluaXQuZWFybHlfcGVyY3B1X2Nsb2NrX2luaXQo
KTsKLQlwcmVlbXB0X2Rpc2FibGUoKTsKIAlzbXBfY2FsbGluKCk7CiAKIAllbmFibGVfc3RhcnRf
Y3B1MCA9IDA7CmRpZmYgLS1naXQgYS9hcmNoL3h0ZW5zYS9rZXJuZWwvc21wLmMgYi9hcmNoL3h0
ZW5zYS9rZXJuZWwvc21wLmMKaW5kZXggY2Q4NWE3YTI3MjJiLi4xMjU0ZGEwN2VhZDEgMTAwNjQ0
Ci0tLSBhL2FyY2gveHRlbnNhL2tlcm5lbC9zbXAuYworKysgYi9hcmNoL3h0ZW5zYS9rZXJuZWwv
c21wLmMKQEAgLTE0NSw3ICsxNDUsNiBAQCB2b2lkIHNlY29uZGFyeV9zdGFydF9rZXJuZWwodm9p
ZCkKIAljcHVtYXNrX3NldF9jcHUoY3B1LCBtbV9jcHVtYXNrKG1tKSk7CiAJZW50ZXJfbGF6eV90
bGIobW0sIGN1cnJlbnQpOwogCi0JcHJlZW1wdF9kaXNhYmxlKCk7CiAJdHJhY2VfaGFyZGlycXNf
b2ZmKCk7CiAKIAljYWxpYnJhdGVfZGVsYXkoKTsKZGlmZiAtLWdpdCBhL2luY2x1ZGUvYXNtLWdl
bmVyaWMvcHJlZW1wdC5oIGIvaW5jbHVkZS9hc20tZ2VuZXJpYy9wcmVlbXB0LmgKaW5kZXggZDY4
M2Y1ZTZkNzkxLi5iNGQ0M2E0YWY1ZjcgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvYXNtLWdlbmVyaWMv
cHJlZW1wdC5oCisrKyBiL2luY2x1ZGUvYXNtLWdlbmVyaWMvcHJlZW1wdC5oCkBAIC0yOSw3ICsy
OSw3IEBAIHN0YXRpYyBfX2Fsd2F5c19pbmxpbmUgdm9pZCBwcmVlbXB0X2NvdW50X3NldChpbnQg
cGMpCiB9IHdoaWxlICgwKQogCiAjZGVmaW5lIGluaXRfaWRsZV9wcmVlbXB0X2NvdW50KHAsIGNw
dSkgZG8geyBcCi0JdGFza190aHJlYWRfaW5mbyhwKS0+cHJlZW1wdF9jb3VudCA9IFBSRUVNUFRf
RU5BQkxFRDsgXAorCXRhc2tfdGhyZWFkX2luZm8ocCktPnByZWVtcHRfY291bnQgPSBQUkVFTVBU
X0RJU0FCTEVEOyBcCiB9IHdoaWxlICgwKQogCiBzdGF0aWMgX19hbHdheXNfaW5saW5lIHZvaWQg
c2V0X3ByZWVtcHRfbmVlZF9yZXNjaGVkKHZvaWQpCmRpZmYgLS1naXQgYS9pbml0L21haW4uYyBi
L2luaXQvbWFpbi5jCmluZGV4IDUzYjI3ODg0NWI4OC4uZDg1ODAzMjMxMTBlIDEwMDY0NAotLS0g
YS9pbml0L21haW4uYworKysgYi9pbml0L21haW4uYwpAQCAtOTE4LDExICs5MTgsNyBAQCBhc21s
aW5rYWdlIF9fdmlzaWJsZSB2b2lkIF9faW5pdCBfX25vX3Nhbml0aXplX2FkZHJlc3Mgc3RhcnRf
a2VybmVsKHZvaWQpCiAJICogdGltZSAtIGJ1dCBtZWFud2hpbGUgd2Ugc3RpbGwgaGF2ZSBhIGZ1
bmN0aW9uaW5nIHNjaGVkdWxlci4KIAkgKi8KIAlzY2hlZF9pbml0KCk7Ci0JLyoKLQkgKiBEaXNh
YmxlIHByZWVtcHRpb24gLSBlYXJseSBib290dXAgc2NoZWR1bGluZyBpcyBleHRyZW1lbHkKLQkg
KiBmcmFnaWxlIHVudGlsIHdlIGNwdV9pZGxlKCkgZm9yIHRoZSBmaXJzdCB0aW1lLgotCSAqLwot
CXByZWVtcHRfZGlzYWJsZSgpOworCiAJaWYgKFdBUk4oIWlycXNfZGlzYWJsZWQoKSwKIAkJICJJ
bnRlcnJ1cHRzIHdlcmUgZW5hYmxlZCAqdmVyeSogZWFybHksIGZpeGluZyBpdFxuIikpCiAJCWxv
Y2FsX2lycV9kaXNhYmxlKCk7CmRpZmYgLS1naXQgYS9rZXJuZWwvZm9yay5jIGIva2VybmVsL2Zv
cmsuYwppbmRleCBhMWE3NjMwMTliZmIuLjlkZTdiYzQwYmUxZCAxMDA2NDQKLS0tIGEva2VybmVs
L2ZvcmsuYworKysgYi9rZXJuZWwvZm9yay5jCkBAIC0yNDA2LDcgKzI0MDYsNyBAQCBzdGF0aWMg
aW5saW5lIHZvaWQgaW5pdF9pZGxlX3BpZHMoc3RydWN0IHRhc2tfc3RydWN0ICppZGxlKQogCX0K
IH0KIAotc3RydWN0IHRhc2tfc3RydWN0ICpmb3JrX2lkbGUoaW50IGNwdSkKK3N0cnVjdCB0YXNr
X3N0cnVjdCAqIF9faW5pdCBmb3JrX2lkbGUoaW50IGNwdSkKIHsKIAlzdHJ1Y3QgdGFza19zdHJ1
Y3QgKnRhc2s7CiAJc3RydWN0IGtlcm5lbF9jbG9uZV9hcmdzIGFyZ3MgPSB7CmRpZmYgLS1naXQg
YS9rZXJuZWwvc2NoZWQvY29yZS5jIGIva2VybmVsL3NjaGVkL2NvcmUuYwppbmRleCA0YTA2Njhh
Y2Q4NzYuLjQzYjkwM2FlODIzYiAxMDA2NDQKLS0tIGEva2VybmVsL3NjaGVkL2NvcmUuYworKysg
Yi9rZXJuZWwvc2NoZWQvY29yZS5jCkBAIC03NDMzLDcgKzc0MzMsNyBAQCB2b2lkIHNob3dfc3Rh
dGVfZmlsdGVyKHVuc2lnbmVkIGxvbmcgc3RhdGVfZmlsdGVyKQogICogTk9URTogdGhpcyBmdW5j
dGlvbiBkb2VzIG5vdCBzZXQgdGhlIGlkbGUgdGhyZWFkJ3MgTkVFRF9SRVNDSEVECiAgKiBmbGFn
LCB0byBtYWtlIGJvb3RpbmcgbW9yZSByb2J1c3QuCiAgKi8KLXZvaWQgaW5pdF9pZGxlKHN0cnVj
dCB0YXNrX3N0cnVjdCAqaWRsZSwgaW50IGNwdSkKK3ZvaWQgX19pbml0IGluaXRfaWRsZShzdHJ1
Y3QgdGFza19zdHJ1Y3QgKmlkbGUsIGludCBjcHUpCiB7CiAJc3RydWN0IHJxICpycSA9IGNwdV9y
cShjcHUpOwogCXVuc2lnbmVkIGxvbmcgZmxhZ3M7CmRpZmYgLS1naXQgYS9rZXJuZWwvc21wYm9v
dC5jIGIva2VybmVsL3NtcGJvb3QuYwppbmRleCBmMjUyMDhlOGRmODMuLmU0MTYzMDQyYzRkNiAx
MDA2NDQKLS0tIGEva2VybmVsL3NtcGJvb3QuYworKysgYi9rZXJuZWwvc21wYm9vdC5jCkBAIC0z
Myw3ICszMyw2IEBAIHN0cnVjdCB0YXNrX3N0cnVjdCAqaWRsZV90aHJlYWRfZ2V0KHVuc2lnbmVk
IGludCBjcHUpCiAKIAlpZiAoIXRzaykKIAkJcmV0dXJuIEVSUl9QVFIoLUVOT01FTSk7Ci0JaW5p
dF9pZGxlKHRzaywgY3B1KTsKIAlyZXR1cm4gdHNrOwogfQogCi0tIAoyLjI1LjEKCl9fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcg
bGlzdApPcGVuUklTQ0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29y
ZXMub3JnL2xpc3RpbmZvL29wZW5yaXNjCg==
