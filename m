Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 054381E503F
	for <lists+openrisc@lfdr.de>; Wed, 27 May 2020 23:19:35 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 61DD420CB8;
	Wed, 27 May 2020 23:19:34 +0200 (CEST)
Received: from bombadil.infradead.org (bombadil.infradead.org
 [198.137.202.133])
 by mail.librecores.org (Postfix) with ESMTPS id 7DD97206FB
 for <openrisc@lists.librecores.org>; Fri, 15 May 2020 16:38:08 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
 d=infradead.org; s=bombadil.20170209; h=Content-Transfer-Encoding:
 MIME-Version:References:In-Reply-To:Message-Id:Date:Subject:Cc:To:From:Sender
 :Reply-To:Content-Type:Content-ID:Content-Description;
 bh=971EDWqpKFf5KtnSgV+IM+eZfvzl2xsbTBBk8JYJJRs=; b=g89s0R8Kgf8uVzQyJkextH6Q/Q
 3CSAqPpPq/5rRHioxLVC5G5CrX6gbEhf0d5jWeeKHIrTBkpnLWpH16nuVQksuGLDyWLT/IRhamBwc
 waV8nQeWmQnN4FhEzochA2pTcvmEPJy13j8xQx0jKVxTuaGqFLLoeaVsY8+W+L8Q3wYsuO80BrFtE
 18Lcf+VLK62XazZ0K0JDMB6Sjc6nmtI0pPQHRrzLAgRd6IdCbuQDDUZflGkG23AzOjRhjR+k2ibQq
 E4+WnlXtAh9yduuNHvcYVaVqIg2IsLnXcHB2v5uvB7PdY3iFn032ftZuDjVQc++Pog8VW9fTRC1sh
 uUvFeM5Q==;
Received: from [2001:4bb8:188:1506:c70:4a89:bc61:2] (helo=localhost)
 by bombadil.infradead.org with esmtpsa (Exim 4.92.3 #3 (Red Hat Linux))
 id 1jZbT6-0004rc-AV; Fri, 15 May 2020 14:37:44 +0000
From: Christoph Hellwig <hch@lst.de>
To: Andrew Morton <akpm@linux-foundation.org>, Arnd Bergmann <arnd@arndb.de>,
 Roman Zippel <zippel@linux-m68k.org>
Date: Fri, 15 May 2020 16:36:36 +0200
Message-Id: <20200515143646.3857579-20-hch@lst.de>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200515143646.3857579-1-hch@lst.de>
References: <20200515143646.3857579-1-hch@lst.de>
MIME-Version: 1.0
X-SRS-Rewrite: SMTP reverse-path rewritten from <hch@infradead.org> by
 bombadil.infradead.org. See http://www.infradead.org/rpr.html
X-Mailman-Approved-At: Wed, 27 May 2020 23:18:58 +0200
Subject: [OpenRISC] [PATCH 19/29] mm: rename flush_icache_user_range to
 flush_icache_user_page
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: linux-ia64@vger.kernel.org, linux-sh@vger.kernel.org,
 linux-mips@vger.kernel.org, linux-mm@kvack.org, sparclinux@vger.kernel.org,
 linux-riscv@lists.infradead.org, linux-arch@vger.kernel.org,
 linux-c6x-dev@linux-c6x.org, linux-hexagon@vger.kernel.org, x86@kernel.org,
 linux-xtensa@linux-xtensa.org, linux-alpha@vger.kernel.org,
 linux-um@lists.infradead.org, linux-m68k@lists.linux-m68k.org,
 openrisc@lists.librecores.org, linux-arm-kernel@lists.infradead.org,
 Michal Simek <monstr@monstr.eu>, linux-kernel@vger.kernel.org,
 Jessica Yu <jeyu@kernel.org>, linux-fsdevel@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

VGhlIGZ1bmN0aW9uIGN1cnJlbnRseSBrbm93biBhcyBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZSBv
bmx5IG9wZXJhdGVzCm9uIGEgc2luZ2xlIHBhZ2UuICBSZW5hbWUgaXQgdG8gZmx1c2hfaWNhY2hl
X3VzZXJfcGFnZSBhcyB3ZSdsbCBuZWVkCnRoZSBuYW1lIGZsdXNoX2ljYWNoZV91c2VyX3Jhbmdl
IGZvciBzb21ldGhpbmcgZWxzZSBzb29uLgoKU2lnbmVkLW9mZi1ieTogQ2hyaXN0b3BoIEhlbGx3
aWcgPGhjaEBsc3QuZGU+CkFja2VkLWJ5OiBHZWVydCBVeXR0ZXJob2V2ZW4gPGdlZXJ0QGxpbnV4
LW02OGsub3JnPgotLS0KIGFyY2gvYWxwaGEvaW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oICAgIHwg
MTAgKysrKystLS0tLQogYXJjaC9hbHBoYS9rZXJuZWwvc21wLmMgICAgICAgICAgICAgICAgfCAg
MiArLQogYXJjaC9pYTY0L2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaCAgICAgfCAgMiArLQogYXJj
aC9tNjhrL2luY2x1ZGUvYXNtL2NhY2hlZmx1c2hfbW0uaCAgfCAgNCArKy0tCiBhcmNoL202OGsv
bW0vY2FjaGUuYyAgICAgICAgICAgICAgICAgICB8ICAyICstCiBhcmNoL25kczMyL2luY2x1ZGUv
YXNtL2NhY2hlZmx1c2guaCAgICB8ICA0ICsrLS0KIGFyY2gvbmRzMzIvbW0vY2FjaGVmbHVzaC5j
ICAgICAgICAgICAgIHwgIDIgKy0KIGFyY2gvb3BlbnJpc2MvaW5jbHVkZS9hc20vY2FjaGVmbHVz
aC5oIHwgIDIgKy0KIGFyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9jYWNoZWZsdXNoLmggIHwgIDQg
KystLQogYXJjaC9wb3dlcnBjL21tL21lbS5jICAgICAgICAgICAgICAgICAgfCAgMiArLQogYXJj
aC9yaXNjdi9pbmNsdWRlL2FzbS9jYWNoZWZsdXNoLmggICAgfCAgMyArKy0KIGluY2x1ZGUvYXNt
LWdlbmVyaWMvY2FjaGVmbHVzaC5oICAgICAgIHwgIDYgKysrLS0tCiBrZXJuZWwvZXZlbnRzL3Vw
cm9iZXMuYyAgICAgICAgICAgICAgICB8ICAyICstCiAxMyBmaWxlcyBjaGFuZ2VkLCAyMyBpbnNl
cnRpb25zKCspLCAyMiBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9hcmNoL2FscGhhL2luY2x1
ZGUvYXNtL2NhY2hlZmx1c2guaCBiL2FyY2gvYWxwaGEvaW5jbHVkZS9hc20vY2FjaGVmbHVzaC5o
CmluZGV4IDYzNmQ3Y2EwZDA1ZjYuLjk5NDVmZjQ4M2VhZjcgMTAwNjQ0Ci0tLSBhL2FyY2gvYWxw
aGEvaW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oCisrKyBiL2FyY2gvYWxwaGEvaW5jbHVkZS9hc20v
Y2FjaGVmbHVzaC5oCkBAIC0zNSw3ICszNSw3IEBAIGV4dGVybiB2b2lkIHNtcF9pbWIodm9pZCk7
CiAKIGV4dGVybiB2b2lkIF9fbG9hZF9uZXdfbW1fY29udGV4dChzdHJ1Y3QgbW1fc3RydWN0ICop
Owogc3RhdGljIGlubGluZSB2b2lkCi1mbHVzaF9pY2FjaGVfdXNlcl9yYW5nZShzdHJ1Y3Qgdm1f
YXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHBhZ2UgKnBhZ2UsCitmbHVzaF9pY2FjaGVfdXNlcl9w
YWdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCBzdHJ1Y3QgcGFnZSAqcGFnZSwKIAkJCXVu
c2lnbmVkIGxvbmcgYWRkciwgaW50IGxlbikKIHsKIAlpZiAodm1hLT52bV9mbGFncyAmIFZNX0VY
RUMpIHsKQEAgLTQ2LDE2ICs0NiwxNiBAQCBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZShzdHJ1Y3Qg
dm1fYXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHBhZ2UgKnBhZ2UsCiAJCQltbS0+Y29udGV4dFtz
bXBfcHJvY2Vzc29yX2lkKCldID0gMDsKIAl9CiB9Ci0jZGVmaW5lIGZsdXNoX2ljYWNoZV91c2Vy
X3JhbmdlIGZsdXNoX2ljYWNoZV91c2VyX3JhbmdlCisjZGVmaW5lIGZsdXNoX2ljYWNoZV91c2Vy
X3BhZ2UgZmx1c2hfaWNhY2hlX3VzZXJfcGFnZQogI2Vsc2UgLyogQ09ORklHX1NNUCAqLwotZXh0
ZXJuIHZvaWQgZmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2
bWEsCitleHRlcm4gdm9pZCBmbHVzaF9pY2FjaGVfdXNlcl9wYWdlKHN0cnVjdCB2bV9hcmVhX3N0
cnVjdCAqdm1hLAogCQlzdHJ1Y3QgcGFnZSAqcGFnZSwgdW5zaWduZWQgbG9uZyBhZGRyLCBpbnQg
bGVuKTsKLSNkZWZpbmUgZmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2UgZmx1c2hfaWNhY2hlX3VzZXJf
cmFuZ2UKKyNkZWZpbmUgZmx1c2hfaWNhY2hlX3VzZXJfcGFnZSBmbHVzaF9pY2FjaGVfdXNlcl9w
YWdlCiAjZW5kaWYgLyogQ09ORklHX1NNUCAqLwogCiAvKiBUaGlzIGlzIHVzZWQgb25seSBpbiBf
X2RvX2ZhdWx0IGFuZCBkb19zd2FwX3BhZ2UuICAqLwogI2RlZmluZSBmbHVzaF9pY2FjaGVfcGFn
ZSh2bWEsIHBhZ2UpIFwKLQlmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZSgodm1hKSwgKHBhZ2UpLCAw
LCAwKQorCWZsdXNoX2ljYWNoZV91c2VyX3BhZ2UoKHZtYSksIChwYWdlKSwgMCwgMCkKIAogI2lu
Y2x1ZGUgPGFzbS1nZW5lcmljL2NhY2hlZmx1c2guaD4KIApkaWZmIC0tZ2l0IGEvYXJjaC9hbHBo
YS9rZXJuZWwvc21wLmMgYi9hcmNoL2FscGhhL2tlcm5lbC9zbXAuYwppbmRleCA1ZjkwZGYzMGJl
MjBhLi41Mjk5NWJmNDEzZmVhIDEwMDY0NAotLS0gYS9hcmNoL2FscGhhL2tlcm5lbC9zbXAuYwor
KysgYi9hcmNoL2FscGhhL2tlcm5lbC9zbXAuYwpAQCAtNzQwLDcgKzc0MCw3IEBAIGlwaV9mbHVz
aF9pY2FjaGVfcGFnZSh2b2lkICp4KQogfQogCiB2b2lkCi1mbHVzaF9pY2FjaGVfdXNlcl9yYW5n
ZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHBhZ2UgKnBhZ2UsCitmbHVzaF9p
Y2FjaGVfdXNlcl9wYWdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCBzdHJ1Y3QgcGFnZSAq
cGFnZSwKIAkJCXVuc2lnbmVkIGxvbmcgYWRkciwgaW50IGxlbikKIHsKIAlzdHJ1Y3QgbW1fc3Ry
dWN0ICptbSA9IHZtYS0+dm1fbW07CmRpZmYgLS1naXQgYS9hcmNoL2lhNjQvaW5jbHVkZS9hc20v
Y2FjaGVmbHVzaC5oIGIvYXJjaC9pYTY0L2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaAppbmRleCBh
OGYxYzg2YWMyNDJhLi43MDhjMGZhNWQ5NzVlIDEwMDY0NAotLS0gYS9hcmNoL2lhNjQvaW5jbHVk
ZS9hc20vY2FjaGVmbHVzaC5oCisrKyBiL2FyY2gvaWE2NC9pbmNsdWRlL2FzbS9jYWNoZWZsdXNo
LmgKQEAgLTIyLDcgKzIyLDcgQEAgZXh0ZXJuIHZvaWQgZmx1c2hfaWNhY2hlX3JhbmdlKHVuc2ln
bmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgZW5kKTsKICNkZWZpbmUgZmx1c2hfaWNhY2hl
X3JhbmdlIGZsdXNoX2ljYWNoZV9yYW5nZQogZXh0ZXJuIHZvaWQgY2xmbHVzaF9jYWNoZV9yYW5n
ZSh2b2lkICphZGRyLCBpbnQgc2l6ZSk7CiAKLSNkZWZpbmUgZmx1c2hfaWNhY2hlX3VzZXJfcmFu
Z2Uodm1hLCBwYWdlLCB1c2VyX2FkZHIsIGxlbikJCQkJCVwKKyNkZWZpbmUgZmx1c2hfaWNhY2hl
X3VzZXJfcGFnZSh2bWEsIHBhZ2UsIHVzZXJfYWRkciwgbGVuKQkJCQkJXAogZG8gewkJCQkJCQkJ
CQkJCVwKIAl1bnNpZ25lZCBsb25nIF9hZGRyID0gKHVuc2lnbmVkIGxvbmcpIHBhZ2VfYWRkcmVz
cyhwYWdlKSArICgodXNlcl9hZGRyKSAmIH5QQUdFX01BU0spOwlcCiAJZmx1c2hfaWNhY2hlX3Jh
bmdlKF9hZGRyLCBfYWRkciArIChsZW4pKTsJCQkJCQlcCmRpZmYgLS1naXQgYS9hcmNoL202OGsv
aW5jbHVkZS9hc20vY2FjaGVmbHVzaF9tbS5oIGIvYXJjaC9tNjhrL2luY2x1ZGUvYXNtL2NhY2hl
Zmx1c2hfbW0uaAppbmRleCAxZTI1NDRlY2FmODhjLi45NTM3NmJmODRmYWE1IDEwMDY0NAotLS0g
YS9hcmNoL202OGsvaW5jbHVkZS9hc20vY2FjaGVmbHVzaF9tbS5oCisrKyBiL2FyY2gvbTY4ay9p
bmNsdWRlL2FzbS9jYWNoZWZsdXNoX21tLmgKQEAgLTI1NCw3ICsyNTQsNyBAQCBzdGF0aWMgaW5s
aW5lIHZvaWQgX19mbHVzaF9wYWdlX3RvX3JhbSh2b2lkICp2YWRkcikKICNkZWZpbmUgZmx1c2hf
ZGNhY2hlX21tYXBfdW5sb2NrKG1hcHBpbmcpCWRvIHsgfSB3aGlsZSAoMCkKICNkZWZpbmUgZmx1
c2hfaWNhY2hlX3BhZ2Uodm1hLCBwYWdlKQlfX2ZsdXNoX3BhZ2VfdG9fcmFtKHBhZ2VfYWRkcmVz
cyhwYWdlKSkKIAotZXh0ZXJuIHZvaWQgZmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2Uoc3RydWN0IHZt
X2FyZWFfc3RydWN0ICp2bWEsIHN0cnVjdCBwYWdlICpwYWdlLAorZXh0ZXJuIHZvaWQgZmx1c2hf
aWNhY2hlX3VzZXJfcGFnZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHBhZ2Ug
KnBhZ2UsCiAJCQkJICAgIHVuc2lnbmVkIGxvbmcgYWRkciwgaW50IGxlbik7CiBleHRlcm4gdm9p
ZCBmbHVzaF9pY2FjaGVfcmFuZ2UodW5zaWduZWQgbG9uZyBhZGRyZXNzLCB1bnNpZ25lZCBsb25n
IGVuZGFkZHIpOwogCkBAIC0yNjQsNyArMjY0LDcgQEAgc3RhdGljIGlubGluZSB2b2lkIGNvcHlf
dG9fdXNlcl9wYWdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLAogewogCWZsdXNoX2NhY2hl
X3BhZ2Uodm1hLCB2YWRkciwgcGFnZV90b19wZm4ocGFnZSkpOwogCW1lbWNweShkc3QsIHNyYywg
bGVuKTsKLQlmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZSh2bWEsIHBhZ2UsIHZhZGRyLCBsZW4pOwor
CWZsdXNoX2ljYWNoZV91c2VyX3BhZ2Uodm1hLCBwYWdlLCB2YWRkciwgbGVuKTsKIH0KIHN0YXRp
YyBpbmxpbmUgdm9pZCBjb3B5X2Zyb21fdXNlcl9wYWdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAq
dm1hLAogCQkJCSAgICAgICBzdHJ1Y3QgcGFnZSAqcGFnZSwgdW5zaWduZWQgbG9uZyB2YWRkciwK
ZGlmZiAtLWdpdCBhL2FyY2gvbTY4ay9tbS9jYWNoZS5jIGIvYXJjaC9tNjhrL21tL2NhY2hlLmMK
aW5kZXggMDc5ZTY0ODk4ZTZhNS4uOTkwNTdjZDVmZjdmMSAxMDA2NDQKLS0tIGEvYXJjaC9tNjhr
L21tL2NhY2hlLmMKKysrIGIvYXJjaC9tNjhrL21tL2NhY2hlLmMKQEAgLTEwNiw3ICsxMDYsNyBA
QCB2b2lkIGZsdXNoX2ljYWNoZV9yYW5nZSh1bnNpZ25lZCBsb25nIGFkZHJlc3MsIHVuc2lnbmVk
IGxvbmcgZW5kYWRkcikKIH0KIEVYUE9SVF9TWU1CT0woZmx1c2hfaWNhY2hlX3JhbmdlKTsKIAot
dm9pZCBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwg
c3RydWN0IHBhZ2UgKnBhZ2UsCit2b2lkIGZsdXNoX2ljYWNoZV91c2VyX3BhZ2Uoc3RydWN0IHZt
X2FyZWFfc3RydWN0ICp2bWEsIHN0cnVjdCBwYWdlICpwYWdlLAogCQkJICAgICB1bnNpZ25lZCBs
b25nIGFkZHIsIGludCBsZW4pCiB7CiAJaWYgKENQVV9JU19DT0xERklSRSkgewpkaWZmIC0tZ2l0
IGEvYXJjaC9uZHMzMi9pbmNsdWRlL2FzbS9jYWNoZWZsdXNoLmggYi9hcmNoL25kczMyL2luY2x1
ZGUvYXNtL2NhY2hlZmx1c2guaAppbmRleCBjYWRkZGVkNTZlNzdmLi43ZDY4MjRmN2MwZThkIDEw
MDY0NAotLS0gYS9hcmNoL25kczMyL2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaAorKysgYi9hcmNo
L25kczMyL2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaApAQCAtNDQsOSArNDQsOSBAQCB2b2lkIGlu
dmFsaWRhdGVfa2VybmVsX3ZtYXBfcmFuZ2Uodm9pZCAqYWRkciwgaW50IHNpemUpOwogI2RlZmlu
ZSBmbHVzaF9kY2FjaGVfbW1hcF91bmxvY2sobWFwcGluZykgeGFfdW5sb2NrX2lycSgmKG1hcHBp
bmcpLT5pX3BhZ2VzKQogCiAjZWxzZQotdm9pZCBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZShzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHBhZ2UgKnBhZ2UsCit2b2lkIGZsdXNoX2lj
YWNoZV91c2VyX3BhZ2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHN0cnVjdCBwYWdlICpw
YWdlLAogCSAgICAgICAgICAgICAgICAgICAgIHVuc2lnbmVkIGxvbmcgYWRkciwgaW50IGxlbik7
Ci0jZGVmaW5lIGZsdXNoX2ljYWNoZV91c2VyX3JhbmdlIGZsdXNoX2ljYWNoZV91c2VyX3Jhbmdl
CisjZGVmaW5lIGZsdXNoX2ljYWNoZV91c2VyX3BhZ2UgZmx1c2hfaWNhY2hlX3VzZXJfcGFnZQog
CiAjaW5jbHVkZSA8YXNtLWdlbmVyaWMvY2FjaGVmbHVzaC5oPgogI2VuZGlmCmRpZmYgLS1naXQg
YS9hcmNoL25kczMyL21tL2NhY2hlZmx1c2guYyBiL2FyY2gvbmRzMzIvbW0vY2FjaGVmbHVzaC5j
CmluZGV4IDhmMTY4YjMzMDY1ZmEuLjZlYjk4YTdhZDI3ZDIgMTAwNjQ0Ci0tLSBhL2FyY2gvbmRz
MzIvbW0vY2FjaGVmbHVzaC5jCisrKyBiL2FyY2gvbmRzMzIvbW0vY2FjaGVmbHVzaC5jCkBAIC0z
Niw3ICszNiw3IEBAIHZvaWQgZmx1c2hfaWNhY2hlX3BhZ2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0
ICp2bWEsIHN0cnVjdCBwYWdlICpwYWdlKQogCWxvY2FsX2lycV9yZXN0b3JlKGZsYWdzKTsKIH0K
IAotdm9pZCBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZt
YSwgc3RydWN0IHBhZ2UgKnBhZ2UsCit2b2lkIGZsdXNoX2ljYWNoZV91c2VyX3BhZ2Uoc3RydWN0
IHZtX2FyZWFfc3RydWN0ICp2bWEsIHN0cnVjdCBwYWdlICpwYWdlLAogCSAgICAgICAgICAgICAg
ICAgICAgIHVuc2lnbmVkIGxvbmcgYWRkciwgaW50IGxlbikKIHsKIAl1bnNpZ25lZCBsb25nIGth
ZGRyOwpkaWZmIC0tZ2l0IGEvYXJjaC9vcGVucmlzYy9pbmNsdWRlL2FzbS9jYWNoZWZsdXNoLmgg
Yi9hcmNoL29wZW5yaXNjL2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaAppbmRleCA3NGQxZmNlNGU4
ODM5Li5lZWFjNDBkNGE4NTQ3IDEwMDY0NAotLS0gYS9hcmNoL29wZW5yaXNjL2luY2x1ZGUvYXNt
L2NhY2hlZmx1c2guaAorKysgYi9hcmNoL29wZW5yaXNjL2luY2x1ZGUvYXNtL2NhY2hlZmx1c2gu
aApAQCAtNjIsNyArNjIsNyBAQCBzdGF0aWMgaW5saW5lIHZvaWQgZmx1c2hfZGNhY2hlX3BhZ2Uo
c3RydWN0IHBhZ2UgKnBhZ2UpCiAJY2xlYXJfYml0KFBHX2RjX2NsZWFuLCAmcGFnZS0+ZmxhZ3Mp
OwogfQogCi0jZGVmaW5lIGZsdXNoX2ljYWNoZV91c2VyX3JhbmdlKHZtYSwgcGFnZSwgYWRkciwg
bGVuKQlcCisjZGVmaW5lIGZsdXNoX2ljYWNoZV91c2VyX3BhZ2Uodm1hLCBwYWdlLCBhZGRyLCBs
ZW4pCVwKIGRvIHsJCQkJCQkJXAogCWlmICh2bWEtPnZtX2ZsYWdzICYgVk1fRVhFQykJCQlcCiAJ
CXN5bmNfaWNhY2hlX2RjYWNoZShwYWdlKTsJCVwKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9p
bmNsdWRlL2FzbS9jYWNoZWZsdXNoLmggYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vY2FjaGVm
bHVzaC5oCmluZGV4IGU2ODJjOGUxMGU5MDMuLmRlNjAwYjkxNWEzYzUgMTAwNjQ0Ci0tLSBhL2Fy
Y2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9jYWNoZWZsdXNoLmgKKysrIGIvYXJjaC9wb3dlcnBjL2lu
Y2x1ZGUvYXNtL2NhY2hlZmx1c2guaApAQCAtMjgsOSArMjgsOSBAQCBleHRlcm4gdm9pZCBmbHVz
aF9kY2FjaGVfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSk7CiB2b2lkIGZsdXNoX2ljYWNoZV9yYW5n
ZSh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIHN0b3ApOwogI2RlZmluZSBmbHVz
aF9pY2FjaGVfcmFuZ2UgZmx1c2hfaWNhY2hlX3JhbmdlCiAKLXZvaWQgZmx1c2hfaWNhY2hlX3Vz
ZXJfcmFuZ2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHN0cnVjdCBwYWdlICpwYWdlLAor
dm9pZCBmbHVzaF9pY2FjaGVfdXNlcl9wYWdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCBz
dHJ1Y3QgcGFnZSAqcGFnZSwKIAkJdW5zaWduZWQgbG9uZyBhZGRyLCBpbnQgbGVuKTsKLSNkZWZp
bmUgZmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2UgZmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2UKKyNkZWZp
bmUgZmx1c2hfaWNhY2hlX3VzZXJfcGFnZSBmbHVzaF9pY2FjaGVfdXNlcl9wYWdlCiAKIHZvaWQg
Zmx1c2hfZGNhY2hlX2ljYWNoZV9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKTsKIHZvaWQgX19mbHVz
aF9kY2FjaGVfaWNhY2hlKHZvaWQgKnBhZ2UpOwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21t
L21lbS5jIGIvYXJjaC9wb3dlcnBjL21tL21lbS5jCmluZGV4IGYwZDFiZjBhOGUxNGYuLmQxYWQw
YjliMTkyODEgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9tbS9tZW0uYworKysgYi9hcmNoL3Bv
d2VycGMvbW0vbWVtLmMKQEAgLTU3OCw3ICs1NzgsNyBAQCB2b2lkIGNvcHlfdXNlcl9wYWdlKHZv
aWQgKnZ0bywgdm9pZCAqdmZyb20sIHVuc2lnbmVkIGxvbmcgdmFkZHIsCiAJZmx1c2hfZGNhY2hl
X3BhZ2UocGcpOwogfQogCi12b2lkIGZsdXNoX2ljYWNoZV91c2VyX3JhbmdlKHN0cnVjdCB2bV9h
cmVhX3N0cnVjdCAqdm1hLCBzdHJ1Y3QgcGFnZSAqcGFnZSwKK3ZvaWQgZmx1c2hfaWNhY2hlX3Vz
ZXJfcGFnZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHBhZ2UgKnBhZ2UsCiAJ
CQkgICAgIHVuc2lnbmVkIGxvbmcgYWRkciwgaW50IGxlbikKIHsKIAl1bnNpZ25lZCBsb25nIG1h
ZGRyOwpkaWZmIC0tZ2l0IGEvYXJjaC9yaXNjdi9pbmNsdWRlL2FzbS9jYWNoZWZsdXNoLmggYi9h
cmNoL3Jpc2N2L2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaAppbmRleCBhMTY3YjRmYmRmMDA3Li4y
M2ZmNzAzNTA5OTI2IDEwMDY0NAotLS0gYS9hcmNoL3Jpc2N2L2luY2x1ZGUvYXNtL2NhY2hlZmx1
c2guaAorKysgYi9hcmNoL3Jpc2N2L2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaApAQCAtMjcsNyAr
MjcsOCBAQCBzdGF0aWMgaW5saW5lIHZvaWQgZmx1c2hfZGNhY2hlX3BhZ2Uoc3RydWN0IHBhZ2Ug
KnBhZ2UpCiAgKiBzbyBpbnN0ZWFkIHdlIGp1c3QgZmx1c2ggdGhlIHdob2xlIHRoaW5nLgogICov
CiAjZGVmaW5lIGZsdXNoX2ljYWNoZV9yYW5nZShzdGFydCwgZW5kKSBmbHVzaF9pY2FjaGVfYWxs
KCkKLSNkZWZpbmUgZmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2Uodm1hLCBwZywgYWRkciwgbGVuKSBm
bHVzaF9pY2FjaGVfbW0odm1hLT52bV9tbSwgMCkKKyNkZWZpbmUgZmx1c2hfaWNhY2hlX3VzZXJf
cGFnZSh2bWEsIHBnLCBhZGRyLCBsZW4pIFwKKwlmbHVzaF9pY2FjaGVfbW0odm1hLT52bV9tbSwg
MCkKIAogI2lmbmRlZiBDT05GSUdfU01QCiAKZGlmZiAtLWdpdCBhL2luY2x1ZGUvYXNtLWdlbmVy
aWMvY2FjaGVmbHVzaC5oIGIvaW5jbHVkZS9hc20tZ2VuZXJpYy9jYWNoZWZsdXNoLmgKaW5kZXgg
YmJiYjRkNGVmNjUxNi4uMmM5Njg2ZmVmYjcxNSAxMDA2NDQKLS0tIGEvaW5jbHVkZS9hc20tZ2Vu
ZXJpYy9jYWNoZWZsdXNoLmgKKysrIGIvaW5jbHVkZS9hc20tZ2VuZXJpYy9jYWNoZWZsdXNoLmgK
QEAgLTczLDggKzczLDggQEAgc3RhdGljIGlubGluZSB2b2lkIGZsdXNoX2ljYWNoZV9wYWdlKHN0
cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLAogfQogI2VuZGlmCiAKLSNpZm5kZWYgZmx1c2hfaWNh
Y2hlX3VzZXJfcmFuZ2UKLXN0YXRpYyBpbmxpbmUgdm9pZCBmbHVzaF9pY2FjaGVfdXNlcl9yYW5n
ZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwKKyNpZm5kZWYgZmx1c2hfaWNhY2hlX3VzZXJf
cGFnZQorc3RhdGljIGlubGluZSB2b2lkIGZsdXNoX2ljYWNoZV91c2VyX3BhZ2Uoc3RydWN0IHZt
X2FyZWFfc3RydWN0ICp2bWEsCiAJCQkJCSAgIHN0cnVjdCBwYWdlICpwYWdlLAogCQkJCQkgICB1
bnNpZ25lZCBsb25nIGFkZHIsIGludCBsZW4pCiB7CkBAIC05Nyw3ICs5Nyw3IEBAIHN0YXRpYyBp
bmxpbmUgdm9pZCBmbHVzaF9jYWNoZV92dW5tYXAodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWdu
ZWQgbG9uZyBlbmQpCiAjZGVmaW5lIGNvcHlfdG9fdXNlcl9wYWdlKHZtYSwgcGFnZSwgdmFkZHIs
IGRzdCwgc3JjLCBsZW4pCVwKIAlkbyB7IFwKIAkJbWVtY3B5KGRzdCwgc3JjLCBsZW4pOyBcCi0J
CWZsdXNoX2ljYWNoZV91c2VyX3JhbmdlKHZtYSwgcGFnZSwgdmFkZHIsIGxlbik7IFwKKwkJZmx1
c2hfaWNhY2hlX3VzZXJfcGFnZSh2bWEsIHBhZ2UsIHZhZGRyLCBsZW4pOyBcCiAJfSB3aGlsZSAo
MCkKICNlbmRpZgogCmRpZmYgLS1naXQgYS9rZXJuZWwvZXZlbnRzL3Vwcm9iZXMuYyBiL2tlcm5l
bC9ldmVudHMvdXByb2Jlcy5jCmluZGV4IGVjZTdlMTNmNmU0YWMuLjJlNWVmZmJkYTg2YjAgMTAw
NjQ0Ci0tLSBhL2tlcm5lbC9ldmVudHMvdXByb2Jlcy5jCisrKyBiL2tlcm5lbC9ldmVudHMvdXBy
b2Jlcy5jCkBAIC0xNjc0LDcgKzE2NzQsNyBAQCB2b2lkIF9fd2VhayBhcmNoX3Vwcm9iZV9jb3B5
X2l4b2woc3RydWN0IHBhZ2UgKnBhZ2UsIHVuc2lnbmVkIGxvbmcgdmFkZHIsCiAJY29weV90b19w
YWdlKHBhZ2UsIHZhZGRyLCBzcmMsIGxlbik7CiAKIAkvKgotCSAqIFdlIHByb2JhYmx5IG5lZWQg
Zmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2UoKSBidXQgaXQgbmVlZHMgdm1hLgorCSAqIFdlIHByb2Jh
Ymx5IG5lZWQgZmx1c2hfaWNhY2hlX3VzZXJfcGFnZSgpIGJ1dCBpdCBuZWVkcyB2bWEuCiAJICog
VGhpcyBzaG91bGQgd29yayBvbiBtb3N0IG9mIGFyY2hpdGVjdHVyZXMgYnkgZGVmYXVsdC4gSWYK
IAkgKiBhcmNoaXRlY3R1cmUgbmVlZHMgdG8gZG8gc29tZXRoaW5nIGRpZmZlcmVudCBpdCBjYW4g
ZGVmaW5lCiAJICogaXRzIG93biB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvbi4KLS0gCjIuMjYuMgoK
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KT3BlblJJU0Mg
bWFpbGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMub3JnCmh0dHBzOi8vbGlzdHMu
bGlicmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJpc2MK
