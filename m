Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 808C7437647
	for <lists+openrisc@lfdr.de>; Fri, 22 Oct 2021 14:01:15 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id EA1F124205;
	Fri, 22 Oct 2021 14:01:14 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id CF4B92407D
 for <openrisc@lists.librecores.org>; Fri, 22 Oct 2021 14:01:12 +0200 (CEST)
Received: by mail.kernel.org (Postfix) with ESMTPSA id BEB6660C4C;
 Fri, 22 Oct 2021 12:01:06 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=k20201202; t=1634904070;
 bh=qtLhW6yJc0m7cAPxwCcpju0k0Trvuqus6DX8RjrMrwQ=;
 h=From:To:Cc:Subject:Date:From;
 b=SAu9tSKCbqiJGF0fecRlvTkO/vclPKkUQHrLN615nSNbXoZjf33R7XvYXI5QsEkG+
 c2EPr9rRutH1pzDZpBdjqtFclTmCJY2KuDd9ND8HboYNcNPjWcQ1Xoxw1E0ccYFfpa
 Y+lpOpH2rdPgBzWPapFLNfYOReMJTfoQlRAJotreNpssaXo83NTLDnXaWHRHrK7UaS
 OjqCeDgCfW/uJHO9Q3z46GJbdNJcU0Ig2mNldTDelBss2UrmemrQdjUJ5oEri8e3fV
 pXex+MOYJcIpeh9QjfL9ehSGPNv+sT2If1HZwy4L6gFxVglwCpW7yBWAdP0UulQXQw
 hrZ3PBI60yxzg==
From: Arnd Bergmann <arnd@kernel.org>
To: Peter Zijlstra <peterz@infradead.org>, Ingo Molnar <mingo@redhat.com>,
 Will Deacon <will@kernel.org>
Date: Fri, 22 Oct 2021 13:59:38 +0200
Message-Id: <20211022120058.1031690-1-arnd@kernel.org>
X-Mailer: git-send-email 2.29.2
MIME-Version: 1.0
Subject: [OpenRISC] [PATCH] locking: remove spin_lock_flags() etc
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Jonas Bonn <jonas@southpole.se>, linux-s390@vger.kernel.org,
 Alexander Gordeev <agordeev@linux.ibm.com>, linux-ia64@vger.kernel.org,
 Vasily Gorbik <gor@linux.ibm.com>, Arnd Bergmann <arnd@arndb.de>,
 Michael Ellerman <mpe@ellerman.id.au>, Boqun Feng <boqun.feng@gmail.com>,
 linux-kernel@vger.kernel.org,
 "James E.J. Bottomley" <James.Bottomley@HansenPartnership.com>,
 Christian Borntraeger <borntraeger@de.ibm.com>, openrisc@lists.librecores.org,
 Paul Mackerras <paulus@samba.org>, linux-parisc@vger.kernel.org,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Waiman Long <longman@redhat.com>, linuxppc-dev@lists.ozlabs.org,
 Helge Deller <deller@gmx.de>, Heiko Carstens <hca@linux.ibm.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogQXJuZCBCZXJnbWFubiA8YXJuZEBhcm5kYi5kZT4KCnBhcmlzYywgaWE2NCBhbmQgcG93
ZXJwYzMyIGFyZSB0aGUgb25seSByZW1haW5pbmcgYXJjaGl0ZWN0dXJlcyB0aGF0CnByb3ZpZGUg
Y3VzdG9tIGFyY2hfe3NwaW4scmVhZCx3cml0ZX1fbG9ja19mbGFncygpIGZ1bmN0aW9ucywgd2hp
Y2ggYXJlCm1lYW50IHRvIHJlLWVuYWJsZSBpbnRlcnJ1cHRzIHdoaWxlIHdhaXRpbmcgZm9yIGEg
c3BpbmxvY2suCgpIb3dldmVyLCBub25lIG9mIHRoZXNlIGNhbiBhY3R1YWxseSBydW4gaW50byB0
aGlzIGNvZGVwYXRoLCBiZWNhdXNlCml0IGlzIG9ubHkgY2FsbGVkIG9uIGFyY2hpdGVjdHVyZXMg
d2l0aG91dCBDT05GSUdfR0VORVJJQ19MT0NLQlJFQUssCm9yIHdoZW4gQ09ORklHX0RFQlVHX0xP
Q0tfQUxMT0MgaXMgc2V0IHdpdGhvdXQgQ09ORklHX0xPQ0tERVAsIGFuZCBub25lCm9mIHRob3Nl
IGNvbWJpbmF0aW9ucyBhcmUgcG9zc2libGUgb24gdGhlIHRocmVlIGFyY2hpdGVjdHVyZXMuCgpH
b2luZyBiYWNrIGluIHRoZSBnaXQgaGlzdG9yeSwgaXQgYXBwZWFycyB0aGF0IGFyY2gvbW4xMDMw
MCBtYXkgaGF2ZQpiZWVuIGFibGUgdG8gcnVuIGludG8gdGhpcyBjb2RlIHBhdGgsIGJ1dCB0aGVy
ZSBpcyBhIGdvb2QgY2hhbmNlIHRoYXQKaXQgbmV2ZXIgd29ya2VkLiBPbiB0aGUgYXJjaGl0ZWN0
dXJlcyB0aGF0IHN0aWxsIGV4aXN0LCBpdCB3YXMKYWxyZWFkeSBpbXBvc3NpYmxlIHRvIGhpdCBi
YWNrIGluIDIwMDggYWZ0ZXIgdGhlIGludHJvZHVjdGlvbiBvZgpDT05GSUdfR0VORVJJQ19MT0NL
QlJFQUssIGFuZCBwb3NzaWJseSBlYXJsaWVyLgoKQXMgdGhpcyBpcyBhbGwgZGVhZCBjb2RlLCBq
dXN0IHJlbW92ZSBpdCBhbmQgdGhlIGhlbHBlciBmdW5jdGlvbnMgYnVpbHQKYXJvdW5kIGl0LiBG
b3IgYXJjaC9pYTY0LCB0aGUgaW5saW5lIGFzbSBjb3VsZCBiZSBjbGVhbmVkIHVwLCBidXQKaXQg
c2VlbXMgc2FmZXIgdG8gbGVhdmUgaXQgdW50b3VjaGVkLgoKU2lnbmVkLW9mZi1ieTogQXJuZCBC
ZXJnbWFubiA8YXJuZEBhcm5kYi5kZT4KLS0tCiBhcmNoL2lhNjQvaW5jbHVkZS9hc20vc3Bpbmxv
Y2suaCAgICAgICAgICAgfCAyMyArKysrKystLS0tLS0tLS0tLS0tLS0tCiBhcmNoL29wZW5yaXNj
L2luY2x1ZGUvYXNtL3NwaW5sb2NrLmggICAgICAgfCAgMyAtLS0KIGFyY2gvcGFyaXNjL2luY2x1
ZGUvYXNtL3NwaW5sb2NrLmggICAgICAgICB8IDE1IC0tLS0tLS0tLS0tLS0tCiBhcmNoL3Bvd2Vy
cGMvaW5jbHVkZS9hc20vc2ltcGxlX3NwaW5sb2NrLmggfCAyMSAtLS0tLS0tLS0tLS0tLS0tLS0t
LQogYXJjaC9zMzkwL2luY2x1ZGUvYXNtL3NwaW5sb2NrLmggICAgICAgICAgIHwgIDggLS0tLS0t
LS0KIGluY2x1ZGUvbGludXgvbG9ja2RlcC5oICAgICAgICAgICAgICAgICAgICB8IDE3IC0tLS0t
LS0tLS0tLS0tLS0KIGluY2x1ZGUvbGludXgvcndsb2NrLmggICAgICAgICAgICAgICAgICAgICB8
IDE1IC0tLS0tLS0tLS0tLS0tCiBpbmNsdWRlL2xpbnV4L3J3bG9ja19hcGlfc21wLmggICAgICAg
ICAgICAgfCAgNiArKy0tLS0KIGluY2x1ZGUvbGludXgvc3BpbmxvY2suaCAgICAgICAgICAgICAg
ICAgICB8IDEzIC0tLS0tLS0tLS0tLQogaW5jbHVkZS9saW51eC9zcGlubG9ja19hcGlfc21wLmgg
ICAgICAgICAgIHwgIDkgLS0tLS0tLS0tCiBpbmNsdWRlL2xpbnV4L3NwaW5sb2NrX3VwLmggICAg
ICAgICAgICAgICAgfCAgMSAtCiBrZXJuZWwvbG9ja2luZy9zcGlubG9jay5jICAgICAgICAgICAg
ICAgICAgfCAgMyArLS0KIDEyIGZpbGVzIGNoYW5nZWQsIDkgaW5zZXJ0aW9ucygrKSwgMTI1IGRl
bGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2FyY2gvaWE2NC9pbmNsdWRlL2FzbS9zcGlubG9jay5o
IGIvYXJjaC9pYTY0L2luY2x1ZGUvYXNtL3NwaW5sb2NrLmgKaW5kZXggODY0Nzc1OTcwYzUwLi4w
ZTVjMWFkMzIzOWMgMTAwNjQ0Ci0tLSBhL2FyY2gvaWE2NC9pbmNsdWRlL2FzbS9zcGlubG9jay5o
CisrKyBiL2FyY2gvaWE2NC9pbmNsdWRlL2FzbS9zcGlubG9jay5oCkBAIC0xMjQsMTggKzEyNCwx
MyBAQCBzdGF0aWMgX19hbHdheXNfaW5saW5lIHZvaWQgYXJjaF9zcGluX3VubG9jayhhcmNoX3Nw
aW5sb2NrX3QgKmxvY2spCiAJX190aWNrZXRfc3Bpbl91bmxvY2sobG9jayk7CiB9CiAKLXN0YXRp
YyBfX2Fsd2F5c19pbmxpbmUgdm9pZCBhcmNoX3NwaW5fbG9ja19mbGFncyhhcmNoX3NwaW5sb2Nr
X3QgKmxvY2ssCi0JCQkJCQkgIHVuc2lnbmVkIGxvbmcgZmxhZ3MpCi17Ci0JYXJjaF9zcGluX2xv
Y2sobG9jayk7Ci19Ci0jZGVmaW5lIGFyY2hfc3Bpbl9sb2NrX2ZsYWdzCWFyY2hfc3Bpbl9sb2Nr
X2ZsYWdzCi0KICNpZmRlZiBBU01fU1VQUE9SVEVECiAKIHN0YXRpYyBfX2Fsd2F5c19pbmxpbmUg
dm9pZAotYXJjaF9yZWFkX2xvY2tfZmxhZ3MoYXJjaF9yd2xvY2tfdCAqbG9jaywgdW5zaWduZWQg
bG9uZyBmbGFncykKK2FyY2hfcmVhZF9sb2NrKGFyY2hfcndsb2NrX3QgKmxvY2spCiB7CisJdW5z
aWduZWQgbG9uZyBmbGFncyA9IDA7CisKIAlfX2FzbV9fIF9fdm9sYXRpbGVfXyAoCiAJCSJ0Yml0
Lm56IHA2LCBwMCA9ICUxLCUyXG4iCiAJCSJici5mZXcgM2ZcbiIKQEAgLTE1NywxMyArMTUyLDgg
QEAgYXJjaF9yZWFkX2xvY2tfZmxhZ3MoYXJjaF9yd2xvY2tfdCAqbG9jaywgdW5zaWduZWQgbG9u
ZyBmbGFncykKIAkJOiAicDYiLCAicDciLCAicjIiLCAibWVtb3J5Iik7CiB9CiAKLSNkZWZpbmUg
YXJjaF9yZWFkX2xvY2tfZmxhZ3MgYXJjaF9yZWFkX2xvY2tfZmxhZ3MKLSNkZWZpbmUgYXJjaF9y
ZWFkX2xvY2sobG9jaykgYXJjaF9yZWFkX2xvY2tfZmxhZ3MobG9jaywgMCkKLQogI2Vsc2UgLyog
IUFTTV9TVVBQT1JURUQgKi8KIAotI2RlZmluZSBhcmNoX3JlYWRfbG9ja19mbGFncyhydywgZmxh
Z3MpIGFyY2hfcmVhZF9sb2NrKHJ3KQotCiAjZGVmaW5lIGFyY2hfcmVhZF9sb2NrKHJ3KQkJCQkJ
CQkJXAogZG8gewkJCQkJCQkJCQkJXAogCWFyY2hfcndsb2NrX3QgKl9fcmVhZF9sb2NrX3B0ciA9
IChydyk7CQkJCQkJXApAQCAtMTg2LDggKzE3NiwxMCBAQCBkbyB7CQkJCQkJCQlcCiAjaWZkZWYg
QVNNX1NVUFBPUlRFRAogCiBzdGF0aWMgX19hbHdheXNfaW5saW5lIHZvaWQKLWFyY2hfd3JpdGVf
bG9ja19mbGFncyhhcmNoX3J3bG9ja190ICpsb2NrLCB1bnNpZ25lZCBsb25nIGZsYWdzKQorYXJj
aF93cml0ZV9sb2NrKGFyY2hfcndsb2NrX3QgKmxvY2spCiB7CisJdW5zaWduZWQgbG9uZyBmbGFn
cyA9IDA7CisKIAlfX2FzbV9fIF9fdm9sYXRpbGVfXyAoCiAJCSJ0Yml0Lm56IHA2LCBwMCA9ICUx
LCAlMlxuIgogCQkibW92IGFyLmNjdiA9IHIwXG4iCkBAIC0yMTAsOSArMjAyLDYgQEAgYXJjaF93
cml0ZV9sb2NrX2ZsYWdzKGFyY2hfcndsb2NrX3QgKmxvY2ssIHVuc2lnbmVkIGxvbmcgZmxhZ3Mp
CiAJCTogImFyLmNjdiIsICJwNiIsICJwNyIsICJyMiIsICJyMjkiLCAibWVtb3J5Iik7CiB9CiAK
LSNkZWZpbmUgYXJjaF93cml0ZV9sb2NrX2ZsYWdzIGFyY2hfd3JpdGVfbG9ja19mbGFncwotI2Rl
ZmluZSBhcmNoX3dyaXRlX2xvY2socncpIGFyY2hfd3JpdGVfbG9ja19mbGFncyhydywgMCkKLQog
I2RlZmluZSBhcmNoX3dyaXRlX3RyeWxvY2socncpCQkJCQkJCVwKICh7CQkJCQkJCQkJCVwKIAly
ZWdpc3RlciBsb25nIHJlc3VsdDsJCQkJCQkJXApkaWZmIC0tZ2l0IGEvYXJjaC9vcGVucmlzYy9p
bmNsdWRlL2FzbS9zcGlubG9jay5oIGIvYXJjaC9vcGVucmlzYy9pbmNsdWRlL2FzbS9zcGlubG9j
ay5oCmluZGV4IGE4OTQwYmRmY2I3ZS4uMjY0OTQ0YTcxNTM1IDEwMDY0NAotLS0gYS9hcmNoL29w
ZW5yaXNjL2luY2x1ZGUvYXNtL3NwaW5sb2NrLmgKKysrIGIvYXJjaC9vcGVucmlzYy9pbmNsdWRl
L2FzbS9zcGlubG9jay5oCkBAIC0xOSw5ICsxOSw2IEBACiAKICNpbmNsdWRlIDxhc20vcXJ3bG9j
ay5oPgogCi0jZGVmaW5lIGFyY2hfcmVhZF9sb2NrX2ZsYWdzKGxvY2ssIGZsYWdzKSBhcmNoX3Jl
YWRfbG9jayhsb2NrKQotI2RlZmluZSBhcmNoX3dyaXRlX2xvY2tfZmxhZ3MobG9jaywgZmxhZ3Mp
IGFyY2hfd3JpdGVfbG9jayhsb2NrKQotCiAjZGVmaW5lIGFyY2hfc3Bpbl9yZWxheChsb2NrKQlj
cHVfcmVsYXgoKQogI2RlZmluZSBhcmNoX3JlYWRfcmVsYXgobG9jaykJY3B1X3JlbGF4KCkKICNk
ZWZpbmUgYXJjaF93cml0ZV9yZWxheChsb2NrKQljcHVfcmVsYXgoKQpkaWZmIC0tZ2l0IGEvYXJj
aC9wYXJpc2MvaW5jbHVkZS9hc20vc3BpbmxvY2suaCBiL2FyY2gvcGFyaXNjL2luY2x1ZGUvYXNt
L3NwaW5sb2NrLmgKaW5kZXggZmE1ZWU4YTQ1ZGJkLi5hNmU1ZDY2YTc2NTYgMTAwNjQ0Ci0tLSBh
L2FyY2gvcGFyaXNjL2luY2x1ZGUvYXNtL3NwaW5sb2NrLmgKKysrIGIvYXJjaC9wYXJpc2MvaW5j
bHVkZS9hc20vc3BpbmxvY2suaApAQCAtMjMsMjEgKzIzLDYgQEAgc3RhdGljIGlubGluZSB2b2lk
IGFyY2hfc3Bpbl9sb2NrKGFyY2hfc3BpbmxvY2tfdCAqeCkKIAkJCWNvbnRpbnVlOwogfQogCi1z
dGF0aWMgaW5saW5lIHZvaWQgYXJjaF9zcGluX2xvY2tfZmxhZ3MoYXJjaF9zcGlubG9ja190ICp4
LAotCQkJCQl1bnNpZ25lZCBsb25nIGZsYWdzKQotewotCXZvbGF0aWxlIHVuc2lnbmVkIGludCAq
YTsKLQotCWEgPSBfX2xkY3dfYWxpZ24oeCk7Ci0Jd2hpbGUgKF9fbGRjdyhhKSA9PSAwKQotCQl3
aGlsZSAoKmEgPT0gMCkKLQkJCWlmIChmbGFncyAmIFBTV19TTV9JKSB7Ci0JCQkJbG9jYWxfaXJx
X2VuYWJsZSgpOwotCQkJCWxvY2FsX2lycV9kaXNhYmxlKCk7Ci0JCQl9Ci19Ci0jZGVmaW5lIGFy
Y2hfc3Bpbl9sb2NrX2ZsYWdzIGFyY2hfc3Bpbl9sb2NrX2ZsYWdzCi0KIHN0YXRpYyBpbmxpbmUg
dm9pZCBhcmNoX3NwaW5fdW5sb2NrKGFyY2hfc3BpbmxvY2tfdCAqeCkKIHsKIAl2b2xhdGlsZSB1
bnNpZ25lZCBpbnQgKmE7CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vc2lt
cGxlX3NwaW5sb2NrLmggYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vc2ltcGxlX3NwaW5sb2Nr
LmgKaW5kZXggODk4NTc5MWEyYmE1Li43YWU2YWVlZjg0NjQgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93
ZXJwYy9pbmNsdWRlL2FzbS9zaW1wbGVfc3BpbmxvY2suaAorKysgYi9hcmNoL3Bvd2VycGMvaW5j
bHVkZS9hc20vc2ltcGxlX3NwaW5sb2NrLmgKQEAgLTEyMywyNyArMTIzLDYgQEAgc3RhdGljIGlu
bGluZSB2b2lkIGFyY2hfc3Bpbl9sb2NrKGFyY2hfc3BpbmxvY2tfdCAqbG9jaykKIAl9CiB9CiAK
LXN0YXRpYyBpbmxpbmUKLXZvaWQgYXJjaF9zcGluX2xvY2tfZmxhZ3MoYXJjaF9zcGlubG9ja190
ICpsb2NrLCB1bnNpZ25lZCBsb25nIGZsYWdzKQotewotCXVuc2lnbmVkIGxvbmcgZmxhZ3NfZGlz
OwotCi0Jd2hpbGUgKDEpIHsKLQkJaWYgKGxpa2VseShfX2FyY2hfc3Bpbl90cnlsb2NrKGxvY2sp
ID09IDApKQotCQkJYnJlYWs7Ci0JCWxvY2FsX3NhdmVfZmxhZ3MoZmxhZ3NfZGlzKTsKLQkJbG9j
YWxfaXJxX3Jlc3RvcmUoZmxhZ3MpOwotCQlkbyB7Ci0JCQlITVRfbG93KCk7Ci0JCQlpZiAoaXNf
c2hhcmVkX3Byb2Nlc3NvcigpKQotCQkJCXNwbHBhcl9zcGluX3lpZWxkKGxvY2spOwotCQl9IHdo
aWxlICh1bmxpa2VseShsb2NrLT5zbG9jayAhPSAwKSk7Ci0JCUhNVF9tZWRpdW0oKTsKLQkJbG9j
YWxfaXJxX3Jlc3RvcmUoZmxhZ3NfZGlzKTsKLQl9Ci19Ci0jZGVmaW5lIGFyY2hfc3Bpbl9sb2Nr
X2ZsYWdzIGFyY2hfc3Bpbl9sb2NrX2ZsYWdzCi0KIHN0YXRpYyBpbmxpbmUgdm9pZCBhcmNoX3Nw
aW5fdW5sb2NrKGFyY2hfc3BpbmxvY2tfdCAqbG9jaykKIHsKIAlfX2FzbV9fIF9fdm9sYXRpbGVf
XygiIyBhcmNoX3NwaW5fdW5sb2NrXG5cdCIKZGlmZiAtLWdpdCBhL2FyY2gvczM5MC9pbmNsdWRl
L2FzbS9zcGlubG9jay5oIGIvYXJjaC9zMzkwL2luY2x1ZGUvYXNtL3NwaW5sb2NrLmgKaW5kZXgg
ZWY1OTU4OGEzMDQyLi44ODhhMmYxYzllZTMgMTAwNjQ0Ci0tLSBhL2FyY2gvczM5MC9pbmNsdWRl
L2FzbS9zcGlubG9jay5oCisrKyBiL2FyY2gvczM5MC9pbmNsdWRlL2FzbS9zcGlubG9jay5oCkBA
IC02NywxNCArNjcsNiBAQCBzdGF0aWMgaW5saW5lIHZvaWQgYXJjaF9zcGluX2xvY2soYXJjaF9z
cGlubG9ja190ICpscCkKIAkJYXJjaF9zcGluX2xvY2tfd2FpdChscCk7CiB9CiAKLXN0YXRpYyBp
bmxpbmUgdm9pZCBhcmNoX3NwaW5fbG9ja19mbGFncyhhcmNoX3NwaW5sb2NrX3QgKmxwLAotCQkJ
CQl1bnNpZ25lZCBsb25nIGZsYWdzKQotewotCWlmICghYXJjaF9zcGluX3RyeWxvY2tfb25jZShs
cCkpCi0JCWFyY2hfc3Bpbl9sb2NrX3dhaXQobHApOwotfQotI2RlZmluZSBhcmNoX3NwaW5fbG9j
a19mbGFncwlhcmNoX3NwaW5fbG9ja19mbGFncwotCiBzdGF0aWMgaW5saW5lIGludCBhcmNoX3Nw
aW5fdHJ5bG9jayhhcmNoX3NwaW5sb2NrX3QgKmxwKQogewogCWlmICghYXJjaF9zcGluX3RyeWxv
Y2tfb25jZShscCkpCmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L2xvY2tkZXAuaCBiL2luY2x1
ZGUvbGludXgvbG9ja2RlcC5oCmluZGV4IDlmZTE2NWJlYjBmOS4uNDY3Yjk0MjU3MTA1IDEwMDY0
NAotLS0gYS9pbmNsdWRlL2xpbnV4L2xvY2tkZXAuaAorKysgYi9pbmNsdWRlL2xpbnV4L2xvY2tk
ZXAuaApAQCAtNDgxLDIzICs0ODEsNiBAQCBkbyB7CQkJCQkJCQlcCiAKICNlbmRpZiAvKiBDT05G
SUdfTE9DS19TVEFUICovCiAKLSNpZmRlZiBDT05GSUdfTE9DS0RFUAotCi0vKgotICogT24gbG9j
a2RlcCB3ZSBkb250IHdhbnQgdGhlIGhhbmQtY29kZWQgaXJxLWVuYWJsZSBvZgotICogX3Jhd18q
X2xvY2tfZmxhZ3MoKSBjb2RlLCBiZWNhdXNlIGxvY2tkZXAgYXNzdW1lcwotICogdGhhdCBpbnRl
cnJ1cHRzIGFyZSBub3QgcmUtZW5hYmxlZCBkdXJpbmcgbG9jay1hY3F1aXJlOgotICovCi0jZGVm
aW5lIExPQ0tfQ09OVEVOREVEX0ZMQUdTKF9sb2NrLCB0cnksIGxvY2ssIGxvY2tmbCwgZmxhZ3Mp
IFwKLQlMT0NLX0NPTlRFTkRFRCgoX2xvY2spLCAodHJ5KSwgKGxvY2spKQotCi0jZWxzZSAvKiBD
T05GSUdfTE9DS0RFUCAqLwotCi0jZGVmaW5lIExPQ0tfQ09OVEVOREVEX0ZMQUdTKF9sb2NrLCB0
cnksIGxvY2ssIGxvY2tmbCwgZmxhZ3MpIFwKLQlsb2NrZmwoKF9sb2NrKSwgKGZsYWdzKSkKLQot
I2VuZGlmIC8qIENPTkZJR19MT0NLREVQICovCi0KICNpZmRlZiBDT05GSUdfUFJPVkVfTE9DS0lO
RwogZXh0ZXJuIHZvaWQgcHJpbnRfaXJxdHJhY2VfZXZlbnRzKHN0cnVjdCB0YXNrX3N0cnVjdCAq
Y3Vycik7CiAjZWxzZQpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9yd2xvY2suaCBiL2luY2x1
ZGUvbGludXgvcndsb2NrLmgKaW5kZXggN2NlOWE1MWFlNWMwLi4yYzBhZDQxN2NlM2MgMTAwNjQ0
Ci0tLSBhL2luY2x1ZGUvbGludXgvcndsb2NrLmgKKysrIGIvaW5jbHVkZS9saW51eC9yd2xvY2su
aApAQCAtMzAsMzEgKzMwLDE2IEBAIGRvIHsJCQkJCQkJCVwKIAogI2lmZGVmIENPTkZJR19ERUJV
R19TUElOTE9DSwogIGV4dGVybiB2b2lkIGRvX3Jhd19yZWFkX2xvY2socndsb2NrX3QgKmxvY2sp
IF9fYWNxdWlyZXMobG9jayk7Ci0jZGVmaW5lIGRvX3Jhd19yZWFkX2xvY2tfZmxhZ3MobG9jaywg
ZmxhZ3MpIGRvX3Jhd19yZWFkX2xvY2sobG9jaykKICBleHRlcm4gaW50IGRvX3Jhd19yZWFkX3Ry
eWxvY2socndsb2NrX3QgKmxvY2spOwogIGV4dGVybiB2b2lkIGRvX3Jhd19yZWFkX3VubG9jayhy
d2xvY2tfdCAqbG9jaykgX19yZWxlYXNlcyhsb2NrKTsKICBleHRlcm4gdm9pZCBkb19yYXdfd3Jp
dGVfbG9jayhyd2xvY2tfdCAqbG9jaykgX19hY3F1aXJlcyhsb2NrKTsKLSNkZWZpbmUgZG9fcmF3
X3dyaXRlX2xvY2tfZmxhZ3MobG9jaywgZmxhZ3MpIGRvX3Jhd193cml0ZV9sb2NrKGxvY2spCiAg
ZXh0ZXJuIGludCBkb19yYXdfd3JpdGVfdHJ5bG9jayhyd2xvY2tfdCAqbG9jayk7CiAgZXh0ZXJu
IHZvaWQgZG9fcmF3X3dyaXRlX3VubG9jayhyd2xvY2tfdCAqbG9jaykgX19yZWxlYXNlcyhsb2Nr
KTsKICNlbHNlCi0KLSNpZm5kZWYgYXJjaF9yZWFkX2xvY2tfZmxhZ3MKLSMgZGVmaW5lIGFyY2hf
cmVhZF9sb2NrX2ZsYWdzKGxvY2ssIGZsYWdzKQlhcmNoX3JlYWRfbG9jayhsb2NrKQotI2VuZGlm
Ci0KLSNpZm5kZWYgYXJjaF93cml0ZV9sb2NrX2ZsYWdzCi0jIGRlZmluZSBhcmNoX3dyaXRlX2xv
Y2tfZmxhZ3MobG9jaywgZmxhZ3MpCWFyY2hfd3JpdGVfbG9jayhsb2NrKQotI2VuZGlmCi0KICMg
ZGVmaW5lIGRvX3Jhd19yZWFkX2xvY2socndsb2NrKQlkbyB7X19hY3F1aXJlKGxvY2spOyBhcmNo
X3JlYWRfbG9jaygmKHJ3bG9jayktPnJhd19sb2NrKTsgfSB3aGlsZSAoMCkKLSMgZGVmaW5lIGRv
X3Jhd19yZWFkX2xvY2tfZmxhZ3MobG9jaywgZmxhZ3MpIFwKLQkJZG8ge19fYWNxdWlyZShsb2Nr
KTsgYXJjaF9yZWFkX2xvY2tfZmxhZ3MoJihsb2NrKS0+cmF3X2xvY2ssICooZmxhZ3MpKTsgfSB3
aGlsZSAoMCkKICMgZGVmaW5lIGRvX3Jhd19yZWFkX3RyeWxvY2socndsb2NrKQlhcmNoX3JlYWRf
dHJ5bG9jaygmKHJ3bG9jayktPnJhd19sb2NrKQogIyBkZWZpbmUgZG9fcmF3X3JlYWRfdW5sb2Nr
KHJ3bG9jaykJZG8ge2FyY2hfcmVhZF91bmxvY2soJihyd2xvY2spLT5yYXdfbG9jayk7IF9fcmVs
ZWFzZShsb2NrKTsgfSB3aGlsZSAoMCkKICMgZGVmaW5lIGRvX3Jhd193cml0ZV9sb2NrKHJ3bG9j
aykJZG8ge19fYWNxdWlyZShsb2NrKTsgYXJjaF93cml0ZV9sb2NrKCYocndsb2NrKS0+cmF3X2xv
Y2spOyB9IHdoaWxlICgwKQotIyBkZWZpbmUgZG9fcmF3X3dyaXRlX2xvY2tfZmxhZ3MobG9jaywg
ZmxhZ3MpIFwKLQkJZG8ge19fYWNxdWlyZShsb2NrKTsgYXJjaF93cml0ZV9sb2NrX2ZsYWdzKCYo
bG9jayktPnJhd19sb2NrLCAqKGZsYWdzKSk7IH0gd2hpbGUgKDApCiAjIGRlZmluZSBkb19yYXdf
d3JpdGVfdHJ5bG9jayhyd2xvY2spCWFyY2hfd3JpdGVfdHJ5bG9jaygmKHJ3bG9jayktPnJhd19s
b2NrKQogIyBkZWZpbmUgZG9fcmF3X3dyaXRlX3VubG9jayhyd2xvY2spCWRvIHthcmNoX3dyaXRl
X3VubG9jaygmKHJ3bG9jayktPnJhd19sb2NrKTsgX19yZWxlYXNlKGxvY2spOyB9IHdoaWxlICgw
KQogI2VuZGlmCmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L3J3bG9ja19hcGlfc21wLmggYi9p
bmNsdWRlL2xpbnV4L3J3bG9ja19hcGlfc21wLmgKaW5kZXggYWJmYjUzYWIxMWJlLi5mMWRiNmYx
N2M0ZmIgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgvcndsb2NrX2FwaV9zbXAuaAorKysgYi9p
bmNsdWRlL2xpbnV4L3J3bG9ja19hcGlfc21wLmgKQEAgLTE1Nyw4ICsxNTcsNyBAQCBzdGF0aWMg
aW5saW5lIHVuc2lnbmVkIGxvbmcgX19yYXdfcmVhZF9sb2NrX2lycXNhdmUocndsb2NrX3QgKmxv
Y2spCiAJbG9jYWxfaXJxX3NhdmUoZmxhZ3MpOwogCXByZWVtcHRfZGlzYWJsZSgpOwogCXJ3bG9j
a19hY3F1aXJlX3JlYWQoJmxvY2stPmRlcF9tYXAsIDAsIDAsIF9SRVRfSVBfKTsKLQlMT0NLX0NP
TlRFTkRFRF9GTEFHUyhsb2NrLCBkb19yYXdfcmVhZF90cnlsb2NrLCBkb19yYXdfcmVhZF9sb2Nr
LAotCQkJICAgICBkb19yYXdfcmVhZF9sb2NrX2ZsYWdzLCAmZmxhZ3MpOworCUxPQ0tfQ09OVEVO
REVEKGxvY2ssIGRvX3Jhd19yZWFkX3RyeWxvY2ssIGRvX3Jhd19yZWFkX2xvY2spOwogCXJldHVy
biBmbGFnczsKIH0KIApAQCAtMTg0LDggKzE4Myw3IEBAIHN0YXRpYyBpbmxpbmUgdW5zaWduZWQg
bG9uZyBfX3Jhd193cml0ZV9sb2NrX2lycXNhdmUocndsb2NrX3QgKmxvY2spCiAJbG9jYWxfaXJx
X3NhdmUoZmxhZ3MpOwogCXByZWVtcHRfZGlzYWJsZSgpOwogCXJ3bG9ja19hY3F1aXJlKCZsb2Nr
LT5kZXBfbWFwLCAwLCAwLCBfUkVUX0lQXyk7Ci0JTE9DS19DT05URU5ERURfRkxBR1MobG9jaywg
ZG9fcmF3X3dyaXRlX3RyeWxvY2ssIGRvX3Jhd193cml0ZV9sb2NrLAotCQkJICAgICBkb19yYXdf
d3JpdGVfbG9ja19mbGFncywgJmZsYWdzKTsKKwlMT0NLX0NPTlRFTkRFRChsb2NrLCBkb19yYXdf
d3JpdGVfdHJ5bG9jaywgZG9fcmF3X3dyaXRlX2xvY2spOwogCXJldHVybiBmbGFnczsKIH0KIApk
aWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9zcGlubG9jay5oIGIvaW5jbHVkZS9saW51eC9zcGlu
bG9jay5oCmluZGV4IGMwNGU5OWVkZmU5Mi4uNDBlNDY3Y2RlZTJkIDEwMDY0NAotLS0gYS9pbmNs
dWRlL2xpbnV4L3NwaW5sb2NrLmgKKysrIGIvaW5jbHVkZS9saW51eC9zcGlubG9jay5oCkBAIC0x
NzYsNyArMTc2LDYgQEAgZG8gewkJCQkJCQkJCVwKIAogI2lmZGVmIENPTkZJR19ERUJVR19TUElO
TE9DSwogIGV4dGVybiB2b2lkIGRvX3Jhd19zcGluX2xvY2socmF3X3NwaW5sb2NrX3QgKmxvY2sp
IF9fYWNxdWlyZXMobG9jayk7Ci0jZGVmaW5lIGRvX3Jhd19zcGluX2xvY2tfZmxhZ3MobG9jaywg
ZmxhZ3MpIGRvX3Jhd19zcGluX2xvY2sobG9jaykKICBleHRlcm4gaW50IGRvX3Jhd19zcGluX3Ry
eWxvY2socmF3X3NwaW5sb2NrX3QgKmxvY2spOwogIGV4dGVybiB2b2lkIGRvX3Jhd19zcGluX3Vu
bG9jayhyYXdfc3BpbmxvY2tfdCAqbG9jaykgX19yZWxlYXNlcyhsb2NrKTsKICNlbHNlCkBAIC0x
ODcsMTggKzE4Niw2IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBkb19yYXdfc3Bpbl9sb2NrKHJhd19z
cGlubG9ja190ICpsb2NrKSBfX2FjcXVpcmVzKGxvY2spCiAJbW1pb3diX3NwaW5fbG9jaygpOwog
fQogCi0jaWZuZGVmIGFyY2hfc3Bpbl9sb2NrX2ZsYWdzCi0jZGVmaW5lIGFyY2hfc3Bpbl9sb2Nr
X2ZsYWdzKGxvY2ssIGZsYWdzKQlhcmNoX3NwaW5fbG9jayhsb2NrKQotI2VuZGlmCi0KLXN0YXRp
YyBpbmxpbmUgdm9pZAotZG9fcmF3X3NwaW5fbG9ja19mbGFncyhyYXdfc3BpbmxvY2tfdCAqbG9j
aywgdW5zaWduZWQgbG9uZyAqZmxhZ3MpIF9fYWNxdWlyZXMobG9jaykKLXsKLQlfX2FjcXVpcmUo
bG9jayk7Ci0JYXJjaF9zcGluX2xvY2tfZmxhZ3MoJmxvY2stPnJhd19sb2NrLCAqZmxhZ3MpOwot
CW1taW93Yl9zcGluX2xvY2soKTsKLX0KLQogc3RhdGljIGlubGluZSBpbnQgZG9fcmF3X3NwaW5f
dHJ5bG9jayhyYXdfc3BpbmxvY2tfdCAqbG9jaykKIHsKIAlpbnQgcmV0ID0gYXJjaF9zcGluX3Ry
eWxvY2soJihsb2NrKS0+cmF3X2xvY2spOwpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9zcGlu
bG9ja19hcGlfc21wLmggYi9pbmNsdWRlL2xpbnV4L3NwaW5sb2NrX2FwaV9zbXAuaAppbmRleCA2
YjhlMWEwYjEzN2IuLjUxZmEwZGFiNjhjNCAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9zcGlu
bG9ja19hcGlfc21wLmgKKysrIGIvaW5jbHVkZS9saW51eC9zcGlubG9ja19hcGlfc21wLmgKQEAg
LTEwOCwxNiArMTA4LDcgQEAgc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIF9fcmF3X3NwaW5f
bG9ja19pcnFzYXZlKHJhd19zcGlubG9ja190ICpsb2NrKQogCWxvY2FsX2lycV9zYXZlKGZsYWdz
KTsKIAlwcmVlbXB0X2Rpc2FibGUoKTsKIAlzcGluX2FjcXVpcmUoJmxvY2stPmRlcF9tYXAsIDAs
IDAsIF9SRVRfSVBfKTsKLQkvKgotCSAqIE9uIGxvY2tkZXAgd2UgZG9udCB3YW50IHRoZSBoYW5k
LWNvZGVkIGlycS1lbmFibGUgb2YKLQkgKiBkb19yYXdfc3Bpbl9sb2NrX2ZsYWdzKCkgY29kZSwg
YmVjYXVzZSBsb2NrZGVwIGFzc3VtZXMKLQkgKiB0aGF0IGludGVycnVwdHMgYXJlIG5vdCByZS1l
bmFibGVkIGR1cmluZyBsb2NrLWFjcXVpcmU6Ci0JICovCi0jaWZkZWYgQ09ORklHX0xPQ0tERVAK
IAlMT0NLX0NPTlRFTkRFRChsb2NrLCBkb19yYXdfc3Bpbl90cnlsb2NrLCBkb19yYXdfc3Bpbl9s
b2NrKTsKLSNlbHNlCi0JZG9fcmF3X3NwaW5fbG9ja19mbGFncyhsb2NrLCAmZmxhZ3MpOwotI2Vu
ZGlmCiAJcmV0dXJuIGZsYWdzOwogfQogCmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L3NwaW5s
b2NrX3VwLmggYi9pbmNsdWRlL2xpbnV4L3NwaW5sb2NrX3VwLmgKaW5kZXggMGFjOTExMmMxYmJl
Li4xNjUyMTA3NGI2ZjcgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgvc3BpbmxvY2tfdXAuaAor
KysgYi9pbmNsdWRlL2xpbnV4L3NwaW5sb2NrX3VwLmgKQEAgLTYyLDcgKzYyLDYgQEAgc3RhdGlj
IGlubGluZSB2b2lkIGFyY2hfc3Bpbl91bmxvY2soYXJjaF9zcGlubG9ja190ICpsb2NrKQogI2Rl
ZmluZSBhcmNoX3NwaW5faXNfbG9ja2VkKGxvY2spCSgodm9pZCkobG9jayksIDApCiAvKiBmb3Ig
c2NoZWQvY29yZS5jIGFuZCBrZXJuZWxfbG9jay5jOiAqLwogIyBkZWZpbmUgYXJjaF9zcGluX2xv
Y2sobG9jaykJCWRvIHsgYmFycmllcigpOyAodm9pZCkobG9jayk7IH0gd2hpbGUgKDApCi0jIGRl
ZmluZSBhcmNoX3NwaW5fbG9ja19mbGFncyhsb2NrLCBmbGFncykJZG8geyBiYXJyaWVyKCk7ICh2
b2lkKShsb2NrKTsgfSB3aGlsZSAoMCkKICMgZGVmaW5lIGFyY2hfc3Bpbl91bmxvY2sobG9jaykJ
ZG8geyBiYXJyaWVyKCk7ICh2b2lkKShsb2NrKTsgfSB3aGlsZSAoMCkKICMgZGVmaW5lIGFyY2hf
c3Bpbl90cnlsb2NrKGxvY2spCSh7IGJhcnJpZXIoKTsgKHZvaWQpKGxvY2spOyAxOyB9KQogI2Vu
ZGlmIC8qIERFQlVHX1NQSU5MT0NLICovCmRpZmYgLS1naXQgYS9rZXJuZWwvbG9ja2luZy9zcGlu
bG9jay5jIGIva2VybmVsL2xvY2tpbmcvc3BpbmxvY2suYwppbmRleCBjNTgzMGNmYTM3OWEuLmI1
NjJmOTI4OTM3MiAxMDA2NDQKLS0tIGEva2VybmVsL2xvY2tpbmcvc3BpbmxvY2suYworKysgYi9r
ZXJuZWwvbG9ja2luZy9zcGlubG9jay5jCkBAIC0zNzgsOCArMzc4LDcgQEAgdW5zaWduZWQgbG9u
ZyBfX2xvY2tmdW5jIF9yYXdfc3Bpbl9sb2NrX2lycXNhdmVfbmVzdGVkKHJhd19zcGlubG9ja190
ICpsb2NrLAogCWxvY2FsX2lycV9zYXZlKGZsYWdzKTsKIAlwcmVlbXB0X2Rpc2FibGUoKTsKIAlz
cGluX2FjcXVpcmUoJmxvY2stPmRlcF9tYXAsIHN1YmNsYXNzLCAwLCBfUkVUX0lQXyk7Ci0JTE9D
S19DT05URU5ERURfRkxBR1MobG9jaywgZG9fcmF3X3NwaW5fdHJ5bG9jaywgZG9fcmF3X3NwaW5f
bG9jaywKLQkJCQlkb19yYXdfc3Bpbl9sb2NrX2ZsYWdzLCAmZmxhZ3MpOworCUxPQ0tfQ09OVEVO
REVEKGxvY2ssIGRvX3Jhd19zcGluX3RyeWxvY2ssIGRvX3Jhd19zcGluX2xvY2spOwogCXJldHVy
biBmbGFnczsKIH0KIEVYUE9SVF9TWU1CT0woX3Jhd19zcGluX2xvY2tfaXJxc2F2ZV9uZXN0ZWQp
OwotLSAKMi4yOS4yCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fXwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMubGlicmVjb3Jlcy5vcmcK
aHR0cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVucmlzYwo=
