Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 03E3B1D200D
	for <lists+openrisc@lfdr.de>; Wed, 13 May 2020 22:17:49 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id A4FC220B46;
	Wed, 13 May 2020 22:17:48 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 23D1920AD3
 for <openrisc@lists.librecores.org>; Tue, 12 May 2020 20:46:45 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id CABFA207BC;
 Tue, 12 May 2020 18:46:30 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1589309203;
 bh=PFh0LoxZ1OjRRxR8C+Qqe8GLUNYcSLPIPhlqdRrjYXk=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=OHTAtfPysYyw+YoSQXF2DyN0sYJZoj/YEEeoluDNLugNgkucKiFEDDMZLdIWuKM3v
 D/RUDlZDQVxUFkx5vQoweu156lr+124LxrbVf2Ck2XzjGrAWZ4NBNIqWfFkoF9hw5Y
 KwmOxyySUqDgW7hFMHcQkzLovZ9d5d4Uf5G6Uq6o=
From: Mike Rapoport <rppt@kernel.org>
To: linux-kernel@vger.kernel.org
Date: Tue, 12 May 2020 21:44:18 +0300
Message-Id: <20200512184422.12418-9-rppt@kernel.org>
X-Mailer: git-send-email 2.26.1
In-Reply-To: <20200512184422.12418-1-rppt@kernel.org>
References: <20200512184422.12418-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Wed, 13 May 2020 22:17:32 +0200
Subject: [OpenRISC] [PATCH 08/12] mm: pgtable: add shortcuts for accessing
 kernel PMD and PTE
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 linux-sh@vger.kernel.org, Catalin Marinas <catalin.marinas@arm.com>,
 Heiko Carstens <heiko.carstens@de.ibm.com>, Max Filippov <jcmvbkbc@gmail.com>,
 Guo Ren <guoren@kernel.org>, linux-csky@vger.kernel.org,
 sparclinux@vger.kernel.org, linux-hexagon@vger.kernel.org,
 linux-riscv@lists.infradead.org, Vincent Chen <deanbo422@gmail.com>,
 Will Deacon <will@kernel.org>, Greg Ungerer <gerg@linux-m68k.org>,
 linux-arch@vger.kernel.org, linux-s390@vger.kernel.org,
 linux-c6x-dev@linux-c6x.org, Brian Cain <bcain@codeaurora.org>,
 Michael Ellerman <mpe@ellerman.id.au>, Helge Deller <deller@gmx.de>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Ley Foon Tan <ley.foon.tan@intel.com>, Mike Rapoport <rppt@linux.ibm.com>,
 Ingo Molnar <mingo@redhat.com>, linux-parisc@vger.kernel.org,
 Mark Salter <msalter@redhat.com>, Matt Turner <mattst88@gmail.com>,
 linux-snps-arc@lists.infradead.org, linux-xtensa@linux-xtensa.org,
 Arnd Bergmann <arnd@arndb.de>, linux-alpha@vger.kernel.org,
 linux-um@lists.infradead.org, linux-m68k@lists.linux-m68k.org,
 Tony Luck <tony.luck@intel.com>, Borislav Petkov <bp@alien8.de>,
 Greentime Hu <green.hu@gmail.com>, Paul Walmsley <paul.walmsley@sifive.com>,
 Guan Xuetao <gxt@pku.edu.cn>, linux-arm-kernel@lists.infradead.org,
 Chris Zankel <chris@zankel.net>, Michal Simek <monstr@monstr.eu>,
 Thomas Bogendoerfer <tsbogend@alpha.franken.de>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, Nick Hu <nickhu@andestech.com>,
 linux-mm@kvack.org, Vineet Gupta <vgupta@synopsys.com>,
 linux-mips@vger.kernel.org, openrisc@lists.librecores.org,
 Thomas Gleixner <tglx@linutronix.de>, Richard Weinberger <richard@nod.at>,
 Andrew Morton <akpm@linux-foundation.org>, linuxppc-dev@lists.ozlabs.org,
 "David S. Miller" <davem@davemloft.net>, Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlIHBvd2VycGMgMzIt
Yml0IGltcGxlbWVudGF0aW9uIG9mIHBndGFibGUgaGFzIG5pY2Ugc2hvcnRjdXRzIGZvcgphY2Nl
c3Npbmcga2VybmVsIFBNRCBhbmQgUFRFIGZvciBhIGdpdmVuIHZpcnR1YWwgYWRkcmVzcy4KTWFr
ZSB0aGlzIGhlbHBlcnMgYXZhaWxhYmxlIGZvciBhbGwgYXJjaGl0ZWN0dXJlcy4KClNpZ25lZC1v
ZmYtYnk6IE1pa2UgUmFwb3BvcnQgPHJwcHRAbGludXguaWJtLmNvbT4KLS0tCiBhcmNoL2FyYy9t
bS9oaWdobWVtLmMgICAgICAgICAgICAgICAgIHwgMTAgKy0tLS0tLS0KIGFyY2gvYXJtL21hY2gt
c2ExMTAwL2Fzc2FiZXQuYyAgICAgICAgfCAgMiArLQogYXJjaC9hcm0vbW0vaGlnaG1lbS5jICAg
ICAgICAgICAgICAgICB8ICA0ICsrLS0KIGFyY2gvYXJtL21tL2lvcmVtYXAuYyAgICAgICAgICAg
ICAgICAgfCAzMSArKysrLS0tLS0tLS0tLS0tLS0tLS0tLS0KIGFyY2gvYXJtL21tL21tLmggICAg
ICAgICAgICAgICAgICAgICAgfCAgNSAtLS0tCiBhcmNoL2FybS9tbS9tbXUuYyAgICAgICAgICAg
ICAgICAgICAgIHwgIDcgKy0tLS0tCiBhcmNoL2hleGFnb24vaW5jbHVkZS9hc20vZml4bWFwLmgg
ICAgIHwgIDQgLS0tLQogYXJjaC9tNjhrL21tL21vdG9yb2xhLmMgICAgICAgICAgICAgICB8IDI2
ICsrKystLS0tLS0tLS0tLS0tLS0tCiBhcmNoL21pY3JvYmxhemUva2VybmVsL3NpZ25hbC5jICAg
ICAgIHwgIDggKy0tLS0tLQogYXJjaC9taWNyb2JsYXplL21tL2luaXQuYyAgICAgICAgICAgICB8
ICA5IC0tLS0tLS0KIGFyY2gvbWlwcy9pbmNsdWRlL2FzbS9maXhtYXAuaCAgICAgICAgfCAgMyAt
LS0KIGFyY2gvbWlwcy9tbS9jLXIzay5jICAgICAgICAgICAgICAgICAgfCAxMCArKy0tLS0tLQog
YXJjaC9taXBzL21tL2MtcjRrLmMgICAgICAgICAgICAgICAgICB8IDEwICsrLS0tLS0tCiBhcmNo
L21pcHMvbW0vYy10eDM5LmMgICAgICAgICAgICAgICAgIHwgMTAgKystLS0tLS0KIGFyY2gvbWlw
cy9tbS9oaWdobWVtLmMgICAgICAgICAgICAgICAgfCAgMiArLQogYXJjaC9uZHMzMi9pbmNsdWRl
L2FzbS9wZ3RhYmxlLmggICAgICB8ICAyIC0tCiBhcmNoL25kczMyL21tL2luaXQuYyAgICAgICAg
ICAgICAgICAgIHwgMTMgKystLS0tLS0tLQogYXJjaC9uZHMzMi9tbS9wcm9jLmMgICAgICAgICAg
ICAgICAgICB8ICA2ICstLS0tCiBhcmNoL3BhcmlzYy9tbS9maXhtYXAuYyAgICAgICAgICAgICAg
IHwgIDYgKy0tLS0KIGFyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggICAgfCAxOSAt
LS0tLS0tLS0tLS0tLS0KIGFyY2gvcG93ZXJwYy9tbS9ib29rM3MzMi9tbXUuYyAgICAgICAgfCAg
MiArLQogYXJjaC9wb3dlcnBjL21tL2Jvb2szczMyL3RsYi5jICAgICAgICB8ICA0ICsrLS0KIGFy
Y2gvcG93ZXJwYy9tbS9rYXNhbi9rYXNhbl9pbml0XzMyLmMgfCAgOCArKystLS0tCiBhcmNoL3Bv
d2VycGMvbW0vbm9oYXNoLzQweC5jICAgICAgICAgIHwgIDQgKystLQogYXJjaC9wb3dlcnBjL21t
L3BndGFibGVfMzIuYyAgICAgICAgICB8ICAyICstCiBhcmNoL3MzOTAvbW0vcGFnZWF0dHIuYyAg
ICAgICAgICAgICAgIHwgMTAgKy0tLS0tLS0KIGFyY2gvc2gvbW0vY2FjaGUtc2g0LmMgICAgICAg
ICAgICAgICAgfCAgOCArLS0tLS0tCiBhcmNoL3NoL21tL2ttYXAuYyAgICAgICAgICAgICAgICAg
ICAgIHwgIDUgKy0tLQogYXJjaC9zcGFyYy9tbS9oaWdobWVtLmMgICAgICAgICAgICAgICB8IDEy
ICsrLS0tLS0tLS0KIGFyY2gvc3BhcmMvbW0vaW5pdF82NC5jICAgICAgICAgICAgICAgfCAgNiAr
LS0tLQogYXJjaC9zcGFyYy9tbS9pby11bml0LmMgICAgICAgICAgICAgICB8IDEwICsrLS0tLS0t
CiBhcmNoL3NwYXJjL21tL2lvbW11LmMgICAgICAgICAgICAgICAgIHwgIDggKy0tLS0tLQogYXJj
aC9zcGFyYy9tbS9zcm1tdS5jICAgICAgICAgICAgICAgICB8IDM0ICsrKy0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLQogYXJjaC91bS9rZXJuZWwvbWVtLmMgICAgICAgICAgICAgICAgICB8IDEwICst
LS0tLS0tCiBhcmNoL3VtL2tlcm5lbC90cmFwLmMgICAgICAgICAgICAgICAgIHwgIDggKy0tLS0t
LQogYXJjaC91bmljb3JlMzIvbW0vbW0uaCAgICAgICAgICAgICAgICB8IDEwIC0tLS0tLS0tCiBh
cmNoL3g4Ni9tbS9pbml0XzMyLmMgICAgICAgICAgICAgICAgIHwgMjYgKysrLS0tLS0tLS0tLS0t
LS0tLS0KIGFyY2gveHRlbnNhL2luY2x1ZGUvYXNtL2ZpeG1hcC5oICAgICAgfCAgOCAtLS0tLS0t
CiBhcmNoL3h0ZW5zYS9tbS9oaWdobWVtLmMgICAgICAgICAgICAgIHwgIDIgKy0KIGFyY2gveHRl
bnNhL21tL2thc2FuX2luaXQuYyAgICAgICAgICAgfCAxMCArKy0tLS0tLQogYXJjaC94dGVuc2Ev
bW0vbW11LmMgICAgICAgICAgICAgICAgICB8ICA1ICstLS0KIGluY2x1ZGUvbGludXgvcGd0YWJs
ZS5oICAgICAgICAgICAgICAgfCAxOCArKysrKysrKysrKysrKwogNDIgZmlsZXMgY2hhbmdlZCwg
NzQgaW5zZXJ0aW9ucygrKSwgMzIzIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2FyY2gvYXJj
L21tL2hpZ2htZW0uYyBiL2FyY2gvYXJjL21tL2hpZ2htZW0uYwppbmRleCBkNmI3NDg4M2ZkMWYu
LjFiOWY0NzNjNjM2OSAxMDA2NDQKLS0tIGEvYXJjaC9hcmMvbW0vaGlnaG1lbS5jCisrKyBiL2Fy
Y2gvYXJjL21tL2hpZ2htZW0uYwpAQCAtOTIsMTcgKzkyLDkgQEAgRVhQT1JUX1NZTUJPTChrdW5t
YXBfYXRvbWljX2hpZ2gpOwogCiBzdGF0aWMgbm9pbmxpbmUgcHRlX3QgKiBfX2luaXQgYWxsb2Nf
a21hcF9wZ3RhYmxlKHVuc2lnbmVkIGxvbmcga3ZhZGRyKQogewotCXBnZF90ICpwZ2RfazsKLQlw
NGRfdCAqcDRkX2s7Ci0JcHVkX3QgKnB1ZF9rOwotCXBtZF90ICpwbWRfazsKKwlwbWRfdCAqcG1k
X2sgPSBwbWRfb2ZmX2soa3ZhZGRyKTsKIAlwdGVfdCAqcHRlX2s7CiAKLQlwZ2RfayA9IHBnZF9v
ZmZzZXRfayhrdmFkZHIpOwotCXA0ZF9rID0gcDRkX29mZnNldChwZ2Rfaywga3ZhZGRyKTsKLQlw
dWRfayA9IHB1ZF9vZmZzZXQocDRkX2ssIGt2YWRkcik7Ci0JcG1kX2sgPSBwbWRfb2Zmc2V0KHB1
ZF9rLCBrdmFkZHIpOwotCiAJcHRlX2sgPSAocHRlX3QgKiltZW1ibG9ja19hbGxvY19sb3coUEFH
RV9TSVpFLCBQQUdFX1NJWkUpOwogCWlmICghcHRlX2spCiAJCXBhbmljKCIlczogRmFpbGVkIHRv
IGFsbG9jYXRlICVsdSBieXRlcyBhbGlnbj0weCVseFxuIiwKZGlmZiAtLWdpdCBhL2FyY2gvYXJt
L21hY2gtc2ExMTAwL2Fzc2FiZXQuYyBiL2FyY2gvYXJtL21hY2gtc2ExMTAwL2Fzc2FiZXQuYwpp
bmRleCA4ZTNmNWZkYjQ4ODMuLmFhMjY1ZWRlNTczMCAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbWFj
aC1zYTExMDAvYXNzYWJldC5jCisrKyBiL2FyY2gvYXJtL21hY2gtc2ExMTAwL2Fzc2FiZXQuYwpA
QCAtNjMyLDcgKzYzMiw3IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBtYXBfc2ExMTAwX2dwaW9fcmVn
cyggdm9pZCApCiAJaW50IHByb3QgPSBQTURfVFlQRV9TRUNUIHwgUE1EX1NFQ1RfQVBfV1JJVEUg
fCBQTURfRE9NQUlOKERPTUFJTl9JTyk7CiAJcG1kX3QgKnBtZDsKIAotCXBtZCA9IHBtZF9vZmZz
ZXQocHVkX29mZnNldChwNGRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2aXJ0KSwgdmlydCksIHZpcnQp
LCB2aXJ0KTsKKwlwbWQgPSBwbWRfb2ZmX2sodmlydCk7CiAJKnBtZCA9IF9fcG1kKHBoeXMgfCBw
cm90KTsKIAlmbHVzaF9wbWRfZW50cnkocG1kKTsKIH0KZGlmZiAtLWdpdCBhL2FyY2gvYXJtL21t
L2hpZ2htZW0uYyBiL2FyY2gvYXJtL21tL2hpZ2htZW0uYwppbmRleCBlMDEzZjZiODEzMjguLjE4
N2ZhYjIyN2I1MCAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vaGlnaG1lbS5jCisrKyBiL2FyY2gv
YXJtL21tL2hpZ2htZW0uYwpAQCAtMTgsNyArMTgsNyBAQAogc3RhdGljIGlubGluZSB2b2lkIHNl
dF9maXhtYXBfcHRlKGludCBpZHgsIHB0ZV90IHB0ZSkKIHsKIAl1bnNpZ25lZCBsb25nIHZhZGRy
ID0gX19maXhfdG9fdmlydChpZHgpOwotCXB0ZV90ICpwdGVwID0gcHRlX29mZnNldF9rZXJuZWwo
cG1kX29mZl9rKHZhZGRyKSwgdmFkZHIpOworCXB0ZV90ICpwdGVwID0gdmlydF90b19rcHRlKHZh
ZGRyKTsKIAogCXNldF9wdGVfZXh0KHB0ZXAsIHB0ZSwgMCk7CiAJbG9jYWxfZmx1c2hfdGxiX2tl
cm5lbF9wYWdlKHZhZGRyKTsKQEAgLTI2LDcgKzI2LDcgQEAgc3RhdGljIGlubGluZSB2b2lkIHNl
dF9maXhtYXBfcHRlKGludCBpZHgsIHB0ZV90IHB0ZSkKIAogc3RhdGljIGlubGluZSBwdGVfdCBn
ZXRfZml4bWFwX3B0ZSh1bnNpZ25lZCBsb25nIHZhZGRyKQogewotCXB0ZV90ICpwdGVwID0gcHRl
X29mZnNldF9rZXJuZWwocG1kX29mZl9rKHZhZGRyKSwgdmFkZHIpOworCXB0ZV90ICpwdGVwID0g
dmlydF90b19rcHRlKHZhZGRyKTsKIAogCXJldHVybiAqcHRlcDsKIH0KZGlmZiAtLWdpdCBhL2Fy
Y2gvYXJtL21tL2lvcmVtYXAuYyBiL2FyY2gvYXJtL21tL2lvcmVtYXAuYwppbmRleCA3NTUyOWQ3
NmQyOGMuLjAwMGU4MjEwMDAwYiAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vaW9yZW1hcC5jCisr
KyBiL2FyY2gvYXJtL21tL2lvcmVtYXAuYwpAQCAtMTQxLDE2ICsxNDEsOCBAQCB2b2lkIF9fY2hl
Y2tfdm1hbGxvY19zZXEoc3RydWN0IG1tX3N0cnVjdCAqbW0pCiBzdGF0aWMgdm9pZCB1bm1hcF9h
cmVhX3NlY3Rpb25zKHVuc2lnbmVkIGxvbmcgdmlydCwgdW5zaWduZWQgbG9uZyBzaXplKQogewog
CXVuc2lnbmVkIGxvbmcgYWRkciA9IHZpcnQsIGVuZCA9IHZpcnQgKyAoc2l6ZSAmIH4oU1pfMU0g
LSAxKSk7Ci0JcGdkX3QgKnBnZDsKLQlwNGRfdCAqcDRkOwotCXB1ZF90ICpwdWQ7Ci0JcG1kX3Qg
KnBtZHA7Ci0KLQlmbHVzaF9jYWNoZV92dW5tYXAoYWRkciwgZW5kKTsKLQlwZ2QgPSBwZ2Rfb2Zm
c2V0X2soYWRkcik7Ci0JcDRkID0gcDRkX29mZnNldChwZ2QsIGFkZHIpOwotCXB1ZCA9IHB1ZF9v
ZmZzZXQocDRkLCBhZGRyKTsKLQlwbWRwID0gcG1kX29mZnNldChwdWQsIGFkZHIpOworCXBtZF90
ICpwbWRwID0gcG1kX29mZl9rKGFkZHIpOworCiAJZG8gewogCQlwbWRfdCBwbWQgPSAqcG1kcDsK
IApAQCAtMTkxLDEwICsxODMsNyBAQCByZW1hcF9hcmVhX3NlY3Rpb25zKHVuc2lnbmVkIGxvbmcg
dmlydCwgdW5zaWduZWQgbG9uZyBwZm4sCiAJCSAgICBzaXplX3Qgc2l6ZSwgY29uc3Qgc3RydWN0
IG1lbV90eXBlICp0eXBlKQogewogCXVuc2lnbmVkIGxvbmcgYWRkciA9IHZpcnQsIGVuZCA9IHZp
cnQgKyBzaXplOwotCXBnZF90ICpwZ2Q7Ci0JcDRkX3QgKnA0ZDsKLQlwdWRfdCAqcHVkOwotCXBt
ZF90ICpwbWQ7CisJcG1kX3QgKnBtZCA9IHBtZF9vZmZfayhhZGRyKTsKIAogCS8qCiAJICogUmVt
b3ZlIGFuZCBmcmVlIGFueSBQVEUtYmFzZWQgbWFwcGluZywgYW5kCkBAIC0yMDIsMTAgKzE5MSw2
IEBAIHJlbWFwX2FyZWFfc2VjdGlvbnModW5zaWduZWQgbG9uZyB2aXJ0LCB1bnNpZ25lZCBsb25n
IHBmbiwKIAkgKi8KIAl1bm1hcF9hcmVhX3NlY3Rpb25zKHZpcnQsIHNpemUpOwogCi0JcGdkID0g
cGdkX29mZnNldF9rKGFkZHIpOwotCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKLQlwdWQg
PSBwdWRfb2Zmc2V0KHA0ZCwgYWRkcik7Ci0JcG1kID0gcG1kX29mZnNldChwdWQsIGFkZHIpOwog
CWRvIHsKIAkJcG1kWzBdID0gX19wbWQoX19wZm5fdG9fcGh5cyhwZm4pIHwgdHlwZS0+cHJvdF9z
ZWN0KTsKIAkJcGZuICs9IFNaXzFNID4+IFBBR0VfU0hJRlQ7CkBAIC0yMjUsMjEgKzIxMCwxMyBA
QCByZW1hcF9hcmVhX3N1cGVyc2VjdGlvbnModW5zaWduZWQgbG9uZyB2aXJ0LCB1bnNpZ25lZCBs
b25nIHBmbiwKIAkJCSBzaXplX3Qgc2l6ZSwgY29uc3Qgc3RydWN0IG1lbV90eXBlICp0eXBlKQog
ewogCXVuc2lnbmVkIGxvbmcgYWRkciA9IHZpcnQsIGVuZCA9IHZpcnQgKyBzaXplOwotCXBnZF90
ICpwZ2Q7Ci0JcDRkX3QgKnA0ZDsKLQlwdWRfdCAqcHVkOwotCXBtZF90ICpwbWQ7CisJcG1kX3Qg
KnBtZCA9IHBtZF9vZmZfayhhZGRyKTsKIAogCS8qCiAJICogUmVtb3ZlIGFuZCBmcmVlIGFueSBQ
VEUtYmFzZWQgbWFwcGluZywgYW5kCiAJICogc3luYyB0aGUgY3VycmVudCBrZXJuZWwgbWFwcGlu
Zy4KIAkgKi8KIAl1bm1hcF9hcmVhX3NlY3Rpb25zKHZpcnQsIHNpemUpOwotCi0JcGdkID0gcGdk
X29mZnNldF9rKHZpcnQpOwotCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKLQlwdWQgPSBw
dWRfb2Zmc2V0KHA0ZCwgYWRkcik7Ci0JcG1kID0gcG1kX29mZnNldChwdWQsIGFkZHIpOwogCWRv
IHsKIAkJdW5zaWduZWQgbG9uZyBzdXBlcl9wbWRfdmFsLCBpOwogCmRpZmYgLS1naXQgYS9hcmNo
L2FybS9tbS9tbS5oIGIvYXJjaC9hcm0vbW0vbW0uaAppbmRleCBmOTU4N2Q1ZmE4YTQuLjlmZjY4
MzYxMmYyYSAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vbW0uaAorKysgYi9hcmNoL2FybS9tbS9t
bS5oCkBAIC0zNSwxMSArMzUsNiBAQCBzdGF0aWMgaW5saW5lIHB0ZV90IGdldF90b3BfcHRlKHVu
c2lnbmVkIGxvbmcgdmEpCiAJcmV0dXJuICpwdGVwOwogfQogCi1zdGF0aWMgaW5saW5lIHBtZF90
ICpwbWRfb2ZmX2sodW5zaWduZWQgbG9uZyB2aXJ0KQotewotCXJldHVybiBwbWRfb2Zmc2V0KHB1
ZF9vZmZzZXQocDRkX29mZnNldChwZ2Rfb2Zmc2V0X2sodmlydCksIHZpcnQpLCB2aXJ0KSwgdmly
dCk7Ci19Ci0KIHN0cnVjdCBtZW1fdHlwZSB7CiAJcHRldmFsX3QgcHJvdF9wdGU7CiAJcHRldmFs
X3QgcHJvdF9wdGVfczI7CmRpZmYgLS1naXQgYS9hcmNoL2FybS9tbS9tbXUuYyBiL2FyY2gvYXJt
L21tL21tdS5jCmluZGV4IGM0MjUyODhmMWE4Ni4uNjI4MDI4YmZiYjkyIDEwMDY0NAotLS0gYS9h
cmNoL2FybS9tbS9tbXUuYworKysgYi9hcmNoL2FybS9tbS9tbXUuYwpAQCAtMzU2LDEyICszNTYs
NyBAQCBzdGF0aWMgcHRlX3QgKnB0ZV9vZmZzZXRfbGF0ZV9maXhtYXAocG1kX3QgKmRpciwgdW5z
aWduZWQgbG9uZyBhZGRyKQogCiBzdGF0aWMgaW5saW5lIHBtZF90ICogX19pbml0IGZpeG1hcF9w
bWQodW5zaWduZWQgbG9uZyBhZGRyKQogewotCXBnZF90ICpwZ2QgPSBwZ2Rfb2Zmc2V0X2soYWRk
cik7Ci0JcDRkX3QgKnA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKLQlwdWRfdCAqcHVkID0g
cHVkX29mZnNldChwNGQsIGFkZHIpOwotCXBtZF90ICpwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRk
cik7Ci0KLQlyZXR1cm4gcG1kOworCXJldHVybiBwbWRfb2ZmX2soYWRkcik7CiB9CiAKIHZvaWQg
X19pbml0IGVhcmx5X2ZpeG1hcF9pbml0KHZvaWQpCmRpZmYgLS1naXQgYS9hcmNoL2hleGFnb24v
aW5jbHVkZS9hc20vZml4bWFwLmggYi9hcmNoL2hleGFnb24vaW5jbHVkZS9hc20vZml4bWFwLmgK
aW5kZXggOTdiMWIwNjJlNzUwLi45MjA2NjBhMDRhYTQgMTAwNjQ0Ci0tLSBhL2FyY2gvaGV4YWdv
bi9pbmNsdWRlL2FzbS9maXhtYXAuaAorKysgYi9hcmNoL2hleGFnb24vaW5jbHVkZS9hc20vZml4
bWFwLmgKQEAgLTE1LDggKzE1LDQgQEAKIAogI2luY2x1ZGUgPGFzbS1nZW5lcmljL2ZpeG1hcC5o
PgogCi0jZGVmaW5lIGttYXBfZ2V0X2ZpeG1hcF9wdGUodmFkZHIpIFwKLQlwdGVfb2Zmc2V0X2tl
cm5lbChwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocDRkX29mZnNldChwZ2Rfb2Zmc2V0X2sodmFkZHIp
LCBcCi0JCQkJKHZhZGRyKSksICh2YWRkcikpLCAodmFkZHIpKSwgKHZhZGRyKSkKLQogI2VuZGlm
CmRpZmYgLS1naXQgYS9hcmNoL202OGsvbW0vbW90b3JvbGEuYyBiL2FyY2gvbTY4ay9tbS9tb3Rv
cm9sYS5jCmluZGV4IDhlNWU3NDEyMWE3OC4uMmJiMDA2YmRjMzFjIDEwMDY0NAotLS0gYS9hcmNo
L202OGsvbW0vbW90b3JvbGEuYworKysgYi9hcmNoL202OGsvbW0vbW90b3JvbGEuYwpAQCAtNTQs
MTcgKzU0LDggQEAgc3RhdGljIGlubGluZSB2b2lkIG5vY2FjaGVfcGFnZSh2b2lkICp2YWRkcikK
IAl1bnNpZ25lZCBsb25nIGFkZHIgPSAodW5zaWduZWQgbG9uZyl2YWRkcjsKIAogCWlmIChDUFVf
SVNfMDQwX09SXzA2MCkgewotCQlwZ2RfdCAqZGlyOwotCQlwNGRfdCAqcDRkcDsKLQkJcHVkX3Qg
KnB1ZHA7Ci0JCXBtZF90ICpwbWRwOwotCQlwdGVfdCAqcHRlcDsKLQotCQlkaXIgPSBwZ2Rfb2Zm
c2V0X2soYWRkcik7Ci0JCXA0ZHAgPSBwNGRfb2Zmc2V0KGRpciwgYWRkcik7Ci0JCXB1ZHAgPSBw
dWRfb2Zmc2V0KHA0ZHAsIGFkZHIpOwotCQlwbWRwID0gcG1kX29mZnNldChwdWRwLCBhZGRyKTsK
LQkJcHRlcCA9IHB0ZV9vZmZzZXRfa2VybmVsKHBtZHAsIGFkZHIpOworCQlwdGVfdCAqcHRlcCA9
IHZpcnRfdG9fa3B0ZShhZGRyKTsKKwogCQkqcHRlcCA9IHB0ZV9ta25vY2FjaGUoKnB0ZXApOwog
CX0KIH0KQEAgLTc0LDE3ICs2NSw4IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBjYWNoZV9wYWdlKHZv
aWQgKnZhZGRyKQogCXVuc2lnbmVkIGxvbmcgYWRkciA9ICh1bnNpZ25lZCBsb25nKXZhZGRyOwog
CiAJaWYgKENQVV9JU18wNDBfT1JfMDYwKSB7Ci0JCXBnZF90ICpkaXI7Ci0JCXA0ZF90ICpwNGRw
OwotCQlwdWRfdCAqcHVkcDsKLQkJcG1kX3QgKnBtZHA7Ci0JCXB0ZV90ICpwdGVwOwotCi0JCWRp
ciA9IHBnZF9vZmZzZXRfayhhZGRyKTsKLQkJcDRkcCA9IHA0ZF9vZmZzZXQoZGlyLCBhZGRyKTsK
LQkJcHVkcCA9IHB1ZF9vZmZzZXQocDRkcCwgYWRkcik7Ci0JCXBtZHAgPSBwbWRfb2Zmc2V0KHB1
ZHAsIGFkZHIpOwotCQlwdGVwID0gcHRlX29mZnNldF9rZXJuZWwocG1kcCwgYWRkcik7CisJCXB0
ZV90ICpwdGVwID0gdmlydF90b19rcHRlKGFkZHIpOworCiAJCSpwdGVwID0gcHRlX21rY2FjaGUo
KnB0ZXApOwogCX0KIH0KZGlmZiAtLWdpdCBhL2FyY2gvbWljcm9ibGF6ZS9rZXJuZWwvc2lnbmFs
LmMgYi9hcmNoL21pY3JvYmxhemUva2VybmVsL3NpZ25hbC5jCmluZGV4IDdkY2QyZTRkNDMwZS4u
MjhiMWVjNGI0ZTc5IDEwMDY0NAotLS0gYS9hcmNoL21pY3JvYmxhemUva2VybmVsL3NpZ25hbC5j
CisrKyBiL2FyY2gvbWljcm9ibGF6ZS9rZXJuZWwvc2lnbmFsLmMKQEAgLTE1OSw5ICsxNTksNiBA
QCBzdGF0aWMgaW50IHNldHVwX3J0X2ZyYW1lKHN0cnVjdCBrc2lnbmFsICprc2lnLCBzaWdzZXRf
dCAqc2V0LAogCWludCBlcnIgPSAwLCBzaWcgPSBrc2lnLT5zaWc7CiAJdW5zaWduZWQgbG9uZyBh
ZGRyZXNzID0gMDsKICNpZmRlZiBDT05GSUdfTU1VCi0JcGdkX3QgKnBnZHA7Ci0JcDRkX3QgKnA0
ZHA7Ci0JcHVkX3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7CiAJcHRlX3QgKnB0ZXA7CiAjZW5kaWYK
QEAgLTE5NywxMCArMTk0LDcgQEAgc3RhdGljIGludCBzZXR1cF9ydF9mcmFtZShzdHJ1Y3Qga3Np
Z25hbCAqa3NpZywgc2lnc2V0X3QgKnNldCwKIAogCWFkZHJlc3MgPSAoKHVuc2lnbmVkIGxvbmcp
ZnJhbWUtPnRyYW1wKTsKICNpZmRlZiBDT05GSUdfTU1VCi0JcGdkcCA9IHBnZF9vZmZzZXQoY3Vy
cmVudC0+bW0sIGFkZHJlc3MpOwotCXA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGFkZHJlc3MpOwot
CXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIGFkZHJlc3MpOwotCXBtZHAgPSBwbWRfb2Zmc2V0KHB1
ZHAsIGFkZHJlc3MpOworCXBtZHAgPSBwbWRfb2ZmX2soYWRkcmVzcyk7CiAKIAlwcmVlbXB0X2Rp
c2FibGUoKTsKIAlwdGVwID0gcHRlX29mZnNldF9tYXAocG1kcCwgYWRkcmVzcyk7CmRpZmYgLS1n
aXQgYS9hcmNoL21pY3JvYmxhemUvbW0vaW5pdC5jIGIvYXJjaC9taWNyb2JsYXplL21tL2luaXQu
YwppbmRleCBkOTQzZjY5Nzg0YjEuLjUyMWI1OWJhNzE2YyAxMDA2NDQKLS0tIGEvYXJjaC9taWNy
b2JsYXplL21tL2luaXQuYworKysgYi9hcmNoL21pY3JvYmxhemUvbW0vaW5pdC5jCkBAIC01MCwx
NSArNTAsNiBAQCB1bnNpZ25lZCBsb25nIGxvd21lbV9zaXplOwogcHRlX3QgKmttYXBfcHRlOwog
RVhQT1JUX1NZTUJPTChrbWFwX3B0ZSk7CiAKLXN0YXRpYyBpbmxpbmUgcHRlX3QgKnZpcnRfdG9f
a3B0ZSh1bnNpZ25lZCBsb25nIHZhZGRyKQotewotCXBnZF90ICpwZ2QgPSBwZ2Rfb2Zmc2V0X2so
dmFkZHIpOwotCXA0ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgdmFkZHIpOwotCXB1ZF90ICpw
dWQgPSBwdWRfb2Zmc2V0KHA0ZCwgdmFkZHIpOwotCi0JcmV0dXJuIHB0ZV9vZmZzZXRfa2VybmVs
KHBtZF9vZmZzZXQocHVkLCB2YWRkciksIHZhZGRyKTsKLX0KLQogc3RhdGljIHZvaWQgX19pbml0
IGhpZ2htZW1faW5pdCh2b2lkKQogewogCXByX2RlYnVnKCIleFxuIiwgKHUzMilQS01BUF9CQVNF
KTsKZGlmZiAtLWdpdCBhL2FyY2gvbWlwcy9pbmNsdWRlL2FzbS9maXhtYXAuaCBiL2FyY2gvbWlw
cy9pbmNsdWRlL2FzbS9maXhtYXAuaAppbmRleCAxNzg0ZDQzNDhjMzYuLjc0MzUzNWJlNzUyOCAx
MDA2NDQKLS0tIGEvYXJjaC9taXBzL2luY2x1ZGUvYXNtL2ZpeG1hcC5oCisrKyBiL2FyY2gvbWlw
cy9pbmNsdWRlL2FzbS9maXhtYXAuaApAQCAtNjksOSArNjksNiBAQCBlbnVtIGZpeGVkX2FkZHJl
c3NlcyB7CiAKICNpbmNsdWRlIDxhc20tZ2VuZXJpYy9maXhtYXAuaD4KIAotI2RlZmluZSBrbWFw
X2dldF9maXhtYXBfcHRlKHZhZGRyKQkJCQkJXAotCXB0ZV9vZmZzZXRfa2VybmVsKHBtZF9vZmZz
ZXQocHVkX29mZnNldChwNGRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2YWRkciksICh2YWRkcikpLCAo
dmFkZHIpKSwgKHZhZGRyKSksICh2YWRkcikpCi0KIC8qCiAgKiBDYWxsZWQgZnJvbSBwZ3RhYmxl
X2luaXQoKQogICovCmRpZmYgLS1naXQgYS9hcmNoL21pcHMvbW0vYy1yM2suYyBiL2FyY2gvbWlw
cy9tbS9jLXIzay5jCmluZGV4IDlmNGE5M2Y4Yjk5Ni4uZGY2NzU1Y2ExODkyIDEwMDY0NAotLS0g
YS9hcmNoL21pcHMvbW0vYy1yM2suYworKysgYi9hcmNoL21pcHMvbW0vYy1yM2suYwpAQCAtMjM5
LDkgKzIzOSw2IEBAIHN0YXRpYyB2b2lkIHIza19mbHVzaF9jYWNoZV9wYWdlKHN0cnVjdCB2bV9h
cmVhX3N0cnVjdCAqdm1hLAogCXVuc2lnbmVkIGxvbmcga2FkZHIgPSBLU0VHMEFERFIocGZuIDw8
IFBBR0VfU0hJRlQpOwogCWludCBleGVjID0gdm1hLT52bV9mbGFncyAmIFZNX0VYRUM7CiAJc3Ry
dWN0IG1tX3N0cnVjdCAqbW0gPSB2bWEtPnZtX21tOwotCXBnZF90ICpwZ2RwOwotCXA0ZF90ICpw
NGRwOwotCXB1ZF90ICpwdWRwOwogCXBtZF90ICpwbWRwOwogCXB0ZV90ICpwdGVwOwogCkBAIC0y
NTIsMTEgKzI0OSw4IEBAIHN0YXRpYyB2b2lkIHIza19mbHVzaF9jYWNoZV9wYWdlKHN0cnVjdCB2
bV9hcmVhX3N0cnVjdCAqdm1hLAogCWlmIChjcHVfY29udGV4dChzbXBfcHJvY2Vzc29yX2lkKCks
IG1tKSA9PSAwKQogCQlyZXR1cm47CiAKLQlwZ2RwID0gcGdkX29mZnNldChtbSwgYWRkcik7Ci0J
cDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgYWRkcik7Ci0JcHVkcCA9IHB1ZF9vZmZzZXQocDRkcCwg
YWRkcik7Ci0JcG1kcCA9IHBtZF9vZmZzZXQocHVkcCwgYWRkcik7Ci0JcHRlcCA9IHB0ZV9vZmZz
ZXQocG1kcCwgYWRkcik7CisJcG1kcCA9IHBtZF9vZmYobW0sIGFkZHIpOworCXB0ZXAgPSBwdGVf
b2Zmc2V0X2tlcm5lbChwbWRwLCBhZGRyKTsKIAogCS8qIEludmFsaWQgPT4gbm8gc3VjaCBwYWdl
IGluIHRoZSBjYWNoZS4gICovCiAJaWYgKCEocHRlX3ZhbCgqcHRlcCkgJiBfUEFHRV9QUkVTRU5U
KSkKZGlmZiAtLWdpdCBhL2FyY2gvbWlwcy9tbS9jLXI0ay5jIGIvYXJjaC9taXBzL21tL2MtcjRr
LmMKaW5kZXggNWZlODQwYzFiODk3Li4zNzIyMjkyZTBiNjUgMTAwNjQ0Ci0tLSBhL2FyY2gvbWlw
cy9tbS9jLXI0ay5jCisrKyBiL2FyY2gvbWlwcy9tbS9jLXI0ay5jCkBAIC02NTIsOSArNjUyLDYg
QEAgc3RhdGljIGlubGluZSB2b2lkIGxvY2FsX3I0a19mbHVzaF9jYWNoZV9wYWdlKHZvaWQgKmFy
Z3MpCiAJaW50IGV4ZWMgPSB2bWEtPnZtX2ZsYWdzICYgVk1fRVhFQzsKIAlzdHJ1Y3QgbW1fc3Ry
dWN0ICptbSA9IHZtYS0+dm1fbW07CiAJaW50IG1hcF9jb2hlcmVudCA9IDA7Ci0JcGdkX3QgKnBn
ZHA7Ci0JcDRkX3QgKnA0ZHA7Ci0JcHVkX3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7CiAJcHRlX3Qg
KnB0ZXA7CiAJdm9pZCAqdmFkZHI7CkBAIC02NjcsMTEgKzY2NCw4IEBAIHN0YXRpYyBpbmxpbmUg
dm9pZCBsb2NhbF9yNGtfZmx1c2hfY2FjaGVfcGFnZSh2b2lkICphcmdzKQogCQlyZXR1cm47CiAK
IAlhZGRyICY9IFBBR0VfTUFTSzsKLQlwZ2RwID0gcGdkX29mZnNldChtbSwgYWRkcik7Ci0JcDRk
cCA9IHA0ZF9vZmZzZXQocGdkcCwgYWRkcik7Ci0JcHVkcCA9IHB1ZF9vZmZzZXQocDRkcCwgYWRk
cik7Ci0JcG1kcCA9IHBtZF9vZmZzZXQocHVkcCwgYWRkcik7Ci0JcHRlcCA9IHB0ZV9vZmZzZXQo
cG1kcCwgYWRkcik7CisJcG1kcCA9IHBtZF9vZmYobW0sIGFkZHIpOworCXB0ZXAgPSBwdGVfb2Zm
c2V0X2tlcm5lbChwbWRwLCBhZGRyKTsKIAogCS8qCiAJICogSWYgdGhlIHBhZ2UgaXNuJ3QgbWFy
a2VkIHZhbGlkLCB0aGUgcGFnZSBjYW5ub3QgcG9zc2libHkgYmUKZGlmZiAtLWdpdCBhL2FyY2gv
bWlwcy9tbS9jLXR4MzkuYyBiL2FyY2gvbWlwcy9tbS9jLXR4MzkuYwppbmRleCAyMDQwNTlkMjhm
MjEuLjAzZGZiYjQwZWM3MyAxMDA2NDQKLS0tIGEvYXJjaC9taXBzL21tL2MtdHgzOS5jCisrKyBi
L2FyY2gvbWlwcy9tbS9jLXR4MzkuYwpAQCAtMTY4LDkgKzE2OCw2IEBAIHN0YXRpYyB2b2lkIHR4
MzlfZmx1c2hfY2FjaGVfcGFnZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQg
bG9uZyBwYWdlCiB7CiAJaW50IGV4ZWMgPSB2bWEtPnZtX2ZsYWdzICYgVk1fRVhFQzsKIAlzdHJ1
Y3QgbW1fc3RydWN0ICptbSA9IHZtYS0+dm1fbW07Ci0JcGdkX3QgKnBnZHA7Ci0JcDRkX3QgKnA0
ZHA7Ci0JcHVkX3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7CiAJcHRlX3QgKnB0ZXA7CiAKQEAgLTE4
MiwxMSArMTc5LDggQEAgc3RhdGljIHZvaWQgdHgzOV9mbHVzaF9jYWNoZV9wYWdlKHN0cnVjdCB2
bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIHBhZ2UKIAkJcmV0dXJuOwogCiAJcGFn
ZSAmPSBQQUdFX01BU0s7Ci0JcGdkcCA9IHBnZF9vZmZzZXQobW0sIHBhZ2UpOwotCXA0ZHAgPSBw
NGRfb2Zmc2V0KHBnZHAsIHBhZ2UpOwotCXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIHBhZ2UpOwot
CXBtZHAgPSBwbWRfb2Zmc2V0KHB1ZHAsIHBhZ2UpOwotCXB0ZXAgPSBwdGVfb2Zmc2V0KHBtZHAs
IHBhZ2UpOworCXBtZHAgPSBwbWRfb2ZmKG1tLCBwYWdlKTsKKwlwdGVwID0gcHRlX29mZnNldF9r
ZXJuZWwocG1kcCwgcGFnZSk7CiAKIAkvKgogCSAqIElmIHRoZSBwYWdlIGlzbid0IG1hcmtlZCB2
YWxpZCwgdGhlIHBhZ2UgY2Fubm90IHBvc3NpYmx5IGJlCmRpZmYgLS1naXQgYS9hcmNoL21pcHMv
bW0vaGlnaG1lbS5jIGIvYXJjaC9taXBzL21tL2hpZ2htZW0uYwppbmRleCAzN2UyNDRjZGIxNGUu
LmFlODgyZWQxOGIyYiAxMDA2NDQKLS0tIGEvYXJjaC9taXBzL21tL2hpZ2htZW0uYworKysgYi9h
cmNoL21pcHMvbW0vaGlnaG1lbS5jCkBAIC05Myw1ICs5Myw1IEBAIHZvaWQgX19pbml0IGttYXBf
aW5pdCh2b2lkKQogCiAJLyogY2FjaGUgdGhlIGZpcnN0IGttYXAgcHRlICovCiAJa21hcF92c3Rh
cnQgPSBfX2ZpeF90b192aXJ0KEZJWF9LTUFQX0JFR0lOKTsKLQlrbWFwX3B0ZSA9IGttYXBfZ2V0
X2ZpeG1hcF9wdGUoa21hcF92c3RhcnQpOworCWttYXBfcHRlID0gdmlydF90b19rcHRlKGttYXBf
dnN0YXJ0KTsKIH0KZGlmZiAtLWdpdCBhL2FyY2gvbmRzMzIvaW5jbHVkZS9hc20vcGd0YWJsZS5o
IGIvYXJjaC9uZHMzMi9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKaW5kZXggNTFmZTFjNTY3NzAyLi45
NWM3NTI4MmNiNDcgMTAwNjQ0Ci0tLSBhL2FyY2gvbmRzMzIvaW5jbHVkZS9hc20vcGd0YWJsZS5o
CisrKyBiL2FyY2gvbmRzMzIvaW5jbHVkZS9hc20vcGd0YWJsZS5oCkBAIC0xOTUsOCArMTk1LDYg
QEAgZXh0ZXJuIHZvaWQgcGFnaW5nX2luaXQodm9pZCk7CiAjZGVmaW5lIHB0ZV91bm1hcChwdGUp
CQlkbyB7IH0gd2hpbGUgKDApCiAjZGVmaW5lIHB0ZV91bm1hcF9uZXN0ZWQocHRlKQlkbyB7IH0g
d2hpbGUgKDApCiAKLSNkZWZpbmUgcG1kX29mZl9rKGFkZHJlc3MpCXBtZF9vZmZzZXQocHVkX29m
ZnNldChwNGRfb2Zmc2V0KHBnZF9vZmZzZXRfayhhZGRyZXNzKSwgKGFkZHJlc3MpKSwgKGFkZHJl
c3MpKSwgKGFkZHJlc3MpKQotCiAjZGVmaW5lIHNldF9wdGVfYXQobW0sYWRkcixwdGVwLHB0ZXZh
bCkgc2V0X3B0ZShwdGVwLHB0ZXZhbCkKIC8qCiAgKiBTZXQgYSBsZXZlbCAxIHRyYW5zbGF0aW9u
IHRhYmxlIGVudHJ5LCBhbmQgY2xlYW4gaXQgb3V0IG9mCmRpZmYgLS1naXQgYS9hcmNoL25kczMy
L21tL2luaXQuYyBiL2FyY2gvbmRzMzIvbW0vaW5pdC5jCmluZGV4IDkxMTQ3Y2NhNGI2NC4uZmE4
NmY3YjJmNDE2IDEwMDY0NAotLS0gYS9hcmNoL25kczMyL21tL2luaXQuYworKysgYi9hcmNoL25k
czMyL21tL2luaXQuYwpAQCAtOTgsOSArOTgsNiBAQCBzdGF0aWMgcG1kX3QgKmZpeG1hcF9wbWRf
cDsKIHN0YXRpYyB2b2lkIF9faW5pdCBmaXhlZHJhbmdlX2luaXQodm9pZCkKIHsKIAl1bnNpZ25l
ZCBsb25nIHZhZGRyOwotCXBnZF90ICpwZ2Q7Ci0JcDRkX3QgKnA0ZDsKLQlwdWRfdCAqcHVkOwog
CXBtZF90ICpwbWQ7CiAjaWZkZWYgQ09ORklHX0hJR0hNRU0KIAlwdGVfdCAqcHRlOwpAQCAtMTEw
LDEwICsxMDcsNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgZml4ZWRyYW5nZV9pbml0KHZvaWQpCiAJ
ICogRml4ZWQgbWFwcGluZ3M6CiAJICovCiAJdmFkZHIgPSBfX2ZpeF90b192aXJ0KF9fZW5kX29m
X2ZpeGVkX2FkZHJlc3NlcyAtIDEpOwotCXBnZCA9IHN3YXBwZXJfcGdfZGlyICsgcGdkX2luZGV4
KHZhZGRyKTsKLQlwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgdmFkZHIpOwotCXB1ZCA9IHB1ZF9vZmZz
ZXQocDRkLCB2YWRkcik7Ci0JcG1kID0gcG1kX29mZnNldChwdWQsIHZhZGRyKTsKKwlwbWQgPSBw
bWRfb2ZmX2sodmFkZHIpOwogCWZpeG1hcF9wbWRfcCA9IG1lbWJsb2NrX2FsbG9jKFBBR0VfU0la
RSwgUEFHRV9TSVpFKTsKIAlpZiAoIWZpeG1hcF9wbWRfcCkKIAkJcGFuaWMoIiVzOiBGYWlsZWQg
dG8gYWxsb2NhdGUgJWx1IGJ5dGVzIGFsaWduPTB4JWx4XG4iLApAQCAtMTI2LDEwICsxMjAsNyBA
QCBzdGF0aWMgdm9pZCBfX2luaXQgZml4ZWRyYW5nZV9pbml0KHZvaWQpCiAJICovCiAJdmFkZHIg
PSBQS01BUF9CQVNFOwogCi0JcGdkID0gc3dhcHBlcl9wZ19kaXIgKyBwZ2RfaW5kZXgodmFkZHIp
OwotCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCB2YWRkcik7Ci0JcHVkID0gcHVkX29mZnNldChwNGQs
IHZhZGRyKTsKLQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgdmFkZHIpOworCXBtZCA9IHBtZF9vZmZf
ayh2YWRkcik7CiAJcHRlID0gbWVtYmxvY2tfYWxsb2MoUEFHRV9TSVpFLCBQQUdFX1NJWkUpOwog
CWlmICghcHRlKQogCQlwYW5pYygiJXM6IEZhaWxlZCB0byBhbGxvY2F0ZSAlbHUgYnl0ZXMgYWxp
Z249MHglbHhcbiIsCmRpZmYgLS1naXQgYS9hcmNoL25kczMyL21tL3Byb2MuYyBiL2FyY2gvbmRz
MzIvbW0vcHJvYy5jCmluZGV4IGEyYjlhYWNjNWY4OS4uODQ4Yzg0NWY1ZjMzIDEwMDY0NAotLS0g
YS9hcmNoL25kczMyL21tL3Byb2MuYworKysgYi9hcmNoL25kczMyL21tL3Byb2MuYwpAQCAtMTUs
MTQgKzE1LDEwIEBAIGV4dGVybiBzdHJ1Y3QgY2FjaGVfaW5mbyBMMV9jYWNoZV9pbmZvWzJdOwog
CiBpbnQgdmFfa2VybmVsX3ByZXNlbnQodW5zaWduZWQgbG9uZyBhZGRyKQogewotCXA0ZF90ICpw
NGQ7Ci0JcHVkX3QgKnB1ZDsKIAlwbWRfdCAqcG1kOwogCXB0ZV90ICpwdGVwLCBwdGU7CiAKLQlw
NGQgPSBwNGRfb2Zmc2V0KHBnZF9vZmZzZXRfayhhZGRyKSwgYWRkcik7Ci0JcHVkID0gcHVkX29m
ZnNldChwNGQsIGFkZHIpOwotCXBtZCA9IHBtZF9vZmZzZXQocHVkLCBhZGRyKTsKKwlwbWQgPSBw
bWRfb2ZmX2soYWRkcik7CiAJaWYgKCFwbWRfbm9uZSgqcG1kKSkgewogCQlwdGVwID0gcHRlX29m
ZnNldF9tYXAocG1kLCBhZGRyKTsKIAkJcHRlID0gKnB0ZXA7CmRpZmYgLS1naXQgYS9hcmNoL3Bh
cmlzYy9tbS9maXhtYXAuYyBiL2FyY2gvcGFyaXNjL21tL2ZpeG1hcC5jCmluZGV4IGUyZDhiMGE4
NTdlZS4uMjQ0MjZhN2UxYTVlIDEwMDY0NAotLS0gYS9hcmNoL3BhcmlzYy9tbS9maXhtYXAuYwor
KysgYi9hcmNoL3BhcmlzYy9tbS9maXhtYXAuYwpAQCAtMzMsMTEgKzMzLDcgQEAgdm9pZCBub3Ry
YWNlIHNldF9maXhtYXAoZW51bSBmaXhlZF9hZGRyZXNzZXMgaWR4LCBwaHlzX2FkZHJfdCBwaHlz
KQogdm9pZCBub3RyYWNlIGNsZWFyX2ZpeG1hcChlbnVtIGZpeGVkX2FkZHJlc3NlcyBpZHgpCiB7
CiAJdW5zaWduZWQgbG9uZyB2YWRkciA9IF9fZml4X3RvX3ZpcnQoaWR4KTsKLQlwZ2RfdCAqcGdk
ID0gcGdkX29mZnNldF9rKHZhZGRyKTsKLQlwNGRfdCAqcDRkID0gcDRkX29mZnNldChwZ2QsIHZh
ZGRyKTsKLQlwdWRfdCAqcHVkID0gcHVkX29mZnNldChwNGQsIHZhZGRyKTsKLQlwbWRfdCAqcG1k
ID0gcG1kX29mZnNldChwdWQsIHZhZGRyKTsKLQlwdGVfdCAqcHRlID0gcHRlX29mZnNldF9rZXJu
ZWwocG1kLCB2YWRkcik7CisJcHRlX3QgKnB0ZSA9IHZpcnRfdG9fa3B0ZSh2YWRkcik7CiAKIAlp
ZiAoV0FSTl9PTihwdGVfbm9uZSgqcHRlKSkpCiAJCXJldHVybjsKZGlmZiAtLWdpdCBhL2FyY2gv
cG93ZXJwYy9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20v
cGd0YWJsZS5oCmluZGV4IGE5MjhiZGFkOTgyZi4uZDkxN2M0MWI1YzYyIDEwMDY0NAotLS0gYS9h
cmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vcGd0YWJsZS5oCisrKyBiL2FyY2gvcG93ZXJwYy9pbmNs
dWRlL2FzbS9wZ3RhYmxlLmgKQEAgLTQxLDI1ICs0MSw2IEBAIHN0cnVjdCBtbV9zdHJ1Y3Q7CiAK
ICNpZm5kZWYgX19BU1NFTUJMWV9fCiAKLSNpZmRlZiBDT05GSUdfUFBDMzIKLXN0YXRpYyBpbmxp
bmUgcG1kX3QgKnBtZF9wdHIoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgdmEp
Ci17Ci0JcmV0dXJuIHBtZF9vZmZzZXQocHVkX29mZnNldChwNGRfb2Zmc2V0KHBnZF9vZmZzZXQo
bW0sIHZhKSwgdmEpLCB2YSksIHZhKTsKLX0KLQotc3RhdGljIGlubGluZSBwbWRfdCAqcG1kX3B0
cl9rKHVuc2lnbmVkIGxvbmcgdmEpCi17Ci0JcmV0dXJuIHBtZF9vZmZzZXQocHVkX29mZnNldChw
NGRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2YSksIHZhKSwgdmEpLCB2YSk7Ci19Ci0KLXN0YXRpYyBp
bmxpbmUgcHRlX3QgKnZpcnRfdG9fa3B0ZSh1bnNpZ25lZCBsb25nIHZhZGRyKQotewotCXBtZF90
ICpwbWQgPSBwbWRfcHRyX2sodmFkZHIpOwotCi0JcmV0dXJuIHBtZF9ub25lKCpwbWQpID8gTlVM
TCA6IHB0ZV9vZmZzZXRfa2VybmVsKHBtZCwgdmFkZHIpOwotfQotI2VuZGlmCi0KICNpbmNsdWRl
IDxhc20vdGxiZmx1c2guaD4KIAogLyogS2VlcCB0aGVzZSBhcyBhIG1hY3JvcyB0byBhdm9pZCBp
bmNsdWRlIGRlcGVuZGVuY3kgbWVzcyAqLwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL2Jv
b2szczMyL21tdS5jIGIvYXJjaC9wb3dlcnBjL21tL2Jvb2szczMyL21tdS5jCmluZGV4IDM5YmE1
M2NhNWJiNS4uYWZkOGNhZjNmOGY1IDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vYm9vazNz
MzIvbW11LmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL2Jvb2szczMyL21tdS5jCkBAIC0zMTIsNyAr
MzEyLDcgQEAgdm9pZCBoYXNoX3ByZWxvYWQoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVk
IGxvbmcgZWEpCiAKIAlpZiAoIUhhc2gpCiAJCXJldHVybjsKLQlwbWQgPSBwbWRfcHRyKG1tLCBl
YSk7CisJcG1kID0gcG1kX29mZihtbSwgZWEpOwogCWlmICghcG1kX25vbmUoKnBtZCkpCiAJCWFk
ZF9oYXNoX3BhZ2UobW0tPmNvbnRleHQuaWQsIGVhLCBwbWRfdmFsKCpwbWQpKTsKIH0KZGlmZiAt
LWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3MzMi90bGIuYyBiL2FyY2gvcG93ZXJwYy9tbS9i
b29rM3MzMi90bGIuYwppbmRleCBkYzkwMzlhMTcwYWEuLjE1N2Y5OGY2YWVhOSAxMDA2NDQKLS0t
IGEvYXJjaC9wb3dlcnBjL21tL2Jvb2szczMyL3RsYi5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9i
b29rM3MzMi90bGIuYwpAQCAtOTAsNyArOTAsNyBAQCBzdGF0aWMgdm9pZCBmbHVzaF9yYW5nZShz
dHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBzdGFydCwKIAlpZiAoc3RhcnQgPj0g
ZW5kKQogCQlyZXR1cm47CiAJZW5kID0gKGVuZCAtIDEpIHwgflBBR0VfTUFTSzsKLQlwbWQgPSBw
bWRfcHRyKG1tLCBzdGFydCk7CisJcG1kID0gcG1kX29mZihtbSwgc3RhcnQpOwogCWZvciAoOzsp
IHsKIAkJcG1kX2VuZCA9ICgoc3RhcnQgKyBQR0RJUl9TSVpFKSAmIFBHRElSX01BU0spIC0gMTsK
IAkJaWYgKHBtZF9lbmQgPiBlbmQpCkBAIC0xNDgsNyArMTQ4LDcgQEAgdm9pZCBmbHVzaF90bGJf
cGFnZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyB2bWFkZHIpCiAJ
CXJldHVybjsKIAl9CiAJbW0gPSAodm1hZGRyIDwgVEFTS19TSVpFKT8gdm1hLT52bV9tbTogJmlu
aXRfbW07Ci0JcG1kID0gcG1kX3B0cihtbSwgdm1hZGRyKTsKKwlwbWQgPSBwbWRfb2ZmKG1tLCB2
bWFkZHIpOwogCWlmICghcG1kX25vbmUoKnBtZCkpCiAJCWZsdXNoX2hhc2hfcGFnZXMobW0tPmNv
bnRleHQuaWQsIHZtYWRkciwgcG1kX3ZhbCgqcG1kKSwgMSk7CiB9CmRpZmYgLS1naXQgYS9hcmNo
L3Bvd2VycGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5jIGIvYXJjaC9wb3dlcnBjL21tL2thc2Fu
L2thc2FuX2luaXRfMzIuYwppbmRleCBjOTlhYThjYmFhYzUuLjE2YTM1OWFlMTY4NiAxMDA2NDQK
LS0tIGEvYXJjaC9wb3dlcnBjL21tL2thc2FuL2thc2FuX2luaXRfMzIuYworKysgYi9hcmNoL3Bv
d2VycGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5jCkBAIC0zNiw3ICszNiw3IEBAIHN0YXRpYyBp
bnQgX19pbml0IGthc2FuX2luaXRfc2hhZG93X3BhZ2VfdGFibGVzKHVuc2lnbmVkIGxvbmcga19z
dGFydCwgdW5zaWduZWQKIAl1bnNpZ25lZCBsb25nIGtfY3VyLCBrX25leHQ7CiAJcHRlX3QgKm5l
dyA9IE5VTEw7CiAKLQlwbWQgPSBwbWRfcHRyX2soa19zdGFydCk7CisJcG1kID0gcG1kX29mZl9r
KGtfc3RhcnQpOwogCiAJZm9yIChrX2N1ciA9IGtfc3RhcnQ7IGtfY3VyICE9IGtfZW5kOyBrX2N1
ciA9IGtfbmV4dCwgcG1kKyspIHsKIAkJa19uZXh0ID0gcGdkX2FkZHJfZW5kKGtfY3VyLCBrX2Vu
ZCk7CkBAIC03OCw3ICs3OCw3IEBAIHN0YXRpYyBpbnQgX19pbml0IGthc2FuX2luaXRfcmVnaW9u
KHZvaWQgKnN0YXJ0LCBzaXplX3Qgc2l6ZSkKIAlibG9jayA9IG1lbWJsb2NrX2FsbG9jKGtfZW5k
IC0ga19zdGFydCwgUEFHRV9TSVpFKTsKIAogCWZvciAoa19jdXIgPSBrX3N0YXJ0ICYgUEFHRV9N
QVNLOyBrX2N1ciA8IGtfZW5kOyBrX2N1ciArPSBQQUdFX1NJWkUpIHsKLQkJcG1kX3QgKnBtZCA9
IHBtZF9wdHJfayhrX2N1cik7CisJCXBtZF90ICpwbWQgPSBwbWRfb2ZmX2soa19jdXIpOwogCQl2
b2lkICp2YSA9IGJsb2NrICsga19jdXIgLSBrX3N0YXJ0OwogCQlwdGVfdCBwdGUgPSBwZm5fcHRl
KFBIWVNfUEZOKF9fcGEodmEpKSwgUEFHRV9LRVJORUwpOwogCkBAIC0xMDIsNyArMTAyLDcgQEAg
c3RhdGljIHZvaWQgX19pbml0IGthc2FuX3JlbWFwX2Vhcmx5X3NoYWRvd19ybyh2b2lkKQogCWth
c2FuX3BvcHVsYXRlX3B0ZShrYXNhbl9lYXJseV9zaGFkb3dfcHRlLCBwcm90KTsKIAogCWZvciAo
a19jdXIgPSBrX3N0YXJ0ICYgUEFHRV9NQVNLOyBrX2N1ciAhPSBrX2VuZDsga19jdXIgKz0gUEFH
RV9TSVpFKSB7Ci0JCXBtZF90ICpwbWQgPSBwbWRfcHRyX2soa19jdXIpOworCQlwbWRfdCAqcG1k
ID0gcG1kX29mZl9rKGtfY3VyKTsKIAkJcHRlX3QgKnB0ZXAgPSBwdGVfb2Zmc2V0X2tlcm5lbChw
bWQsIGtfY3VyKTsKIAogCQlpZiAoKHB0ZV92YWwoKnB0ZXApICYgUFRFX1JQTl9NQVNLKSAhPSBw
YSkKQEAgLTE5Niw3ICsxOTYsNyBAQCB2b2lkIF9faW5pdCBrYXNhbl9lYXJseV9pbml0KHZvaWQp
CiAJdW5zaWduZWQgbG9uZyBhZGRyID0gS0FTQU5fU0hBRE9XX1NUQVJUOwogCXVuc2lnbmVkIGxv
bmcgZW5kID0gS0FTQU5fU0hBRE9XX0VORDsKIAl1bnNpZ25lZCBsb25nIG5leHQ7Ci0JcG1kX3Qg
KnBtZCA9IHBtZF9wdHJfayhhZGRyKTsKKwlwbWRfdCAqcG1kID0gcG1kX29mZl9rKGFkZHIpOwog
CiAJQlVJTERfQlVHX09OKEtBU0FOX1NIQURPV19TVEFSVCAmIH5QR0RJUl9NQVNLKTsKIApkaWZm
IC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL25vaGFzaC80MHguYyBiL2FyY2gvcG93ZXJwYy9tbS9u
b2hhc2gvNDB4LmMKaW5kZXggNzIzNTEyYjcxNzU4Li5iOTgwZTQ5NmJkYzcgMTAwNjQ0Ci0tLSBh
L2FyY2gvcG93ZXJwYy9tbS9ub2hhc2gvNDB4LmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL25vaGFz
aC80MHguYwpAQCAtMTAzLDcgKzEwMyw3IEBAIHVuc2lnbmVkIGxvbmcgX19pbml0IG1tdV9tYXBp
bl9yYW0odW5zaWduZWQgbG9uZyBiYXNlLCB1bnNpZ25lZCBsb25nIHRvcCkKIAkJcG1kX3QgKnBt
ZHA7CiAJCXVuc2lnbmVkIGxvbmcgdmFsID0gcCB8IF9QTURfU0laRV8xNk0gfCBfUEFHRV9FWEVD
IHwgX1BBR0VfSFdXUklURTsKIAotCQlwbWRwID0gcG1kX3B0cl9rKHYpOworCQlwbWRwID0gcG1k
X29mZl9rKHYpOwogCQkqcG1kcCsrID0gX19wbWQodmFsKTsKIAkJKnBtZHArKyA9IF9fcG1kKHZh
bCk7CiAJCSpwbWRwKysgPSBfX3BtZCh2YWwpOwpAQCAtMTE4LDcgKzExOCw3IEBAIHVuc2lnbmVk
IGxvbmcgX19pbml0IG1tdV9tYXBpbl9yYW0odW5zaWduZWQgbG9uZyBiYXNlLCB1bnNpZ25lZCBs
b25nIHRvcCkKIAkJcG1kX3QgKnBtZHA7CiAJCXVuc2lnbmVkIGxvbmcgdmFsID0gcCB8IF9QTURf
U0laRV80TSB8IF9QQUdFX0VYRUMgfCBfUEFHRV9IV1dSSVRFOwogCi0JCXBtZHAgPSBwbWRfcHRy
X2sodik7CisJCXBtZHAgPSBwbWRfb2ZmX2sodik7CiAJCSpwbWRwID0gX19wbWQodmFsKTsKIAog
CQl2ICs9IExBUkdFX1BBR0VfU0laRV80TTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9w
Z3RhYmxlXzMyLmMgYi9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZV8zMi5jCmluZGV4IDczOGU1ZTM4
YTRiZS4uMzAxMTI2NmMwODlmIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZV8z
Mi5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlXzMyLmMKQEAgLTYyLDcgKzYyLDcgQEAg
aW50IF9fcmVmIG1hcF9rZXJuZWxfcGFnZSh1bnNpZ25lZCBsb25nIHZhLCBwaHlzX2FkZHJfdCBw
YSwgcGdwcm90X3QgcHJvdCkKIAlpbnQgZXJyID0gLUVOT01FTTsKIAogCS8qIFVzZSB1cHBlciAx
MCBiaXRzIG9mIFZBIHRvIGluZGV4IHRoZSBmaXJzdCBsZXZlbCBtYXAgKi8KLQlwZCA9IHBtZF9w
dHJfayh2YSk7CisJcGQgPSBwbWRfb2ZmX2sodmEpOwogCS8qIFVzZSBtaWRkbGUgMTAgYml0cyBv
ZiBWQSB0byBpbmRleCB0aGUgc2Vjb25kLWxldmVsIG1hcCAqLwogCWlmIChsaWtlbHkoc2xhYl9p
c19hdmFpbGFibGUoKSkpCiAJCXBnID0gcHRlX2FsbG9jX2tlcm5lbChwZCwgdmEpOwpkaWZmIC0t
Z2l0IGEvYXJjaC9zMzkwL21tL3BhZ2VhdHRyLmMgYi9hcmNoL3MzOTAvbW0vcGFnZWF0dHIuYwpp
bmRleCA3MzJjMTIxNDVkMDQuLjM5Nzk0NGI5OTA2YiAxMDA2NDQKLS0tIGEvYXJjaC9zMzkwL21t
L3BhZ2VhdHRyLmMKKysrIGIvYXJjaC9zMzkwL21tL3BhZ2VhdHRyLmMKQEAgLTMzNywxOSArMzM3
LDExIEBAIHZvaWQgX19rZXJuZWxfbWFwX3BhZ2VzKHN0cnVjdCBwYWdlICpwYWdlLCBpbnQgbnVt
cGFnZXMsIGludCBlbmFibGUpCiB7CiAJdW5zaWduZWQgbG9uZyBhZGRyZXNzOwogCWludCBuciwg
aSwgajsKLQlwZ2RfdCAqcGdkOwotCXA0ZF90ICpwNGQ7Ci0JcHVkX3QgKnB1ZDsKLQlwbWRfdCAq
cG1kOwogCXB0ZV90ICpwdGU7CiAKIAlmb3IgKGkgPSAwOyBpIDwgbnVtcGFnZXM7KSB7CiAJCWFk
ZHJlc3MgPSBwYWdlX3RvX3BoeXMocGFnZSArIGkpOwotCQlwZ2QgPSBwZ2Rfb2Zmc2V0X2soYWRk
cmVzcyk7Ci0JCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyZXNzKTsKLQkJcHVkID0gcHVkX29m
ZnNldChwNGQsIGFkZHJlc3MpOwotCQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRkcmVzcyk7Ci0J
CXB0ZSA9IHB0ZV9vZmZzZXRfa2VybmVsKHBtZCwgYWRkcmVzcyk7CisJCXB0ZSA9IHZpcnRfdG9f
a3B0ZShhZGRyZXNzKTsKIAkJbnIgPSAodW5zaWduZWQgbG9uZylwdGUgPj4gaWxvZzIoc2l6ZW9m
KGxvbmcpKTsKIAkJbnIgPSBQVFJTX1BFUl9QVEUgLSAobnIgJiAoUFRSU19QRVJfUFRFIC0gMSkp
OwogCQluciA9IG1pbihudW1wYWdlcyAtIGksIG5yKTsKZGlmZiAtLWdpdCBhL2FyY2gvc2gvbW0v
Y2FjaGUtc2g0LmMgYi9hcmNoL3NoL21tL2NhY2hlLXNoNC5jCmluZGV4IGVkNTk5ZGFkZDY5OC4u
ZGU5ZTBhNjBlMTE5IDEwMDY0NAotLS0gYS9hcmNoL3NoL21tL2NhY2hlLXNoNC5jCisrKyBiL2Fy
Y2gvc2gvbW0vY2FjaGUtc2g0LmMKQEAgLTIwNyw5ICsyMDcsNiBAQCBzdGF0aWMgdm9pZCBzaDRf
Zmx1c2hfY2FjaGVfcGFnZSh2b2lkICphcmdzKQogCXN0cnVjdCBwYWdlICpwYWdlOwogCXVuc2ln
bmVkIGxvbmcgYWRkcmVzcywgcGZuLCBwaHlzOwogCWludCBtYXBfY29oZXJlbnQgPSAwOwotCXBn
ZF90ICpwZ2Q7Ci0JcDRkX3QgKnA0ZDsKLQlwdWRfdCAqcHVkOwogCXBtZF90ICpwbWQ7CiAJcHRl
X3QgKnB0ZTsKIAl2b2lkICp2YWRkcjsKQEAgLTIyMywxMCArMjIwLDcgQEAgc3RhdGljIHZvaWQg
c2g0X2ZsdXNoX2NhY2hlX3BhZ2Uodm9pZCAqYXJncykKIAlpZiAoY3B1X2NvbnRleHQoc21wX3By
b2Nlc3Nvcl9pZCgpLCB2bWEtPnZtX21tKSA9PSBOT19DT05URVhUKQogCQlyZXR1cm47CiAKLQlw
Z2QgPSBwZ2Rfb2Zmc2V0KHZtYS0+dm1fbW0sIGFkZHJlc3MpOwotCXA0ZCA9IHA0ZF9vZmZzZXQo
cGdkLCBhZGRyZXNzKTsKLQlwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgYWRkcmVzcyk7Ci0JcG1kID0g
cG1kX29mZnNldChwdWQsIGFkZHJlc3MpOworCXBtZCA9IHBtZF9vZmYodm1hLT52bV9tbSwgYWRk
cmVzcyk7CiAJcHRlID0gcHRlX29mZnNldF9rZXJuZWwocG1kLCBhZGRyZXNzKTsKIAogCS8qIElm
IHRoZSBwYWdlIGlzbid0IHByZXNlbnQsIHRoZXJlIGlzIG5vdGhpbmcgdG8gZG8gaGVyZS4gKi8K
ZGlmZiAtLWdpdCBhL2FyY2gvc2gvbW0va21hcC5jIGIvYXJjaC9zaC9tbS9rbWFwLmMKaW5kZXgg
MGU3MDM5MTM3ZjVhLi43M2ZkN2NjOTk0MzAgMTAwNjQ0Ci0tLSBhL2FyY2gvc2gvbW0va21hcC5j
CisrKyBiL2FyY2gvc2gvbW0va21hcC5jCkBAIC0xNCw5ICsxNCw2IEBACiAjaW5jbHVkZSA8YXNt
L21tdV9jb250ZXh0Lmg+CiAjaW5jbHVkZSA8YXNtL2NhY2hlZmx1c2guaD4KIAotI2RlZmluZSBr
bWFwX2dldF9maXhtYXBfcHRlKHZhZGRyKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBcCi0JcHRlX29mZnNldF9rZXJuZWwocG1kX29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZz
ZXQocGdkX29mZnNldF9rKHZhZGRyKSwgKHZhZGRyKSksICh2YWRkcikpLCAodmFkZHIpKSwgdmFk
ZHIpCi0KIHN0YXRpYyBwdGVfdCAqa21hcF9jb2hlcmVudF9wdGU7CiAKIHZvaWQgX19pbml0IGtt
YXBfY29oZXJlbnRfaW5pdCh2b2lkKQpAQCAtMjUsNyArMjIsNyBAQCB2b2lkIF9faW5pdCBrbWFw
X2NvaGVyZW50X2luaXQodm9pZCkKIAogCS8qIGNhY2hlIHRoZSBmaXJzdCBjb2hlcmVudCBrbWFw
IHB0ZSAqLwogCXZhZGRyID0gX19maXhfdG9fdmlydChGSVhfQ01BUF9CRUdJTik7Ci0Ja21hcF9j
b2hlcmVudF9wdGUgPSBrbWFwX2dldF9maXhtYXBfcHRlKHZhZGRyKTsKKwlrbWFwX2NvaGVyZW50
X3B0ZSA9IHZpcnRfdG9fa3B0ZSh2YWRkcik7CiB9CiAKIHZvaWQgKmttYXBfY29oZXJlbnQoc3Ry
dWN0IHBhZ2UgKnBhZ2UsIHVuc2lnbmVkIGxvbmcgYWRkcikKZGlmZiAtLWdpdCBhL2FyY2gvc3Bh
cmMvbW0vaGlnaG1lbS5jIGIvYXJjaC9zcGFyYy9tbS9oaWdobWVtLmMKaW5kZXggZDIzN2Q5MDJm
OWMzLi42MjUyMjFlYzIwMTAgMTAwNjQ0Ci0tLSBhL2FyY2gvc3BhcmMvbW0vaGlnaG1lbS5jCisr
KyBiL2FyY2gvc3BhcmMvbW0vaGlnaG1lbS5jCkBAIC0zNiwxOCArMzYsMTAgQEAgc3RhdGljIHB0
ZV90ICprbWFwX3B0ZTsKIAogdm9pZCBfX2luaXQga21hcF9pbml0KHZvaWQpCiB7Ci0JdW5zaWdu
ZWQgbG9uZyBhZGRyZXNzOwotCXA0ZF90ICpwNGQ7Ci0JcHVkX3QgKnB1ZDsKLQlwbWRfdCAqZGly
OwotCi0JYWRkcmVzcyA9IF9fZml4X3RvX3ZpcnQoRklYX0tNQVBfQkVHSU4pOwotCXA0ZCA9IHA0
ZF9vZmZzZXQocGdkX29mZnNldF9rKGFkZHJlc3MpLCBhZGRyZXNzKTsKLQlwdWQgPSBwdWRfb2Zm
c2V0KHA0ZCwgYWRkcmVzcyk7Ci0JZGlyID0gcG1kX29mZnNldChwdWQsIGFkZHJlc3MpOworCXVu
c2lnbmVkIGxvbmcgYWRkcmVzcyA9IF9fZml4X3RvX3ZpcnQoRklYX0tNQVBfQkVHSU4pOwogCiAg
ICAgICAgIC8qIGNhY2hlIHRoZSBmaXJzdCBrbWFwIHB0ZSAqLwotICAgICAgICBrbWFwX3B0ZSA9
IHB0ZV9vZmZzZXRfa2VybmVsKGRpciwgYWRkcmVzcyk7CisgICAgICAgIGttYXBfcHRlID0gdmly
dF90b19rcHRlKGFkZHJlc3MpOwogfQogCiB2b2lkICprbWFwX2F0b21pY19oaWdoX3Byb3Qoc3Ry
dWN0IHBhZ2UgKnBhZ2UsIHBncHJvdF90IHByb3QpCmRpZmYgLS1naXQgYS9hcmNoL3NwYXJjL21t
L2luaXRfNjQuYyBiL2FyY2gvc3BhcmMvbW0vaW5pdF82NC5jCmluZGV4IDE0MTYxNGYxOTA4NC4u
MDJlNmU1ZTBmMTA2IDEwMDY0NAotLS0gYS9hcmNoL3NwYXJjL21tL2luaXRfNjQuYworKysgYi9h
cmNoL3NwYXJjL21tL2luaXRfNjQuYwpAQCAtNTAzLDExICs1MDMsNyBAQCB2b2lkIF9fa3Byb2Jl
cyBmbHVzaF9pY2FjaGVfcmFuZ2UodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBl
bmQpCiAJCQlpZiAoa2FkZHIgPj0gUEFHRV9PRkZTRVQpCiAJCQkJcGFkZHIgPSBrYWRkciAmIG1h
c2s7CiAJCQllbHNlIHsKLQkJCQlwZ2RfdCAqcGdkcCA9IHBnZF9vZmZzZXRfayhrYWRkcik7Ci0J
CQkJcDRkX3QgKnA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGthZGRyKTsKLQkJCQlwdWRfdCAqcHVk
cCA9IHB1ZF9vZmZzZXQocDRkcCwga2FkZHIpOwotCQkJCXBtZF90ICpwbWRwID0gcG1kX29mZnNl
dChwdWRwLCBrYWRkcik7Ci0JCQkJcHRlX3QgKnB0ZXAgPSBwdGVfb2Zmc2V0X2tlcm5lbChwbWRw
LCBrYWRkcik7CisJCQkJcHRlX3QgKnB0ZXAgPSB2aXJ0X3RvX2twdGUoa2FkZHIpOwogCiAJCQkJ
cGFkZHIgPSBwdGVfdmFsKCpwdGVwKSAmIG1hc2s7CiAJCQl9CmRpZmYgLS1naXQgYS9hcmNoL3Nw
YXJjL21tL2lvLXVuaXQuYyBiL2FyY2gvc3BhcmMvbW0vaW8tdW5pdC5jCmluZGV4IDRhZWVkNTgw
YjRkNC4uYmZjYzA0YmZjZTU0IDEwMDY0NAotLS0gYS9hcmNoL3NwYXJjL21tL2lvLXVuaXQuYwor
KysgYi9hcmNoL3NwYXJjL21tL2lvLXVuaXQuYwpAQCAtMjQwLDIxICsyNDAsMTUgQEAgc3RhdGlj
IHZvaWQgKmlvdW5pdF9hbGxvYyhzdHJ1Y3QgZGV2aWNlICpkZXYsIHNpemVfdCBsZW4sCiAJd2hp
bGUoYWRkciA8IGVuZCkgewogCQlwYWdlID0gdmE7CiAJCXsKLQkJCXBnZF90ICpwZ2RwOwotCQkJ
cDRkX3QgKnA0ZHA7Ci0JCQlwdWRfdCAqcHVkcDsKIAkJCXBtZF90ICpwbWRwOwogCQkJcHRlX3Qg
KnB0ZXA7CiAJCQlsb25nIGk7CiAKLQkJCXBnZHAgPSBwZ2Rfb2Zmc2V0KCZpbml0X21tLCBhZGRy
KTsKLQkJCXA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGFkZHIpOwotCQkJcHVkcCA9IHB1ZF9vZmZz
ZXQocDRkcCwgYWRkcik7Ci0JCQlwbWRwID0gcG1kX29mZnNldChwdWRwLCBhZGRyKTsKKwkJCXBt
ZHAgPSBwbWRfb2ZmX2soYWRkcik7CiAJCQlwdGVwID0gcHRlX29mZnNldF9tYXAocG1kcCwgYWRk
cik7CiAKIAkJCXNldF9wdGUocHRlcCwgbWtfcHRlKHZpcnRfdG9fcGFnZShwYWdlKSwgZHZtYV9w
cm90KSk7Ci0JCQkKKwogCQkJaSA9ICgoYWRkciAtIElPVU5JVF9ETUFfQkFTRSkgPj4gUEFHRV9T
SElGVCk7CiAKIAkJCWlvcHRlID0gaW91bml0LT5wYWdlX3RhYmxlICsgaTsKZGlmZiAtLWdpdCBh
L2FyY2gvc3BhcmMvbW0vaW9tbXUuYyBiL2FyY2gvc3BhcmMvbW0vaW9tbXUuYwppbmRleCBmYTll
Mjk4ZmQ5ODUuLjM1YjAwMmViMzEyZSAxMDA2NDQKLS0tIGEvYXJjaC9zcGFyYy9tbS9pb21tdS5j
CisrKyBiL2FyY2gvc3BhcmMvbW0vaW9tbXUuYwpAQCAtMzQ4LDkgKzM0OCw2IEBAIHN0YXRpYyB2
b2lkICpzYnVzX2lvbW11X2FsbG9jKHN0cnVjdCBkZXZpY2UgKmRldiwgc2l6ZV90IGxlbiwKIAl3
aGlsZShhZGRyIDwgZW5kKSB7CiAJCXBhZ2UgPSB2YTsKIAkJewotCQkJcGdkX3QgKnBnZHA7Ci0J
CQlwNGRfdCAqcDRkcDsKLQkJCXB1ZF90ICpwdWRwOwogCQkJcG1kX3QgKnBtZHA7CiAJCQlwdGVf
dCAqcHRlcDsKIApAQCAtMzYxLDEwICszNTgsNyBAQCBzdGF0aWMgdm9pZCAqc2J1c19pb21tdV9h
bGxvYyhzdHJ1Y3QgZGV2aWNlICpkZXYsIHNpemVfdCBsZW4sCiAJCQllbHNlCiAJCQkJX19mbHVz
aF9wYWdlX3RvX3JhbShwYWdlKTsKIAotCQkJcGdkcCA9IHBnZF9vZmZzZXQoJmluaXRfbW0sIGFk
ZHIpOwotCQkJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgYWRkcik7Ci0JCQlwdWRwID0gcHVkX29m
ZnNldChwNGRwLCBhZGRyKTsKLQkJCXBtZHAgPSBwbWRfb2Zmc2V0KHB1ZHAsIGFkZHIpOworCQkJ
cG1kcCA9IHBtZF9vZmZfayhhZGRyKTsKIAkJCXB0ZXAgPSBwdGVfb2Zmc2V0X21hcChwbWRwLCBh
ZGRyKTsKIAogCQkJc2V0X3B0ZShwdGVwLCBta19wdGUodmlydF90b19wYWdlKHBhZ2UpLCBkdm1h
X3Byb3QpKTsKZGlmZiAtLWdpdCBhL2FyY2gvc3BhcmMvbW0vc3JtbXUuYyBiL2FyY2gvc3BhcmMv
bW0vc3JtbXUuYwppbmRleCAzMDY0OGMxZjg3ODYuLjkwNjgwMmYwZWJlOSAxMDA2NDQKLS0tIGEv
YXJjaC9zcGFyYy9tbS9zcm1tdS5jCisrKyBiL2FyY2gvc3BhcmMvbW0vc3JtbXUuYwpAQCAtNTE4
LDE5ICs1MTgsMTAgQEAgdm9pZCBzd2l0Y2hfbW0oc3RydWN0IG1tX3N0cnVjdCAqb2xkX21tLCBz
dHJ1Y3QgbW1fc3RydWN0ICptbSwKIHN0YXRpYyBpbmxpbmUgdm9pZCBzcm1tdV9tYXBpb2FkZHIo
dW5zaWduZWQgbG9uZyBwaHlzYWRkciwKIAkJCQkgICB1bnNpZ25lZCBsb25nIHZpcnRfYWRkciwg
aW50IGJ1c190eXBlKQogewotCXBnZF90ICpwZ2RwOwotCXA0ZF90ICpwNGRwOwotCXB1ZF90ICpw
dWRwOwotCXBtZF90ICpwbWRwOwotCXB0ZV90ICpwdGVwOworCXB0ZV90ICpwdGVwID0gdmlydF90
b19rcHRlKHZpcnRfYWRkcik7CiAJdW5zaWduZWQgbG9uZyB0bXA7CiAKIAlwaHlzYWRkciAmPSBQ
QUdFX01BU0s7Ci0JcGdkcCA9IHBnZF9vZmZzZXRfayh2aXJ0X2FkZHIpOwotCXA0ZHAgPSBwNGRf
b2Zmc2V0KHBnZHAsIHZpcnRfYWRkcik7Ci0JcHVkcCA9IHB1ZF9vZmZzZXQocDRkcCwgdmlydF9h
ZGRyKTsKLQlwbWRwID0gcG1kX29mZnNldChwdWRwLCB2aXJ0X2FkZHIpOwotCXB0ZXAgPSBwdGVf
b2Zmc2V0X2tlcm5lbChwbWRwLCB2aXJ0X2FkZHIpOwogCXRtcCA9IChwaHlzYWRkciA+PiA0KSB8
IFNSTU1VX0VUX1BURTsKIAogCS8qIEkgbmVlZCB0byB0ZXN0IHdoZXRoZXIgdGhpcyBpcyBjb25z
aXN0ZW50IG92ZXIgYWxsCkBAIC01NTcsMTggKzU0OCw3IEBAIHZvaWQgc3JtbXVfbWFwaW9yYW5n
ZSh1bnNpZ25lZCBpbnQgYnVzLCB1bnNpZ25lZCBsb25nIHhwYSwKIAogc3RhdGljIGlubGluZSB2
b2lkIHNybW11X3VubWFwaW9hZGRyKHVuc2lnbmVkIGxvbmcgdmlydF9hZGRyKQogewotCXBnZF90
ICpwZ2RwOwotCXA0ZF90ICpwNGRwOwotCXB1ZF90ICpwdWRwOwotCXBtZF90ICpwbWRwOwotCXB0
ZV90ICpwdGVwOwotCi0KLQlwZ2RwID0gcGdkX29mZnNldF9rKHZpcnRfYWRkcik7Ci0JcDRkcCA9
IHA0ZF9vZmZzZXQocGdkcCwgdmlydF9hZGRyKTsKLQlwdWRwID0gcHVkX29mZnNldChwNGRwLCB2
aXJ0X2FkZHIpOwotCXBtZHAgPSBwbWRfb2Zmc2V0KHB1ZHAsIHZpcnRfYWRkcik7Ci0JcHRlcCA9
IHB0ZV9vZmZzZXRfa2VybmVsKHBtZHAsIHZpcnRfYWRkcik7CisJcHRlX3QgKnB0ZXAgPSB2aXJ0
X3RvX2twdGUodmlydF9hZGRyKTsKIAogCS8qIE5vIG5lZWQgdG8gZmx1c2ggdW5jYWNoZWFibGUg
cGFnZS4gKi8KIAlfX3B0ZV9jbGVhcihwdGVwKTsKQEAgLTkyOSwxMCArOTA5LDYgQEAgdm9pZCBf
X2luaXQgc3JtbXVfcGFnaW5nX2luaXQodm9pZCkKIAlpbnQgaTsKIAlwaGFuZGxlIGNwdW5vZGU7
CiAJY2hhciBub2RlX3N0clsxMjhdOwotCXBnZF90ICpwZ2Q7Ci0JcDRkX3QgKnA0ZDsKLQlwdWRf
dCAqcHVkOwotCXBtZF90ICpwbWQ7CiAJcHRlX3QgKnB0ZTsKIAl1bnNpZ25lZCBsb25nIHBhZ2Vz
X2F2YWlsOwogCkBAIC05OTIsMTEgKzk2OCw3IEBAIHZvaWQgX19pbml0IHNybW11X3BhZ2luZ19p
bml0KHZvaWQpCiAJCV9fZml4X3RvX3ZpcnQoX19lbmRfb2ZfZml4ZWRfYWRkcmVzc2VzIC0gMSks
IEZJWEFERFJfVE9QKTsKIAlzcm1tdV9hbGxvY2F0ZV9wdGFibGVfc2tlbGV0b24oUEtNQVBfQkFT
RSwgUEtNQVBfRU5EKTsKIAotCXBnZCA9IHBnZF9vZmZzZXRfayhQS01BUF9CQVNFKTsKLQlwNGQg
PSBwNGRfb2Zmc2V0KHBnZCwgUEtNQVBfQkFTRSk7Ci0JcHVkID0gcHVkX29mZnNldChwNGQsIFBL
TUFQX0JBU0UpOwotCXBtZCA9IHBtZF9vZmZzZXQocHVkLCBQS01BUF9CQVNFKTsKLQlwdGUgPSBw
dGVfb2Zmc2V0X2tlcm5lbChwbWQsIFBLTUFQX0JBU0UpOworCXB0ZSA9IHZpcnRfdG9fa3B0ZShQ
S01BUF9CQVNFKTsKIAlwa21hcF9wYWdlX3RhYmxlID0gcHRlOwogCiAJZmx1c2hfY2FjaGVfYWxs
KCk7CmRpZmYgLS1naXQgYS9hcmNoL3VtL2tlcm5lbC9tZW0uYyBiL2FyY2gvdW0va2VybmVsL21l
bS5jCmluZGV4IDQwMWIyMmYxNDc0My4uYzJmZjc2Yzg5ODFlIDEwMDY0NAotLS0gYS9hcmNoL3Vt
L2tlcm5lbC9tZW0uYworKysgYi9hcmNoL3VtL2tlcm5lbC9tZW0uYwpAQCAtMTI1LDEwICsxMjUs
NiBAQCBzdGF0aWMgdm9pZCBfX2luaXQgZml4YWRkcl91c2VyX2luaXQoIHZvaWQpCiB7CiAjaWZk
ZWYgQ09ORklHX0FSQ0hfUkVVU0VfSE9TVF9WU1lTQ0FMTF9BUkVBCiAJbG9uZyBzaXplID0gRklY
QUREUl9VU0VSX0VORCAtIEZJWEFERFJfVVNFUl9TVEFSVDsKLQlwZ2RfdCAqcGdkOwotCXA0ZF90
ICpwNGQ7Ci0JcHVkX3QgKnB1ZDsKLQlwbWRfdCAqcG1kOwogCXB0ZV90ICpwdGU7CiAJcGh5c190
IHA7CiAJdW5zaWduZWQgbG9uZyB2LCB2YWRkciA9IEZJWEFERFJfVVNFUl9TVEFSVDsKQEAgLTE0
NiwxMSArMTQyLDcgQEAgc3RhdGljIHZvaWQgX19pbml0IGZpeGFkZHJfdXNlcl9pbml0KCB2b2lk
KQogCXAgPSBfX3BhKHYpOwogCWZvciAoIDsgc2l6ZSA+IDA7IHNpemUgLT0gUEFHRV9TSVpFLCB2
YWRkciArPSBQQUdFX1NJWkUsCiAJCSAgICAgIHAgKz0gUEFHRV9TSVpFKSB7Ci0JCXBnZCA9IHN3
YXBwZXJfcGdfZGlyICsgcGdkX2luZGV4KHZhZGRyKTsKLQkJcDRkID0gcDRkX29mZnNldChwZ2Qs
IHZhZGRyKTsKLQkJcHVkID0gcHVkX29mZnNldChwNGQsIHZhZGRyKTsKLQkJcG1kID0gcG1kX29m
ZnNldChwdWQsIHZhZGRyKTsKLQkJcHRlID0gcHRlX29mZnNldF9rZXJuZWwocG1kLCB2YWRkcik7
CisJCXB0ZSA9IHZpcnRfdG9fa3B0ZSh2YWRkcik7CiAJCXB0ZV9zZXRfdmFsKCpwdGUsIHAsIFBB
R0VfUkVBRE9OTFkpOwogCX0KICNlbmRpZgpkaWZmIC0tZ2l0IGEvYXJjaC91bS9rZXJuZWwvdHJh
cC5jIGIvYXJjaC91bS9rZXJuZWwvdHJhcC5jCmluZGV4IGI2YmE2OTQ5MjNlNC4uOWM0YjdlNzNh
YjhkIDEwMDY0NAotLS0gYS9hcmNoL3VtL2tlcm5lbC90cmFwLmMKKysrIGIvYXJjaC91bS9rZXJu
ZWwvdHJhcC5jCkBAIC0yNiw5ICsyNiw2IEBAIGludCBoYW5kbGVfcGFnZV9mYXVsdCh1bnNpZ25l
ZCBsb25nIGFkZHJlc3MsIHVuc2lnbmVkIGxvbmcgaXAsCiB7CiAJc3RydWN0IG1tX3N0cnVjdCAq
bW0gPSBjdXJyZW50LT5tbTsKIAlzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYTsKLQlwZ2RfdCAq
cGdkOwotCXA0ZF90ICpwNGQ7Ci0JcHVkX3QgKnB1ZDsKIAlwbWRfdCAqcG1kOwogCXB0ZV90ICpw
dGU7CiAJaW50IGVyciA9IC1FRkFVTFQ7CkBAIC0xMDIsMTAgKzk5LDcgQEAgaW50IGhhbmRsZV9w
YWdlX2ZhdWx0KHVuc2lnbmVkIGxvbmcgYWRkcmVzcywgdW5zaWduZWQgbG9uZyBpcCwKIAkJCX0K
IAkJfQogCi0JCXBnZCA9IHBnZF9vZmZzZXQobW0sIGFkZHJlc3MpOwotCQlwNGQgPSBwNGRfb2Zm
c2V0KHBnZCwgYWRkcmVzcyk7Ci0JCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyZXNzKTsKLQkJ
cG1kID0gcG1kX29mZnNldChwdWQsIGFkZHJlc3MpOworCQlwbWQgPSBwbWRfb2ZmKG1tLCBhZGRy
ZXNzKTsKIAkJcHRlID0gcHRlX29mZnNldF9rZXJuZWwocG1kLCBhZGRyZXNzKTsKIAl9IHdoaWxl
ICghcHRlX3ByZXNlbnQoKnB0ZSkpOwogCWVyciA9IDA7CmRpZmYgLS1naXQgYS9hcmNoL3VuaWNv
cmUzMi9tbS9tbS5oIGIvYXJjaC91bmljb3JlMzIvbW0vbW0uaAppbmRleCAyNzEyN2FiYzk1ZmIu
LmYxNTdmNWQyNDlhYiAxMDA2NDQKLS0tIGEvYXJjaC91bmljb3JlMzIvbW0vbW0uaAorKysgYi9h
cmNoL3VuaWNvcmUzMi9tbS9tbS5oCkBAIC0xNCwxNiArMTQsNiBAQCBleHRlcm4gaW50IHN5c2N0
bF9vdmVyY29tbWl0X21lbW9yeTsKIAogI2RlZmluZSBUT1BfUFRFKHgpCXB0ZV9vZmZzZXRfa2Vy
bmVsKHRvcF9wbWQsIHgpCiAKLXN0YXRpYyBpbmxpbmUgcG1kX3QgKnBtZF9vZmYocGdkX3QgKnBn
ZCwgdW5zaWduZWQgbG9uZyB2aXJ0KQotewotCXJldHVybiBwbWRfb2Zmc2V0KChwdWRfdCAqKXBn
ZCwgdmlydCk7Ci19Ci0KLXN0YXRpYyBpbmxpbmUgcG1kX3QgKnBtZF9vZmZfayh1bnNpZ25lZCBs
b25nIHZpcnQpCi17Ci0JcmV0dXJuIHBtZF9vZmYocGdkX29mZnNldF9rKHZpcnQpLCB2aXJ0KTsK
LX0KLQogc3RydWN0IG1lbV90eXBlIHsKIAl1bnNpZ25lZCBpbnQgcHJvdF9wdGU7CiAJdW5zaWdu
ZWQgaW50IHByb3RfbDE7CmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9tbS9pbml0XzMyLmMgYi9hcmNo
L3g4Ni9tbS9pbml0XzMyLmMKaW5kZXggNmE4MjE3MjdjZWFmLi5iZGE5MDllM2UzN2UgMTAwNjQ0
Ci0tLSBhL2FyY2gveDg2L21tL2luaXRfMzIuYworKysgYi9hcmNoL3g4Ni9tbS9pbml0XzMyLmMK
QEAgLTM5NSwxNSArMzk1LDYgQEAga2VybmVsX3BoeXNpY2FsX21hcHBpbmdfaW5pdCh1bnNpZ25l
ZCBsb25nIHN0YXJ0LAogCiBwdGVfdCAqa21hcF9wdGU7CiAKLXN0YXRpYyBpbmxpbmUgcHRlX3Qg
KmttYXBfZ2V0X2ZpeG1hcF9wdGUodW5zaWduZWQgbG9uZyB2YWRkcikKLXsKLQlwZ2RfdCAqcGdk
ID0gcGdkX29mZnNldF9rKHZhZGRyKTsKLQlwNGRfdCAqcDRkID0gcDRkX29mZnNldChwZ2QsIHZh
ZGRyKTsKLQlwdWRfdCAqcHVkID0gcHVkX29mZnNldChwNGQsIHZhZGRyKTsKLQlwbWRfdCAqcG1k
ID0gcG1kX29mZnNldChwdWQsIHZhZGRyKTsKLQlyZXR1cm4gcHRlX29mZnNldF9rZXJuZWwocG1k
LCB2YWRkcik7Ci19Ci0KIHN0YXRpYyB2b2lkIF9faW5pdCBrbWFwX2luaXQodm9pZCkKIHsKIAl1
bnNpZ25lZCBsb25nIGttYXBfdnN0YXJ0OwpAQCAtNDEyLDI4ICs0MDMsMTcgQEAgc3RhdGljIHZv
aWQgX19pbml0IGttYXBfaW5pdCh2b2lkKQogCSAqIENhY2hlIHRoZSBmaXJzdCBrbWFwIHB0ZToK
IAkgKi8KIAlrbWFwX3ZzdGFydCA9IF9fZml4X3RvX3ZpcnQoRklYX0tNQVBfQkVHSU4pOwotCWtt
YXBfcHRlID0ga21hcF9nZXRfZml4bWFwX3B0ZShrbWFwX3ZzdGFydCk7CisJa21hcF9wdGUgPSB2
aXJ0X3RvX2twdGUoa21hcF92c3RhcnQpOwogfQogCiAjaWZkZWYgQ09ORklHX0hJR0hNRU0KIHN0
YXRpYyB2b2lkIF9faW5pdCBwZXJtYW5lbnRfa21hcHNfaW5pdChwZ2RfdCAqcGdkX2Jhc2UpCiB7
Ci0JdW5zaWduZWQgbG9uZyB2YWRkcjsKLQlwZ2RfdCAqcGdkOwotCXA0ZF90ICpwNGQ7Ci0JcHVk
X3QgKnB1ZDsKLQlwbWRfdCAqcG1kOwotCXB0ZV90ICpwdGU7CisJdW5zaWduZWQgbG9uZyB2YWRk
ciA9IFBLTUFQX0JBU0U7CiAKLQl2YWRkciA9IFBLTUFQX0JBU0U7CiAJcGFnZV90YWJsZV9yYW5n
ZV9pbml0KHZhZGRyLCB2YWRkciArIFBBR0VfU0laRSpMQVNUX1BLTUFQLCBwZ2RfYmFzZSk7CiAK
LQlwZ2QgPSBzd2FwcGVyX3BnX2RpciArIHBnZF9pbmRleCh2YWRkcik7Ci0JcDRkID0gcDRkX29m
ZnNldChwZ2QsIHZhZGRyKTsKLQlwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgdmFkZHIpOwotCXBtZCA9
IHBtZF9vZmZzZXQocHVkLCB2YWRkcik7Ci0JcHRlID0gcHRlX29mZnNldF9rZXJuZWwocG1kLCB2
YWRkcik7Ci0JcGttYXBfcGFnZV90YWJsZSA9IHB0ZTsKKwlwa21hcF9wYWdlX3RhYmxlID0gdmly
dF90b19rcHRlKHZhZGRyKTsKIH0KIAogdm9pZCBfX2luaXQgYWRkX2hpZ2hwYWdlc193aXRoX2Fj
dGl2ZV9yZWdpb25zKGludCBuaWQsCmRpZmYgLS1naXQgYS9hcmNoL3h0ZW5zYS9pbmNsdWRlL2Fz
bS9maXhtYXAuaCBiL2FyY2gveHRlbnNhL2luY2x1ZGUvYXNtL2ZpeG1hcC5oCmluZGV4IDg5YTZk
MWI3OTk0ZC4uYTA2ZmZiMGM2MWM3IDEwMDY0NAotLS0gYS9hcmNoL3h0ZW5zYS9pbmNsdWRlL2Fz
bS9maXhtYXAuaAorKysgYi9hcmNoL3h0ZW5zYS9pbmNsdWRlL2FzbS9maXhtYXAuaApAQCAtNzYs
MTIgKzc2LDQgQEAgc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIHZpcnRfdG9fZml4KGNvbnN0
IHVuc2lnbmVkIGxvbmcgdmFkZHIpCiAKICNlbmRpZgogCi0jZGVmaW5lIGttYXBfZ2V0X2ZpeG1h
cF9wdGUodmFkZHIpIFwKLQlwdGVfb2Zmc2V0X2tlcm5lbCggXAotCQlwbWRfb2Zmc2V0KHB1ZF9v
ZmZzZXQocDRkX29mZnNldChwZ2Rfb2Zmc2V0X2sodmFkZHIpLCBcCi0JCQkJCQkgKHZhZGRyKSks
IFwKLQkJCQkgICAgICAodmFkZHIpKSwgXAotCQkJICAgKHZhZGRyKSksIFwKLQkJKHZhZGRyKSkK
LQogI2VuZGlmCmRpZmYgLS1naXQgYS9hcmNoL3h0ZW5zYS9tbS9oaWdobWVtLmMgYi9hcmNoL3h0
ZW5zYS9tbS9oaWdobWVtLmMKaW5kZXggOTliNWFkMTM3YWI1Li42NzMxOTZmZTg2MmUgMTAwNjQ0
Ci0tLSBhL2FyY2gveHRlbnNhL21tL2hpZ2htZW0uYworKysgYi9hcmNoL3h0ZW5zYS9tbS9oaWdo
bWVtLmMKQEAgLTg2LDYgKzg2LDYgQEAgdm9pZCBfX2luaXQga21hcF9pbml0KHZvaWQpCiAJQlVJ
TERfQlVHX09OKFBLTUFQX0JBU0UgPCBUTEJURU1QX0JBU0VfMSArIFRMQlRFTVBfU0laRSk7CiAJ
LyogY2FjaGUgdGhlIGZpcnN0IGttYXAgcHRlICovCiAJa21hcF92c3RhcnQgPSBfX2ZpeF90b192
aXJ0KEZJWF9LTUFQX0JFR0lOKTsKLQlrbWFwX3B0ZSA9IGttYXBfZ2V0X2ZpeG1hcF9wdGUoa21h
cF92c3RhcnQpOworCWttYXBfcHRlID0gdmlydF90b19rcHRlKGttYXBfdnN0YXJ0KTsKIAlrbWFw
X3dhaXRxdWV1ZXNfaW5pdCgpOwogfQpkaWZmIC0tZ2l0IGEvYXJjaC94dGVuc2EvbW0va2FzYW5f
aW5pdC5jIGIvYXJjaC94dGVuc2EvbW0va2FzYW5faW5pdC5jCmluZGV4IGUzYmFhMjFmZjI0Yy4u
MWZlZjI0ZGIyZmY2IDEwMDY0NAotLS0gYS9hcmNoL3h0ZW5zYS9tbS9rYXNhbl9pbml0LmMKKysr
IGIvYXJjaC94dGVuc2EvbW0va2FzYW5faW5pdC5jCkBAIC0xOSwxMCArMTksNyBAQAogdm9pZCBf
X2luaXQga2FzYW5fZWFybHlfaW5pdCh2b2lkKQogewogCXVuc2lnbmVkIGxvbmcgdmFkZHIgPSBL
QVNBTl9TSEFET1dfU1RBUlQ7Ci0JcGdkX3QgKnBnZCA9IHBnZF9vZmZzZXRfayh2YWRkcik7Ci0J
cDRkX3QgKnA0ZCA9IHA0ZF9vZmZzZXQocGdkLCB2YWRkcik7Ci0JcHVkX3QgKnB1ZCA9IHB1ZF9v
ZmZzZXQocDRkLCB2YWRkcik7Ci0JcG1kX3QgKnBtZCA9IHBtZF9vZmZzZXQocHVkLCB2YWRkcik7
CisJcG1kX3QgKnBtZCA9IHBtZF9vZmZfayh2YWRkcik7CiAJaW50IGk7CiAKIAlmb3IgKGkgPSAw
OyBpIDwgUFRSU19QRVJfUFRFOyArK2kpCkBAIC00MywxMCArNDAsNyBAQCBzdGF0aWMgdm9pZCBf
X2luaXQgcG9wdWxhdGUodm9pZCAqc3RhcnQsIHZvaWQgKmVuZCkKIAl1bnNpZ25lZCBsb25nIG5f
cG1kcyA9IG5fcGFnZXMgLyBQVFJTX1BFUl9QVEU7CiAJdW5zaWduZWQgbG9uZyBpLCBqOwogCXVu
c2lnbmVkIGxvbmcgdmFkZHIgPSAodW5zaWduZWQgbG9uZylzdGFydDsKLQlwZ2RfdCAqcGdkID0g
cGdkX29mZnNldF9rKHZhZGRyKTsKLQlwNGRfdCAqcDRkID0gcDRkX29mZnNldChwZ2QsIHZhZGRy
KTsKLQlwdWRfdCAqcHVkID0gcHVkX29mZnNldChwNGQsIHZhZGRyKTsKLQlwbWRfdCAqcG1kID0g
cG1kX29mZnNldChwdWQsIHZhZGRyKTsKKwlwbWRfdCAqcG1kID0gcG1kX29mZl9rKHZhZGRyKTsK
IAlwdGVfdCAqcHRlID0gbWVtYmxvY2tfYWxsb2Mobl9wYWdlcyAqIHNpemVvZihwdGVfdCksIFBB
R0VfU0laRSk7CiAKIAlpZiAoIXB0ZSkKZGlmZiAtLWdpdCBhL2FyY2gveHRlbnNhL21tL21tdS5j
IGIvYXJjaC94dGVuc2EvbW0vbW11LmMKaW5kZXggMzdlNDc4YTI3ODc3Li5mZDIxOTNkZjhhMTQg
MTAwNjQ0Ci0tLSBhL2FyY2gveHRlbnNhL21tL21tdS5jCisrKyBiL2FyY2gveHRlbnNhL21tL21t
dS5jCkBAIC0yMSwxMCArMjEsNyBAQAogI2lmIGRlZmluZWQoQ09ORklHX0hJR0hNRU0pCiBzdGF0
aWMgdm9pZCAqIF9faW5pdCBpbml0X3BtZCh1bnNpZ25lZCBsb25nIHZhZGRyLCB1bnNpZ25lZCBs
b25nIG5fcGFnZXMpCiB7Ci0JcGdkX3QgKnBnZCA9IHBnZF9vZmZzZXRfayh2YWRkcik7Ci0JcDRk
X3QgKnA0ZCA9IHA0ZF9vZmZzZXQocGdkLCB2YWRkcik7Ci0JcHVkX3QgKnB1ZCA9IHB1ZF9vZmZz
ZXQocDRkLCB2YWRkcik7Ci0JcG1kX3QgKnBtZCA9IHBtZF9vZmZzZXQocHVkLCB2YWRkcik7CisJ
cG1kX3QgKnBtZCA9IHBtZF9vZmZfayh2YWRkcik7CiAJcHRlX3QgKnB0ZTsKIAl1bnNpZ25lZCBs
b25nIGk7CiAKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvcGd0YWJsZS5oIGIvaW5jbHVkZS9s
aW51eC9wZ3RhYmxlLmgKaW5kZXggMmY3MWU1ODZhYTg3Li41MTNjZjY5MzEzZTUgMTAwNjQ0Ci0t
LSBhL2luY2x1ZGUvbGludXgvcGd0YWJsZS5oCisrKyBiL2luY2x1ZGUvbGludXgvcGd0YWJsZS5o
CkBAIC0yOCw2ICsyOCwyNCBAQAogI2RlZmluZSBVU0VSX1BHVEFCTEVTX0NFSUxJTkcJMFVMCiAj
ZW5kaWYKIAorLyogRklYTUU6ICovCitzdGF0aWMgaW5saW5lIHBtZF90ICpwbWRfb2ZmKHN0cnVj
dCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIHZhKQoreworCXJldHVybiBwbWRfb2Zmc2V0
KHB1ZF9vZmZzZXQocDRkX29mZnNldChwZ2Rfb2Zmc2V0KG1tLCB2YSksIHZhKSwgdmEpLCB2YSk7
Cit9CisKK3N0YXRpYyBpbmxpbmUgcG1kX3QgKnBtZF9vZmZfayh1bnNpZ25lZCBsb25nIHZhKQor
eworCXJldHVybiBwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocDRkX29mZnNldChwZ2Rfb2Zmc2V0X2so
dmEpLCB2YSksIHZhKSwgdmEpOworfQorCitzdGF0aWMgaW5saW5lIHB0ZV90ICp2aXJ0X3RvX2tw
dGUodW5zaWduZWQgbG9uZyB2YWRkcikKK3sKKwlwbWRfdCAqcG1kID0gcG1kX29mZl9rKHZhZGRy
KTsKKworCXJldHVybiBwbWRfbm9uZSgqcG1kKSA/IE5VTEwgOiBwdGVfb2Zmc2V0X2tlcm5lbChw
bWQsIHZhZGRyKTsKK30KKwogI2lmbmRlZiBfX0hBVkVfQVJDSF9QVEVQX1NFVF9BQ0NFU1NfRkxB
R1MKIGV4dGVybiBpbnQgcHRlcF9zZXRfYWNjZXNzX2ZsYWdzKHN0cnVjdCB2bV9hcmVhX3N0cnVj
dCAqdm1hLAogCQkJCSB1bnNpZ25lZCBsb25nIGFkZHJlc3MsIHB0ZV90ICpwdGVwLAotLSAKMi4y
Ni4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpPcGVu
UklTQyBtYWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMubGlicmVjb3Jlcy5vcmcKaHR0cHM6Ly9s
aXN0cy5saWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVucmlzYwo=
