Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 37B101CD303
	for <lists+openrisc@lfdr.de>; Mon, 11 May 2020 09:41:46 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 1E26220B2A;
	Mon, 11 May 2020 09:41:46 +0200 (CEST)
Received: from bombadil.infradead.org (bombadil.infradead.org
 [198.137.202.133])
 by mail.librecores.org (Postfix) with ESMTPS id C20CA20B19
 for <openrisc@lists.librecores.org>; Sun, 10 May 2020 09:56:36 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
 d=infradead.org; s=bombadil.20170209; h=Content-Transfer-Encoding:
 MIME-Version:References:In-Reply-To:Message-Id:Date:Subject:Cc:To:From:Sender
 :Reply-To:Content-Type:Content-ID:Content-Description;
 bh=LSqF42Zxu2G13aQtIQcsgXGBWZzuhJXHsAb8CzDLkWU=; b=pbta2l0aJ/SUrCa45+U2NDgvXT
 IICTcBmEZ7uPnHDqNwGFdApg/X91LUdJNAyTY93S5Ql5WqdjuCqXhj3F99QcIXE5Rjc5w5nR3E17L
 PgFZBxJiTIDKzae6vhTdBO6Um9MIwzgGCVOvWxjOLcsxtwuiwPff8x1HngVaOj1kpq4TxLbg4GoB/
 OEN0uh8a7RRAWAOo0zw0QHdC9xtj9s9IfkwvCyK8RWTTzmxLzS9oZju4jNxZj6hcncNKIT4Kcb/Ca
 3INVpwTdKXZuUWbDf1mJNZNngumq/8MRGvh9PTVsee77Fi39DrHYEJB0rhROhGcx2d8HehANxwDJp
 6w7dl0eg==;
Received: from [2001:4bb8:180:9d3f:c70:4a89:bc61:2] (helo=localhost)
 by bombadil.infradead.org with esmtpsa (Exim 4.92.3 #3 (Red Hat Linux))
 id 1jXgot-0000ls-Vp; Sun, 10 May 2020 07:56:20 +0000
From: Christoph Hellwig <hch@lst.de>
To: Andrew Morton <akpm@linux-foundation.org>, Arnd Bergmann <arnd@arndb.de>,
 Roman Zippel <zippel@linux-m68k.org>
Date: Sun, 10 May 2020 09:55:00 +0200
Message-Id: <20200510075510.987823-22-hch@lst.de>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200510075510.987823-1-hch@lst.de>
References: <20200510075510.987823-1-hch@lst.de>
MIME-Version: 1.0
X-SRS-Rewrite: SMTP reverse-path rewritten from <hch@infradead.org> by
 bombadil.infradead.org. See http://www.infradead.org/rpr.html
X-Mailman-Approved-At: Mon, 11 May 2020 09:41:23 +0200
Subject: [OpenRISC] [PATCH 21/31] mm: rename flush_icache_user_range to
 flush_icache_user_page
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: linux-arch@vger.kernel.org, linux-xtensa@linux-xtensa.org,
 Michal Simek <monstr@monstr.eu>, Jessica Yu <jeyu@kernel.org>,
 linux-ia64@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 linux-sh@vger.kernel.org, linux-hexagon@vger.kernel.org, x86@kernel.org,
 linux-um@lists.infradead.org, linux-kernel@vger.kernel.org,
 linux-mips@vger.kernel.org, linux-mm@kvack.org,
 linux-m68k@lists.linux-m68k.org, openrisc@lists.librecores.org,
 linux-alpha@vger.kernel.org, sparclinux@vger.kernel.org,
 linux-fsdevel@vger.kernel.org, linux-riscv@lists.infradead.org,
 linuxppc-dev@lists.ozlabs.org, linux-arm-kernel@lists.infradead.org
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

VGhlIGZ1bmN0aW9uIGN1cnJlbnRseSBrbm93biBhcyBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZSBv
bmx5IG9wZXJhdGVzCm9uIGEgc2luZ2xlIHBhZ2UuICBSZW5hbWUgaXQgdG8gZmx1c2hfaWNhY2hl
X3VzZXJfcGFnZSBhcyB3ZSdsbCBuZWVkCnRoZSBuYW1lIGZsdXNoX2ljYWNoZV91c2VyX3Jhbmdl
IGZvciBzb21ldGhpbmcgZWxzZSBzb29uLgoKU2lnbmVkLW9mZi1ieTogQ2hyaXN0b3BoIEhlbGx3
aWcgPGhjaEBsc3QuZGU+Ci0tLQogYXJjaC9hbHBoYS9pbmNsdWRlL2FzbS9jYWNoZWZsdXNoLmgg
ICAgfCAxMCArKysrKy0tLS0tCiBhcmNoL2FscGhhL2tlcm5lbC9zbXAuYyAgICAgICAgICAgICAg
ICB8ICAyICstCiBhcmNoL2lhNjQvaW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oICAgICB8ICAyICst
CiBhcmNoL202OGsvaW5jbHVkZS9hc20vY2FjaGVmbHVzaF9tbS5oICB8ICA0ICsrLS0KIGFyY2gv
bTY4ay9tbS9jYWNoZS5jICAgICAgICAgICAgICAgICAgIHwgIDIgKy0KIGFyY2gvbmRzMzIvaW5j
bHVkZS9hc20vY2FjaGVmbHVzaC5oICAgIHwgIDQgKystLQogYXJjaC9uZHMzMi9tbS9jYWNoZWZs
dXNoLmMgICAgICAgICAgICAgfCAgMiArLQogYXJjaC9vcGVucmlzYy9pbmNsdWRlL2FzbS9jYWNo
ZWZsdXNoLmggfCAgMiArLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaCAg
fCAgNCArKy0tCiBhcmNoL3Bvd2VycGMvbW0vbWVtLmMgICAgICAgICAgICAgICAgICB8ICAyICst
CiBhcmNoL3Jpc2N2L2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaCAgICB8ICAzICsrLQogaW5jbHVk
ZS9hc20tZ2VuZXJpYy9jYWNoZWZsdXNoLmggICAgICAgfCAgNiArKystLS0KIGtlcm5lbC9ldmVu
dHMvdXByb2Jlcy5jICAgICAgICAgICAgICAgIHwgIDIgKy0KIDEzIGZpbGVzIGNoYW5nZWQsIDIz
IGluc2VydGlvbnMoKyksIDIyIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2FyY2gvYWxwaGEv
aW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oIGIvYXJjaC9hbHBoYS9pbmNsdWRlL2FzbS9jYWNoZWZs
dXNoLmgKaW5kZXggNjM2ZDdjYTBkMDVmNi4uOTk0NWZmNDgzZWFmNyAxMDA2NDQKLS0tIGEvYXJj
aC9hbHBoYS9pbmNsdWRlL2FzbS9jYWNoZWZsdXNoLmgKKysrIGIvYXJjaC9hbHBoYS9pbmNsdWRl
L2FzbS9jYWNoZWZsdXNoLmgKQEAgLTM1LDcgKzM1LDcgQEAgZXh0ZXJuIHZvaWQgc21wX2ltYih2
b2lkKTsKIAogZXh0ZXJuIHZvaWQgX19sb2FkX25ld19tbV9jb250ZXh0KHN0cnVjdCBtbV9zdHJ1
Y3QgKik7CiBzdGF0aWMgaW5saW5lIHZvaWQKLWZsdXNoX2ljYWNoZV91c2VyX3JhbmdlKHN0cnVj
dCB2bV9hcmVhX3N0cnVjdCAqdm1hLCBzdHJ1Y3QgcGFnZSAqcGFnZSwKK2ZsdXNoX2ljYWNoZV91
c2VyX3BhZ2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHN0cnVjdCBwYWdlICpwYWdlLAog
CQkJdW5zaWduZWQgbG9uZyBhZGRyLCBpbnQgbGVuKQogewogCWlmICh2bWEtPnZtX2ZsYWdzICYg
Vk1fRVhFQykgewpAQCAtNDYsMTYgKzQ2LDE2IEBAIGZsdXNoX2ljYWNoZV91c2VyX3JhbmdlKHN0
cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCBzdHJ1Y3QgcGFnZSAqcGFnZSwKIAkJCW1tLT5jb250
ZXh0W3NtcF9wcm9jZXNzb3JfaWQoKV0gPSAwOwogCX0KIH0KLSNkZWZpbmUgZmx1c2hfaWNhY2hl
X3VzZXJfcmFuZ2UgZmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2UKKyNkZWZpbmUgZmx1c2hfaWNhY2hl
X3VzZXJfcGFnZSBmbHVzaF9pY2FjaGVfdXNlcl9wYWdlCiAjZWxzZSAvKiBDT05GSUdfU01QICov
Ci1leHRlcm4gdm9pZCBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1
Y3QgKnZtYSwKK2V4dGVybiB2b2lkIGZsdXNoX2ljYWNoZV91c2VyX3BhZ2Uoc3RydWN0IHZtX2Fy
ZWFfc3RydWN0ICp2bWEsCiAJCXN0cnVjdCBwYWdlICpwYWdlLCB1bnNpZ25lZCBsb25nIGFkZHIs
IGludCBsZW4pOwotI2RlZmluZSBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZSBmbHVzaF9pY2FjaGVf
dXNlcl9yYW5nZQorI2RlZmluZSBmbHVzaF9pY2FjaGVfdXNlcl9wYWdlIGZsdXNoX2ljYWNoZV91
c2VyX3BhZ2UKICNlbmRpZiAvKiBDT05GSUdfU01QICovCiAKIC8qIFRoaXMgaXMgdXNlZCBvbmx5
IGluIF9fZG9fZmF1bHQgYW5kIGRvX3N3YXBfcGFnZS4gICovCiAjZGVmaW5lIGZsdXNoX2ljYWNo
ZV9wYWdlKHZtYSwgcGFnZSkgXAotCWZsdXNoX2ljYWNoZV91c2VyX3JhbmdlKCh2bWEpLCAocGFn
ZSksIDAsIDApCisJZmx1c2hfaWNhY2hlX3VzZXJfcGFnZSgodm1hKSwgKHBhZ2UpLCAwLCAwKQog
CiAjaW5jbHVkZSA8YXNtLWdlbmVyaWMvY2FjaGVmbHVzaC5oPgogCmRpZmYgLS1naXQgYS9hcmNo
L2FscGhhL2tlcm5lbC9zbXAuYyBiL2FyY2gvYWxwaGEva2VybmVsL3NtcC5jCmluZGV4IDVmOTBk
ZjMwYmUyMGEuLjUyOTk1YmY0MTNmZWEgMTAwNjQ0Ci0tLSBhL2FyY2gvYWxwaGEva2VybmVsL3Nt
cC5jCisrKyBiL2FyY2gvYWxwaGEva2VybmVsL3NtcC5jCkBAIC03NDAsNyArNzQwLDcgQEAgaXBp
X2ZsdXNoX2ljYWNoZV9wYWdlKHZvaWQgKngpCiB9CiAKIHZvaWQKLWZsdXNoX2ljYWNoZV91c2Vy
X3JhbmdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCBzdHJ1Y3QgcGFnZSAqcGFnZSwKK2Zs
dXNoX2ljYWNoZV91c2VyX3BhZ2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHN0cnVjdCBw
YWdlICpwYWdlLAogCQkJdW5zaWduZWQgbG9uZyBhZGRyLCBpbnQgbGVuKQogewogCXN0cnVjdCBt
bV9zdHJ1Y3QgKm1tID0gdm1hLT52bV9tbTsKZGlmZiAtLWdpdCBhL2FyY2gvaWE2NC9pbmNsdWRl
L2FzbS9jYWNoZWZsdXNoLmggYi9hcmNoL2lhNjQvaW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oCmlu
ZGV4IGE4ZjFjODZhYzI0MmEuLjcwOGMwZmE1ZDk3NWUgMTAwNjQ0Ci0tLSBhL2FyY2gvaWE2NC9p
bmNsdWRlL2FzbS9jYWNoZWZsdXNoLmgKKysrIGIvYXJjaC9pYTY0L2luY2x1ZGUvYXNtL2NhY2hl
Zmx1c2guaApAQCAtMjIsNyArMjIsNyBAQCBleHRlcm4gdm9pZCBmbHVzaF9pY2FjaGVfcmFuZ2Uo
dW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBlbmQpOwogI2RlZmluZSBmbHVzaF9p
Y2FjaGVfcmFuZ2UgZmx1c2hfaWNhY2hlX3JhbmdlCiBleHRlcm4gdm9pZCBjbGZsdXNoX2NhY2hl
X3JhbmdlKHZvaWQgKmFkZHIsIGludCBzaXplKTsKIAotI2RlZmluZSBmbHVzaF9pY2FjaGVfdXNl
cl9yYW5nZSh2bWEsIHBhZ2UsIHVzZXJfYWRkciwgbGVuKQkJCQkJXAorI2RlZmluZSBmbHVzaF9p
Y2FjaGVfdXNlcl9wYWdlKHZtYSwgcGFnZSwgdXNlcl9hZGRyLCBsZW4pCQkJCQlcCiBkbyB7CQkJ
CQkJCQkJCQkJXAogCXVuc2lnbmVkIGxvbmcgX2FkZHIgPSAodW5zaWduZWQgbG9uZykgcGFnZV9h
ZGRyZXNzKHBhZ2UpICsgKCh1c2VyX2FkZHIpICYgflBBR0VfTUFTSyk7CVwKIAlmbHVzaF9pY2Fj
aGVfcmFuZ2UoX2FkZHIsIF9hZGRyICsgKGxlbikpOwkJCQkJCVwKZGlmZiAtLWdpdCBhL2FyY2gv
bTY4ay9pbmNsdWRlL2FzbS9jYWNoZWZsdXNoX21tLmggYi9hcmNoL202OGsvaW5jbHVkZS9hc20v
Y2FjaGVmbHVzaF9tbS5oCmluZGV4IDFlMjU0NGVjYWY4OGMuLjk1Mzc2YmY4NGZhYTUgMTAwNjQ0
Ci0tLSBhL2FyY2gvbTY4ay9pbmNsdWRlL2FzbS9jYWNoZWZsdXNoX21tLmgKKysrIGIvYXJjaC9t
NjhrL2luY2x1ZGUvYXNtL2NhY2hlZmx1c2hfbW0uaApAQCAtMjU0LDcgKzI1NCw3IEBAIHN0YXRp
YyBpbmxpbmUgdm9pZCBfX2ZsdXNoX3BhZ2VfdG9fcmFtKHZvaWQgKnZhZGRyKQogI2RlZmluZSBm
bHVzaF9kY2FjaGVfbW1hcF91bmxvY2sobWFwcGluZykJZG8geyB9IHdoaWxlICgwKQogI2RlZmlu
ZSBmbHVzaF9pY2FjaGVfcGFnZSh2bWEsIHBhZ2UpCV9fZmx1c2hfcGFnZV90b19yYW0ocGFnZV9h
ZGRyZXNzKHBhZ2UpKQogCi1leHRlcm4gdm9pZCBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZShzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHBhZ2UgKnBhZ2UsCitleHRlcm4gdm9pZCBm
bHVzaF9pY2FjaGVfdXNlcl9wYWdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCBzdHJ1Y3Qg
cGFnZSAqcGFnZSwKIAkJCQkgICAgdW5zaWduZWQgbG9uZyBhZGRyLCBpbnQgbGVuKTsKIGV4dGVy
biB2b2lkIGZsdXNoX2ljYWNoZV9yYW5nZSh1bnNpZ25lZCBsb25nIGFkZHJlc3MsIHVuc2lnbmVk
IGxvbmcgZW5kYWRkcik7CiAKQEAgLTI2NCw3ICsyNjQsNyBAQCBzdGF0aWMgaW5saW5lIHZvaWQg
Y29weV90b191c2VyX3BhZ2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiB7CiAJZmx1c2hf
Y2FjaGVfcGFnZSh2bWEsIHZhZGRyLCBwYWdlX3RvX3BmbihwYWdlKSk7CiAJbWVtY3B5KGRzdCwg
c3JjLCBsZW4pOwotCWZsdXNoX2ljYWNoZV91c2VyX3JhbmdlKHZtYSwgcGFnZSwgdmFkZHIsIGxl
bik7CisJZmx1c2hfaWNhY2hlX3VzZXJfcGFnZSh2bWEsIHBhZ2UsIHZhZGRyLCBsZW4pOwogfQog
c3RhdGljIGlubGluZSB2b2lkIGNvcHlfZnJvbV91c2VyX3BhZ2Uoc3RydWN0IHZtX2FyZWFfc3Ry
dWN0ICp2bWEsCiAJCQkJICAgICAgIHN0cnVjdCBwYWdlICpwYWdlLCB1bnNpZ25lZCBsb25nIHZh
ZGRyLApkaWZmIC0tZ2l0IGEvYXJjaC9tNjhrL21tL2NhY2hlLmMgYi9hcmNoL202OGsvbW0vY2Fj
aGUuYwppbmRleCAwNzllNjQ4OThlNmE1Li45OTA1N2NkNWZmN2YxIDEwMDY0NAotLS0gYS9hcmNo
L202OGsvbW0vY2FjaGUuYworKysgYi9hcmNoL202OGsvbW0vY2FjaGUuYwpAQCAtMTA2LDcgKzEw
Niw3IEBAIHZvaWQgZmx1c2hfaWNhY2hlX3JhbmdlKHVuc2lnbmVkIGxvbmcgYWRkcmVzcywgdW5z
aWduZWQgbG9uZyBlbmRhZGRyKQogfQogRVhQT1JUX1NZTUJPTChmbHVzaF9pY2FjaGVfcmFuZ2Up
OwogCi12b2lkIGZsdXNoX2ljYWNoZV91c2VyX3JhbmdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAq
dm1hLCBzdHJ1Y3QgcGFnZSAqcGFnZSwKK3ZvaWQgZmx1c2hfaWNhY2hlX3VzZXJfcGFnZShzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHBhZ2UgKnBhZ2UsCiAJCQkgICAgIHVuc2ln
bmVkIGxvbmcgYWRkciwgaW50IGxlbikKIHsKIAlpZiAoQ1BVX0lTX0NPTERGSVJFKSB7CmRpZmYg
LS1naXQgYS9hcmNoL25kczMyL2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaCBiL2FyY2gvbmRzMzIv
aW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oCmluZGV4IGNhZGRkZWQ1NmU3N2YuLjdkNjgyNGY3YzBl
OGQgMTAwNjQ0Ci0tLSBhL2FyY2gvbmRzMzIvaW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oCisrKyBi
L2FyY2gvbmRzMzIvaW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oCkBAIC00NCw5ICs0NCw5IEBAIHZv
aWQgaW52YWxpZGF0ZV9rZXJuZWxfdm1hcF9yYW5nZSh2b2lkICphZGRyLCBpbnQgc2l6ZSk7CiAj
ZGVmaW5lIGZsdXNoX2RjYWNoZV9tbWFwX3VubG9jayhtYXBwaW5nKSB4YV91bmxvY2tfaXJxKCYo
bWFwcGluZyktPmlfcGFnZXMpCiAKICNlbHNlCi12b2lkIGZsdXNoX2ljYWNoZV91c2VyX3Jhbmdl
KHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCBzdHJ1Y3QgcGFnZSAqcGFnZSwKK3ZvaWQgZmx1
c2hfaWNhY2hlX3VzZXJfcGFnZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHBh
Z2UgKnBhZ2UsCiAJICAgICAgICAgICAgICAgICAgICAgdW5zaWduZWQgbG9uZyBhZGRyLCBpbnQg
bGVuKTsKLSNkZWZpbmUgZmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2UgZmx1c2hfaWNhY2hlX3VzZXJf
cmFuZ2UKKyNkZWZpbmUgZmx1c2hfaWNhY2hlX3VzZXJfcGFnZSBmbHVzaF9pY2FjaGVfdXNlcl9w
YWdlCiAKICNpbmNsdWRlIDxhc20tZ2VuZXJpYy9jYWNoZWZsdXNoLmg+CiAjZW5kaWYKZGlmZiAt
LWdpdCBhL2FyY2gvbmRzMzIvbW0vY2FjaGVmbHVzaC5jIGIvYXJjaC9uZHMzMi9tbS9jYWNoZWZs
dXNoLmMKaW5kZXggOGYxNjhiMzMwNjVmYS4uNmViOThhN2FkMjdkMiAxMDA2NDQKLS0tIGEvYXJj
aC9uZHMzMi9tbS9jYWNoZWZsdXNoLmMKKysrIGIvYXJjaC9uZHMzMi9tbS9jYWNoZWZsdXNoLmMK
QEAgLTM2LDcgKzM2LDcgQEAgdm9pZCBmbHVzaF9pY2FjaGVfcGFnZShzdHJ1Y3Qgdm1fYXJlYV9z
dHJ1Y3QgKnZtYSwgc3RydWN0IHBhZ2UgKnBhZ2UpCiAJbG9jYWxfaXJxX3Jlc3RvcmUoZmxhZ3Mp
OwogfQogCi12b2lkIGZsdXNoX2ljYWNoZV91c2VyX3JhbmdlKHN0cnVjdCB2bV9hcmVhX3N0cnVj
dCAqdm1hLCBzdHJ1Y3QgcGFnZSAqcGFnZSwKK3ZvaWQgZmx1c2hfaWNhY2hlX3VzZXJfcGFnZShz
dHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHBhZ2UgKnBhZ2UsCiAJICAgICAgICAg
ICAgICAgICAgICAgdW5zaWduZWQgbG9uZyBhZGRyLCBpbnQgbGVuKQogewogCXVuc2lnbmVkIGxv
bmcga2FkZHI7CmRpZmYgLS1naXQgYS9hcmNoL29wZW5yaXNjL2luY2x1ZGUvYXNtL2NhY2hlZmx1
c2guaCBiL2FyY2gvb3BlbnJpc2MvaW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oCmluZGV4IDc0ZDFm
Y2U0ZTg4MzkuLmVlYWM0MGQ0YTg1NDcgMTAwNjQ0Ci0tLSBhL2FyY2gvb3BlbnJpc2MvaW5jbHVk
ZS9hc20vY2FjaGVmbHVzaC5oCisrKyBiL2FyY2gvb3BlbnJpc2MvaW5jbHVkZS9hc20vY2FjaGVm
bHVzaC5oCkBAIC02Miw3ICs2Miw3IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBmbHVzaF9kY2FjaGVf
cGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKIAljbGVhcl9iaXQoUEdfZGNfY2xlYW4sICZwYWdlLT5m
bGFncyk7CiB9CiAKLSNkZWZpbmUgZmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2Uodm1hLCBwYWdlLCBh
ZGRyLCBsZW4pCVwKKyNkZWZpbmUgZmx1c2hfaWNhY2hlX3VzZXJfcGFnZSh2bWEsIHBhZ2UsIGFk
ZHIsIGxlbikJXAogZG8gewkJCQkJCQlcCiAJaWYgKHZtYS0+dm1fZmxhZ3MgJiBWTV9FWEVDKQkJ
CVwKIAkJc3luY19pY2FjaGVfZGNhY2hlKHBhZ2UpOwkJXApkaWZmIC0tZ2l0IGEvYXJjaC9wb3dl
cnBjL2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaCBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9j
YWNoZWZsdXNoLmgKaW5kZXggZTY4MmM4ZTEwZTkwMy4uZGU2MDBiOTE1YTNjNSAxMDA2NDQKLS0t
IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2NhY2hlZmx1c2guaAorKysgYi9hcmNoL3Bvd2Vy
cGMvaW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oCkBAIC0yOCw5ICsyOCw5IEBAIGV4dGVybiB2b2lk
IGZsdXNoX2RjYWNoZV9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKTsKIHZvaWQgZmx1c2hfaWNhY2hl
X3JhbmdlKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgc3RvcCk7CiAjZGVmaW5l
IGZsdXNoX2ljYWNoZV9yYW5nZSBmbHVzaF9pY2FjaGVfcmFuZ2UKIAotdm9pZCBmbHVzaF9pY2Fj
aGVfdXNlcl9yYW5nZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHBhZ2UgKnBh
Z2UsCit2b2lkIGZsdXNoX2ljYWNoZV91c2VyX3BhZ2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2
bWEsIHN0cnVjdCBwYWdlICpwYWdlLAogCQl1bnNpZ25lZCBsb25nIGFkZHIsIGludCBsZW4pOwot
I2RlZmluZSBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZSBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZQor
I2RlZmluZSBmbHVzaF9pY2FjaGVfdXNlcl9wYWdlIGZsdXNoX2ljYWNoZV91c2VyX3BhZ2UKIAog
dm9pZCBmbHVzaF9kY2FjaGVfaWNhY2hlX3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpOwogdm9pZCBf
X2ZsdXNoX2RjYWNoZV9pY2FjaGUodm9pZCAqcGFnZSk7CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2Vy
cGMvbW0vbWVtLmMgYi9hcmNoL3Bvd2VycGMvbW0vbWVtLmMKaW5kZXggZjBkMWJmMGE4ZTE0Zi4u
ZDFhZDBiOWIxOTI4MSAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL21tL21lbS5jCisrKyBiL2Fy
Y2gvcG93ZXJwYy9tbS9tZW0uYwpAQCAtNTc4LDcgKzU3OCw3IEBAIHZvaWQgY29weV91c2VyX3Bh
Z2Uodm9pZCAqdnRvLCB2b2lkICp2ZnJvbSwgdW5zaWduZWQgbG9uZyB2YWRkciwKIAlmbHVzaF9k
Y2FjaGVfcGFnZShwZyk7CiB9CiAKLXZvaWQgZmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2Uoc3RydWN0
IHZtX2FyZWFfc3RydWN0ICp2bWEsIHN0cnVjdCBwYWdlICpwYWdlLAordm9pZCBmbHVzaF9pY2Fj
aGVfdXNlcl9wYWdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCBzdHJ1Y3QgcGFnZSAqcGFn
ZSwKIAkJCSAgICAgdW5zaWduZWQgbG9uZyBhZGRyLCBpbnQgbGVuKQogewogCXVuc2lnbmVkIGxv
bmcgbWFkZHI7CmRpZmYgLS1naXQgYS9hcmNoL3Jpc2N2L2luY2x1ZGUvYXNtL2NhY2hlZmx1c2gu
aCBiL2FyY2gvcmlzY3YvaW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oCmluZGV4IGExNjdiNGZiZGYw
MDcuLjIzZmY3MDM1MDk5MjYgMTAwNjQ0Ci0tLSBhL2FyY2gvcmlzY3YvaW5jbHVkZS9hc20vY2Fj
aGVmbHVzaC5oCisrKyBiL2FyY2gvcmlzY3YvaW5jbHVkZS9hc20vY2FjaGVmbHVzaC5oCkBAIC0y
Nyw3ICsyNyw4IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBmbHVzaF9kY2FjaGVfcGFnZShzdHJ1Y3Qg
cGFnZSAqcGFnZSkKICAqIHNvIGluc3RlYWQgd2UganVzdCBmbHVzaCB0aGUgd2hvbGUgdGhpbmcu
CiAgKi8KICNkZWZpbmUgZmx1c2hfaWNhY2hlX3JhbmdlKHN0YXJ0LCBlbmQpIGZsdXNoX2ljYWNo
ZV9hbGwoKQotI2RlZmluZSBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZSh2bWEsIHBnLCBhZGRyLCBs
ZW4pIGZsdXNoX2ljYWNoZV9tbSh2bWEtPnZtX21tLCAwKQorI2RlZmluZSBmbHVzaF9pY2FjaGVf
dXNlcl9wYWdlKHZtYSwgcGcsIGFkZHIsIGxlbikgXAorCWZsdXNoX2ljYWNoZV9tbSh2bWEtPnZt
X21tLCAwKQogCiAjaWZuZGVmIENPTkZJR19TTVAKIApkaWZmIC0tZ2l0IGEvaW5jbHVkZS9hc20t
Z2VuZXJpYy9jYWNoZWZsdXNoLmggYi9pbmNsdWRlL2FzbS1nZW5lcmljL2NhY2hlZmx1c2guaApp
bmRleCBiYmJiNGQ0ZWY2NTE2Li4yYzk2ODZmZWZiNzE1IDEwMDY0NAotLS0gYS9pbmNsdWRlL2Fz
bS1nZW5lcmljL2NhY2hlZmx1c2guaAorKysgYi9pbmNsdWRlL2FzbS1nZW5lcmljL2NhY2hlZmx1
c2guaApAQCAtNzMsOCArNzMsOCBAQCBzdGF0aWMgaW5saW5lIHZvaWQgZmx1c2hfaWNhY2hlX3Bh
Z2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiB9CiAjZW5kaWYKIAotI2lmbmRlZiBmbHVz
aF9pY2FjaGVfdXNlcl9yYW5nZQotc3RhdGljIGlubGluZSB2b2lkIGZsdXNoX2ljYWNoZV91c2Vy
X3JhbmdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLAorI2lmbmRlZiBmbHVzaF9pY2FjaGVf
dXNlcl9wYWdlCitzdGF0aWMgaW5saW5lIHZvaWQgZmx1c2hfaWNhY2hlX3VzZXJfcGFnZShzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwKIAkJCQkJICAgc3RydWN0IHBhZ2UgKnBhZ2UsCiAJCQkJ
CSAgIHVuc2lnbmVkIGxvbmcgYWRkciwgaW50IGxlbikKIHsKQEAgLTk3LDcgKzk3LDcgQEAgc3Rh
dGljIGlubGluZSB2b2lkIGZsdXNoX2NhY2hlX3Z1bm1hcCh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1
bnNpZ25lZCBsb25nIGVuZCkKICNkZWZpbmUgY29weV90b191c2VyX3BhZ2Uodm1hLCBwYWdlLCB2
YWRkciwgZHN0LCBzcmMsIGxlbikJXAogCWRvIHsgXAogCQltZW1jcHkoZHN0LCBzcmMsIGxlbik7
IFwKLQkJZmx1c2hfaWNhY2hlX3VzZXJfcmFuZ2Uodm1hLCBwYWdlLCB2YWRkciwgbGVuKTsgXAor
CQlmbHVzaF9pY2FjaGVfdXNlcl9wYWdlKHZtYSwgcGFnZSwgdmFkZHIsIGxlbik7IFwKIAl9IHdo
aWxlICgwKQogI2VuZGlmCiAKZGlmZiAtLWdpdCBhL2tlcm5lbC9ldmVudHMvdXByb2Jlcy5jIGIv
a2VybmVsL2V2ZW50cy91cHJvYmVzLmMKaW5kZXggZWNlN2UxM2Y2ZTRhYy4uMmU1ZWZmYmRhODZi
MCAxMDA2NDQKLS0tIGEva2VybmVsL2V2ZW50cy91cHJvYmVzLmMKKysrIGIva2VybmVsL2V2ZW50
cy91cHJvYmVzLmMKQEAgLTE2NzQsNyArMTY3NCw3IEBAIHZvaWQgX193ZWFrIGFyY2hfdXByb2Jl
X2NvcHlfaXhvbChzdHJ1Y3QgcGFnZSAqcGFnZSwgdW5zaWduZWQgbG9uZyB2YWRkciwKIAljb3B5
X3RvX3BhZ2UocGFnZSwgdmFkZHIsIHNyYywgbGVuKTsKIAogCS8qCi0JICogV2UgcHJvYmFibHkg
bmVlZCBmbHVzaF9pY2FjaGVfdXNlcl9yYW5nZSgpIGJ1dCBpdCBuZWVkcyB2bWEuCisJICogV2Ug
cHJvYmFibHkgbmVlZCBmbHVzaF9pY2FjaGVfdXNlcl9wYWdlKCkgYnV0IGl0IG5lZWRzIHZtYS4K
IAkgKiBUaGlzIHNob3VsZCB3b3JrIG9uIG1vc3Qgb2YgYXJjaGl0ZWN0dXJlcyBieSBkZWZhdWx0
LiBJZgogCSAqIGFyY2hpdGVjdHVyZSBuZWVkcyB0byBkbyBzb21ldGhpbmcgZGlmZmVyZW50IGl0
IGNhbiBkZWZpbmUKIAkgKiBpdHMgb3duIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uLgotLSAKMi4y
Ni4yCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpPcGVu
UklTQyBtYWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMubGlicmVjb3Jlcy5vcmcKaHR0cHM6Ly9s
aXN0cy5saWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVucmlzYwo=
