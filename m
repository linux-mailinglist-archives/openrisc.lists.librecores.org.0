Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id EA7D01B20B3
	for <lists+openrisc@lfdr.de>; Tue, 21 Apr 2020 10:01:56 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id B4F5A2092B;
	Tue, 21 Apr 2020 10:01:56 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id BB342202FF
 for <openrisc@lists.librecores.org>; Tue, 14 Apr 2020 17:35:29 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 303592076B;
 Tue, 14 Apr 2020 15:35:18 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1586878528;
 bh=xybz2njGS0KYPxQSecxGnQcxidFJBdCKdfbeg19ZlDc=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=o72DJiQDkLwNUJ81JIRGxwTzZ6vs9MwQPcwQDZkZoXP1qpH9T1GDBGYTYuOJjgakb
 nsFYp81Rjl4iAlRez73fYosy4CQtwQrvO8u07E2bzRlw9CHOL/19Doa4OOYYcNYbR5
 z50Dz52RfJU899XIaYSQwuwod45JX6CCbL5IO4Pw=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Tue, 14 Apr 2020 18:34:43 +0300
Message-Id: <20200414153455.21744-3-rppt@kernel.org>
X-Mailer: git-send-email 2.25.1
In-Reply-To: <20200414153455.21744-1-rppt@kernel.org>
References: <20200414153455.21744-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Tue, 21 Apr 2020 10:01:35 +0200
Subject: [OpenRISC] [PATCH v4 02/14] arm: add support for folded p4d page
 tables
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 Geert Uytterhoeven <geert+renesas@glider.be>, linux-sh@vger.kernel.org,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>, linux-mm@kvack.org,
 Paul Mackerras <paulus@samba.org>, linux-hexagon@vger.kernel.org,
 Will Deacon <will@kernel.org>, kvmarm@lists.cs.columbia.edu,
 Jonas Bonn <jonas@southpole.se>, linux-arch@vger.kernel.org,
 Brian Cain <bcain@codeaurora.org>, Marc Zyngier <maz@kernel.org>,
 Russell King <linux@armlinux.org.uk>, Ley Foon Tan <ley.foon.tan@intel.com>,
 Mike Rapoport <rppt@linux.ibm.com>, Catalin Marinas <catalin.marinas@arm.com>,
 Julien Thierry <julien.thierry.kdev@gmail.com>,
 uclinux-h8-devel@lists.sourceforge.jp, Fenghua Yu <fenghua.yu@intel.com>,
 Arnd Bergmann <arnd@arndb.de>, Suzuki K Poulose <suzuki.poulose@arm.com>,
 kvm-ppc@vger.kernel.org, openrisc@lists.librecores.org,
 Guan Xuetao <gxt@pku.edu.cn>, linux-arm-kernel@lists.infradead.org,
 Christophe Leroy <christophe.leroy@c-s.fr>, Tony Luck <tony.luck@intel.com>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, linux-kernel@vger.kernel.org,
 James Morse <james.morse@arm.com>, Michael Ellerman <mpe@ellerman.id.au>,
 nios2-dev@lists.rocketboards.org, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKSW1wbGVtZW50IHByaW1p
dGl2ZXMgbmVjZXNzYXJ5IGZvciB0aGUgNHRoIGxldmVsIGZvbGRpbmcsIGFkZCB3YWxrcyBvZiBw
NGQKbGV2ZWwgd2hlcmUgYXBwcm9wcmlhdGUsIGFuZCByZW1vdmUgX19BUkNIX1VTRV81TEVWRUxf
SEFDSy4KClNpZ25lZC1vZmYtYnk6IE1pa2UgUmFwb3BvcnQgPHJwcHRAbGludXguaWJtLmNvbT4K
LS0tCiBhcmNoL2FybS9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggICAgIHwgIDEgLQogYXJjaC9hcm0v
bGliL3VhY2Nlc3Nfd2l0aF9tZW1jcHkuYyB8ICA3ICsrKysrLQogYXJjaC9hcm0vbWFjaC1zYTEx
MDAvYXNzYWJldC5jICAgICB8ICAyICstCiBhcmNoL2FybS9tbS9kdW1wLmMgICAgICAgICAgICAg
ICAgIHwgMjkgKysrKysrKysrKysrKysrKystLS0tLQogYXJjaC9hcm0vbW0vZmF1bHQtYXJtdi5j
ICAgICAgICAgICB8ICA3ICsrKysrLQogYXJjaC9hcm0vbW0vZmF1bHQuYyAgICAgICAgICAgICAg
ICB8IDIyICsrKysrKysrKystLS0tLS0KIGFyY2gvYXJtL21tL2lkbWFwLmMgICAgICAgICAgICAg
ICAgfCAgMyArKy0KIGFyY2gvYXJtL21tL2luaXQuYyAgICAgICAgICAgICAgICAgfCAgMiArLQog
YXJjaC9hcm0vbW0vaW9yZW1hcC5jICAgICAgICAgICAgICB8IDEyICsrKysrKy0tLQogYXJjaC9h
cm0vbW0vbW0uaCAgICAgICAgICAgICAgICAgICB8ICAyICstCiBhcmNoL2FybS9tbS9tbXUuYyAg
ICAgICAgICAgICAgICAgIHwgMzUgKysrKysrKysrKysrKysrKysrKysrLS0tLS0KIGFyY2gvYXJt
L21tL3BnZC5jICAgICAgICAgICAgICAgICAgfCA0MCArKysrKysrKysrKysrKysrKysrKysrKyst
LS0tLS0KIDEyIGZpbGVzIGNoYW5nZWQsIDEyNSBpbnNlcnRpb25zKCspLCAzNyBkZWxldGlvbnMo
LSkKCmRpZmYgLS1naXQgYS9hcmNoL2FybS9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggYi9hcmNoL2Fy
bS9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKaW5kZXggYmVmYzhmY2VjOThmLi5mYmEyMDYwN2M1M2Mg
MTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNoL2Fy
bS9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKQEAgLTE3LDcgKzE3LDYgQEAKIAogI2Vsc2UKIAotI2Rl
ZmluZSBfX0FSQ0hfVVNFXzVMRVZFTF9IQUNLCiAjaW5jbHVkZSA8YXNtLWdlbmVyaWMvcGd0YWJs
ZS1ub3B1ZC5oPgogI2luY2x1ZGUgPGFzbS9tZW1vcnkuaD4KICNpbmNsdWRlIDxhc20vcGd0YWJs
ZS1od2RlZi5oPgpkaWZmIC0tZ2l0IGEvYXJjaC9hcm0vbGliL3VhY2Nlc3Nfd2l0aF9tZW1jcHku
YyBiL2FyY2gvYXJtL2xpYi91YWNjZXNzX3dpdGhfbWVtY3B5LmMKaW5kZXggYzk0NTA5ODJhMTU1
Li5kNzJiMTRjOTY2NzAgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL2xpYi91YWNjZXNzX3dpdGhfbWVt
Y3B5LmMKKysrIGIvYXJjaC9hcm0vbGliL3VhY2Nlc3Nfd2l0aF9tZW1jcHkuYwpAQCAtMjQsNiAr
MjQsNyBAQCBwaW5fcGFnZV9mb3Jfd3JpdGUoY29uc3Qgdm9pZCBfX3VzZXIgKl9hZGRyLCBwdGVf
dCAqKnB0ZXAsIHNwaW5sb2NrX3QgKipwdGxwKQogewogCXVuc2lnbmVkIGxvbmcgYWRkciA9ICh1
bnNpZ25lZCBsb25nKV9hZGRyOwogCXBnZF90ICpwZ2Q7CisJcDRkX3QgKnA0ZDsKIAlwbWRfdCAq
cG1kOwogCXB0ZV90ICpwdGU7CiAJcHVkX3QgKnB1ZDsKQEAgLTMzLDcgKzM0LDExIEBAIHBpbl9w
YWdlX2Zvcl93cml0ZShjb25zdCB2b2lkIF9fdXNlciAqX2FkZHIsIHB0ZV90ICoqcHRlcCwgc3Bp
bmxvY2tfdCAqKnB0bHApCiAJaWYgKHVubGlrZWx5KHBnZF9ub25lKCpwZ2QpIHx8IHBnZF9iYWQo
KnBnZCkpKQogCQlyZXR1cm4gMDsKIAotCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwlw
NGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcik7CisJaWYgKHVubGlrZWx5KHA0ZF9ub25lKCpwNGQp
IHx8IHA0ZF9iYWQoKnA0ZCkpKQorCQlyZXR1cm4gMDsKKworCXB1ZCA9IHB1ZF9vZmZzZXQocDRk
LCBhZGRyKTsKIAlpZiAodW5saWtlbHkocHVkX25vbmUoKnB1ZCkgfHwgcHVkX2JhZCgqcHVkKSkp
CiAJCXJldHVybiAwOwogCmRpZmYgLS1naXQgYS9hcmNoL2FybS9tYWNoLXNhMTEwMC9hc3NhYmV0
LmMgYi9hcmNoL2FybS9tYWNoLXNhMTEwMC9hc3NhYmV0LmMKaW5kZXggZDk2YTEwMWU1NTA0Li4w
NjMxYTdiMDI2NzggMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL21hY2gtc2ExMTAwL2Fzc2FiZXQuYwor
KysgYi9hcmNoL2FybS9tYWNoLXNhMTEwMC9hc3NhYmV0LmMKQEAgLTYzMyw3ICs2MzMsNyBAQCBz
dGF0aWMgdm9pZCBfX2luaXQgbWFwX3NhMTEwMF9ncGlvX3JlZ3MoIHZvaWQgKQogCWludCBwcm90
ID0gUE1EX1RZUEVfU0VDVCB8IFBNRF9TRUNUX0FQX1dSSVRFIHwgUE1EX0RPTUFJTihET01BSU5f
SU8pOwogCXBtZF90ICpwbWQ7CiAKLQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocGdkX29m
ZnNldF9rKHZpcnQpLCB2aXJ0KSwgdmlydCk7CisJcG1kID0gcG1kX29mZnNldChwdWRfb2Zmc2V0
KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKHZpcnQpLCB2aXJ0KSwgdmlydCksIHZpcnQpOwogCSpw
bWQgPSBfX3BtZChwaHlzIHwgcHJvdCk7CiAJZmx1c2hfcG1kX2VudHJ5KHBtZCk7CiB9CmRpZmYg
LS1naXQgYS9hcmNoL2FybS9tbS9kdW1wLmMgYi9hcmNoL2FybS9tbS9kdW1wLmMKaW5kZXggN2Q2
MjkxZjIzMjUxLi42Nzc1NDlkNjg1NGMgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL21tL2R1bXAuYwor
KysgYi9hcmNoL2FybS9tbS9kdW1wLmMKQEAgLTIwNyw2ICsyMDcsNyBAQCBzdHJ1Y3QgcGdfbGV2
ZWwgewogc3RhdGljIHN0cnVjdCBwZ19sZXZlbCBwZ19sZXZlbFtdID0gewogCXsKIAl9LCB7IC8q
IHBnZCAqLworCX0sIHsgLyogcDRkICovCiAJfSwgeyAvKiBwdWQgKi8KIAl9LCB7IC8qIHBtZCAq
LwogCQkuYml0cwk9IHNlY3Rpb25fYml0cywKQEAgLTMwOCw3ICszMDksNyBAQCBzdGF0aWMgdm9p
ZCB3YWxrX3B0ZShzdHJ1Y3QgcGdfc3RhdGUgKnN0LCBwbWRfdCAqcG1kLCB1bnNpZ25lZCBsb25n
IHN0YXJ0LAogCiAJZm9yIChpID0gMDsgaSA8IFBUUlNfUEVSX1BURTsgaSsrLCBwdGUrKykgewog
CQlhZGRyID0gc3RhcnQgKyBpICogUEFHRV9TSVpFOwotCQlub3RlX3BhZ2Uoc3QsIGFkZHIsIDQs
IHB0ZV92YWwoKnB0ZSksIGRvbWFpbik7CisJCW5vdGVfcGFnZShzdCwgYWRkciwgNSwgcHRlX3Zh
bCgqcHRlKSwgZG9tYWluKTsKIAl9CiB9CiAKQEAgLTM1MCwxNCArMzUxLDE0IEBAIHN0YXRpYyB2
b2lkIHdhbGtfcG1kKHN0cnVjdCBwZ19zdGF0ZSAqc3QsIHB1ZF90ICpwdWQsIHVuc2lnbmVkIGxv
bmcgc3RhcnQpCiAJCQlhZGRyICs9IFNFQ1RJT05fU0laRTsKIAkJCXBtZCsrOwogCQkJZG9tYWlu
ID0gZ2V0X2RvbWFpbl9uYW1lKHBtZCk7Ci0JCQlub3RlX3BhZ2Uoc3QsIGFkZHIsIDMsIHBtZF92
YWwoKnBtZCksIGRvbWFpbik7CisJCQlub3RlX3BhZ2Uoc3QsIGFkZHIsIDQsIHBtZF92YWwoKnBt
ZCksIGRvbWFpbik7CiAJCX0KIAl9CiB9CiAKLXN0YXRpYyB2b2lkIHdhbGtfcHVkKHN0cnVjdCBw
Z19zdGF0ZSAqc3QsIHBnZF90ICpwZ2QsIHVuc2lnbmVkIGxvbmcgc3RhcnQpCitzdGF0aWMgdm9p
ZCB3YWxrX3B1ZChzdHJ1Y3QgcGdfc3RhdGUgKnN0LCBwNGRfdCAqcDRkLCB1bnNpZ25lZCBsb25n
IHN0YXJ0KQogewotCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgMCk7CisJcHVkX3QgKnB1
ZCA9IHB1ZF9vZmZzZXQocDRkLCAwKTsKIAl1bnNpZ25lZCBsb25nIGFkZHI7CiAJdW5zaWduZWQg
aTsKIApAQCAtMzY2LDcgKzM2NywyMyBAQCBzdGF0aWMgdm9pZCB3YWxrX3B1ZChzdHJ1Y3QgcGdf
c3RhdGUgKnN0LCBwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIHN0YXJ0KQogCQlpZiAoIXB1ZF9u
b25lKCpwdWQpKSB7CiAJCQl3YWxrX3BtZChzdCwgcHVkLCBhZGRyKTsKIAkJfSBlbHNlIHsKLQkJ
CW5vdGVfcGFnZShzdCwgYWRkciwgMiwgcHVkX3ZhbCgqcHVkKSwgTlVMTCk7CisJCQlub3RlX3Bh
Z2Uoc3QsIGFkZHIsIDMsIHB1ZF92YWwoKnB1ZCksIE5VTEwpOworCQl9CisJfQorfQorCitzdGF0
aWMgdm9pZCB3YWxrX3A0ZChzdHJ1Y3QgcGdfc3RhdGUgKnN0LCBwZ2RfdCAqcGdkLCB1bnNpZ25l
ZCBsb25nIHN0YXJ0KQoreworCXA0ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgMCk7CisJdW5z
aWduZWQgbG9uZyBhZGRyOworCXVuc2lnbmVkIGk7CisKKwlmb3IgKGkgPSAwOyBpIDwgUFRSU19Q
RVJfUDREOyBpKyssIHA0ZCsrKSB7CisJCWFkZHIgPSBzdGFydCArIGkgKiBQNERfU0laRTsKKwkJ
aWYgKCFwNGRfbm9uZSgqcDRkKSkgeworCQkJd2Fsa19wdWQoc3QsIHA0ZCwgYWRkcik7CisJCX0g
ZWxzZSB7CisJCQlub3RlX3BhZ2Uoc3QsIGFkZHIsIDIsIHA0ZF92YWwoKnA0ZCksIE5VTEwpOwog
CQl9CiAJfQogfQpAQCAtMzgxLDcgKzM5OCw3IEBAIHN0YXRpYyB2b2lkIHdhbGtfcGdkKHN0cnVj
dCBwZ19zdGF0ZSAqc3QsIHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLAogCWZvciAoaSA9IDA7IGkgPCBQ
VFJTX1BFUl9QR0Q7IGkrKywgcGdkKyspIHsKIAkJYWRkciA9IHN0YXJ0ICsgaSAqIFBHRElSX1NJ
WkU7CiAJCWlmICghcGdkX25vbmUoKnBnZCkpIHsKLQkJCXdhbGtfcHVkKHN0LCBwZ2QsIGFkZHIp
OworCQkJd2Fsa19wNGQoc3QsIHBnZCwgYWRkcik7CiAJCX0gZWxzZSB7CiAJCQlub3RlX3BhZ2Uo
c3QsIGFkZHIsIDEsIHBnZF92YWwoKnBnZCksIE5VTEwpOwogCQl9CmRpZmYgLS1naXQgYS9hcmNo
L2FybS9tbS9mYXVsdC1hcm12LmMgYi9hcmNoL2FybS9tbS9mYXVsdC1hcm12LmMKaW5kZXggYWU4
NTdmNDFmNjhkLi40ODlhYWFmYTZlYmQgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL21tL2ZhdWx0LWFy
bXYuYworKysgYi9hcmNoL2FybS9tbS9mYXVsdC1hcm12LmMKQEAgLTkxLDYgKzkxLDcgQEAgc3Rh
dGljIGludCBhZGp1c3RfcHRlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBs
b25nIGFkZHJlc3MsCiB7CiAJc3BpbmxvY2tfdCAqcHRsOwogCXBnZF90ICpwZ2Q7CisJcDRkX3Qg
KnA0ZDsKIAlwdWRfdCAqcHVkOwogCXBtZF90ICpwbWQ7CiAJcHRlX3QgKnB0ZTsKQEAgLTEwMCw3
ICsxMDEsMTEgQEAgc3RhdGljIGludCBhZGp1c3RfcHRlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAq
dm1hLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MsCiAJaWYgKHBnZF9ub25lX29yX2NsZWFyX2JhZChw
Z2QpKQogCQlyZXR1cm4gMDsKIAotCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRyZXNzKTsKKwlw
NGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcmVzcyk7CisJaWYgKHA0ZF9ub25lX29yX2NsZWFyX2Jh
ZChwNGQpKQorCQlyZXR1cm4gMDsKKworCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyZXNzKTsK
IAlpZiAocHVkX25vbmVfb3JfY2xlYXJfYmFkKHB1ZCkpCiAJCXJldHVybiAwOwogCmRpZmYgLS1n
aXQgYS9hcmNoL2FybS9tbS9mYXVsdC5jIGIvYXJjaC9hcm0vbW0vZmF1bHQuYwppbmRleCAyZGQ1
YzQxY2JiOGQuLmZmMjMwZTlhZmZjNCAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vZmF1bHQuYwor
KysgYi9hcmNoL2FybS9tbS9mYXVsdC5jCkBAIC00MywxOSArNDMsMjEgQEAgdm9pZCBzaG93X3B0
ZShjb25zdCBjaGFyICpsdmwsIHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFk
ZHIpCiAJcHJpbnRrKCIlc1slMDhseF0gKnBnZD0lMDhsbHgiLCBsdmwsIGFkZHIsIChsb25nIGxv
bmcpcGdkX3ZhbCgqcGdkKSk7CiAKIAlkbyB7CisJCXA0ZF90ICpwNGQ7CiAJCXB1ZF90ICpwdWQ7
CiAJCXBtZF90ICpwbWQ7CiAJCXB0ZV90ICpwdGU7CiAKLQkJaWYgKHBnZF9ub25lKCpwZ2QpKQor
CQlwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcik7CisJCWlmIChwNGRfbm9uZSgqcDRkKSkKIAkJ
CWJyZWFrOwogCi0JCWlmIChwZ2RfYmFkKCpwZ2QpKSB7CisJCWlmIChwNGRfYmFkKCpwNGQpKSB7
CiAJCQlwcl9jb250KCIoYmFkKSIpOwogCQkJYnJlYWs7CiAJCX0KIAotCQlwdWQgPSBwdWRfb2Zm
c2V0KHBnZCwgYWRkcik7CisJCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyKTsKIAkJaWYgKFBU
UlNfUEVSX1BVRCAhPSAxKQogCQkJcHJfY29udCgiLCAqcHVkPSUwOGxseCIsIChsb25nIGxvbmcp
cHVkX3ZhbCgqcHVkKSk7CiAKQEAgLTQwNSw2ICs0MDcsNyBAQCBkb190cmFuc2xhdGlvbl9mYXVs
dCh1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGludCBmc3IsCiB7CiAJdW5zaWduZWQgaW50
IGluZGV4OwogCXBnZF90ICpwZ2QsICpwZ2RfazsKKwlwNGRfdCAqcDRkLCAqcDRkX2s7CiAJcHVk
X3QgKnB1ZCwgKnB1ZF9rOwogCXBtZF90ICpwbWQsICpwbWRfazsKIApAQCAtNDE5LDEzICs0MjIs
MTYgQEAgZG9fdHJhbnNsYXRpb25fZmF1bHQodW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBp
bnQgZnNyLAogCXBnZCA9IGNwdV9nZXRfcGdkKCkgKyBpbmRleDsKIAlwZ2RfayA9IGluaXRfbW0u
cGdkICsgaW5kZXg7CiAKLQlpZiAocGdkX25vbmUoKnBnZF9rKSkKKwlwNGQgPSBwNGRfb2Zmc2V0
KHBnZCwgYWRkcik7CisJcDRkX2sgPSBwNGRfb2Zmc2V0KHBnZF9rLCBhZGRyKTsKKworCWlmIChw
NGRfbm9uZSgqcDRkX2spKQogCQlnb3RvIGJhZF9hcmVhOwotCWlmICghcGdkX3ByZXNlbnQoKnBn
ZCkpCi0JCXNldF9wZ2QocGdkLCAqcGdkX2spOworCWlmICghcDRkX3ByZXNlbnQoKnA0ZCkpCisJ
CXNldF9wNGQocDRkLCAqcDRkX2spOwogCi0JcHVkID0gcHVkX29mZnNldChwZ2QsIGFkZHIpOwot
CXB1ZF9rID0gcHVkX29mZnNldChwZ2RfaywgYWRkcik7CisJcHVkID0gcHVkX29mZnNldChwNGQs
IGFkZHIpOworCXB1ZF9rID0gcHVkX29mZnNldChwNGRfaywgYWRkcik7CiAKIAlpZiAocHVkX25v
bmUoKnB1ZF9rKSkKIAkJZ290byBiYWRfYXJlYTsKZGlmZiAtLWdpdCBhL2FyY2gvYXJtL21tL2lk
bWFwLmMgYi9hcmNoL2FybS9tbS9pZG1hcC5jCmluZGV4IGEwMzNmNjEzNGE2NC4uY2Q1NDQxMWVm
MWI4IDEwMDY0NAotLS0gYS9hcmNoL2FybS9tbS9pZG1hcC5jCisrKyBiL2FyY2gvYXJtL21tL2lk
bWFwLmMKQEAgLTY4LDcgKzY4LDggQEAgc3RhdGljIHZvaWQgaWRtYXBfYWRkX3BtZChwdWRfdCAq
cHVkLCB1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgZW5kLAogc3RhdGljIHZvaWQg
aWRtYXBfYWRkX3B1ZChwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxv
bmcgZW5kLAogCXVuc2lnbmVkIGxvbmcgcHJvdCkKIHsKLQlwdWRfdCAqcHVkID0gcHVkX29mZnNl
dChwZ2QsIGFkZHIpOworCXA0ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcik7CisJcHVk
X3QgKnB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyKTsKIAl1bnNpZ25lZCBsb25nIG5leHQ7CiAK
IAlkbyB7CmRpZmYgLS1naXQgYS9hcmNoL2FybS9tbS9pbml0LmMgYi9hcmNoL2FybS9tbS9pbml0
LmMKaW5kZXggMDU0YmU0NGQxY2RiLi45NjNiNTI4NGQyODQgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJt
L21tL2luaXQuYworKysgYi9hcmNoL2FybS9tbS9pbml0LmMKQEAgLTU3MSw3ICs1NzEsNyBAQCBz
dGF0aWMgaW5saW5lIHZvaWQgc2VjdGlvbl91cGRhdGUodW5zaWduZWQgbG9uZyBhZGRyLCBwbWR2
YWxfdCBtYXNrLAogewogCXBtZF90ICpwbWQ7CiAKLQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZF9vZmZz
ZXQocGdkX29mZnNldChtbSwgYWRkciksIGFkZHIpLCBhZGRyKTsKKwlwbWQgPSBwbWRfb2ZmX2so
YWRkcik7CiAKICNpZmRlZiBDT05GSUdfQVJNX0xQQUUKIAlwbWRbMF0gPSBfX3BtZCgocG1kX3Zh
bChwbWRbMF0pICYgbWFzaykgfCBwcm90KTsKZGlmZiAtLWdpdCBhL2FyY2gvYXJtL21tL2lvcmVt
YXAuYyBiL2FyY2gvYXJtL21tL2lvcmVtYXAuYwppbmRleCA3MjI4NmY5YTRkMzAuLjc1NTI5ZDc2
ZDI4YyAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vaW9yZW1hcC5jCisrKyBiL2FyY2gvYXJtL21t
L2lvcmVtYXAuYwpAQCAtMTQyLDEyICsxNDIsMTQgQEAgc3RhdGljIHZvaWQgdW5tYXBfYXJlYV9z
ZWN0aW9ucyh1bnNpZ25lZCBsb25nIHZpcnQsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKIHsKIAl1bnNp
Z25lZCBsb25nIGFkZHIgPSB2aXJ0LCBlbmQgPSB2aXJ0ICsgKHNpemUgJiB+KFNaXzFNIC0gMSkp
OwogCXBnZF90ICpwZ2Q7CisJcDRkX3QgKnA0ZDsKIAlwdWRfdCAqcHVkOwogCXBtZF90ICpwbWRw
OwogCiAJZmx1c2hfY2FjaGVfdnVubWFwKGFkZHIsIGVuZCk7CiAJcGdkID0gcGdkX29mZnNldF9r
KGFkZHIpOwotCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwlwNGQgPSBwNGRfb2Zmc2V0
KHBnZCwgYWRkcik7CisJcHVkID0gcHVkX29mZnNldChwNGQsIGFkZHIpOwogCXBtZHAgPSBwbWRf
b2Zmc2V0KHB1ZCwgYWRkcik7CiAJZG8gewogCQlwbWRfdCBwbWQgPSAqcG1kcDsKQEAgLTE5MCw2
ICsxOTIsNyBAQCByZW1hcF9hcmVhX3NlY3Rpb25zKHVuc2lnbmVkIGxvbmcgdmlydCwgdW5zaWdu
ZWQgbG9uZyBwZm4sCiB7CiAJdW5zaWduZWQgbG9uZyBhZGRyID0gdmlydCwgZW5kID0gdmlydCAr
IHNpemU7CiAJcGdkX3QgKnBnZDsKKwlwNGRfdCAqcDRkOwogCXB1ZF90ICpwdWQ7CiAJcG1kX3Qg
KnBtZDsKIApAQCAtMjAwLDcgKzIwMyw4IEBAIHJlbWFwX2FyZWFfc2VjdGlvbnModW5zaWduZWQg
bG9uZyB2aXJ0LCB1bnNpZ25lZCBsb25nIHBmbiwKIAl1bm1hcF9hcmVhX3NlY3Rpb25zKHZpcnQs
IHNpemUpOwogCiAJcGdkID0gcGdkX29mZnNldF9rKGFkZHIpOwotCXB1ZCA9IHB1ZF9vZmZzZXQo
cGdkLCBhZGRyKTsKKwlwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcik7CisJcHVkID0gcHVkX29m
ZnNldChwNGQsIGFkZHIpOwogCXBtZCA9IHBtZF9vZmZzZXQocHVkLCBhZGRyKTsKIAlkbyB7CiAJ
CXBtZFswXSA9IF9fcG1kKF9fcGZuX3RvX3BoeXMocGZuKSB8IHR5cGUtPnByb3Rfc2VjdCk7CkBA
IC0yMjIsNiArMjI2LDcgQEAgcmVtYXBfYXJlYV9zdXBlcnNlY3Rpb25zKHVuc2lnbmVkIGxvbmcg
dmlydCwgdW5zaWduZWQgbG9uZyBwZm4sCiB7CiAJdW5zaWduZWQgbG9uZyBhZGRyID0gdmlydCwg
ZW5kID0gdmlydCArIHNpemU7CiAJcGdkX3QgKnBnZDsKKwlwNGRfdCAqcDRkOwogCXB1ZF90ICpw
dWQ7CiAJcG1kX3QgKnBtZDsKIApAQCAtMjMyLDcgKzIzNyw4IEBAIHJlbWFwX2FyZWFfc3VwZXJz
ZWN0aW9ucyh1bnNpZ25lZCBsb25nIHZpcnQsIHVuc2lnbmVkIGxvbmcgcGZuLAogCXVubWFwX2Fy
ZWFfc2VjdGlvbnModmlydCwgc2l6ZSk7CiAKIAlwZ2QgPSBwZ2Rfb2Zmc2V0X2sodmlydCk7Ci0J
cHVkID0gcHVkX29mZnNldChwZ2QsIGFkZHIpOworCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRy
KTsKKwlwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgYWRkcik7CiAJcG1kID0gcG1kX29mZnNldChwdWQs
IGFkZHIpOwogCWRvIHsKIAkJdW5zaWduZWQgbG9uZyBzdXBlcl9wbWRfdmFsLCBpOwpkaWZmIC0t
Z2l0IGEvYXJjaC9hcm0vbW0vbW0uaCBiL2FyY2gvYXJtL21tL21tLmgKaW5kZXggODhjMTIxYWMx
NGIzLi40ZjFmNzJiNzU4OTAgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL21tL21tLmgKKysrIGIvYXJj
aC9hcm0vbW0vbW0uaApAQCAtMzgsNyArMzgsNyBAQCBzdGF0aWMgaW5saW5lIHB0ZV90IGdldF90
b3BfcHRlKHVuc2lnbmVkIGxvbmcgdmEpCiAKIHN0YXRpYyBpbmxpbmUgcG1kX3QgKnBtZF9vZmZf
ayh1bnNpZ25lZCBsb25nIHZpcnQpCiB7Ci0JcmV0dXJuIHBtZF9vZmZzZXQocHVkX29mZnNldChw
Z2Rfb2Zmc2V0X2sodmlydCksIHZpcnQpLCB2aXJ0KTsKKwlyZXR1cm4gcG1kX29mZnNldChwdWRf
b2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKHZpcnQpLCB2aXJ0KSwgdmlydCksIHZpcnQp
OwogfQogCiBzdHJ1Y3QgbWVtX3R5cGUgewpkaWZmIC0tZ2l0IGEvYXJjaC9hcm0vbW0vbW11LmMg
Yi9hcmNoL2FybS9tbS9tbXUuYwppbmRleCBlYzhkMDAwOGJmYTEuLmM0MjUyODhmMWE4NiAxMDA2
NDQKLS0tIGEvYXJjaC9hcm0vbW0vbW11LmMKKysrIGIvYXJjaC9hcm0vbW0vbW11LmMKQEAgLTM1
Nyw3ICszNTcsOCBAQCBzdGF0aWMgcHRlX3QgKnB0ZV9vZmZzZXRfbGF0ZV9maXhtYXAocG1kX3Qg
KmRpciwgdW5zaWduZWQgbG9uZyBhZGRyKQogc3RhdGljIGlubGluZSBwbWRfdCAqIF9faW5pdCBm
aXhtYXBfcG1kKHVuc2lnbmVkIGxvbmcgYWRkcikKIHsKIAlwZ2RfdCAqcGdkID0gcGdkX29mZnNl
dF9rKGFkZHIpOwotCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgYWRkcik7CisJcDRkX3Qg
KnA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwlwdWRfdCAqcHVkID0gcHVkX29mZnNldChw
NGQsIGFkZHIpOwogCXBtZF90ICpwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRkcik7CiAKIAlyZXR1
cm4gcG1kOwpAQCAtODAxLDEyICs4MDIsMTIgQEAgc3RhdGljIHZvaWQgX19pbml0IGFsbG9jX2lu
aXRfcG1kKHB1ZF90ICpwdWQsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAl9IHdoaWxlIChwbWQrKywg
YWRkciA9IG5leHQsIGFkZHIgIT0gZW5kKTsKIH0KIAotc3RhdGljIHZvaWQgX19pbml0IGFsbG9j
X2luaXRfcHVkKHBnZF90ICpwZ2QsIHVuc2lnbmVkIGxvbmcgYWRkciwKK3N0YXRpYyB2b2lkIF9f
aW5pdCBhbGxvY19pbml0X3B1ZChwNGRfdCAqcDRkLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJCQkJ
ICB1bnNpZ25lZCBsb25nIGVuZCwgcGh5c19hZGRyX3QgcGh5cywKIAkJCQkgIGNvbnN0IHN0cnVj
dCBtZW1fdHlwZSAqdHlwZSwKIAkJCQkgIHZvaWQgKigqYWxsb2MpKHVuc2lnbmVkIGxvbmcgc3op
LCBib29sIG5nKQogewotCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgYWRkcik7CisJcHVk
X3QgKnB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyKTsKIAl1bnNpZ25lZCBsb25nIG5leHQ7CiAK
IAlkbyB7CkBAIC04MTYsNiArODE3LDIxIEBAIHN0YXRpYyB2b2lkIF9faW5pdCBhbGxvY19pbml0
X3B1ZChwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJfSB3aGlsZSAocHVkKyssIGFk
ZHIgPSBuZXh0LCBhZGRyICE9IGVuZCk7CiB9CiAKK3N0YXRpYyB2b2lkIF9faW5pdCBhbGxvY19p
bml0X3A0ZChwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIGFkZHIsCisJCQkJICB1bnNpZ25lZCBs
b25nIGVuZCwgcGh5c19hZGRyX3QgcGh5cywKKwkJCQkgIGNvbnN0IHN0cnVjdCBtZW1fdHlwZSAq
dHlwZSwKKwkJCQkgIHZvaWQgKigqYWxsb2MpKHVuc2lnbmVkIGxvbmcgc3opLCBib29sIG5nKQor
eworCXA0ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcik7CisJdW5zaWduZWQgbG9uZyBu
ZXh0OworCisJZG8geworCQluZXh0ID0gcDRkX2FkZHJfZW5kKGFkZHIsIGVuZCk7CisJCWFsbG9j
X2luaXRfcHVkKHA0ZCwgYWRkciwgbmV4dCwgcGh5cywgdHlwZSwgYWxsb2MsIG5nKTsKKwkJcGh5
cyArPSBuZXh0IC0gYWRkcjsKKwl9IHdoaWxlIChwNGQrKywgYWRkciA9IG5leHQsIGFkZHIgIT0g
ZW5kKTsKK30KKwogI2lmbmRlZiBDT05GSUdfQVJNX0xQQUUKIHN0YXRpYyB2b2lkIF9faW5pdCBj
cmVhdGVfMzZiaXRfbWFwcGluZyhzdHJ1Y3QgbW1fc3RydWN0ICptbSwKIAkJCQkJc3RydWN0IG1h
cF9kZXNjICptZCwKQEAgLTg2Myw3ICs4NzksOCBAQCBzdGF0aWMgdm9pZCBfX2luaXQgY3JlYXRl
XzM2Yml0X21hcHBpbmcoc3RydWN0IG1tX3N0cnVjdCAqbW0sCiAJcGdkID0gcGdkX29mZnNldCht
bSwgYWRkcik7CiAJZW5kID0gYWRkciArIGxlbmd0aDsKIAlkbyB7Ci0JCXB1ZF90ICpwdWQgPSBw
dWRfb2Zmc2V0KHBnZCwgYWRkcik7CisJCXA0ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRk
cik7CisJCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgYWRkcik7CiAJCXBtZF90ICpwbWQg
PSBwbWRfb2Zmc2V0KHB1ZCwgYWRkcik7CiAJCWludCBpOwogCkBAIC05MTQsNyArOTMxLDcgQEAg
c3RhdGljIHZvaWQgX19pbml0IF9fY3JlYXRlX21hcHBpbmcoc3RydWN0IG1tX3N0cnVjdCAqbW0s
IHN0cnVjdCBtYXBfZGVzYyAqbWQsCiAJZG8gewogCQl1bnNpZ25lZCBsb25nIG5leHQgPSBwZ2Rf
YWRkcl9lbmQoYWRkciwgZW5kKTsKIAotCQlhbGxvY19pbml0X3B1ZChwZ2QsIGFkZHIsIG5leHQs
IHBoeXMsIHR5cGUsIGFsbG9jLCBuZyk7CisJCWFsbG9jX2luaXRfcDRkKHBnZCwgYWRkciwgbmV4
dCwgcGh5cywgdHlwZSwgYWxsb2MsIG5nKTsKIAogCQlwaHlzICs9IG5leHQgLSBhZGRyOwogCQlh
ZGRyID0gbmV4dDsKQEAgLTk1MCw3ICs5NjcsMTMgQEAgdm9pZCBfX2luaXQgY3JlYXRlX21hcHBp
bmdfbGF0ZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgc3RydWN0IG1hcF9kZXNjICptZCwKIAkJCQli
b29sIG5nKQogewogI2lmZGVmIENPTkZJR19BUk1fTFBBRQotCXB1ZF90ICpwdWQgPSBwdWRfYWxs
b2MobW0sIHBnZF9vZmZzZXQobW0sIG1kLT52aXJ0dWFsKSwgbWQtPnZpcnR1YWwpOworCXA0ZF90
ICpwNGQ7CisJcHVkX3QgKnB1ZDsKKworCXA0ZCA9IHA0ZF9hbGxvYyhtbSwgcGdkX29mZnNldCht
bSwgbWQtPnZpcnR1YWwpLCBtZC0+dmlydHVhbCk7CisJaWYgKCFXQVJOX09OKCFwNGQpKQorCQly
ZXR1cm47CisJcHVkID0gcHVkX2FsbG9jKG1tLCBwNGQsIG1kLT52aXJ0dWFsKTsKIAlpZiAoV0FS
Tl9PTighcHVkKSkKIAkJcmV0dXJuOwogCXBtZF9hbGxvYyhtbSwgcHVkLCAwKTsKZGlmZiAtLWdp
dCBhL2FyY2gvYXJtL21tL3BnZC5jIGIvYXJjaC9hcm0vbW0vcGdkLmMKaW5kZXggNDc4YmQyYzZh
YTUwLi5jNWUxYjI3MDQ2YTggMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL21tL3BnZC5jCisrKyBiL2Fy
Y2gvYXJtL21tL3BnZC5jCkBAIC0zMCw2ICszMCw3IEBACiBwZ2RfdCAqcGdkX2FsbG9jKHN0cnVj
dCBtbV9zdHJ1Y3QgKm1tKQogewogCXBnZF90ICpuZXdfcGdkLCAqaW5pdF9wZ2Q7CisJcDRkX3Qg
Km5ld19wNGQsICppbml0X3A0ZDsKIAlwdWRfdCAqbmV3X3B1ZCwgKmluaXRfcHVkOwogCXBtZF90
ICpuZXdfcG1kLCAqaW5pdF9wbWQ7CiAJcHRlX3QgKm5ld19wdGUsICppbml0X3B0ZTsKQEAgLTUz
LDggKzU0LDEyIEBAIHBnZF90ICpwZ2RfYWxsb2Moc3RydWN0IG1tX3N0cnVjdCAqbW0pCiAJLyoK
IAkgKiBBbGxvY2F0ZSBQTUQgdGFibGUgZm9yIG1vZHVsZXMgYW5kIHBrbWFwIG1hcHBpbmdzLgog
CSAqLwotCW5ld19wdWQgPSBwdWRfYWxsb2MobW0sIG5ld19wZ2QgKyBwZ2RfaW5kZXgoTU9EVUxF
U19WQUREUiksCisJbmV3X3A0ZCA9IHA0ZF9hbGxvYyhtbSwgbmV3X3BnZCArIHBnZF9pbmRleChN
T0RVTEVTX1ZBRERSKSwKIAkJCSAgICBNT0RVTEVTX1ZBRERSKTsKKwlpZiAoIW5ld19wNGQpCisJ
CWdvdG8gbm9fcDRkOworCisJbmV3X3B1ZCA9IHB1ZF9hbGxvYyhtbSwgbmV3X3A0ZCwgTU9EVUxF
U19WQUREUik7CiAJaWYgKCFuZXdfcHVkKQogCQlnb3RvIG5vX3B1ZDsKIApAQCAtNjksNyArNzQs
MTEgQEAgcGdkX3QgKnBnZF9hbGxvYyhzdHJ1Y3QgbW1fc3RydWN0ICptbSkKIAkJICogY29udGFp
bnMgdGhlIG1hY2hpbmUgdmVjdG9ycy4gVGhlIHZlY3RvcnMgYXJlIGFsd2F5cyBoaWdoCiAJCSAq
IHdpdGggTFBBRS4KIAkJICovCi0JCW5ld19wdWQgPSBwdWRfYWxsb2MobW0sIG5ld19wZ2QsIDAp
OworCQluZXdfcDRkID0gcDRkX2FsbG9jKG1tLCBuZXdfcGdkLCAwKTsKKwkJaWYgKCFuZXdfcDRk
KQorCQkJZ290byBub19wNGQ7CisKKwkJbmV3X3B1ZCA9IHB1ZF9hbGxvYyhtbSwgbmV3X3A0ZCwg
MCk7CiAJCWlmICghbmV3X3B1ZCkKIAkJCWdvdG8gbm9fcHVkOwogCkBAIC05MSw3ICsxMDAsOCBA
QCBwZ2RfdCAqcGdkX2FsbG9jKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tKQogCQlwbWRfdmFsKCpuZXdf
cG1kKSB8PSBQTURfRE9NQUlOKERPTUFJTl9WRUNUT1JTKTsKICNlbmRpZgogCi0JCWluaXRfcHVk
ID0gcHVkX29mZnNldChpbml0X3BnZCwgMCk7CisJCWluaXRfcDRkID0gcDRkX29mZnNldChpbml0
X3BnZCwgMCk7CisJCWluaXRfcHVkID0gcHVkX29mZnNldChpbml0X3A0ZCwgMCk7CiAJCWluaXRf
cG1kID0gcG1kX29mZnNldChpbml0X3B1ZCwgMCk7CiAJCWluaXRfcHRlID0gcHRlX29mZnNldF9t
YXAoaW5pdF9wbWQsIDApOwogCQlzZXRfcHRlX2V4dChuZXdfcHRlICsgMCwgaW5pdF9wdGVbMF0s
IDApOwpAQCAtMTA4LDYgKzExOCw4IEBAIHBnZF90ICpwZ2RfYWxsb2Moc3RydWN0IG1tX3N0cnVj
dCAqbW0pCiBub19wbWQ6CiAJcHVkX2ZyZWUobW0sIG5ld19wdWQpOwogbm9fcHVkOgorCXA0ZF9m
cmVlKG1tLCBuZXdfcDRkKTsKK25vX3A0ZDoKIAlfX3BnZF9mcmVlKG5ld19wZ2QpOwogbm9fcGdk
OgogCXJldHVybiBOVUxMOwpAQCAtMTE2LDYgKzEyOCw3IEBAIHBnZF90ICpwZ2RfYWxsb2Moc3Ry
dWN0IG1tX3N0cnVjdCAqbW0pCiB2b2lkIHBnZF9mcmVlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBw
Z2RfdCAqcGdkX2Jhc2UpCiB7CiAJcGdkX3QgKnBnZDsKKwlwNGRfdCAqcDRkOwogCXB1ZF90ICpw
dWQ7CiAJcG1kX3QgKnBtZDsKIAlwZ3RhYmxlX3QgcHRlOwpAQCAtMTI3LDcgKzE0MCwxMSBAQCB2
b2lkIHBnZF9mcmVlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBwZ2RfdCAqcGdkX2Jhc2UpCiAJaWYg
KHBnZF9ub25lX29yX2NsZWFyX2JhZChwZ2QpKQogCQlnb3RvIG5vX3BnZDsKIAotCXB1ZCA9IHB1
ZF9vZmZzZXQocGdkLCAwKTsKKwlwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgMCk7CisJaWYgKHA0ZF9u
b25lX29yX2NsZWFyX2JhZChwNGQpKQorCQlnb3RvIG5vX3A0ZDsKKworCXB1ZCA9IHB1ZF9vZmZz
ZXQocDRkLCAwKTsKIAlpZiAocHVkX25vbmVfb3JfY2xlYXJfYmFkKHB1ZCkpCiAJCWdvdG8gbm9f
cHVkOwogCkBAIC0xNDQsOCArMTYxLDExIEBAIHZvaWQgcGdkX2ZyZWUoc3RydWN0IG1tX3N0cnVj
dCAqbW0sIHBnZF90ICpwZ2RfYmFzZSkKIAlwbWRfZnJlZShtbSwgcG1kKTsKIAltbV9kZWNfbnJf
cG1kcyhtbSk7CiBub19wdWQ6Ci0JcGdkX2NsZWFyKHBnZCk7CisJcDRkX2NsZWFyKHA0ZCk7CiAJ
cHVkX2ZyZWUobW0sIHB1ZCk7Citub19wNGQ6CisJcGdkX2NsZWFyKHBnZCk7CisJcDRkX2ZyZWUo
bW0sIHA0ZCk7CiBub19wZ2Q6CiAjaWZkZWYgQ09ORklHX0FSTV9MUEFFCiAJLyoKQEAgLTE1Niwx
NSArMTc2LDIxIEBAIHZvaWQgcGdkX2ZyZWUoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHBnZF90ICpw
Z2RfYmFzZSkKIAkJCWNvbnRpbnVlOwogCQlpZiAocGdkX3ZhbCgqcGdkKSAmIExfUEdEX1NXQVBQ
RVIpCiAJCQljb250aW51ZTsKLQkJcHVkID0gcHVkX29mZnNldChwZ2QsIDApOworCQlwNGQgPSBw
NGRfb2Zmc2V0KHBnZCwgMCk7CisJCWlmIChwNGRfbm9uZV9vcl9jbGVhcl9iYWQocDRkKSkKKwkJ
CWNvbnRpbnVlOworCQlwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgMCk7CiAJCWlmIChwdWRfbm9uZV9v
cl9jbGVhcl9iYWQocHVkKSkKIAkJCWNvbnRpbnVlOwogCQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwg
MCk7CiAJCXB1ZF9jbGVhcihwdWQpOwogCQlwbWRfZnJlZShtbSwgcG1kKTsKIAkJbW1fZGVjX25y
X3BtZHMobW0pOwotCQlwZ2RfY2xlYXIocGdkKTsKKwkJcDRkX2NsZWFyKHA0ZCk7CiAJCXB1ZF9m
cmVlKG1tLCBwdWQpOworCQltbV9kZWNfbnJfcHVkcyhtbSk7CisJCXBnZF9jbGVhcihwZ2QpOwor
CQlwNGRfZnJlZShtbSwgcDRkKTsKIAl9CiAjZW5kaWYKIAlfX3BnZF9mcmVlKHBnZF9iYXNlKTsK
LS0gCjIuMjUuMQoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X18KT3BlblJJU0MgbWFpbGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMub3JnCmh0
dHBzOi8vbGlzdHMubGlicmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJpc2MK
