Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 2D1A834B0D9
	for <lists+openrisc@lfdr.de>; Fri, 26 Mar 2021 21:52:13 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id DF166212E7;
	Fri, 26 Mar 2021 21:52:12 +0100 (CET)
Received: from pegase1.c-s.fr (pegase1.c-s.fr [93.17.236.30])
 by mail.librecores.org (Postfix) with ESMTPS id DD02B21098
 for <openrisc@lists.librecores.org>; Fri, 26 Mar 2021 14:45:05 +0100 (CET)
Received: from localhost (mailhub1-int [192.168.12.234])
 by localhost (Postfix) with ESMTP id 4F6NWg6LmQz9v03R;
 Fri, 26 Mar 2021 14:45:03 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
 by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new, port 10024)
 with ESMTP id uz_V-1h9wFYT; Fri, 26 Mar 2021 14:45:03 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
 by pegase1.c-s.fr (Postfix) with ESMTP id 4F6NWd1R42z9v03N;
 Fri, 26 Mar 2021 14:45:01 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
 by messagerie.si.c-s.fr (Postfix) with ESMTP id D6CF38B8C9;
 Fri, 26 Mar 2021 14:45:01 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
 by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new, port 10023)
 with ESMTP id XVHEkPLY74AV; Fri, 26 Mar 2021 14:45:01 +0100 (CET)
Received: from po16121vm.idsi0.si.c-s.fr (unknown [192.168.4.90])
 by messagerie.si.c-s.fr (Postfix) with ESMTP id 4BE0A8B8C7;
 Fri, 26 Mar 2021 14:45:01 +0100 (CET)
Received: by po16121vm.idsi0.si.c-s.fr (Postfix, from userid 0)
 id C962267611; Fri, 26 Mar 2021 13:45:01 +0000 (UTC)
Message-Id: <14bee90f01159aca28390d57be538760980436a4.1616765870.git.christophe.leroy@csgroup.eu>
In-Reply-To: <cover.1616765869.git.christophe.leroy@csgroup.eu>
References: <cover.1616765869.git.christophe.leroy@csgroup.eu>
From: Christophe Leroy <christophe.leroy@csgroup.eu>
To: will@kernel.org, danielwa@cisco.com, robh@kernel.org,
 daniel@gimpelevich.san-francisco.ca.us
Date: Fri, 26 Mar 2021 13:45:01 +0000 (UTC)
X-Mailman-Approved-At: Fri, 26 Mar 2021 21:51:56 +0100
Subject: [OpenRISC] [PATCH v3 14/17] xtensa: Convert to GENERIC_CMDLINE
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: linux-arch@vger.kernel.org, devicetree@vger.kernel.org,
 microblaze <monstr@monstr.eu>, linux-xtensa@linux-xtensa.org,
 linux-sh@vger.kernel.org, linux-hexagon@vger.kernel.org, x86@kernel.org,
 linux-kernel@vger.kernel.org, nios2 <ley.foon.tan@intel.com>,
 linux-mips@vger.kernel.org, openrisc@lists.librecores.org,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 linuxppc-dev@lists.ozlabs.org, linux-arm-kernel@lists.infradead.org
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

VGhpcyBjb252ZXJ0cyB0aGUgYXJjaGl0ZWN0dXJlIHRvIEdFTkVSSUNfQ01ETElORS4KClNpZ25l
ZC1vZmYtYnk6IENocmlzdG9waGUgTGVyb3kgPGNocmlzdG9waGUubGVyb3lAY3Nncm91cC5ldT4K
LS0tCiBhcmNoL3h0ZW5zYS9LY29uZmlnICAgICAgICAgICAgICAgICAgICAgICAgIHwgMTUgKy0t
LS0tLS0tLS0tLS0tCiBhcmNoL3h0ZW5zYS9jb25maWdzL2F1ZGlvX2tjNzA1X2RlZmNvbmZpZyAg
IHwgIDEgLQogYXJjaC94dGVuc2EvY29uZmlncy9jb21tb25fZGVmY29uZmlnICAgICAgICB8ICAx
IC0KIGFyY2gveHRlbnNhL2NvbmZpZ3MvZ2VuZXJpY19rYzcwNV9kZWZjb25maWcgfCAgMSAtCiBh
cmNoL3h0ZW5zYS9jb25maWdzL2lzc19kZWZjb25maWcgICAgICAgICAgIHwgIDEgLQogYXJjaC94
dGVuc2EvY29uZmlncy9ub21tdV9rYzcwNV9kZWZjb25maWcgICB8ICAxIC0KIGFyY2gveHRlbnNh
L2NvbmZpZ3Mvc21wX2x4MjAwX2RlZmNvbmZpZyAgICAgfCAgMSAtCiBhcmNoL3h0ZW5zYS9jb25m
aWdzL3ZpcnRfZGVmY29uZmlnICAgICAgICAgIHwgIDEgLQogYXJjaC94dGVuc2EvY29uZmlncy94
aXBfa2M3MDVfZGVmY29uZmlnICAgICB8ICAxIC0KIGFyY2gveHRlbnNhL2tlcm5lbC9zZXR1cC5j
ICAgICAgICAgICAgICAgICAgfCAxMCArKy0tLS0tLS0tCiAxMCBmaWxlcyBjaGFuZ2VkLCAzIGlu
c2VydGlvbnMoKyksIDMwIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2FyY2gveHRlbnNhL0tj
b25maWcgYi9hcmNoL3h0ZW5zYS9LY29uZmlnCmluZGV4IDlhZDZiN2I4MjcwNy4uNDIzMDlmNWU5
Y2RhIDEwMDY0NAotLS0gYS9hcmNoL3h0ZW5zYS9LY29uZmlnCisrKyBiL2FyY2gveHRlbnNhL0tj
b25maWcKQEAgLTE2LDYgKzE2LDcgQEAgY29uZmlnIFhURU5TQQogCXNlbGVjdCBDT01NT05fQ0xL
CiAJc2VsZWN0IERNQV9SRU1BUCBpZiBNTVUKIAlzZWxlY3QgR0VORVJJQ19BVE9NSUM2NAorCXNl
bGVjdCBHRU5FUklDX0NNRExJTkUKIAlzZWxlY3QgR0VORVJJQ19JUlFfU0hPVwogCXNlbGVjdCBH
RU5FUklDX1BDSV9JT01BUAogCXNlbGVjdCBHRU5FUklDX1NDSEVEX0NMT0NLCkBAIC0zNTMsMjAg
KzM1NCw2IEBAIGNvbmZpZyBHRU5FUklDX0NBTElCUkFURV9ERUxBWQogCWhlbHAKIAkgIFRoZSBC
b2dvTUlQUyB2YWx1ZSBjYW4gZWFzaWx5IGJlIGRlcml2ZWQgZnJvbSB0aGUgQ1BVIGZyZXF1ZW5j
eS4KIAotY29uZmlnIENNRExJTkVfQk9PTAotCWJvb2wgIkRlZmF1bHQgYm9vdGxvYWRlciBrZXJu
ZWwgYXJndW1lbnRzIgotCi1jb25maWcgQ01ETElORQotCXN0cmluZyAiSW5pdGlhbCBrZXJuZWwg
Y29tbWFuZCBzdHJpbmciCi0JZGVwZW5kcyBvbiBDTURMSU5FX0JPT0wKLQlkZWZhdWx0ICJjb25z
b2xlPXR0eVMwLDM4NDAwIHJvb3Q9L2Rldi9yYW0iCi0JaGVscAotCSAgT24gc29tZSBhcmNoaXRl
Y3R1cmVzIChFQlNBMTEwIGFuZCBDQVRTKSwgdGhlcmUgaXMgY3VycmVudGx5IG5vIHdheQotCSAg
Zm9yIHRoZSBib290IGxvYWRlciB0byBwYXNzIGFyZ3VtZW50cyB0byB0aGUga2VybmVsLiBGb3Ig
dGhlc2UKLQkgIGFyY2hpdGVjdHVyZXMsIHlvdSBzaG91bGQgc3VwcGx5IHNvbWUgY29tbWFuZC1s
aW5lIG9wdGlvbnMgYXQgYnVpbGQKLQkgIHRpbWUgYnkgZW50ZXJpbmcgdGhlbSBoZXJlLiBBcyBh
IG1pbmltdW0sIHlvdSBzaG91bGQgc3BlY2lmeSB0aGUKLQkgIG1lbW9yeSBzaXplIGFuZCB0aGUg
cm9vdCBkZXZpY2UgKGUuZy4sIG1lbT02NE0gcm9vdD0vZGV2L25mcykuCi0KIGNvbmZpZyBVU0Vf
T0YKIAlib29sICJGbGF0dGVuZWQgRGV2aWNlIFRyZWUgc3VwcG9ydCIKIAlzZWxlY3QgT0YKZGlm
ZiAtLWdpdCBhL2FyY2gveHRlbnNhL2NvbmZpZ3MvYXVkaW9fa2M3MDVfZGVmY29uZmlnIGIvYXJj
aC94dGVuc2EvY29uZmlncy9hdWRpb19rYzcwNV9kZWZjb25maWcKaW5kZXggM2JlNjJkYTgwODli
Li41Zjg2NjFhMzNhYjQgMTAwNjQ0Ci0tLSBhL2FyY2gveHRlbnNhL2NvbmZpZ3MvYXVkaW9fa2M3
MDVfZGVmY29uZmlnCisrKyBiL2FyY2gveHRlbnNhL2NvbmZpZ3MvYXVkaW9fa2M3MDVfZGVmY29u
ZmlnCkBAIC0yNyw3ICsyNyw2IEBAIENPTkZJR19QUkVFTVBUPXkKIENPTkZJR19ISUdITUVNPXkK
ICMgQ09ORklHX1BDSSBpcyBub3Qgc2V0CiBDT05GSUdfWFRFTlNBX1BMQVRGT1JNX1hURlBHQT15
Ci1DT05GSUdfQ01ETElORV9CT09MPXkKIENPTkZJR19DTURMSU5FPSJlYXJseWNvbj11YXJ0ODI1
MCxtbWlvMzJuYXRpdmUsMHhmZDA1MDAyMCwxMTUyMDBuOCBjb25zb2xlPXR0eVMwLDExNTIwMG44
IGlwPWRoY3Agcm9vdD0vZGV2L25mcyBydyBkZWJ1ZyBtZW1tYXA9MHgzODAwMDAwMEAwIgogQ09O
RklHX1VTRV9PRj15CiBDT05GSUdfQlVJTFRJTl9EVEJfU09VUkNFPSJrYzcwNSIKZGlmZiAtLWdp
dCBhL2FyY2gveHRlbnNhL2NvbmZpZ3MvY29tbW9uX2RlZmNvbmZpZyBiL2FyY2gveHRlbnNhL2Nv
bmZpZ3MvY29tbW9uX2RlZmNvbmZpZwppbmRleCBmYTkzODk4NjkxNTQuLjY0NjdlYmNiYjA4MCAx
MDA2NDQKLS0tIGEvYXJjaC94dGVuc2EvY29uZmlncy9jb21tb25fZGVmY29uZmlnCisrKyBiL2Fy
Y2gveHRlbnNhL2NvbmZpZ3MvY29tbW9uX2RlZmNvbmZpZwpAQCAtNiw3ICs2LDYgQEAgQ09ORklH
X01PRFVMRVM9eQogQ09ORklHX01PRFZFUlNJT05TPXkKIENPTkZJR19YVEVOU0FfUExBVEZPUk1f
WFQyMDAwPXkKIENPTkZJR19HRU5FUklDX0NBTElCUkFURV9ERUxBWT15Ci1DT05GSUdfQ01ETElO
RV9CT09MPXkKIENPTkZJR19DTURMSU5FPSJjb25zb2xlPXR0eVMwLDM4NDAwIGlwPWJvb3RwIHJv
b3Q9bmZzIG5mc3Jvb3Q9L29wdC9tb250YXZpc3RhL3Byby9kZXZraXQveHRlbnNhL2xpbnV4X2Jl
L3RhcmdldCBtZW1tYXA9MTI4TUAwIgogQ09ORklHX0JJTkZNVF9NSVNDPXkKIENPTkZJR19ORVQ9
eQpkaWZmIC0tZ2l0IGEvYXJjaC94dGVuc2EvY29uZmlncy9nZW5lcmljX2tjNzA1X2RlZmNvbmZp
ZyBiL2FyY2gveHRlbnNhL2NvbmZpZ3MvZ2VuZXJpY19rYzcwNV9kZWZjb25maWcKaW5kZXggZTlk
NmI2ZjZlY2ExLi44OTg0YzRlNjhhNDIgMTAwNjQ0Ci0tLSBhL2FyY2gveHRlbnNhL2NvbmZpZ3Mv
Z2VuZXJpY19rYzcwNV9kZWZjb25maWcKKysrIGIvYXJjaC94dGVuc2EvY29uZmlncy9nZW5lcmlj
X2tjNzA1X2RlZmNvbmZpZwpAQCAtMjYsNyArMjYsNiBAQCBDT05GSUdfUFJFRU1QVD15CiBDT05G
SUdfSElHSE1FTT15CiAjIENPTkZJR19QQ0kgaXMgbm90IHNldAogQ09ORklHX1hURU5TQV9QTEFU
Rk9STV9YVEZQR0E9eQotQ09ORklHX0NNRExJTkVfQk9PTD15CiBDT05GSUdfQ01ETElORT0iZWFy
bHljb249dWFydDgyNTAsbW1pbzMybmF0aXZlLDB4ZmQwNTAwMjAsMTE1MjAwbjggY29uc29sZT10
dHlTMCwxMTUyMDBuOCBpcD1kaGNwIHJvb3Q9L2Rldi9uZnMgcncgZGVidWcgbWVtbWFwPTB4Mzgw
MDAwMDBAMCIKIENPTkZJR19VU0VfT0Y9eQogQ09ORklHX0JVSUxUSU5fRFRCX1NPVVJDRT0ia2M3
MDUiCmRpZmYgLS1naXQgYS9hcmNoL3h0ZW5zYS9jb25maWdzL2lzc19kZWZjb25maWcgYi9hcmNo
L3h0ZW5zYS9jb25maWdzL2lzc19kZWZjb25maWcKaW5kZXggMzJjZThmYjA2OGYwLi45OTZhZDEx
NTI2NGQgMTAwNjQ0Ci0tLSBhL2FyY2gveHRlbnNhL2NvbmZpZ3MvaXNzX2RlZmNvbmZpZworKysg
Yi9hcmNoL3h0ZW5zYS9jb25maWdzL2lzc19kZWZjb25maWcKQEAgLTIsNyArMiw2IEBAIENPTkZJ
R19TWVNWSVBDPXkKIENPTkZJR19MT0dfQlVGX1NISUZUPTE0CiBDT05GSUdfRVhQRVJUPXkKICMg
Q09ORklHX1BDSSBpcyBub3Qgc2V0Ci1DT05GSUdfQ01ETElORV9CT09MPXkKIENPTkZJR19DTURM
SU5FPSJjb25zb2xlPXR0eVMwLDM4NDAwIGV0aDA9dHVudGFwLCx0YXAwIGlwPTE5Mi4xNjguMTY4
LjU6MTkyLjE2OC4xNjguMSByb290PW5mcyBuZnNyb290PTE5Mi4xNjguMTY4LjE6L29wdC9tb250
YXZpc3RhL3Byby9kZXZraXQveHRlbnNhL2xpbnV4X2JlL3RhcmdldCBtZW1tYXA9MTI4TUAwIgog
IyBDT05GSUdfQ09SRV9EVU1QX0RFRkFVTFRfRUxGX0hFQURFUlMgaXMgbm90IHNldAogQ09ORklH
X05FVD15CmRpZmYgLS1naXQgYS9hcmNoL3h0ZW5zYS9jb25maWdzL25vbW11X2tjNzA1X2RlZmNv
bmZpZyBiL2FyY2gveHRlbnNhL2NvbmZpZ3Mvbm9tbXVfa2M3MDVfZGVmY29uZmlnCmluZGV4IDg4
YjJlMjIyZDRiZi4uNTQyNTBiYzc0ODg1IDEwMDY0NAotLS0gYS9hcmNoL3h0ZW5zYS9jb25maWdz
L25vbW11X2tjNzA1X2RlZmNvbmZpZworKysgYi9hcmNoL3h0ZW5zYS9jb25maWdzL25vbW11X2tj
NzA1X2RlZmNvbmZpZwpAQCAtMzMsNyArMzMsNiBAQCBDT05GSUdfUFJFRU1QVD15CiBDT05GSUdf
TUVNTUFQX0NBQ0hFQVRUUj0weGZmZjI0NDJmCiAjIENPTkZJR19QQ0kgaXMgbm90IHNldAogQ09O
RklHX1hURU5TQV9QTEFURk9STV9YVEZQR0E9eQotQ09ORklHX0NNRExJTkVfQk9PTD15CiBDT05G
SUdfQ01ETElORT0iZWFybHljb249dWFydDgyNTAsbW1pbzMybmF0aXZlLDB4OWQwNTAwMjAsMTE1
MjAwbjggY29uc29sZT10dHlTMCwxMTUyMDBuOCBpcD1kaGNwIHJvb3Q9L2Rldi9uZnMgcncgZGVi
dWcgbWVtbWFwPTI1Nk1AMHg2MDAwMDAwMCIKIENPTkZJR19VU0VfT0Y9eQogQ09ORklHX0JVSUxU
SU5fRFRCX1NPVVJDRT0ia2M3MDVfbm9tbXUiCmRpZmYgLS1naXQgYS9hcmNoL3h0ZW5zYS9jb25m
aWdzL3NtcF9seDIwMF9kZWZjb25maWcgYi9hcmNoL3h0ZW5zYS9jb25maWdzL3NtcF9seDIwMF9k
ZWZjb25maWcKaW5kZXggYTQ3Yzg1NjM4ZWMxLi41OGIyODRmZDYyN2YgMTAwNjQ0Ci0tLSBhL2Fy
Y2gveHRlbnNhL2NvbmZpZ3Mvc21wX2x4MjAwX2RlZmNvbmZpZworKysgYi9hcmNoL3h0ZW5zYS9j
b25maWdzL3NtcF9seDIwMF9kZWZjb25maWcKQEAgLTMwLDcgKzMwLDYgQEAgQ09ORklHX0hPVFBM
VUdfQ1BVPXkKICMgQ09ORklHX0lOSVRJQUxJWkVfWFRFTlNBX01NVV9JTlNJREVfVk1MSU5VWCBp
cyBub3Qgc2V0CiAjIENPTkZJR19QQ0kgaXMgbm90IHNldAogQ09ORklHX1hURU5TQV9QTEFURk9S
TV9YVEZQR0E9eQotQ09ORklHX0NNRExJTkVfQk9PTD15CiBDT05GSUdfQ01ETElORT0iZWFybHlj
b249dWFydDgyNTAsbW1pbzMybmF0aXZlLDB4ZmQwNTAwMjAsMTE1MjAwbjggY29uc29sZT10dHlT
MCwxMTUyMDBuOCBpcD1kaGNwIHJvb3Q9L2Rldi9uZnMgcncgZGVidWcgbWVtbWFwPTk2TUAwIgog
Q09ORklHX1VTRV9PRj15CiBDT05GSUdfQlVJTFRJTl9EVEJfU09VUkNFPSJseDIwMG14IgpkaWZm
IC0tZ2l0IGEvYXJjaC94dGVuc2EvY29uZmlncy92aXJ0X2RlZmNvbmZpZyBiL2FyY2gveHRlbnNh
L2NvbmZpZ3MvdmlydF9kZWZjb25maWcKaW5kZXggNmQxMzg3ZGZhOTZmLi5mYjRkY2UyYzcwYTMg
MTAwNjQ0Ci0tLSBhL2FyY2gveHRlbnNhL2NvbmZpZ3MvdmlydF9kZWZjb25maWcKKysrIGIvYXJj
aC94dGVuc2EvY29uZmlncy92aXJ0X2RlZmNvbmZpZwpAQCAtMjEsNyArMjEsNiBAQCBDT05GSUdf
WFRFTlNBX1ZBUklBTlRfREMyMzNDPXkKIENPTkZJR19YVEVOU0FfVU5BTElHTkVEX1VTRVI9eQog
Q09ORklHX1hURU5TQV9LU0VHXzUxMk09eQogQ09ORklHX0hJR0hNRU09eQotQ09ORklHX0NNRExJ
TkVfQk9PTD15CiBDT05GSUdfQ01ETElORT0iY29uc29sZT10dHlTMCwxMTUyMDBuOCBpcD1kaGNw
IHJvb3Q9L2Rldi9uZnMgcncgZGVidWcgbWVtbWFwPTB4ODAwMDAwMDBAMCIKIENPTkZJR19VU0Vf
T0Y9eQogQ09ORklHX0JVSUxUSU5fRFRCX1NPVVJDRT0idmlydCIKZGlmZiAtLWdpdCBhL2FyY2gv
eHRlbnNhL2NvbmZpZ3MveGlwX2tjNzA1X2RlZmNvbmZpZyBiL2FyY2gveHRlbnNhL2NvbmZpZ3Mv
eGlwX2tjNzA1X2RlZmNvbmZpZwppbmRleCA0ZjFmZjk1MzFmNmEuLmFlNDQyNzc3M2FmMiAxMDA2
NDQKLS0tIGEvYXJjaC94dGVuc2EvY29uZmlncy94aXBfa2M3MDVfZGVmY29uZmlnCisrKyBiL2Fy
Y2gveHRlbnNhL2NvbmZpZ3MveGlwX2tjNzA1X2RlZmNvbmZpZwpAQCAtMjYsNyArMjYsNiBAQCBD
T05GSUdfS0VSTkVMX0xPQURfQUREUkVTUz0weGY2MDAwMDAwCiBDT05GSUdfWFRFTlNBX0tTRUdf
NTEyTT15CiBDT05GSUdfSElHSE1FTT15CiBDT05GSUdfWFRFTlNBX1BMQVRGT1JNX1hURlBHQT15
Ci1DT05GSUdfQ01ETElORV9CT09MPXkKIENPTkZJR19DTURMSU5FPSJlYXJseWNvbj11YXJ0ODI1
MCxtbWlvMzJuYXRpdmUsMHhmZDA1MDAyMCwxMTUyMDBuOCBjb25zb2xlPXR0eVMwLDExNTIwMG44
IGlwPWRoY3Agcm9vdD0vZGV2L25mcyBydyBkZWJ1ZyBtZW1tYXA9MHgzODAwMDAwMEAwIgogQ09O
RklHX1VTRV9PRj15CiBDT05GSUdfQlVJTFRJTl9EVEJfU09VUkNFPSJrYzcwNSIKZGlmZiAtLWdp
dCBhL2FyY2gveHRlbnNhL2tlcm5lbC9zZXR1cC5jIGIvYXJjaC94dGVuc2Eva2VybmVsL3NldHVw
LmMKaW5kZXggZWQxODQxMDZlNGNmLi45NzAzYzIzYTljM2YgMTAwNjQ0Ci0tLSBhL2FyY2gveHRl
bnNhL2tlcm5lbC9zZXR1cC5jCisrKyBiL2FyY2gveHRlbnNhL2tlcm5lbC9zZXR1cC5jCkBAIC0y
NSw2ICsyNSw3IEBACiAjaW5jbHVkZSA8bGludXgvY3B1Lmg+CiAjaW5jbHVkZSA8bGludXgvb2Yu
aD4KICNpbmNsdWRlIDxsaW51eC9vZl9mZHQuaD4KKyNpbmNsdWRlIDxsaW51eC9jbWRsaW5lLmg+
CiAKICNpZiBkZWZpbmVkKENPTkZJR19WR0FfQ09OU09MRSkgfHwgZGVmaW5lZChDT05GSUdfRFVN
TVlfQ09OU09MRSkKICMgaW5jbHVkZSA8bGludXgvY29uc29sZS5oPgpAQCAtNzMsMTAgKzc0LDYg
QEAgZXh0ZXJuIHVuc2lnbmVkIGxvbmcgbG9vcHNfcGVyX2ppZmZ5OwogCiBzdGF0aWMgY2hhciBf
X2luaXRkYXRhIGNvbW1hbmRfbGluZVtDT01NQU5EX0xJTkVfU0laRV07CiAKLSNpZmRlZiBDT05G
SUdfQ01ETElORV9CT09MCi1zdGF0aWMgY2hhciBkZWZhdWx0X2NvbW1hbmRfbGluZVtDT01NQU5E
X0xJTkVfU0laRV0gX19pbml0ZGF0YSA9IENPTkZJR19DTURMSU5FOwotI2VuZGlmCi0KICNpZmRl
ZiBDT05GSUdfUEFSU0VfQk9PVFBBUkFNCiAvKgogICogQm9vdCBwYXJhbWV0ZXIgcGFyc2luZy4K
QEAgLTI1NywxMCArMjU0LDcgQEAgdm9pZCBfX2luaXQgaW5pdF9hcmNoKGJwX3RhZ190ICpicF9z
dGFydCkKIAllYXJseV9pbml0X2RldnRyZWUoZHRiX3N0YXJ0KTsKICNlbmRpZgogCi0jaWZkZWYg
Q09ORklHX0NNRExJTkVfQk9PTAotCWlmICghY29tbWFuZF9saW5lWzBdKQotCQlzdHJsY3B5KGNv
bW1hbmRfbGluZSwgZGVmYXVsdF9jb21tYW5kX2xpbmUsIENPTU1BTkRfTElORV9TSVpFKTsKLSNl
bmRpZgorCWNtZGxpbmUoY29tbWFuZF9saW5lLCBjb21tYW5kX2xpbmUsIENPTU1BTkRfTElORV9T
SVpFKTsKIAogCS8qIEVhcmx5IGhvb2sgZm9yIHBsYXRmb3JtcyAqLwogCi0tIAoyLjI1LjAKCl9f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1h
aWxpbmcgbGlzdApPcGVuUklTQ0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxp
YnJlY29yZXMub3JnL2xpc3RpbmZvL29wZW5yaXNjCg==
