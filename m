Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 615F12460DA
	for <lists+openrisc@lfdr.de>; Mon, 17 Aug 2020 10:46:45 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 38B6320EAE;
	Mon, 17 Aug 2020 10:46:45 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 6FE4B20D7C
 for <openrisc@lists.librecores.org>; Sun,  2 Aug 2020 18:39:23 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 7CDE02086A;
 Sun,  2 Aug 2020 16:39:11 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1596386361;
 bh=4D18U4LqzeXJ7rz+8d0QKOKWX/v62M4XIaiFZKMrU2g=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=expYlg32VKO393ycu/8mgvTP8o7aTQ0t+w3y+ImhCOBmcHrMgKsHPWZrIbJLNgfgC
 Bm2vjh0nkZR+iuadKG9/iuI0LX7a8yAWHL7in80/MdMtdUm7db6niZEyjtfTAFy76P
 C8qr+uEz5cJ6hO9r0B0W6Jn6zW/HAt2qdvztbZp0=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Sun,  2 Aug 2020 19:36:01 +0300
Message-Id: <20200802163601.8189-18-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200802163601.8189-1-rppt@kernel.org>
References: <20200802163601.8189-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Mon, 17 Aug 2020 10:45:38 +0200
Subject: [OpenRISC] [PATCH v2 17/17] memblock: use separate iterators for
 memory and reserved regions
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Thomas Gleixner <tglx@linutronix.de>,
 Emil Renner Berthing <kernel@esmil.dk>, linux-sh@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Christoph Hellwig <hch@lst.de>,
 Marek Szyprowski <m.szyprowski@samsung.com>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Michael Ellerman <mpe@ellerman.id.au>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Mike Rapoport <rppt@linux.ibm.com>, clang-built-linux@googlegroups.com,
 Ingo Molnar <mingo@redhat.com>, linux-arm-kernel@lists.infradead.org,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Hari Bathini <hbathini@linux.ibm.com>, Michal Simek <monstr@monstr.eu>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, linux-mm@kvack.org,
 linux-kernel@vger.kernel.org, iommu@lists.linux-foundation.org,
 Palmer Dabbelt <palmer@dabbelt.com>, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKZm9yX2VhY2hfbWVtYmxv
Y2soKSBpcyB1c2VkIHRvIGl0ZXJhdGUgb3ZlciBtZW1ibG9jay5tZW1vcnkgaW4KYSBmZXcgcGxh
Y2VzIHRoYXQgdXNlIGRhdGEgZnJvbSBtZW1ibG9ja19yZWdpb24gcmF0aGVyIHRoYW4gdGhlIG1l
bW9yeQpyYW5nZXMuCgpJbnRyb2R1Y2Ugc2VwYXJhdGUgZm9yX2VhY2hfbWVtX3JlZ2lvbigpIGFu
ZCBmb3JfZWFjaF9yZXNlcnZlZF9tZW1fcmVnaW9uKCkKdG8gaW1wcm92ZSBlbmNhcHN1bGF0aW9u
IG9mIG1lbWJsb2NrIGludGVybmFscyBmcm9tIGl0cyB1c2Vycy4KClNpZ25lZC1vZmYtYnk6IE1p
a2UgUmFwb3BvcnQgPHJwcHRAbGludXguaWJtLmNvbT4KLS0tCiAuY2xhbmctZm9ybWF0ICAgICAg
ICAgICAgICAgICAgfCAgMyArKy0KIGFyY2gvYXJtNjQva2VybmVsL3NldHVwLmMgICAgICB8ICAy
ICstCiBhcmNoL2FybTY0L21tL251bWEuYyAgICAgICAgICAgfCAgMiArLQogYXJjaC9taXBzL25l
dGxvZ2ljL3hscC9zZXR1cC5jIHwgIDIgKy0KIGFyY2gveDg2L21tL251bWEuYyAgICAgICAgICAg
ICB8ICAyICstCiBpbmNsdWRlL2xpbnV4L21lbWJsb2NrLmggICAgICAgfCAxOSArKysrKysrKysr
KysrKysrLS0tCiBtbS9tZW1ibG9jay5jICAgICAgICAgICAgICAgICAgfCAgNCArKy0tCiBtbS9w
YWdlX2FsbG9jLmMgICAgICAgICAgICAgICAgfCAgOCArKysrLS0tLQogOCBmaWxlcyBjaGFuZ2Vk
LCAyOCBpbnNlcnRpb25zKCspLCAxNCBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS8uY2xhbmct
Zm9ybWF0IGIvLmNsYW5nLWZvcm1hdAppbmRleCBlMjhhODQ5YTFjNTguLmNmZjcxZDM0NTQ1NiAx
MDA2NDQKLS0tIGEvLmNsYW5nLWZvcm1hdAorKysgYi8uY2xhbmctZm9ybWF0CkBAIC0yMDEsNyAr
MjAxLDcgQEAgRm9yRWFjaE1hY3JvczoKICAgLSAnZm9yX2VhY2hfbWF0Y2hpbmdfbm9kZScKICAg
LSAnZm9yX2VhY2hfbWF0Y2hpbmdfbm9kZV9hbmRfbWF0Y2gnCiAgIC0gJ2Zvcl9lYWNoX21lbWJl
cicKLSAgLSAnZm9yX2VhY2hfbWVtYmxvY2snCisgIC0gJ2Zvcl9lYWNoX21lbV9yZWdpb24nCiAg
IC0gJ2Zvcl9lYWNoX21lbWJsb2NrX3R5cGUnCiAgIC0gJ2Zvcl9lYWNoX21lbWNnX2NhY2hlX2lu
ZGV4JwogICAtICdmb3JfZWFjaF9tZW1fcGZuX3JhbmdlJwpAQCAtMjY3LDYgKzI2Nyw3IEBAIEZv
ckVhY2hNYWNyb3M6CiAgIC0gJ2Zvcl9lYWNoX3Byb3BlcnR5X29mX25vZGUnCiAgIC0gJ2Zvcl9l
YWNoX3JlZ2lzdGVyZWRfZmInCiAgIC0gJ2Zvcl9lYWNoX3Jlc2VydmVkX21lbV9yYW5nZScKKyAg
LSAnZm9yX2VhY2hfcmVzZXJ2ZWRfbWVtX3JlZ2lvbicKICAgLSAnZm9yX2VhY2hfcnRkX2NvZGVj
X2RhaXMnCiAgIC0gJ2Zvcl9lYWNoX3J0ZF9jb2RlY19kYWlzX3JvbGxiYWNrJwogICAtICdmb3Jf
ZWFjaF9ydGRfY29tcG9uZW50cycKZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQva2VybmVsL3NldHVw
LmMgYi9hcmNoL2FybTY0L2tlcm5lbC9zZXR1cC5jCmluZGV4IGYzYWVjNzI0NGFhYi4uNTJlYTJm
MWE3MTg0IDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L2tlcm5lbC9zZXR1cC5jCisrKyBiL2FyY2gv
YXJtNjQva2VybmVsL3NldHVwLmMKQEAgLTIxNyw3ICsyMTcsNyBAQCBzdGF0aWMgdm9pZCBfX2lu
aXQgcmVxdWVzdF9zdGFuZGFyZF9yZXNvdXJjZXModm9pZCkKIAlpZiAoIXN0YW5kYXJkX3Jlc291
cmNlcykKIAkJcGFuaWMoIiVzOiBGYWlsZWQgdG8gYWxsb2NhdGUgJXp1IGJ5dGVzXG4iLCBfX2Z1
bmNfXywgcmVzX3NpemUpOwogCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWdpb24pIHsK
Kwlmb3JfZWFjaF9tZW1fcmVnaW9uKHJlZ2lvbikgewogCQlyZXMgPSAmc3RhbmRhcmRfcmVzb3Vy
Y2VzW2krK107CiAJCWlmIChtZW1ibG9ja19pc19ub21hcChyZWdpb24pKSB7CiAJCQlyZXMtPm5h
bWUgID0gInJlc2VydmVkIjsKZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQvbW0vbnVtYS5jIGIvYXJj
aC9hcm02NC9tbS9udW1hLmMKaW5kZXggMGNiZGJjYzg4NWZiLi5mMTIxZTQyMjQ2YTYgMTAwNjQ0
Ci0tLSBhL2FyY2gvYXJtNjQvbW0vbnVtYS5jCisrKyBiL2FyY2gvYXJtNjQvbW0vbnVtYS5jCkBA
IC0zNTAsNyArMzUwLDcgQEAgc3RhdGljIGludCBfX2luaXQgbnVtYV9yZWdpc3Rlcl9ub2Rlcyh2
b2lkKQogCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKm1ibGs7CiAKIAkvKiBDaGVjayB0aGF0IHZh
bGlkIG5pZCBpcyBzZXQgdG8gbWVtYmxrcyAqLwotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwg
bWJsaykgeworCWZvcl9lYWNoX21lbV9yZWdpb24obWJsaykgewogCQlpbnQgbWJsa19uaWQgPSBt
ZW1ibG9ja19nZXRfcmVnaW9uX25vZGUobWJsayk7CiAKIAkJaWYgKG1ibGtfbmlkID09IE5VTUFf
Tk9fTk9ERSB8fCBtYmxrX25pZCA+PSBNQVhfTlVNTk9ERVMpIHsKZGlmZiAtLWdpdCBhL2FyY2gv
bWlwcy9uZXRsb2dpYy94bHAvc2V0dXAuYyBiL2FyY2gvbWlwcy9uZXRsb2dpYy94bHAvc2V0dXAu
YwppbmRleCAxYTBmYzViNjJiYTQuLjZlMzEwMmJjZDJmMSAxMDA2NDQKLS0tIGEvYXJjaC9taXBz
L25ldGxvZ2ljL3hscC9zZXR1cC5jCisrKyBiL2FyY2gvbWlwcy9uZXRsb2dpYy94bHAvc2V0dXAu
YwpAQCAtNzAsNyArNzAsNyBAQCBzdGF0aWMgdm9pZCBubG1fZml4dXBfbWVtKHZvaWQpCiAJY29u
c3QgaW50IHByZWZfYmFja3VwID0gNTEyOwogCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKm1lbTsK
IAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgbWVtKSB7CisJZm9yX2VhY2hfbWVtX3JlZ2lv
bihtZW0pIHsKIAkJbWVtYmxvY2tfcmVtb3ZlKG1lbS0+YmFzZSArIG1lbS0+c2l6ZSAtIHByZWZf
YmFja3VwLAogCQkJcHJlZl9iYWNrdXApOwogCX0KZGlmZiAtLWdpdCBhL2FyY2gveDg2L21tL251
bWEuYyBiL2FyY2gveDg2L21tL251bWEuYwppbmRleCA4ZWU5NTIwMzhjODAuLmZlNmVhMThkNjky
MyAxMDA2NDQKLS0tIGEvYXJjaC94ODYvbW0vbnVtYS5jCisrKyBiL2FyY2gveDg2L21tL251bWEu
YwpAQCAtNTE2LDcgKzUxNiw3IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBudW1hX2NsZWFyX2tlcm5l
bF9ub2RlX2hvdHBsdWcodm9pZCkKIAkgKiAgIG1lbW9yeSByYW5nZXMsIGJlY2F1c2UgcXVpcmtz
IHN1Y2ggYXMgdHJpbV9zbmJfbWVtb3J5KCkKIAkgKiAgIHJlc2VydmUgc3BlY2lmaWMgcGFnZXMg
Zm9yIFNhbmR5IEJyaWRnZSBncmFwaGljcy4gXQogCSAqLwotCWZvcl9lYWNoX21lbWJsb2NrKHJl
c2VydmVkLCBtYl9yZWdpb24pIHsKKwlmb3JfZWFjaF9yZXNlcnZlZF9tZW1fcmVnaW9uKG1iX3Jl
Z2lvbikgewogCQlpbnQgbmlkID0gbWVtYmxvY2tfZ2V0X3JlZ2lvbl9ub2RlKG1iX3JlZ2lvbik7
CiAKIAkJaWYgKG5pZCAhPSBNQVhfTlVNTk9ERVMpCmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4
L21lbWJsb2NrLmggYi9pbmNsdWRlL2xpbnV4L21lbWJsb2NrLmgKaW5kZXggOWU1MWIzZmQ0MTM0
Li5hNjk3MGUwNThiZDcgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgvbWVtYmxvY2suaAorKysg
Yi9pbmNsdWRlL2xpbnV4L21lbWJsb2NrLmgKQEAgLTUyMiw5ICs1MjIsMjIgQEAgc3RhdGljIGlu
bGluZSB1bnNpZ25lZCBsb25nIG1lbWJsb2NrX3JlZ2lvbl9yZXNlcnZlZF9lbmRfcGZuKGNvbnN0
IHN0cnVjdCBtZW1ibG8KIAlyZXR1cm4gUEZOX1VQKHJlZy0+YmFzZSArIHJlZy0+c2l6ZSk7CiB9
CiAKLSNkZWZpbmUgZm9yX2VhY2hfbWVtYmxvY2sobWVtYmxvY2tfdHlwZSwgcmVnaW9uKQkJCQkJ
XAotCWZvciAocmVnaW9uID0gbWVtYmxvY2subWVtYmxvY2tfdHlwZS5yZWdpb25zOwkJCQkJXAot
CSAgICAgcmVnaW9uIDwgKG1lbWJsb2NrLm1lbWJsb2NrX3R5cGUucmVnaW9ucyArIG1lbWJsb2Nr
Lm1lbWJsb2NrX3R5cGUuY250KTsJXAorLyoqCisgKiBmb3JfZWFjaF9tZW1fcmVnaW9uIC0gaXRl
cmVhdGUgb3ZlciByZWdpc3RlcmVkIG1lbW9yeSByZWdpb25zCisgKiBAcmVnaW9uOiBsb29wIHZh
cmlhYmxlCisgKi8KKyNkZWZpbmUgZm9yX2VhY2hfbWVtX3JlZ2lvbihyZWdpb24pCQkJCQlcCisJ
Zm9yIChyZWdpb24gPSBtZW1ibG9jay5tZW1vcnkucmVnaW9uczsJCQkJXAorCSAgICAgcmVnaW9u
IDwgKG1lbWJsb2NrLm1lbW9yeS5yZWdpb25zICsgbWVtYmxvY2subWVtb3J5LmNudCk7CVwKKwkg
ICAgIHJlZ2lvbisrKQorCisvKioKKyAqIGZvcl9lYWNoX3Jlc2VydmVkX21lbV9yZWdpb24gLSBp
dGVyZWF0ZSBvdmVyIHJlc2VydmVkIG1lbW9yeSByZWdpb25zCisgKiBAcmVnaW9uOiBsb29wIHZh
cmlhYmxlCisgKi8KKyNkZWZpbmUgZm9yX2VhY2hfcmVzZXJ2ZWRfbWVtX3JlZ2lvbihyZWdpb24p
CQkJCVwKKwlmb3IgKHJlZ2lvbiA9IG1lbWJsb2NrLnJlc2VydmVkLnJlZ2lvbnM7CQkJXAorCSAg
ICAgcmVnaW9uIDwgKG1lbWJsb2NrLnJlc2VydmVkLnJlZ2lvbnMgKyBtZW1ibG9jay5yZXNlcnZl
ZC5jbnQpOyBcCiAJICAgICByZWdpb24rKykKIAogZXh0ZXJuIHZvaWQgKmFsbG9jX2xhcmdlX3N5
c3RlbV9oYXNoKGNvbnN0IGNoYXIgKnRhYmxlbmFtZSwKZGlmZiAtLWdpdCBhL21tL21lbWJsb2Nr
LmMgYi9tbS9tZW1ibG9jay5jCmluZGV4IGRhZGY1NzlmN2M1My4uN2QzMGRiNWM1MzlmIDEwMDY0
NAotLS0gYS9tbS9tZW1ibG9jay5jCisrKyBiL21tL21lbWJsb2NrLmMKQEAgLTE2NTMsNyArMTY1
Myw3IEBAIHN0YXRpYyBwaHlzX2FkZHJfdCBfX2luaXRfbWVtYmxvY2sgX19maW5kX21heF9hZGRy
KHBoeXNfYWRkcl90IGxpbWl0KQogCSAqIHRoZSBtZW1vcnkgbWVtYmxvY2sgcmVnaW9ucywgaWYg
dGhlIEBsaW1pdCBleGNlZWRzIHRoZSB0b3RhbCBzaXplCiAJICogb2YgdGhvc2UgcmVnaW9ucywg
bWF4X2FkZHIgd2lsbCBrZWVwIG9yaWdpbmFsIHZhbHVlIFBIWVNfQUREUl9NQVgKIAkgKi8KLQlm
b3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHIpIHsKKwlmb3JfZWFjaF9tZW1fcmVnaW9uKHIpIHsK
IAkJaWYgKGxpbWl0IDw9IHItPnNpemUpIHsKIAkJCW1heF9hZGRyID0gci0+YmFzZSArIGxpbWl0
OwogCQkJYnJlYWs7CkBAIC0xODIzLDcgKzE4MjMsNyBAQCB2b2lkIF9faW5pdF9tZW1ibG9jayBt
ZW1ibG9ja190cmltX21lbW9yeShwaHlzX2FkZHJfdCBhbGlnbikKIAlwaHlzX2FkZHJfdCBzdGFy
dCwgZW5kLCBvcmlnX3N0YXJ0LCBvcmlnX2VuZDsKIAlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpy
OwogCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByKSB7CisJZm9yX2VhY2hfbWVtX3JlZ2lv
bihyKSB7CiAJCW9yaWdfc3RhcnQgPSByLT5iYXNlOwogCQlvcmlnX2VuZCA9IHItPmJhc2UgKyBy
LT5zaXplOwogCQlzdGFydCA9IHJvdW5kX3VwKG9yaWdfc3RhcnQsIGFsaWduKTsKZGlmZiAtLWdp
dCBhL21tL3BhZ2VfYWxsb2MuYyBiL21tL3BhZ2VfYWxsb2MuYwppbmRleCA5NWFmMTExZDY5ZDMu
Ljk0OGM3YTc1NGNkYiAxMDA2NDQKLS0tIGEvbW0vcGFnZV9hbGxvYy5jCisrKyBiL21tL3BhZ2Vf
YWxsb2MuYwpAQCAtNTkyNyw3ICs1OTI3LDcgQEAgb3ZlcmxhcF9tZW1tYXBfaW5pdCh1bnNpZ25l
ZCBsb25nIHpvbmUsIHVuc2lnbmVkIGxvbmcgKnBmbikKIAogCWlmIChtaXJyb3JlZF9rZXJuZWxj
b3JlICYmIHpvbmUgPT0gWk9ORV9NT1ZBQkxFKSB7CiAJCWlmICghciB8fCAqcGZuID49IG1lbWJs
b2NrX3JlZ2lvbl9tZW1vcnlfZW5kX3BmbihyKSkgewotCQkJZm9yX2VhY2hfbWVtYmxvY2sobWVt
b3J5LCByKSB7CisJCQlmb3JfZWFjaF9tZW1fcmVnaW9uKHIpIHsKIAkJCQlpZiAoKnBmbiA8IG1l
bWJsb2NrX3JlZ2lvbl9tZW1vcnlfZW5kX3BmbihyKSkKIAkJCQkJYnJlYWs7CiAJCQl9CkBAIC02
NTI4LDcgKzY1MjgsNyBAQCBzdGF0aWMgdW5zaWduZWQgbG9uZyBfX2luaXQgem9uZV9hYnNlbnRf
cGFnZXNfaW5fbm9kZShpbnQgbmlkLAogCQl1bnNpZ25lZCBsb25nIHN0YXJ0X3BmbiwgZW5kX3Bm
bjsKIAkJc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcjsKIAotCQlmb3JfZWFjaF9tZW1ibG9jayht
ZW1vcnksIHIpIHsKKwkJZm9yX2VhY2hfbWVtX3JlZ2lvbihyKSB7CiAJCQlzdGFydF9wZm4gPSBj
bGFtcChtZW1ibG9ja19yZWdpb25fbWVtb3J5X2Jhc2VfcGZuKHIpLAogCQkJCQkgIHpvbmVfc3Rh
cnRfcGZuLCB6b25lX2VuZF9wZm4pOwogCQkJZW5kX3BmbiA9IGNsYW1wKG1lbWJsb2NrX3JlZ2lv
bl9tZW1vcnlfZW5kX3BmbihyKSwKQEAgLTcxMjIsNyArNzEyMiw3IEBAIHN0YXRpYyB2b2lkIF9f
aW5pdCBmaW5kX3pvbmVfbW92YWJsZV9wZm5zX2Zvcl9ub2Rlcyh2b2lkKQogCSAqIG9wdGlvbnMu
CiAJICovCiAJaWYgKG1vdmFibGVfbm9kZV9pc19lbmFibGVkKCkpIHsKLQkJZm9yX2VhY2hfbWVt
YmxvY2sobWVtb3J5LCByKSB7CisJCWZvcl9lYWNoX21lbV9yZWdpb24ocikgewogCQkJaWYgKCFt
ZW1ibG9ja19pc19ob3RwbHVnZ2FibGUocikpCiAJCQkJY29udGludWU7CiAKQEAgLTcxNDMsNyAr
NzE0Myw3IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBmaW5kX3pvbmVfbW92YWJsZV9wZm5zX2Zvcl9u
b2Rlcyh2b2lkKQogCWlmIChtaXJyb3JlZF9rZXJuZWxjb3JlKSB7CiAJCWJvb2wgbWVtX2JlbG93
XzRnYl9ub3RfbWlycm9yZWQgPSBmYWxzZTsKIAotCQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnks
IHIpIHsKKwkJZm9yX2VhY2hfbWVtX3JlZ2lvbihyKSB7CiAJCQlpZiAobWVtYmxvY2tfaXNfbWly
cm9yKHIpKQogCQkJCWNvbnRpbnVlOwogCi0tIAoyLjI2LjIKCl9fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcgbGlzdApPcGVuUklT
Q0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29yZXMub3JnL2xpc3Rp
bmZvL29wZW5yaXNjCg==
