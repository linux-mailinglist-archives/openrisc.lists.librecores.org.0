Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 29FDF3638BF
	for <lists+openrisc@lfdr.de>; Mon, 19 Apr 2021 02:10:49 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id AC6972133F;
	Mon, 19 Apr 2021 02:10:48 +0200 (CEST)
Received: from mail-pg1-f182.google.com (mail-pg1-f182.google.com
 [209.85.215.182])
 by mail.librecores.org (Postfix) with ESMTPS id 6E6CB210A9
 for <openrisc@lists.librecores.org>; Mon, 19 Apr 2021 02:10:46 +0200 (CEST)
Received: by mail-pg1-f182.google.com with SMTP id b17so23028143pgh.7
 for <openrisc@lists.librecores.org>; Sun, 18 Apr 2021 17:10:46 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=from:to:cc:subject:date:message-id:mime-version
 :content-transfer-encoding;
 bh=QC5aKa/Gl3YdPSneLP7FP4k5gH2HjJPYTAiP3BspYzk=;
 b=dG+DJqCKllylRVCIOJsFuA30W4y5oorIwCM7jVHgt9X6Ay+RSHFNchS1JyCe103lOr
 WspHK1EYU3B3PaZiiFgvb7p1TNHucaxMlEVNht62QFbUCVLgoZ01dUSpSat7WuS4bKAr
 2Tz7vdeh9XxOupp2qepziltgesj8Yz+p5rDNo6Lt32OgBulQukTgnJS6ye6esGlDYfno
 XJVWst0BjHxmMiVEtgiCZO9Dy1rjXk/PoJEvUCTKsS+FB9kJojfOj8JT98kyVQ2/qoDT
 bWUixioSoXHNR4PVQfInbqYQWRDlLXBmY5QOd+yEOww2GCZBZji9B9SP+fp7yCTKSi6F
 KSYw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
 :content-transfer-encoding;
 bh=QC5aKa/Gl3YdPSneLP7FP4k5gH2HjJPYTAiP3BspYzk=;
 b=SvLGx6y3ut8ODlxQCiOBJ26Nt5ZBzzx7PjH8djuJ9dtzn+RaBXI7rs2qUMuKlM6FfO
 NIsgbdrIRkzNaS/Ob4b7iIO8Th/HSpj7Sd6idAMY5Id5fOep51UtKo4xcpkrLTiZVovc
 guKPIAHASSWzpuv1paEHXTtN/H+mSPa+qW+6vcC8Hmc734zppycx9s+nz4ID2ZQAiUWI
 3Jnna1dl9ovwneQOh2bAT+laC9giW79ROoF4He9bRS/1jdr38C2yRDLRxElY6umdwG4F
 mvbJYfHDgXlFkDeG9N9LeZ+rzHgLDEHGebirWvJLdcpCEp2tCKeC/K1A38tOGfKG8kTB
 Up8A==
X-Gm-Message-State: AOAM532xYwfKDdNGHc4Vi3IEwCRqJSGYIg3jWKJ/fMcFA6yzeMAM+RzJ
 Ke6ZSBqUGh+CwHpVEHtZKC0=
X-Google-Smtp-Source: ABdhPJwH0fXqpuKcnYSW6jyT6Oi3ZmnUVYwmnYyzw4kW0eVHGMwe6xrnaBUByMh4IpDg7R77xXgaDg==
X-Received: by 2002:aa7:800a:0:b029:250:c8c5:64b3 with SMTP id
 j10-20020aa7800a0000b0290250c8c564b3mr17020678pfi.23.1618791044884; 
 Sun, 18 Apr 2021 17:10:44 -0700 (PDT)
Received: from localhost (g191.124-44-145.ppp.wakwak.ne.jp. [124.44.145.191])
 by smtp.gmail.com with ESMTPSA id
 n39sm7930196pfv.51.2021.04.18.17.10.43
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Sun, 18 Apr 2021 17:10:43 -0700 (PDT)
From: Stafford Horne <shorne@gmail.com>
To: GCC patches <gcc-patches@gcc.gnu.org>
Date: Mon, 19 Apr 2021 09:10:34 +0900
Message-Id: <20210419001034.3626375-1-shorne@gmail.com>
X-Mailer: git-send-email 2.26.2
MIME-Version: 1.0
Subject: [OpenRISC] [PATCH] or1k: Add mcmodel option to handle large GOTs
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: giulio.benetti@benettiengineering.com,
 Openrisc <openrisc@lists.librecores.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

V2hlbiBidWlsZGluZyBsaWJnZW9zIHdlIGdldCBhbiBlcnJvciB3aXRoOgoKICAgIGxpbnV4LXVj
bGliYy85LjMuMC9jcnRiZWdpblMubzogaW4gZnVuY3Rpb24gYF9fZG9fZ2xvYmFsX2R0b3JzX2F1
eCc6CiAgICBjcnRzdHVmZi5jOigudGV4dCsweDExOCk6IHJlbG9jYXRpb24gdHJ1bmNhdGVkIHRv
IGZpdDogUl9PUjFLX0dPVDE2IGFnYWluc3Qgc3ltYm9sIGBfX2N4YV9maW5hbGl6ZScgZGVmaW5l
ZCBpbiAudGV4dCBzZWN0aW9uIGluCiAgICAvaG9tZS9zaG9ybmUvd29yay9vcGVucmlzYy8zZWI5
ZjlkMGY2ZDgyNzRiMmQxOTc1M2MwMDZiZDgzZjdkNTM2ZTNjL291dHB1dC9ob3N0L29yMWstYnVp
bGRyb290LWxpbnV4LXVjbGliYy9zeXNyb290L2xpYi9saWJjLnNvLgoKVGhpcyBpcyBjYXVzZWQg
YnkgR09UIGNvZGUgaGF2aW5nIGEgbGltaXQgb2YgNjRrLiAgSW4gT3BlblJJU0MgdGhpcwpsb29r
cyB0byBiZSB0aGUgb25seSByZWxvY2F0aW9uIGNvZGUgcGF0dGVybiB0byBiZSBsaW1pdGVkIHRv
IDY0ay4KClRoaXMgcGF0Y2ggYWxsb3dzIHNwZWNpZnlpbmcgYSBuZXcgb3B0aW9uIC1tY21vZGVs
PWxhcmdlIHdoaWNoIGNhbiBiZQp1c2VkIHRvIGdlbmVyYXRlIDIgbW9yZSBpbnN0cnVjdGlvbnMg
dG8gY29uc3RydWN0IDMyLWJpdCBhZGRyZXNzZXMgZm9yCnVwIHRvIDRHIEdPVHMuCgpnY2MvQ2hh
bmdlTG9nOgoKCVBSIDk5NzgzCgkqIGNvbmZpZy9vcjFrL29yMWstb3B0cy5oOiBOZXcgZmlsZS4K
CSogY29uZmlnL29yMWsvb3Ixay5jIChvcjFrX2xlZ2l0aW1pemVfYWRkcmVzc18xLCBwcmludF9y
ZWxvYyk6CglTdXBwb3J0IGdlbmVyYXRpbmcgZ290aGEgcmVsb2NhdGlvbnMgaWYgLW1jbW9kZWw9
bGFyZ2UgaXMKCXNwZWNpZmllZC4KCSogY29uZmlnL29yMWsvb3Ixay5oIChUQVJHRVRfQ01PREVM
X1NNQUxMLCBUQVJHRVRfQ01PREVMX0xBUkdFKToKCU5ldyBtYWNyb3MuCgkqIGNvbmZpZy9vcjFr
L29yMWsub3B0IChtY21vZGVsPSk6IE5ldyBvcHRpb24uCgkqIGRvYy9pbnZva2UudGV4dCAoT3Bl
blJJU0MgT3B0aW9ucyk6IERvY3VtZW50IG1jbW9kZWwuCi0tLQoKVGhpcyBkZXBlbmRzIG9uIHRo
ZSBiaW51dGlscy1nZGIgcGF0Y2ggc2VudCBoZXJlOgogLSBodHRwczovL3NvdXJjZXdhcmUub3Jn
L3BpcGVybWFpbC9iaW51dGlscy8yMDIxLUFwcmlsLzExNjE1NS5odG1sCgogZ2NjL2NvbmZpZy9v
cjFrL29yMWstb3B0cy5oIHwgMzAgKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrCiBnY2Mv
Y29uZmlnL29yMWsvb3Ixay5jICAgICAgfCAxMSArKysrKysrKystLQogZ2NjL2NvbmZpZy9vcjFr
L29yMWsuaCAgICAgIHwgIDcgKysrKysrKwogZ2NjL2NvbmZpZy9vcjFrL29yMWsub3B0ICAgIHwg
MTkgKysrKysrKysrKysrKysrKysrKwogZ2NjL2RvYy9pbnZva2UudGV4aSAgICAgICAgIHwgMTIg
KysrKysrKysrKystCiA1IGZpbGVzIGNoYW5nZWQsIDc2IGluc2VydGlvbnMoKyksIDMgZGVsZXRp
b25zKC0pCiBjcmVhdGUgbW9kZSAxMDA2NDQgZ2NjL2NvbmZpZy9vcjFrL29yMWstb3B0cy5oCgpk
aWZmIC0tZ2l0IGEvZ2NjL2NvbmZpZy9vcjFrL29yMWstb3B0cy5oIGIvZ2NjL2NvbmZpZy9vcjFr
L29yMWstb3B0cy5oCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwLi5mNzkx
Yjg5NGZkZAotLS0gL2Rldi9udWxsCisrKyBiL2djYy9jb25maWcvb3Ixay9vcjFrLW9wdHMuaApA
QCAtMCwwICsxLDMwIEBACisvKiBEZWZpbml0aW9ucyBmb3Igb3B0aW9uIGhhbmRsaW5nIGZvciBP
cGVuUklTQy4KKyAgIENvcHlyaWdodCAoQykgMjAyMSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24s
IEluYy4KKyAgIENvbnRyaWJ1dGVkIGJ5IFN0YWZmb3JkIEhvcm5lLgorCisgICBUaGlzIGZpbGUg
aXMgcGFydCBvZiBHQ0MuCisKKyAgIEdDQyBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlz
dHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0CisgICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdO
VSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZAorICAgYnkgdGhlIEZyZWUgU29m
dHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMywgb3IgKGF0IHlvdXIKKyAgIG9wdGlv
bikgYW55IGxhdGVyIHZlcnNpb24uCisKKyAgIEdDQyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9w
ZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVAorICAgQU5ZIFdBUlJBTlRZOyB3
aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZCisgICBv
ciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VIEdlbmVyYWwg
UHVibGljCisgICBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCisKKyAgIFlvdSBzaG91bGQgaGF2
ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCisgICBh
bG9uZyB3aXRoIEdDQzsgc2VlIHRoZSBmaWxlIENPUFlJTkczLiAgSWYgbm90IHNlZQorICAgPGh0
dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LiAgKi8KKworI2lmbmRlZiBHQ0NfT1IxS19PUFRT
X0gKKyNkZWZpbmUgR0NDX09SMUtfT1BUU19ICisKKy8qIFRoZSBPcGVuUklTQyBjb2RlIGdlbmVy
YXRpb24gbW9kZWxzIGF2YWlsYWJsZS4gICovCitlbnVtIG9yMWtfY21vZGVsX3R5cGUgeworICBD
TU9ERUxfU01BTEwsCisgIENNT0RFTF9MQVJHRQorfTsKKworI2VuZGlmIC8qIEdDQ19PUjFLX09Q
VFNfSCAqLwpkaWZmIC0tZ2l0IGEvZ2NjL2NvbmZpZy9vcjFrL29yMWsuYyBiL2djYy9jb25maWcv
b3Ixay9vcjFrLmMKaW5kZXggZTc3MmE3YWRkZWEuLjI3ZDNmYTE3OTk1IDEwMDY0NAotLS0gYS9n
Y2MvY29uZmlnL29yMWsvb3Ixay5jCisrKyBiL2djYy9jb25maWcvb3Ixay9vcjFrLmMKQEAgLTc1
MCw3ICs3NTAsMTQgQEAgb3Ixa19sZWdpdGltaXplX2FkZHJlc3NfMSAocnR4IHgsIHJ0eCBzY3Jh
dGNoKQogCSAgICB7CiAJICAgICAgYmFzZSA9IGdlbl9zeW1fdW5zcGVjIChiYXNlLCBVTlNQRUNf
R09UKTsKIAkgICAgICBjcnRsLT51c2VzX3BpY19vZmZzZXRfdGFibGUgPSAxOwotCSAgICAgIHQy
ID0gZ2VuX3J0eF9MT19TVU0gKFBtb2RlLCBwaWNfb2Zmc2V0X3RhYmxlX3J0eCwgYmFzZSk7CisJ
ICAgICAgaWYgKFRBUkdFVF9DTU9ERUxfTEFSR0UpCisJCXsKKwkgICAgICAgICAgZW1pdF9pbnNu
IChnZW5fcnR4X1NFVCAodDEsIGdlbl9ydHhfSElHSCAoUG1vZGUsIGJhc2UpKSk7CisJICAgICAg
ICAgIGVtaXRfaW5zbiAoZ2VuX2FkZDNfaW5zbiAodDEsIHQxLCBwaWNfb2Zmc2V0X3RhYmxlX3J0
eCkpOworCSAgICAgICAgICB0MiA9IGdlbl9ydHhfTE9fU1VNIChQbW9kZSwgdDEsIGJhc2UpOwor
CQl9CisJICAgICAgZWxzZQorCSAgICAgICAgdDIgPSBnZW5fcnR4X0xPX1NVTSAoUG1vZGUsIHBp
Y19vZmZzZXRfdGFibGVfcnR4LCBiYXNlKTsKIAkgICAgICB0MiA9IGdlbl9jb25zdF9tZW0gKFBt
b2RlLCB0Mik7CiAJICAgICAgZW1pdF9pbnNuIChnZW5fcnR4X1NFVCAodDEsIHQyKSk7CiAJICAg
ICAgYmFzZSA9IHQxOwpAQCAtMTA4OSw3ICsxMDk2LDcgQEAgcHJpbnRfcmVsb2MgKEZJTEUgKnN0
cmVhbSwgcnR4IHgsIEhPU1RfV0lERV9JTlQgYWRkLCByZWxvY19raW5kIGtpbmQpCiAgICAgIG5v
IHNwZWNpYWwgbWFya3VwLiAgKi8KICAgc3RhdGljIGNvbnN0IGNoYXIgKiBjb25zdCByZWxvY3Nb
UktJTkRfTUFYXVtSVFlQRV9NQVhdID0gewogICAgIHsgImxvIiwgImdvdCIsICJnb3RvZmZsbyIs
ICJ0cG9mZmxvIiwgImdvdHRwb2ZmbG8iLCAidGxzZ2RsbyIgfSwKLSAgICB7ICJoYSIsIE5VTEws
ICAiZ290b2ZmaGEiLCAidHBvZmZoYSIsICJnb3R0cG9mZmhhIiwgInRsc2dkaGkiIH0sCisgICAg
eyAiaGEiLCAiZ290aGEiLCAiZ290b2ZmaGEiLCAidHBvZmZoYSIsICJnb3R0cG9mZmhhIiwgInRs
c2dkaGkiIH0sCiAgIH07CiAgIHJlbG9jX3R5cGUgdHlwZSA9IFJUWVBFX0RJUkVDVDsKIApkaWZm
IC0tZ2l0IGEvZ2NjL2NvbmZpZy9vcjFrL29yMWsuaCBiL2djYy9jb25maWcvb3Ixay9vcjFrLmgK
aW5kZXggZmUwMWFiODFlYWQuLjY2OTkwN2U3ZTc0IDEwMDY0NAotLS0gYS9nY2MvY29uZmlnL29y
MWsvb3Ixay5oCisrKyBiL2djYy9jb25maWcvb3Ixay9vcjFrLmgKQEAgLTIxLDYgKzIxLDggQEAK
ICNpZm5kZWYgR0NDX09SMUtfSAogI2RlZmluZSBHQ0NfT1IxS19ICiAKKyNpbmNsdWRlICJjb25m
aWcvb3Ixay9vcjFrLW9wdHMuaCIKKwogLyogTmFtZXMgdG8gcHJlZGVmaW5lIGluIHRoZSBwcmVw
cm9jZXNzb3IgZm9yIHRoaXMgdGFyZ2V0IG1hY2hpbmUuICAqLwogI2RlZmluZSBUQVJHRVRfQ1BV
X0NQUF9CVUlMVElOUygpCQlcCiAgIGRvCQkJCQkJXApAQCAtMzcsNiArMzksMTEgQEAKICAgICB9
CQkJCQkJXAogICB3aGlsZSAoMCkKIAorI2RlZmluZSBUQVJHRVRfQ01PREVMX1NNQUxMIFwKKyAg
KG9yMWtfY29kZV9tb2RlbCA9PSBDTU9ERUxfU01BTEwpCisjZGVmaW5lIFRBUkdFVF9DTU9ERUxf
TEFSR0UgXAorICAob3Ixa19jb2RlX21vZGVsID09IENNT0RFTF9MQVJHRSkKKwogLyogU3RvcmFn
ZSBsYXlvdXQuICAqLwogCiAjZGVmaW5lIERFRkFVTFRfU0lHTkVEX0NIQVIgMQpkaWZmIC0tZ2l0
IGEvZ2NjL2NvbmZpZy9vcjFrL29yMWsub3B0IGIvZ2NjL2NvbmZpZy9vcjFrL29yMWsub3B0Cmlu
ZGV4IDZiZDBmM2VlZTZkLi5jYzIzZTNiODg1NiAxMDA2NDQKLS0tIGEvZ2NjL2NvbmZpZy9vcjFr
L29yMWsub3B0CisrKyBiL2djYy9jb25maWcvb3Ixay9vcjFrLm9wdApAQCAtMjEsNiArMjEsOSBA
QAogOyBTZWUgdGhlIEdDQyBpbnRlcm5hbHMgbWFudWFsIChvcHRpb25zLnRleGkpIGZvciBhIGRl
c2NyaXB0aW9uIG9mCiA7IHRoaXMgZmlsZSdzIGZvcm1hdC4KIAorSGVhZGVySW5jbHVkZQorY29u
ZmlnL29yMWsvb3Ixay1vcHRzLmgKKwogbWhhcmQtZGl2CiBUYXJnZXQgUmVqZWN0TmVnYXRpdmUg
SW52ZXJzZU1hc2soU09GVF9ESVYpCiBFbmFibGUgZ2VuZXJhdGlvbiBvZiBoYXJkd2FyZSBkaXZp
ZGUgKGwuZGl2LCBsLmRpdnUpIGluc3RydWN0aW9ucy4gIFRoaXMgaXMgdGhlCkBAIC02Myw2ICs2
NiwyMiBAQCBXaGVuIC1taGFyZC1mbG9hdCBpcyBzZWxlY3RlZCwgZW5hYmxlcyBnZW5lcmF0aW9u
IG9mIHVub3JkZXJlZCBmbG9hdGluZyBwb2ludAogY29tcGFyZSBhbmQgc2V0IGZsYWcgKGxmLnNm
dW4qKSBpbnN0cnVjdGlvbnMuICBCeSBkZWZhdWx0IGZ1bmN0aW9ucyBmcm9tIGxpYmdjYwogYXJl
IHVzZWQgdG8gcGVyZm9ybSB1bm9yZGVyZWQgZmxvYXRpbmcgcG9pbnQgY29tcGFyZSBhbmQgc2V0
IGZsYWcgb3BlcmF0aW9ucy4KIAorbWNtb2RlbD0KK1RhcmdldCBSZWplY3ROZWdhdGl2ZSBKb2lu
ZWQgRW51bShvcjFrX2Ntb2RlbF90eXBlKSBWYXIob3Ixa19jb2RlX21vZGVsKSBJbml0KENNT0RF
TF9TTUFMTCkKK1NwZWNpZnkgdGhlIGNvZGUgbW9kZWwgdXNlZCBmb3IgYWNjZXNzaW5nIG1lbW9y
eSBhZGRyZXNzZXMuICBTcGVjaWZ5aW5nIGxhcmdlCitlbmFibGVzIGdlbmVyYXRpbmcgYmluYXJp
ZXMgd2l0aCBsYXJnZSBnbG9iYWwgb2Zmc2V0IHRhYmxlcy4gIEJ5IGRlZmF1bHQgdGhlCit2YWx1
ZSBpcyBzbWFsbC4KKworRW51bQorTmFtZShvcjFrX2Ntb2RlbF90eXBlKSBUeXBlKGVudW0gb3Ix
a19jbW9kZWxfdHlwZSkKK0tub3duIGNvZGUgbW9kZWwgdHlwZXMgKGZvciB1c2Ugd2l0aCB0aGUg
LW1jbW9kZWw9IG9wdGlvbik6CisKK0VudW1WYWx1ZQorRW51bShvcjFrX2Ntb2RlbF90eXBlKSBT
dHJpbmcoc21hbGwpIFZhbHVlKENNT0RFTF9TTUFMTCkKKworRW51bVZhbHVlCitFbnVtKG9yMWtf
Y21vZGVsX3R5cGUpIFN0cmluZyhsYXJnZSkgVmFsdWUoQ01PREVMX0xBUkdFKQorCiBtY21vdgog
VGFyZ2V0IFJlamVjdE5lZ2F0aXZlIE1hc2soQ01PVikKIEVuYWJsZSBnZW5lcmF0aW9uIG9mIGNv
bmRpdGlvbmFsIG1vdmUgKGwuY21vdikgaW5zdHJ1Y3Rpb25zLiAgQnkgZGVmYXVsdCB0aGUKZGlm
ZiAtLWdpdCBhL2djYy9kb2MvaW52b2tlLnRleGkgYi9nY2MvZG9jL2ludm9rZS50ZXhpCmluZGV4
IDA5NmNlYmM4NTYyLi42M2NjNGVjOTdkYiAxMDA2NDQKLS0tIGEvZ2NjL2RvYy9pbnZva2UudGV4
aQorKysgYi9nY2MvZG9jL2ludm9rZS50ZXhpCkBAIC0xMTM1LDcgKzExMzUsOCBAQCBPYmplY3Rp
dmUtQyBhbmQgT2JqZWN0aXZlLUMrKyBEaWFsZWN0c30uCiBAZ2Njb3B0bGlzdHstbWJvYXJkPUB2
YXJ7bmFtZX0gIC1tbmV3bGliICAtbWhhcmQtbXVsICAtbWhhcmQtZGl2IEBnb2wKIC1tc29mdC1t
dWwgIC1tc29mdC1kaXYgQGdvbAogLW1zb2Z0LWZsb2F0ICAtbWhhcmQtZmxvYXQgIC1tZG91Ymxl
LWZsb2F0IC1tdW5vcmRlcmVkLWZsb2F0IEBnb2wKLS1tY21vdiAgLW1yb3IgIC1tcm9yaSAgLW1z
ZXh0ICAtbXNmaW1tICAtbXNoZnRpbW19CistbWNtb3YgIC1tcm9yICAtbXJvcmkgIC1tc2V4dCAg
LW1zZmltbSAgLW1zaGZ0aW1tIEBnb2wKKy1tY21vZGVsPUB2YXJ7Y29kZS1tb2RlbH19CiAKIEBl
bXBoe1BEUC0xMSBPcHRpb25zfQogQGdjY29wdGxpc3R7LW1mcHUgIC1tc29mdC1mbG9hdCAgLW1h
YzAgIC1tbm8tYWMwICAtbTQwICAtbTQ1ICAtbTEwIEBnb2wKQEAgLTI2NDA2LDYgKzI2NDA3LDE1
IEBAIEVuYWJsZSBnZW5lcmF0aW9uIG9mIHNoaWZ0IHdpdGggaW1tZWRpYXRlIChAY29kZXtsLnNy
YWl9LCBAY29kZXtsLnNybGl9LAogQGNvZGV7bC5zbGxpfSkgaW5zdHJ1Y3Rpb25zLiAgQnkgZGVm
YXVsdCBleHRyYSBpbnN0cnVjdGlvbnMgd2lsbCBiZSBnZW5lcmF0ZWQKIHRvIHN0b3JlIHRoZSBp
bW1lZGlhdGUgdG8gYSByZWdpc3RlciBmaXJzdC4KIAorQGl0ZW0gLW1jbW9kZWw9c21hbGwKK0Bv
cGluZGV4IG1jbW9kZWw9c21hbGwKK0dlbmVyYXRlIE9wZW5SSVNDIGNvZGUgZm9yIHRoZSBzbWFs
bCBtb2RlbDogVGhlIEdPVCBpcyBsaW1pdGVkIHRvIDY0ay4gVGhpcyBpcwordGhlIGRlZmF1bHQg
bW9kZWwuCisKK0BpdGVtIC1tY21vZGVsPWxhcmdlCitAb3BpbmRleCBtY21vZGVsPWxhcmdlCitH
ZW5lcmF0ZSBPcGVuUklTQyBjb2RlIGZvciB0aGUgbGFyZ2UgbW9kZWw6IFRoZSBHT1QgbWF5IGdy
b3cgdXAgdG8gNEcgaW4gc2l6ZS4KKwogCiBAZW5kIHRhYmxlCiAKLS0gCjIuMjYuMgoKX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KT3BlblJJU0MgbWFpbGlu
ZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMub3JnCmh0dHBzOi8vbGlzdHMubGlicmVj
b3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJpc2MK
