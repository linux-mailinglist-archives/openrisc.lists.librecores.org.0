Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 12D0D2499C2
	for <lists+openrisc@lfdr.de>; Wed, 19 Aug 2020 11:55:57 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id D5D5D20D6F;
	Wed, 19 Aug 2020 11:55:56 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 99E1020CD8
 for <openrisc@lists.librecores.org>; Tue, 18 Aug 2020 17:19:45 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id B392120825;
 Tue, 18 Aug 2020 15:19:33 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1597763984;
 bh=pL5CdAsZOVSK1FyJ8jy1wDcujnpLwkr1X4pjuThf/H8=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=EiIoYcdepvdhi9XjcFbEWk2OPyadRQMLSnsTw7dwumwEFzOMsu117hpNz9Qp5IxXU
 ed1wANtxTvtneZaMWRYIRdfqCjJQvQWFqyOipJTJ4ZnzmAPZuNKt9rFWlVzxF6pqnj
 x+DSi8lkJA3KMhcma6u3/0Bcl5zUfyOFmcNgdzW4=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Tue, 18 Aug 2020 18:16:33 +0300
Message-Id: <20200818151634.14343-17-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200818151634.14343-1-rppt@kernel.org>
References: <20200818151634.14343-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Wed, 19 Aug 2020 11:55:42 +0200
Subject: [OpenRISC] [PATCH v3 16/17] memblock: implement
 for_each_reserved_mem_region() using __next_mem_region()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Thomas Gleixner <tglx@linutronix.de>,
 Emil Renner Berthing <kernel@esmil.dk>, linux-sh@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Christoph Hellwig <hch@lst.de>,
 Marek Szyprowski <m.szyprowski@samsung.com>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Michael Ellerman <mpe@ellerman.id.au>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Mike Rapoport <rppt@linux.ibm.com>, clang-built-linux@googlegroups.com,
 Ingo Molnar <mingo@redhat.com>, linux-arm-kernel@lists.infradead.org,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Hari Bathini <hbathini@linux.ibm.com>, Daniel Axtens <dja@axtens.net>,
 Michal Simek <monstr@monstr.eu>, Yoshinori Sato <ysato@users.sourceforge.jp>,
 linux-mm@kvack.org, linux-kernel@vger.kernel.org,
 Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>,
 iommu@lists.linux-foundation.org, Palmer Dabbelt <palmer@dabbelt.com>,
 linuxppc-dev@lists.ozlabs.org, Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKSXRlcmF0aW9uIG92ZXIg
bWVtYmxvY2sucmVzZXJ2ZWQgd2l0aCBmb3JfZWFjaF9yZXNlcnZlZF9tZW1fcmVnaW9uKCkgdXNl
ZApfX25leHRfcmVzZXJ2ZWRfbWVtX3JlZ2lvbigpIHRoYXQgaW1wbGVtZW50ZWQgYSBzdWJzZXQg
b2YKX19uZXh0X21lbV9yZWdpb24oKS4KClVzZSBfX2Zvcl9lYWNoX21lbV9yYW5nZSgpIGFuZCwg
ZXNzZW50aWFsbHksIF9fbmV4dF9tZW1fcmVnaW9uKCkgd2l0aAphcHByb3ByaWF0ZSBwYXJhbWV0
ZXJzIHRvIHJlZHVjZSBjb2RlIGR1cGxpY2F0aW9uLgoKV2hpbGUgb24gaXQsIHJlbmFtZSBmb3Jf
ZWFjaF9yZXNlcnZlZF9tZW1fcmVnaW9uKCkgdG8KZm9yX2VhY2hfcmVzZXJ2ZWRfbWVtX3Jhbmdl
KCkgZm9yIGNvbnNpc3RlbmN5LgoKU2lnbmVkLW9mZi1ieTogTWlrZSBSYXBvcG9ydCA8cnBwdEBs
aW51eC5pYm0uY29tPgpBY2tlZC1ieTogTWlndWVsIE9qZWRhIDxtaWd1ZWwub2plZGEuc2FuZG9u
aXNAZ21haWwuY29tPiAjIC5jbGFuZy1mb3JtYXQKLS0tCiAuY2xhbmctZm9ybWF0ICAgICAgICAg
ICAgICAgICAgICB8ICAyICstCiBhcmNoL2FybTY0L2tlcm5lbC9zZXR1cC5jICAgICAgICB8ICAy
ICstCiBkcml2ZXJzL2lycWNoaXAvaXJxLWdpYy12My1pdHMuYyB8ICAyICstCiBpbmNsdWRlL2xp
bnV4L21lbWJsb2NrLmggICAgICAgICB8IDEyICsrKy0tLS0KIG1tL21lbWJsb2NrLmMgICAgICAg
ICAgICAgICAgICAgIHwgNTYgKysrKysrKysrKysrLS0tLS0tLS0tLS0tLS0tLS0tLS0KIDUgZmls
ZXMgY2hhbmdlZCwgMjcgaW5zZXJ0aW9ucygrKSwgNDcgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0
IGEvLmNsYW5nLWZvcm1hdCBiLy5jbGFuZy1mb3JtYXQKaW5kZXggM2U0MmE4ZTRkZjczLi4yYjc3
Y2M0MTliOTcgMTAwNjQ0Ci0tLSBhLy5jbGFuZy1mb3JtYXQKKysrIGIvLmNsYW5nLWZvcm1hdApA
QCAtMjY3LDcgKzI2Nyw3IEBAIEZvckVhY2hNYWNyb3M6CiAgIC0gJ2Zvcl9lYWNoX3Byb2Nlc3Nf
dGhyZWFkJwogICAtICdmb3JfZWFjaF9wcm9wZXJ0eV9vZl9ub2RlJwogICAtICdmb3JfZWFjaF9y
ZWdpc3RlcmVkX2ZiJwotICAtICdmb3JfZWFjaF9yZXNlcnZlZF9tZW1fcmVnaW9uJworICAtICdm
b3JfZWFjaF9yZXNlcnZlZF9tZW1fcmFuZ2UnCiAgIC0gJ2Zvcl9lYWNoX3J0ZF9jb2RlY19kYWlz
JwogICAtICdmb3JfZWFjaF9ydGRfY29kZWNfZGFpc19yb2xsYmFjaycKICAgLSAnZm9yX2VhY2hf
cnRkX2NvbXBvbmVudHMnCmRpZmYgLS1naXQgYS9hcmNoL2FybTY0L2tlcm5lbC9zZXR1cC5jIGIv
YXJjaC9hcm02NC9rZXJuZWwvc2V0dXAuYwppbmRleCA3N2M0YzliYWQxYjguLmE5ODZjNmY4YWI0
MiAxMDA2NDQKLS0tIGEvYXJjaC9hcm02NC9rZXJuZWwvc2V0dXAuYworKysgYi9hcmNoL2FybTY0
L2tlcm5lbC9zZXR1cC5jCkBAIC0yNTcsNyArMjU3LDcgQEAgc3RhdGljIGludCBfX2luaXQgcmVz
ZXJ2ZV9tZW1ibG9ja19yZXNlcnZlZF9yZWdpb25zKHZvaWQpCiAJCWlmICghbWVtYmxvY2tfaXNf
cmVnaW9uX3Jlc2VydmVkKG1lbS0+c3RhcnQsIG1lbV9zaXplKSkKIAkJCWNvbnRpbnVlOwogCi0J
CWZvcl9lYWNoX3Jlc2VydmVkX21lbV9yZWdpb24oaiwgJnJfc3RhcnQsICZyX2VuZCkgeworCQlm
b3JfZWFjaF9yZXNlcnZlZF9tZW1fcmFuZ2UoaiwgJnJfc3RhcnQsICZyX2VuZCkgewogCQkJcmVz
b3VyY2Vfc2l6ZV90IHN0YXJ0LCBlbmQ7CiAKIAkJCXN0YXJ0ID0gbWF4KFBGTl9QSFlTKFBGTl9E
T1dOKHJfc3RhcnQpKSwgbWVtLT5zdGFydCk7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2lycWNoaXAv
aXJxLWdpYy12My1pdHMuYyBiL2RyaXZlcnMvaXJxY2hpcC9pcnEtZ2ljLXYzLWl0cy5jCmluZGV4
IDk1ZjA5NzQ0OGY5Ny4uY2E1YzQ3MGVkMGQwIDEwMDY0NAotLS0gYS9kcml2ZXJzL2lycWNoaXAv
aXJxLWdpYy12My1pdHMuYworKysgYi9kcml2ZXJzL2lycWNoaXAvaXJxLWdpYy12My1pdHMuYwpA
QCAtMjE5Miw3ICsyMTkyLDcgQEAgc3RhdGljIGJvb2wgZ2ljX2NoZWNrX3Jlc2VydmVkX3Jhbmdl
KHBoeXNfYWRkcl90IGFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKIAogCWFkZHJfZW5kID0gYWRk
ciArIHNpemUgLSAxOwogCi0JZm9yX2VhY2hfcmVzZXJ2ZWRfbWVtX3JlZ2lvbihpLCAmc3RhcnQs
ICZlbmQpIHsKKwlmb3JfZWFjaF9yZXNlcnZlZF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKSB7
CiAJCWlmIChhZGRyID49IHN0YXJ0ICYmIGFkZHJfZW5kIDw9IGVuZCkKIAkJCXJldHVybiB0cnVl
OwogCX0KZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvbWVtYmxvY2suaCBiL2luY2x1ZGUvbGlu
dXgvbWVtYmxvY2suaAppbmRleCAxNWVkMTE5NzAxYzEuLjM1NDA3ODcxM2NkMSAxMDA2NDQKLS0t
IGEvaW5jbHVkZS9saW51eC9tZW1ibG9jay5oCisrKyBiL2luY2x1ZGUvbGludXgvbWVtYmxvY2su
aApAQCAtMTMyLDkgKzEzMiw2IEBAIHZvaWQgX19uZXh0X21lbV9yYW5nZV9yZXYodTY0ICppZHgs
IGludCBuaWQsIGVudW0gbWVtYmxvY2tfZmxhZ3MgZmxhZ3MsCiAJCQkgIHN0cnVjdCBtZW1ibG9j
a190eXBlICp0eXBlX2IsIHBoeXNfYWRkcl90ICpvdXRfc3RhcnQsCiAJCQkgIHBoeXNfYWRkcl90
ICpvdXRfZW5kLCBpbnQgKm91dF9uaWQpOwogCi12b2lkIF9fbmV4dF9yZXNlcnZlZF9tZW1fcmVn
aW9uKHU2NCAqaWR4LCBwaHlzX2FkZHJfdCAqb3V0X3N0YXJ0LAotCQkJCXBoeXNfYWRkcl90ICpv
dXRfZW5kKTsKLQogdm9pZCBfX21lbWJsb2NrX2ZyZWVfbGF0ZShwaHlzX2FkZHJfdCBiYXNlLCBw
aHlzX2FkZHJfdCBzaXplKTsKIAogI2lmZGVmIENPTkZJR19IQVZFX01FTUJMT0NLX1BIWVNfTUFQ
CkBAIC0yMjQsNyArMjIxLDcgQEAgc3RhdGljIGlubGluZSB2b2lkIF9fbmV4dF9waHlzbWVtX3Jh
bmdlKHU2NCAqaWR4LCBzdHJ1Y3QgbWVtYmxvY2tfdHlwZSAqdHlwZSwKIAkJCQkgTUVNQkxPQ0tf
Tk9ORSwgcF9zdGFydCwgcF9lbmQsIE5VTEwpCiAKIC8qKgotICogZm9yX2VhY2hfcmVzZXJ2ZWRf
bWVtX3JlZ2lvbiAtIGl0ZXJhdGUgb3ZlciBhbGwgcmVzZXJ2ZWQgbWVtYmxvY2sgYXJlYXMKKyAq
IGZvcl9lYWNoX3Jlc2VydmVkX21lbV9yYW5nZSAtIGl0ZXJhdGUgb3ZlciBhbGwgcmVzZXJ2ZWQg
bWVtYmxvY2sgYXJlYXMKICAqIEBpOiB1NjQgdXNlZCBhcyBsb29wIHZhcmlhYmxlCiAgKiBAcF9z
dGFydDogcHRyIHRvIHBoeXNfYWRkcl90IGZvciBzdGFydCBhZGRyZXNzIG9mIHRoZSByYW5nZSwg
Y2FuIGJlICVOVUxMCiAgKiBAcF9lbmQ6IHB0ciB0byBwaHlzX2FkZHJfdCBmb3IgZW5kIGFkZHJl
c3Mgb2YgdGhlIHJhbmdlLCBjYW4gYmUgJU5VTEwKQEAgLTIzMiwxMCArMjI5LDkgQEAgc3RhdGlj
IGlubGluZSB2b2lkIF9fbmV4dF9waHlzbWVtX3JhbmdlKHU2NCAqaWR4LCBzdHJ1Y3QgbWVtYmxv
Y2tfdHlwZSAqdHlwZSwKICAqIFdhbGtzIG92ZXIgcmVzZXJ2ZWQgYXJlYXMgb2YgbWVtYmxvY2su
IEF2YWlsYWJsZSBhcyBzb29uIGFzIG1lbWJsb2NrCiAgKiBpcyBpbml0aWFsaXplZC4KICAqLwot
I2RlZmluZSBmb3JfZWFjaF9yZXNlcnZlZF9tZW1fcmVnaW9uKGksIHBfc3RhcnQsIHBfZW5kKQkJ
CVwKLQlmb3IgKGkgPSAwVUwsIF9fbmV4dF9yZXNlcnZlZF9tZW1fcmVnaW9uKCZpLCBwX3N0YXJ0
LCBwX2VuZCk7CVwKLQkgICAgIGkgIT0gKHU2NClVTExPTkdfTUFYOwkJCQkJXAotCSAgICAgX19u
ZXh0X3Jlc2VydmVkX21lbV9yZWdpb24oJmksIHBfc3RhcnQsIHBfZW5kKSkKKyNkZWZpbmUgZm9y
X2VhY2hfcmVzZXJ2ZWRfbWVtX3JhbmdlKGksIHBfc3RhcnQsIHBfZW5kKQkJCVwKKwlfX2Zvcl9l
YWNoX21lbV9yYW5nZShpLCAmbWVtYmxvY2sucmVzZXJ2ZWQsIE5VTEwsIE5VTUFfTk9fTk9ERSwJ
XAorCQkJICAgICBNRU1CTE9DS19OT05FLCBwX3N0YXJ0LCBwX2VuZCwgTlVMTCkKIAogc3RhdGlj
IGlubGluZSBib29sIG1lbWJsb2NrX2lzX2hvdHBsdWdnYWJsZShzdHJ1Y3QgbWVtYmxvY2tfcmVn
aW9uICptKQogewpkaWZmIC0tZ2l0IGEvbW0vbWVtYmxvY2suYyBiL21tL21lbWJsb2NrLmMKaW5k
ZXggZWI0Zjg2NmJlYTM0Li5kMGJlNTdhY2NjZjIgMTAwNjQ0Ci0tLSBhL21tL21lbWJsb2NrLmMK
KysrIGIvbW0vbWVtYmxvY2suYwpAQCAtMTMyLDYgKzEzMiwxNCBAQCBzdHJ1Y3QgbWVtYmxvY2tf
dHlwZSBwaHlzbWVtID0gewogfTsKICNlbmRpZgogCisvKgorICoga2VlcCBhIHBvaW50ZXIgdG8g
Jm1lbWJsb2NrLm1lbW9yeSBpbiB0aGUgdGV4dCBzZWN0aW9uIHRvIHVzZSBpdCBpbgorICogX19u
ZXh0X21lbV9yYW5nZSgpIGFuZCBpdHMgaGVscGVycy4KKyAqICBGb3IgYXJjaGl0ZWN0dXJlcyB0
aGF0IGRvIG5vdCBrZWVwIG1lbWJsb2NrIGRhdGEgYWZ0ZXIgaW5pdCwgdGhpcworICogcG9pbnRl
ciB3aWxsIGJlIHJlc2V0IHRvIE5VTEwgYXQgbWVtYmxvY2tfZGlzY2FyZCgpCisgKi8KK3N0YXRp
YyBfX3JlZmRhdGEgc3RydWN0IG1lbWJsb2NrX3R5cGUgKm1lbWJsb2NrX21lbW9yeSA9ICZtZW1i
bG9jay5tZW1vcnk7CisKICNkZWZpbmUgZm9yX2VhY2hfbWVtYmxvY2tfdHlwZShpLCBtZW1ibG9j
a190eXBlLCByZ24pCQkJXAogCWZvciAoaSA9IDAsIHJnbiA9ICZtZW1ibG9ja190eXBlLT5yZWdp
b25zWzBdOwkJCVwKIAkgICAgIGkgPCBtZW1ibG9ja190eXBlLT5jbnQ7CQkJCQlcCkBAIC0zOTks
NiArNDA3LDggQEAgdm9pZCBfX2luaXQgbWVtYmxvY2tfZGlzY2FyZCh2b2lkKQogCQkJCSAgbWVt
YmxvY2subWVtb3J5Lm1heCk7CiAJCV9fbWVtYmxvY2tfZnJlZV9sYXRlKGFkZHIsIHNpemUpOwog
CX0KKworCW1lbWJsb2NrX21lbW9yeSA9IE5VTEw7CiB9CiAjZW5kaWYKIApAQCAtOTQ5LDQyICs5
NTksMTYgQEAgaW50IF9faW5pdF9tZW1ibG9jayBtZW1ibG9ja19jbGVhcl9ub21hcChwaHlzX2Fk
ZHJfdCBiYXNlLCBwaHlzX2FkZHJfdCBzaXplKQogCXJldHVybiBtZW1ibG9ja19zZXRjbHJfZmxh
ZyhiYXNlLCBzaXplLCAwLCBNRU1CTE9DS19OT01BUCk7CiB9CiAKLS8qKgotICogX19uZXh0X3Jl
c2VydmVkX21lbV9yZWdpb24gLSBuZXh0IGZ1bmN0aW9uIGZvciBmb3JfZWFjaF9yZXNlcnZlZF9y
ZWdpb24oKQotICogQGlkeDogcG9pbnRlciB0byB1NjQgbG9vcCB2YXJpYWJsZQotICogQG91dF9z
dGFydDogcHRyIHRvIHBoeXNfYWRkcl90IGZvciBzdGFydCBhZGRyZXNzIG9mIHRoZSByZWdpb24s
IGNhbiBiZSAlTlVMTAotICogQG91dF9lbmQ6IHB0ciB0byBwaHlzX2FkZHJfdCBmb3IgZW5kIGFk
ZHJlc3Mgb2YgdGhlIHJlZ2lvbiwgY2FuIGJlICVOVUxMCi0gKgotICogSXRlcmF0ZSBvdmVyIGFs
bCByZXNlcnZlZCBtZW1vcnkgcmVnaW9ucy4KLSAqLwotdm9pZCBfX2luaXRfbWVtYmxvY2sgX19u
ZXh0X3Jlc2VydmVkX21lbV9yZWdpb24odTY0ICppZHgsCi0JCQkJCSAgIHBoeXNfYWRkcl90ICpv
dXRfc3RhcnQsCi0JCQkJCSAgIHBoeXNfYWRkcl90ICpvdXRfZW5kKQotewotCXN0cnVjdCBtZW1i
bG9ja190eXBlICp0eXBlID0gJm1lbWJsb2NrLnJlc2VydmVkOwotCi0JaWYgKCppZHggPCB0eXBl
LT5jbnQpIHsKLQkJc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqciA9ICZ0eXBlLT5yZWdpb25zWypp
ZHhdOwotCQlwaHlzX2FkZHJfdCBiYXNlID0gci0+YmFzZTsKLQkJcGh5c19hZGRyX3Qgc2l6ZSA9
IHItPnNpemU7Ci0KLQkJaWYgKG91dF9zdGFydCkKLQkJCSpvdXRfc3RhcnQgPSBiYXNlOwotCQlp
ZiAob3V0X2VuZCkKLQkJCSpvdXRfZW5kID0gYmFzZSArIHNpemUgLSAxOwotCi0JCSppZHggKz0g
MTsKLQkJcmV0dXJuOwotCX0KLQotCS8qIHNpZ25hbCBlbmQgb2YgaXRlcmF0aW9uICovCi0JKmlk
eCA9IFVMTE9OR19NQVg7Ci19Ci0KLXN0YXRpYyBib29sIHNob3VsZF9za2lwX3JlZ2lvbihzdHJ1
Y3QgbWVtYmxvY2tfcmVnaW9uICptLCBpbnQgbmlkLCBpbnQgZmxhZ3MpCitzdGF0aWMgYm9vbCBz
aG91bGRfc2tpcF9yZWdpb24oc3RydWN0IG1lbWJsb2NrX3R5cGUgKnR5cGUsCisJCQkgICAgICAg
c3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqbSwKKwkJCSAgICAgICBpbnQgbmlkLCBpbnQgZmxhZ3Mp
CiB7CiAJaW50IG1fbmlkID0gbWVtYmxvY2tfZ2V0X3JlZ2lvbl9ub2RlKG0pOwogCisJLyogd2Ug
bmV2ZXIgc2tpcCByZWdpb25zIHdoZW4gaXRlcmF0aW5nIG1lbWJsb2NrLnJlc2VydmVkIG9yIHBo
eXNtZW0gKi8KKwlpZiAodHlwZSAhPSBtZW1ibG9ja19tZW1vcnkpCisJCXJldHVybiBmYWxzZTsK
KwogCS8qIG9ubHkgbWVtb3J5IHJlZ2lvbnMgYXJlIGFzc29jaWF0ZWQgd2l0aCBub2RlcywgY2hl
Y2sgaXQgKi8KIAlpZiAobmlkICE9IE5VTUFfTk9fTk9ERSAmJiBuaWQgIT0gbV9uaWQpCiAJCXJl
dHVybiB0cnVlOwpAQCAtMTA0OSw3ICsxMDMzLDcgQEAgdm9pZCBfX25leHRfbWVtX3JhbmdlKHU2
NCAqaWR4LCBpbnQgbmlkLCBlbnVtIG1lbWJsb2NrX2ZsYWdzIGZsYWdzLAogCQlwaHlzX2FkZHJf
dCBtX2VuZCA9IG0tPmJhc2UgKyBtLT5zaXplOwogCQlpbnQJICAgIG1fbmlkID0gbWVtYmxvY2tf
Z2V0X3JlZ2lvbl9ub2RlKG0pOwogCi0JCWlmIChzaG91bGRfc2tpcF9yZWdpb24obSwgbmlkLCBm
bGFncykpCisJCWlmIChzaG91bGRfc2tpcF9yZWdpb24odHlwZV9hLCBtLCBuaWQsIGZsYWdzKSkK
IAkJCWNvbnRpbnVlOwogCiAJCWlmICghdHlwZV9iKSB7CkBAIC0xMTUzLDcgKzExMzcsNyBAQCB2
b2lkIF9faW5pdF9tZW1ibG9jayBfX25leHRfbWVtX3JhbmdlX3Jldih1NjQgKmlkeCwgaW50IG5p
ZCwKIAkJcGh5c19hZGRyX3QgbV9lbmQgPSBtLT5iYXNlICsgbS0+c2l6ZTsKIAkJaW50IG1fbmlk
ID0gbWVtYmxvY2tfZ2V0X3JlZ2lvbl9ub2RlKG0pOwogCi0JCWlmIChzaG91bGRfc2tpcF9yZWdp
b24obSwgbmlkLCBmbGFncykpCisJCWlmIChzaG91bGRfc2tpcF9yZWdpb24odHlwZV9hLCBtLCBu
aWQsIGZsYWdzKSkKIAkJCWNvbnRpbnVlOwogCiAJCWlmICghdHlwZV9iKSB7CkBAIC0xOTc4LDcg
KzE5NjIsNyBAQCBzdGF0aWMgdW5zaWduZWQgbG9uZyBfX2luaXQgZnJlZV9sb3dfbWVtb3J5X2Nv
cmVfZWFybHkodm9pZCkKIAogCW1lbWJsb2NrX2NsZWFyX2hvdHBsdWcoMCwgLTEpOwogCi0JZm9y
X2VhY2hfcmVzZXJ2ZWRfbWVtX3JlZ2lvbihpLCAmc3RhcnQsICZlbmQpCisJZm9yX2VhY2hfcmVz
ZXJ2ZWRfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkKIAkJcmVzZXJ2ZV9ib290bWVtX3JlZ2lv
bihzdGFydCwgZW5kKTsKIAogCS8qCi0tIAoyLjI2LjIKCl9fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcgbGlzdApPcGVuUklTQ0Bs
aXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29yZXMub3JnL2xpc3RpbmZv
L29wZW5yaXNjCg==
