Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 2A0A12460D1
	for <lists+openrisc@lfdr.de>; Mon, 17 Aug 2020 10:46:40 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id A488620E96;
	Mon, 17 Aug 2020 10:46:39 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 50A1720D75
 for <openrisc@lists.librecores.org>; Sun,  2 Aug 2020 18:38:06 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id C503520829;
 Sun,  2 Aug 2020 16:37:54 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1596386285;
 bh=qDntWqnQ5jpHhG3A/60QVRrBP5EMvBab0IZaynQoM2g=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=VSqQxV0OVL//R9DhPiibLmE2kXWGrWU92k3aLM7c66ewV2IazxdsH1sADuEpZ2VZu
 0S5heSg+nTY4JZlymnVN7f4/vGxsZ5aZ1upCNa2dEDeJR9bmfCNoyj1zojZiYdqR+y
 UBfasxjVHbnoQAcZgMQgcj9QUMcziaSHu+D1YTts=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Sun,  2 Aug 2020 19:35:54 +0300
Message-Id: <20200802163601.8189-11-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200802163601.8189-1-rppt@kernel.org>
References: <20200802163601.8189-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Mon, 17 Aug 2020 10:45:38 +0200
Subject: [OpenRISC] [PATCH v2 10/17] memblock: reduce number of parameters
 in for_each_mem_range()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Thomas Gleixner <tglx@linutronix.de>,
 Emil Renner Berthing <kernel@esmil.dk>, linux-sh@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Christoph Hellwig <hch@lst.de>,
 Marek Szyprowski <m.szyprowski@samsung.com>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Michael Ellerman <mpe@ellerman.id.au>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Mike Rapoport <rppt@linux.ibm.com>, clang-built-linux@googlegroups.com,
 Ingo Molnar <mingo@redhat.com>, linux-arm-kernel@lists.infradead.org,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Hari Bathini <hbathini@linux.ibm.com>, Michal Simek <monstr@monstr.eu>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, linux-mm@kvack.org,
 linux-kernel@vger.kernel.org, iommu@lists.linux-foundation.org,
 Palmer Dabbelt <palmer@dabbelt.com>, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKQ3VycmVudGx5IGZvcl9l
YWNoX21lbV9yYW5nZSgpIGl0ZXJhdG9yIGlzIHRoZSBtb3N0IGdlbmVyaWMgd2F5IHRvIHRyYXZl
cnNlCm1lbWJsb2NrIHJlZ2lvbnMuIEFzIHN1Y2gsIGl0IGhhcyA4IHBhcmFtZXRlcnMgYW5kIGl0
IGlzIGhhcmRseSBjb252ZW5pZW50CnRvIHVzZXJzLiBNb3N0IHVzZXJzIGNob29zZSB0byB1dGls
aXplIG9uZSBvZiBpdHMgd3JhcHBlcnMgYW5kIHRoZSBvbmx5CnVzZXIgdGhhdCBhY3R1YWxseSBu
ZWVkcyBtb3N0IG9mIHRoZSBwYXJhbWV0ZXJzIG91dHNpZGUgbWVtYmxvY2sgaXMgczM5MApjcmFz
aCBkdW1wIGltcGxlbWVudGF0aW9uLgoKVG8gYXZvaWQgeWV0IGFub3RoZXIgbmFtaW5nIGZvciBt
ZW1ibG9jayBpdGVyYXRvcnMsIHJlbmFtZSB0aGUgZXhpc3RpbmcKZm9yX2VhY2hfbWVtX3Jhbmdl
KCkgdG8gX19mb3JfZWFjaF9tZW1fcmFuZ2UoKSBhbmQgYWRkIGEgbmV3CmZvcl9lYWNoX21lbV9y
YW5nZSgpIHdyYXBwZXIgd2l0aCBvbmx5IGluZGV4LCBzdGFydCBhbmQgZW5kIHBhcmFtZXRlcnMu
CgpUaGUgbmV3IHdyYXBwZXIgbmljZWx5IGZpdHMgaW50byBpbml0X3VuYXZhaWxhYmxlX21lbSgp
IGFuZCB3aWxsIGJlIHVzZWQgaW4KdXBjb21pbmcgY2hhbmdlcyB0byBzaW1wbGlmeSBtZW1ibG9j
ayB0cmF2ZXJzYWxzLgoKU2lnbmVkLW9mZi1ieTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5p
Ym0uY29tPgpSZXZpZXdlZC1ieTogQmFvcXVhbiBIZSA8YmhlQHJlZGhhdC5jb20+Ci0tLQogLmNs
YW5nLWZvcm1hdCAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgMSArCiBhcmNoL2FybTY0L2tl
cm5lbC9tYWNoaW5lX2tleGVjX2ZpbGUuYyB8ICA2ICsrLS0tLQogYXJjaC9zMzkwL2tlcm5lbC9j
cmFzaF9kdW1wLmMgICAgICAgICAgfCAgOCArKysrLS0tLQogaW5jbHVkZS9saW51eC9tZW1ibG9j
ay5oICAgICAgICAgICAgICAgfCAxOCArKysrKysrKysrKysrKy0tLS0KIG1tL3BhZ2VfYWxsb2Mu
YyAgICAgICAgICAgICAgICAgICAgICAgIHwgIDMgKy0tCiA1IGZpbGVzIGNoYW5nZWQsIDIyIGlu
c2VydGlvbnMoKyksIDE0IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhLy5jbGFuZy1mb3JtYXQg
Yi8uY2xhbmctZm9ybWF0CmluZGV4IGEwYTk2MDg4Yzc0Zi4uNTJlZGVkYWIyNWNlIDEwMDY0NAot
LS0gYS8uY2xhbmctZm9ybWF0CisrKyBiLy5jbGFuZy1mb3JtYXQKQEAgLTIwNSw2ICsyMDUsNyBA
QCBGb3JFYWNoTWFjcm9zOgogICAtICdmb3JfZWFjaF9tZW1ibG9ja190eXBlJwogICAtICdmb3Jf
ZWFjaF9tZW1jZ19jYWNoZV9pbmRleCcKICAgLSAnZm9yX2VhY2hfbWVtX3Bmbl9yYW5nZScKKyAg
LSAnX19mb3JfZWFjaF9tZW1fcmFuZ2UnCiAgIC0gJ2Zvcl9lYWNoX21lbV9yYW5nZScKICAgLSAn
Zm9yX2VhY2hfbWVtX3JhbmdlX3JldicKICAgLSAnZm9yX2VhY2hfbWlncmF0ZXR5cGVfb3JkZXIn
CmRpZmYgLS1naXQgYS9hcmNoL2FybTY0L2tlcm5lbC9tYWNoaW5lX2tleGVjX2ZpbGUuYyBiL2Fy
Y2gvYXJtNjQva2VybmVsL21hY2hpbmVfa2V4ZWNfZmlsZS5jCmluZGV4IDM2MWExMTQzZTA5ZS4u
NWIwZTY3YjkzY2RjIDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L2tlcm5lbC9tYWNoaW5lX2tleGVj
X2ZpbGUuYworKysgYi9hcmNoL2FybTY0L2tlcm5lbC9tYWNoaW5lX2tleGVjX2ZpbGUuYwpAQCAt
MjE1LDggKzIxNSw3IEBAIHN0YXRpYyBpbnQgcHJlcGFyZV9lbGZfaGVhZGVycyh2b2lkICoqYWRk
ciwgdW5zaWduZWQgbG9uZyAqc3opCiAJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKIAogCW5yX3Jh
bmdlcyA9IDE7IC8qIGZvciBleGNsdXNpb24gb2YgY3Jhc2hrZXJuZWwgcmVnaW9uICovCi0JZm9y
X2VhY2hfbWVtX3JhbmdlKGksICZtZW1ibG9jay5tZW1vcnksIE5VTEwsIE5VTUFfTk9fTk9ERSwK
LQkJCQkJTUVNQkxPQ0tfTk9ORSwgJnN0YXJ0LCAmZW5kLCBOVUxMKQorCWZvcl9lYWNoX21lbV9y
YW5nZShpLCAmc3RhcnQsICZlbmQpCiAJCW5yX3JhbmdlcysrOwogCiAJY21lbSA9IGttYWxsb2Mo
c3RydWN0X3NpemUoY21lbSwgcmFuZ2VzLCBucl9yYW5nZXMpLCBHRlBfS0VSTkVMKTsKQEAgLTIy
NSw4ICsyMjQsNyBAQCBzdGF0aWMgaW50IHByZXBhcmVfZWxmX2hlYWRlcnModm9pZCAqKmFkZHIs
IHVuc2lnbmVkIGxvbmcgKnN6KQogCiAJY21lbS0+bWF4X25yX3JhbmdlcyA9IG5yX3JhbmdlczsK
IAljbWVtLT5ucl9yYW5nZXMgPSAwOwotCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmbWVtYmxvY2su
bWVtb3J5LCBOVUxMLCBOVU1BX05PX05PREUsCi0JCQkJCU1FTUJMT0NLX05PTkUsICZzdGFydCwg
JmVuZCwgTlVMTCkgeworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQpIHsKIAkJ
Y21lbS0+cmFuZ2VzW2NtZW0tPm5yX3Jhbmdlc10uc3RhcnQgPSBzdGFydDsKIAkJY21lbS0+cmFu
Z2VzW2NtZW0tPm5yX3Jhbmdlc10uZW5kID0gZW5kIC0gMTsKIAkJY21lbS0+bnJfcmFuZ2VzKys7
CmRpZmYgLS1naXQgYS9hcmNoL3MzOTAva2VybmVsL2NyYXNoX2R1bXAuYyBiL2FyY2gvczM5MC9r
ZXJuZWwvY3Jhc2hfZHVtcC5jCmluZGV4IGY5NmE1ODU3YmJmZC4uZTI4MDg1YzcyNWZmIDEwMDY0
NAotLS0gYS9hcmNoL3MzOTAva2VybmVsL2NyYXNoX2R1bXAuYworKysgYi9hcmNoL3MzOTAva2Vy
bmVsL2NyYXNoX2R1bXAuYwpAQCAtNTQ5LDggKzU0OSw4IEBAIHN0YXRpYyBpbnQgZ2V0X21lbV9j
aHVua19jbnQodm9pZCkKIAlpbnQgY250ID0gMDsKIAl1NjQgaWR4OwogCi0JZm9yX2VhY2hfbWVt
X3JhbmdlKGlkeCwgJm1lbWJsb2NrLnBoeXNtZW0sICZvbGRtZW1fdHlwZSwgTlVNQV9OT19OT0RF
LAotCQkJICAgTUVNQkxPQ0tfTk9ORSwgTlVMTCwgTlVMTCwgTlVMTCkKKwlfX2Zvcl9lYWNoX21l
bV9yYW5nZShpZHgsICZtZW1ibG9jay5waHlzbWVtLCAmb2xkbWVtX3R5cGUsIE5VTUFfTk9fTk9E
RSwKKwkJCSAgICAgTUVNQkxPQ0tfTk9ORSwgTlVMTCwgTlVMTCwgTlVMTCkKIAkJY250Kys7CiAJ
cmV0dXJuIGNudDsKIH0KQEAgLTU2Myw4ICs1NjMsOCBAQCBzdGF0aWMgdm9pZCBsb2Fkc19pbml0
KEVsZjY0X1BoZHIgKnBoZHIsIHU2NCBsb2Fkc19vZmZzZXQpCiAJcGh5c19hZGRyX3Qgc3RhcnQs
IGVuZDsKIAl1NjQgaWR4OwogCi0JZm9yX2VhY2hfbWVtX3JhbmdlKGlkeCwgJm1lbWJsb2NrLnBo
eXNtZW0sICZvbGRtZW1fdHlwZSwgTlVNQV9OT19OT0RFLAotCQkJICAgTUVNQkxPQ0tfTk9ORSwg
JnN0YXJ0LCAmZW5kLCBOVUxMKSB7CisJX19mb3JfZWFjaF9tZW1fcmFuZ2UoaWR4LCAmbWVtYmxv
Y2sucGh5c21lbSwgJm9sZG1lbV90eXBlLCBOVU1BX05PX05PREUsCisJCQkgICAgIE1FTUJMT0NL
X05PTkUsICZzdGFydCwgJmVuZCwgTlVMTCkgewogCQlwaGRyLT5wX2ZpbGVzeiA9IGVuZCAtIHN0
YXJ0OwogCQlwaGRyLT5wX3R5cGUgPSBQVF9MT0FEOwogCQlwaGRyLT5wX29mZnNldCA9IHN0YXJ0
OwpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9tZW1ibG9jay5oIGIvaW5jbHVkZS9saW51eC9t
ZW1ibG9jay5oCmluZGV4IGU2YTIzYjNkYjY5Ni4uZDcwYzI4MzVlOTEzIDEwMDY0NAotLS0gYS9p
bmNsdWRlL2xpbnV4L21lbWJsb2NrLmgKKysrIGIvaW5jbHVkZS9saW51eC9tZW1ibG9jay5oCkBA
IC0xNDIsNyArMTQyLDcgQEAgdm9pZCBfX25leHRfcmVzZXJ2ZWRfbWVtX3JlZ2lvbih1NjQgKmlk
eCwgcGh5c19hZGRyX3QgKm91dF9zdGFydCwKIHZvaWQgX19tZW1ibG9ja19mcmVlX2xhdGUocGh5
c19hZGRyX3QgYmFzZSwgcGh5c19hZGRyX3Qgc2l6ZSk7CiAKIC8qKgotICogZm9yX2VhY2hfbWVt
X3JhbmdlIC0gaXRlcmF0ZSB0aHJvdWdoIG1lbWJsb2NrIGFyZWFzIGZyb20gdHlwZV9hIGFuZCBu
b3QKKyAqIF9fZm9yX2VhY2hfbWVtX3JhbmdlIC0gaXRlcmF0ZSB0aHJvdWdoIG1lbWJsb2NrIGFy
ZWFzIGZyb20gdHlwZV9hIGFuZCBub3QKICAqIGluY2x1ZGVkIGluIHR5cGVfYi4gT3IganVzdCB0
eXBlX2EgaWYgdHlwZV9iIGlzIE5VTEwuCiAgKiBAaTogdTY0IHVzZWQgYXMgbG9vcCB2YXJpYWJs
ZQogICogQHR5cGVfYTogcHRyIHRvIG1lbWJsb2NrX3R5cGUgdG8gaXRlcmF0ZQpAQCAtMTUzLDcg
KzE1Myw3IEBAIHZvaWQgX19tZW1ibG9ja19mcmVlX2xhdGUocGh5c19hZGRyX3QgYmFzZSwgcGh5
c19hZGRyX3Qgc2l6ZSk7CiAgKiBAcF9lbmQ6IHB0ciB0byBwaHlzX2FkZHJfdCBmb3IgZW5kIGFk
ZHJlc3Mgb2YgdGhlIHJhbmdlLCBjYW4gYmUgJU5VTEwKICAqIEBwX25pZDogcHRyIHRvIGludCBm
b3IgbmlkIG9mIHRoZSByYW5nZSwgY2FuIGJlICVOVUxMCiAgKi8KLSNkZWZpbmUgZm9yX2VhY2hf
bWVtX3JhbmdlKGksIHR5cGVfYSwgdHlwZV9iLCBuaWQsIGZsYWdzLAkJXAorI2RlZmluZSBfX2Zv
cl9lYWNoX21lbV9yYW5nZShpLCB0eXBlX2EsIHR5cGVfYiwgbmlkLCBmbGFncywJCVwKIAkJCSAg
IHBfc3RhcnQsIHBfZW5kLCBwX25pZCkJCQlcCiAJZm9yIChpID0gMCwgX19uZXh0X21lbV9yYW5n
ZSgmaSwgbmlkLCBmbGFncywgdHlwZV9hLCB0eXBlX2IsCVwKIAkJCQkgICAgIHBfc3RhcnQsIHBf
ZW5kLCBwX25pZCk7CQlcCkBAIC0xODIsNiArMTgyLDE2IEBAIHZvaWQgX19tZW1ibG9ja19mcmVl
X2xhdGUocGh5c19hZGRyX3QgYmFzZSwgcGh5c19hZGRyX3Qgc2l6ZSk7CiAJICAgICBfX25leHRf
bWVtX3JhbmdlX3JldigmaSwgbmlkLCBmbGFncywgdHlwZV9hLCB0eXBlX2IsCVwKIAkJCQkgIHBf
c3RhcnQsIHBfZW5kLCBwX25pZCkpCiAKKy8qKgorICogZm9yX2VhY2hfbWVtX3JhbmdlIC0gaXRl
cmF0ZSB0aHJvdWdoIG1lbW9yeSBhcmVhcy4KKyAqIEBpOiB1NjQgdXNlZCBhcyBsb29wIHZhcmlh
YmxlCisgKiBAcF9zdGFydDogcHRyIHRvIHBoeXNfYWRkcl90IGZvciBzdGFydCBhZGRyZXNzIG9m
IHRoZSByYW5nZSwgY2FuIGJlICVOVUxMCisgKiBAcF9lbmQ6IHB0ciB0byBwaHlzX2FkZHJfdCBm
b3IgZW5kIGFkZHJlc3Mgb2YgdGhlIHJhbmdlLCBjYW4gYmUgJU5VTEwKKyAqLworI2RlZmluZSBm
b3JfZWFjaF9tZW1fcmFuZ2UoaSwgcF9zdGFydCwgcF9lbmQpIFwKKwlfX2Zvcl9lYWNoX21lbV9y
YW5nZShpLCAmbWVtYmxvY2subWVtb3J5LCBOVUxMLCBOVU1BX05PX05PREUsCVwKKwkJCSAgICAg
TUVNQkxPQ0tfTk9ORSwgcF9zdGFydCwgcF9lbmQsIE5VTEwpCisKIC8qKgogICogZm9yX2VhY2hf
cmVzZXJ2ZWRfbWVtX3JlZ2lvbiAtIGl0ZXJhdGUgb3ZlciBhbGwgcmVzZXJ2ZWQgbWVtYmxvY2sg
YXJlYXMKICAqIEBpOiB1NjQgdXNlZCBhcyBsb29wIHZhcmlhYmxlCkBAIC0yODcsOCArMjk3LDgg
QEAgaW50IF9faW5pdCBkZWZlcnJlZF9wYWdlX2luaXRfbWF4X3RocmVhZHMoY29uc3Qgc3RydWN0
IGNwdW1hc2sgKm5vZGVfY3B1bWFzayk7CiAgKiBzb29uIGFzIG1lbWJsb2NrIGlzIGluaXRpYWxp
emVkLgogICovCiAjZGVmaW5lIGZvcl9lYWNoX2ZyZWVfbWVtX3JhbmdlKGksIG5pZCwgZmxhZ3Ms
IHBfc3RhcnQsIHBfZW5kLCBwX25pZCkJXAotCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmbWVtYmxv
Y2subWVtb3J5LCAmbWVtYmxvY2sucmVzZXJ2ZWQsCVwKLQkJCSAgIG5pZCwgZmxhZ3MsIHBfc3Rh
cnQsIHBfZW5kLCBwX25pZCkKKwlfX2Zvcl9lYWNoX21lbV9yYW5nZShpLCAmbWVtYmxvY2subWVt
b3J5LCAmbWVtYmxvY2sucmVzZXJ2ZWQsCVwKKwkJCSAgICAgbmlkLCBmbGFncywgcF9zdGFydCwg
cF9lbmQsIHBfbmlkKQogCiAvKioKICAqIGZvcl9lYWNoX2ZyZWVfbWVtX3JhbmdlX3JldmVyc2Ug
LSByZXYtaXRlcmF0ZSB0aHJvdWdoIGZyZWUgbWVtYmxvY2sgYXJlYXMKZGlmZiAtLWdpdCBhL21t
L3BhZ2VfYWxsb2MuYyBiL21tL3BhZ2VfYWxsb2MuYwppbmRleCBlMDI4Yjg3Y2UyOTQuLjk1YWYx
MTFkNjlkMyAxMDA2NDQKLS0tIGEvbW0vcGFnZV9hbGxvYy5jCisrKyBiL21tL3BhZ2VfYWxsb2Mu
YwpAQCAtNjk3Miw4ICs2OTcyLDcgQEAgc3RhdGljIHZvaWQgX19pbml0IGluaXRfdW5hdmFpbGFi
bGVfbWVtKHZvaWQpCiAJICogTG9vcCB0aHJvdWdoIHVuYXZhaWxhYmxlIHJhbmdlcyBub3QgY292
ZXJlZCBieSBtZW1ibG9jay5tZW1vcnkuCiAJICovCiAJcGdjbnQgPSAwOwotCWZvcl9lYWNoX21l
bV9yYW5nZShpLCAmbWVtYmxvY2subWVtb3J5LCBOVUxMLAotCQkJTlVNQV9OT19OT0RFLCBNRU1C
TE9DS19OT05FLCAmc3RhcnQsICZlbmQsIE5VTEwpIHsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwg
JnN0YXJ0LCAmZW5kKSB7CiAJCWlmIChuZXh0IDwgc3RhcnQpCiAJCQlwZ2NudCArPSBpbml0X3Vu
YXZhaWxhYmxlX3JhbmdlKFBGTl9ET1dOKG5leHQpLAogCQkJCQkJCVBGTl9VUChzdGFydCkpOwot
LSAKMi4yNi4yCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
XwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMubGlicmVjb3Jlcy5vcmcKaHR0
cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVucmlzYwo=
