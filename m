Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 879392E3367
	for <lists+openrisc@lfdr.de>; Mon, 28 Dec 2020 02:00:08 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 9373320FDF;
	Mon, 28 Dec 2020 02:00:07 +0100 (CET)
Received: from mout.kundenserver.de (mout.kundenserver.de [217.72.192.75])
 by mail.librecores.org (Postfix) with ESMTPS id 5A8B620E1C
 for <openrisc@lists.librecores.org>; Sun, 27 Dec 2020 15:05:41 +0100 (CET)
Received: from orion.localdomain ([95.114.11.119]) by mrelayeu.kundenserver.de
 (mreue106 [212.227.15.183]) with ESMTPSA (Nemesis) id
 1MybbH-1k6EDg42CD-00z0ya; Sun, 27 Dec 2020 15:01:42 +0100
From: "Enrico Weigelt, metux IT consult" <info@metux.net>
To: linux-kernel@vger.kernel.org
Date: Sun, 27 Dec 2020 15:01:28 +0100
Message-Id: <20201227140129.19932-1-info@metux.net>
X-Mailer: git-send-email 2.11.0
X-Provags-ID: V03:K1:22PqiqwOpZh8agmKGH43iqfV1GmeR3GHk4Eu0lKnKo5JMKrP/aH
 u6CpYumM0T5GEJc7rS0tq9Bg/xKyr3+o2Gr9fCdB7eUMKG8cgMD+PLKrI3zI7Q0DCYL27l3
 yH5+7F3cR/5fzfUvsAuPUn4aJ8uyhb1112UFNfkozaNc26eeXZ/L/GwCHQqRBlVeFU8zCCP
 eqdvizyW0mf1u3JeKbaqQ==
X-Spam-Flag: NO
X-UI-Out-Filterresults: notjunk:1;V03:K0:O0FFj0hCZoY=:x53KUPu82U2t0h9Swai2he
 lJu6z7JrQ2ajJ7Biw9aCJWIXep50l37kuwjhiKNoZ58f5TNa1h8D6bBFHpGD3l0T+XZczwfZP
 PRR0dq3RS/1FxJyg9u7iSK9/SQWqPP5W6goYk6XEzx1ZPvLqD3m8VCkKhsyBcwlkPXyOzIRqB
 HWiu765XCoqo2gaekI+DYkSsNmFI38ts+WUN/lsqkv52c4URoP3FOWGxWIuz9TJGUnsowE16a
 kLWxSjuHU26gtfeLm9j51Y64NizikF+f5c1PXKKAJi87bHJCYlAVBWwbroMHDLefhwzfpptKk
 PeeXh25kKN/pV9C8nVxrq7G17nLr/W0Wj462mR1vFEs1iAOfq4qcd7ryhbs5g1z2xFWBiSOmI
 2a9XQfV2f7DbA3NpANvxnGujgcJ9mUoDBWSZpfPxUhsAoxeezSjV5/l8g1mMl
X-Mailman-Approved-At: Mon, 28 Dec 2020 02:00:05 +0100
Subject: [OpenRISC] [PATCH v2] arch: consolidate pm_power_off callback
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: dalias@libc.org, linux-ia64@vger.kernel.org, linux-sh@vger.kernel.org,
 benh@kernel.crashing.org, James.Bottomley@HansenPartnership.com,
 jcmvbkbc@gmail.com, paulus@samba.org, linux-csky@vger.kernel.org,
 hpa@zytor.com, linux-riscv@lists.infradead.org, will@kernel.org,
 tglx@linutronix.de, jonas@southpole.se, linux-s390@vger.kernel.org,
 sstabellini@kernel.org, linux-c6x-dev@linux-c6x.org,
 ysato@users.sourceforge.jp, linux-hexagon@vger.kernel.org, deller@gmx.de,
 x86@kernel.org, ley.foon.tan@intel.com, mingo@redhat.com,
 catalin.marinas@arm.com, linux-snps-arc@lists.infradead.org,
 linux-xtensa@linux-xtensa.org, linux-pm@vger.kernel.org, msalter@redhat.com,
 jacquiot.aurelien@gmail.com, linux-m68k@lists.linux-m68k.org,
 openrisc@lists.librecores.org, bp@alien8.de, christian@brauner.io,
 chris@zankel.net, tsbogend@alpha.franken.de, linux-parisc@vger.kernel.org,
 linux-mips@vger.kernel.org, linux-alpha@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

TW92ZSB0aGUgcG1fcG93ZXJfb2ZmIGNhbGxiYWNrIGludG8gb25lIGdsb2JhbCBwbGFjZSBhbmQg
YWxzbyBhZGQgYW4KZnVuY3Rpb24gZm9yIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBpdCAod2hlbiBu
b3QgTlVMTCksIGluIG9yZGVyIHRvIHJlbW92ZQpjb2RlIGR1cGxpY2F0aW9uIGluIGFsbCBpbmRp
dmlkdWFsIGFyY2hzLgoKUmVwb3J0ZWQtYnk6IGtlcm5lbCB0ZXN0IHJvYm90IDxsa3BAaW50ZWwu
Y29tPgpTaWduZWQtb2ZmLWJ5OiBFbnJpY28gV2VpZ2VsdCwgbWV0dXggSVQgY29uc3VsdCA8aW5m
b0BtZXR1eC5uZXQ+CgotLS0tCgpjaGFuZ2VzIHYyOgogICogZml4IGZvcmdvdHRlbiByZW1vdmFs
IG9mIHBtX3Bvd2VyX29mZiBpbiBhcmNoL3Bvd2VycGMsIGFzIHJlcG9ydGVkIGJ5IGxrcAotLS0K
IGFyY2gvYWxwaGEva2VybmVsL3Byb2Nlc3MuYyAgICAgICAgfCAgNiAtLS0tLS0KIGFyY2gvYXJj
L2tlcm5lbC9yZXNldC5jICAgICAgICAgICAgfCAgMyAtLS0KIGFyY2gvYXJtL2tlcm5lbC9yZWJv
b3QuYyAgICAgICAgICAgfCAgNiArKy0tLS0KIGFyY2gvYXJtNjQva2VybmVsL3Byb2Nlc3MuYyAg
ICAgICAgfCAgNiArLS0tLS0KIGFyY2gvYzZ4L2tlcm5lbC9wcm9jZXNzLmMgICAgICAgICAgfCAx
MCArKy0tLS0tLS0tCiBhcmNoL2Nza3kva2VybmVsL3Bvd2VyLmMgICAgICAgICAgIHwgMTAgKysr
LS0tLS0tLQogYXJjaC9oODMwMC9rZXJuZWwvcHJvY2Vzcy5jICAgICAgICB8ICAzIC0tLQogYXJj
aC9oZXhhZ29uL2tlcm5lbC9yZXNldC5jICAgICAgICB8ICAzIC0tLQogYXJjaC9pYTY0L2tlcm5l
bC9wcm9jZXNzLmMgICAgICAgICB8ICA1ICstLS0tCiBhcmNoL202OGsva2VybmVsL3Byb2Nlc3Mu
YyAgICAgICAgIHwgIDMgLS0tCiBhcmNoL21pY3JvYmxhemUva2VybmVsL3Byb2Nlc3MuYyAgIHwg
IDMgLS0tCiBhcmNoL21pcHMva2VybmVsL3Jlc2V0LmMgICAgICAgICAgIHwgIDYgKy0tLS0tCiBh
cmNoL25kczMyL2tlcm5lbC9wcm9jZXNzLmMgICAgICAgIHwgIDcgKystLS0tLQogYXJjaC9uaW9z
Mi9rZXJuZWwvcHJvY2Vzcy5jICAgICAgICB8ICAzIC0tLQogYXJjaC9vcGVucmlzYy9rZXJuZWwv
cHJvY2Vzcy5jICAgICB8ICAzIC0tLQogYXJjaC9wYXJpc2Mva2VybmVsL3Byb2Nlc3MuYyAgICAg
ICB8ICA5ICsrKy0tLS0tLQogYXJjaC9wb3dlcnBjL2tlcm5lbC9zZXR1cC1jb21tb24uYyB8ICA4
ICsrLS0tLS0tCiBhcmNoL3Bvd2VycGMveG1vbi94bW9uLmMgICAgICAgICAgIHwgIDQgKystLQog
YXJjaC9yaXNjdi9rZXJuZWwvcmVzZXQuYyAgICAgICAgICB8ICA5ICsrKystLS0tLQogYXJjaC9z
MzkwL2tlcm5lbC9zZXR1cC5jICAgICAgICAgICB8ICAzIC0tLQogYXJjaC9zaC9rZXJuZWwvcmVi
b290LmMgICAgICAgICAgICB8ICA2ICstLS0tLQogYXJjaC94ODYva2VybmVsL3JlYm9vdC5jICAg
ICAgICAgICB8IDE1ICsrKystLS0tLS0tLS0tLQogYXJjaC94ODYveGVuL2VubGlnaHRlbl9wdi5j
ICAgICAgICB8ICA0ICsrLS0KIGFyY2gveHRlbnNhL2tlcm5lbC9wcm9jZXNzLmMgICAgICAgfCAg
NCAtLS0tCiBpbmNsdWRlL2xpbnV4L3BtLmggICAgICAgICAgICAgICAgIHwgIDIgKysKIGtlcm5l
bC9yZWJvb3QuYyAgICAgICAgICAgICAgICAgICAgfCAxMCArKysrKysrKysrCiAyNiBmaWxlcyBj
aGFuZ2VkLCA0MiBpbnNlcnRpb25zKCspLCAxMDkgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEv
YXJjaC9hbHBoYS9rZXJuZWwvcHJvY2Vzcy5jIGIvYXJjaC9hbHBoYS9rZXJuZWwvcHJvY2Vzcy5j
CmluZGV4IDZjNzE1NTQyMDZjYy4uZGYwZGY4Njk3NTFkIDEwMDY0NAotLS0gYS9hcmNoL2FscGhh
L2tlcm5lbC9wcm9jZXNzLmMKKysrIGIvYXJjaC9hbHBoYS9rZXJuZWwvcHJvY2Vzcy5jCkBAIC00
MywxMiArNDMsNiBAQAogI2luY2x1ZGUgInByb3RvLmgiCiAjaW5jbHVkZSAicGNpX2ltcGwuaCIK
IAotLyoKLSAqIFBvd2VyIG9mZiBmdW5jdGlvbiwgaWYgYW55Ci0gKi8KLXZvaWQgKCpwbV9wb3dl
cl9vZmYpKHZvaWQpID0gbWFjaGluZV9wb3dlcl9vZmY7Ci1FWFBPUlRfU1lNQk9MKHBtX3Bvd2Vy
X29mZik7Ci0KICNpZmRlZiBDT05GSUdfQUxQSEFfV1RJTlQKIC8qCiAgKiBTbGVlcCB0aGUgQ1BV
LgpkaWZmIC0tZ2l0IGEvYXJjaC9hcmMva2VybmVsL3Jlc2V0LmMgYi9hcmNoL2FyYy9rZXJuZWwv
cmVzZXQuYwppbmRleCBmZDZjM2ViOTMwYmEuLjNhMjdiNmEyMDJkNCAxMDA2NDQKLS0tIGEvYXJj
aC9hcmMva2VybmVsL3Jlc2V0LmMKKysrIGIvYXJjaC9hcmMva2VybmVsL3Jlc2V0LmMKQEAgLTI2
LDYgKzI2LDMgQEAgdm9pZCBtYWNoaW5lX3Bvd2VyX29mZih2b2lkKQogCS8qIEZJWE1FIDo6ICBw
b3dlciBvZmYgPz8/ICovCiAJbWFjaGluZV9oYWx0KCk7CiB9Ci0KLXZvaWQgKCpwbV9wb3dlcl9v
ZmYpICh2b2lkKSA9IE5VTEw7Ci1FWFBPUlRfU1lNQk9MKHBtX3Bvd2VyX29mZik7CmRpZmYgLS1n
aXQgYS9hcmNoL2FybS9rZXJuZWwvcmVib290LmMgYi9hcmNoL2FybS9rZXJuZWwvcmVib290LmMK
aW5kZXggMGNlMzg4ZjE1NDIyLi45ZTFiZjBlOWIzZTAgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL2tl
cm5lbC9yZWJvb3QuYworKysgYi9hcmNoL2FybS9rZXJuZWwvcmVib290LmMKQEAgLTYsNiArNiw3
IEBACiAjaW5jbHVkZSA8bGludXgvY3B1Lmg+CiAjaW5jbHVkZSA8bGludXgvZGVsYXkuaD4KICNp
bmNsdWRlIDxsaW51eC9yZWJvb3QuaD4KKyNpbmNsdWRlIDxsaW51eC9wbS5oPgogCiAjaW5jbHVk
ZSA8YXNtL2NhY2hlZmx1c2guaD4KICNpbmNsdWRlIDxhc20vaWRtYXAuaD4KQEAgLTE5LDggKzIw
LDYgQEAgdHlwZWRlZiB2b2lkICgqcGh5c19yZXNldF90KSh1bnNpZ25lZCBsb25nLCBib29sKTsK
ICAqIEZ1bmN0aW9uIHBvaW50ZXJzIHRvIG9wdGlvbmFsIG1hY2hpbmUgc3BlY2lmaWMgZnVuY3Rp
b25zCiAgKi8KIHZvaWQgKCphcm1fcG1fcmVzdGFydCkoZW51bSByZWJvb3RfbW9kZSByZWJvb3Rf
bW9kZSwgY29uc3QgY2hhciAqY21kKTsKLXZvaWQgKCpwbV9wb3dlcl9vZmYpKHZvaWQpOwotRVhQ
T1JUX1NZTUJPTChwbV9wb3dlcl9vZmYpOwogCiAvKgogICogQSB0ZW1wb3Jhcnkgc3RhY2sgdG8g
dXNlIGZvciBDUFUgcmVzZXQuIFRoaXMgaXMgc3RhdGljIHNvIHRoYXQgd2UKQEAgLTExOCw4ICsx
MTcsNyBAQCB2b2lkIG1hY2hpbmVfcG93ZXJfb2ZmKHZvaWQpCiAJbG9jYWxfaXJxX2Rpc2FibGUo
KTsKIAlzbXBfc2VuZF9zdG9wKCk7CiAKLQlpZiAocG1fcG93ZXJfb2ZmKQotCQlwbV9wb3dlcl9v
ZmYoKTsKKwlkb19wb3dlcl9vZmYoKTsKIH0KIAogLyoKZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQv
a2VybmVsL3Byb2Nlc3MuYyBiL2FyY2gvYXJtNjQva2VybmVsL3Byb2Nlc3MuYwppbmRleCA2NjE2
NDg2YTU4ZmUuLmE1ZDRjMWU4MGFiZCAxMDA2NDQKLS0tIGEvYXJjaC9hcm02NC9rZXJuZWwvcHJv
Y2Vzcy5jCisrKyBiL2FyY2gvYXJtNjQva2VybmVsL3Byb2Nlc3MuYwpAQCAtNjcsOSArNjcsNiBA
QCBFWFBPUlRfU1lNQk9MKF9fc3RhY2tfY2hrX2d1YXJkKTsKIC8qCiAgKiBGdW5jdGlvbiBwb2lu
dGVycyB0byBvcHRpb25hbCBtYWNoaW5lIHNwZWNpZmljIGZ1bmN0aW9ucwogICovCi12b2lkICgq
cG1fcG93ZXJfb2ZmKSh2b2lkKTsKLUVYUE9SVF9TWU1CT0xfR1BMKHBtX3Bvd2VyX29mZik7Ci0K
IHZvaWQgKCphcm1fcG1fcmVzdGFydCkoZW51bSByZWJvb3RfbW9kZSByZWJvb3RfbW9kZSwgY29u
c3QgY2hhciAqY21kKTsKIAogc3RhdGljIHZvaWQgbm9pbnN0ciBfX2NwdV9kb19pZGxlKHZvaWQp
CkBAIC0xNzIsOCArMTY5LDcgQEAgdm9pZCBtYWNoaW5lX3Bvd2VyX29mZih2b2lkKQogewogCWxv
Y2FsX2lycV9kaXNhYmxlKCk7CiAJc21wX3NlbmRfc3RvcCgpOwotCWlmIChwbV9wb3dlcl9vZmYp
Ci0JCXBtX3Bvd2VyX29mZigpOworCWRvX3Bvd2VyX29mZigpOwogfQogCiAvKgpkaWZmIC0tZ2l0
IGEvYXJjaC9jNngva2VybmVsL3Byb2Nlc3MuYyBiL2FyY2gvYzZ4L2tlcm5lbC9wcm9jZXNzLmMK
aW5kZXggOWY0ZmQ2YTQwYTEwLi44YjRiMjQ0NzYxNjIgMTAwNjQ0Ci0tLSBhL2FyY2gvYzZ4L2tl
cm5lbC9wcm9jZXNzLmMKKysrIGIvYXJjaC9jNngva2VybmVsL3Byb2Nlc3MuYwpAQCAtMTUsNiAr
MTUsNyBAQAogI2luY2x1ZGUgPGxpbnV4L3JlYm9vdC5oPgogI2luY2x1ZGUgPGxpbnV4L3NjaGVk
L3Rhc2suaD4KICNpbmNsdWRlIDxsaW51eC9zY2hlZC90YXNrX3N0YWNrLmg+CisjaW5jbHVkZSA8
bGludXgvcG0uaD4KIAogI2luY2x1ZGUgPGFzbS9zeXNjYWxscy5oPgogCkBAIC0yNSwxMiArMjYs
NiBAQCB2b2lkCSgqYzZ4X2hhbHQpKHZvaWQpOwogZXh0ZXJuIGFzbWxpbmthZ2Ugdm9pZCByZXRf
ZnJvbV9mb3JrKHZvaWQpOwogZXh0ZXJuIGFzbWxpbmthZ2Ugdm9pZCByZXRfZnJvbV9rZXJuZWxf
dGhyZWFkKHZvaWQpOwogCi0vKgotICogcG93ZXIgb2ZmIGZ1bmN0aW9uLCBpZiBhbnkKLSAqLwot
dm9pZCAoKnBtX3Bvd2VyX29mZikodm9pZCk7Ci1FWFBPUlRfU1lNQk9MKHBtX3Bvd2VyX29mZik7
Ci0KIHZvaWQgYXJjaF9jcHVfaWRsZSh2b2lkKQogewogCXVuc2lnbmVkIGxvbmcgdG1wOwpAQCAt
NzEsOCArNjYsNyBAQCB2b2lkIG1hY2hpbmVfaGFsdCh2b2lkKQogCiB2b2lkIG1hY2hpbmVfcG93
ZXJfb2ZmKHZvaWQpCiB7Ci0JaWYgKHBtX3Bvd2VyX29mZikKLQkJcG1fcG93ZXJfb2ZmKCk7CisJ
ZG9fcG93ZXJfb2ZmKCk7CiAJaGFsdF9sb29wKCk7CiB9CiAKZGlmZiAtLWdpdCBhL2FyY2gvY3Nr
eS9rZXJuZWwvcG93ZXIuYyBiL2FyY2gvY3NreS9rZXJuZWwvcG93ZXIuYwppbmRleCA5MjNlZTRl
MzgxYjguLmM3MDJlNjZjZTAzYSAxMDA2NDQKLS0tIGEvYXJjaC9jc2t5L2tlcm5lbC9wb3dlci5j
CisrKyBiL2FyY2gvY3NreS9rZXJuZWwvcG93ZXIuYwpAQCAtMiwyMyArMiwxOSBAQAogLy8gQ29w
eXJpZ2h0IChDKSAyMDE4IEhhbmd6aG91IEMtU0tZIE1pY3Jvc3lzdGVtcyBjby4sbHRkLgogCiAj
aW5jbHVkZSA8bGludXgvcmVib290Lmg+Ci0KLXZvaWQgKCpwbV9wb3dlcl9vZmYpKHZvaWQpOwot
RVhQT1JUX1NZTUJPTChwbV9wb3dlcl9vZmYpOworI2luY2x1ZGUgPGxpbnV4L3BtLmg+CiAKIHZv
aWQgbWFjaGluZV9wb3dlcl9vZmYodm9pZCkKIHsKIAlsb2NhbF9pcnFfZGlzYWJsZSgpOwotCWlm
IChwbV9wb3dlcl9vZmYpCi0JCXBtX3Bvd2VyX29mZigpOworCWRvX3Bvd2VyX29mZigpOwogCWFz
bSB2b2xhdGlsZSAoImJrcHQiKTsKIH0KIAogdm9pZCBtYWNoaW5lX2hhbHQodm9pZCkKIHsKIAls
b2NhbF9pcnFfZGlzYWJsZSgpOwotCWlmIChwbV9wb3dlcl9vZmYpCi0JCXBtX3Bvd2VyX29mZigp
OworCWRvX3Bvd2VyX29mZigpOwogCWFzbSB2b2xhdGlsZSAoImJrcHQiKTsKIH0KIApkaWZmIC0t
Z2l0IGEvYXJjaC9oODMwMC9rZXJuZWwvcHJvY2Vzcy5jIGIvYXJjaC9oODMwMC9rZXJuZWwvcHJv
Y2Vzcy5jCmluZGV4IGJjMTM2NGRiNThmZS4uMDIwYmY3OGE3NzljIDEwMDY0NAotLS0gYS9hcmNo
L2g4MzAwL2tlcm5lbC9wcm9jZXNzLmMKKysrIGIvYXJjaC9oODMwMC9rZXJuZWwvcHJvY2Vzcy5j
CkBAIC00Niw5ICs0Niw2IEBACiAjaW5jbHVkZSA8YXNtL3RyYXBzLmg+CiAjaW5jbHVkZSA8YXNt
L3NldHVwLmg+CiAKLXZvaWQgKCpwbV9wb3dlcl9vZmYpKHZvaWQpID0gTlVMTDsKLUVYUE9SVF9T
WU1CT0wocG1fcG93ZXJfb2ZmKTsKLQogYXNtbGlua2FnZSB2b2lkIHJldF9mcm9tX2Zvcmsodm9p
ZCk7CiBhc21saW5rYWdlIHZvaWQgcmV0X2Zyb21fa2VybmVsX3RocmVhZCh2b2lkKTsKIApkaWZm
IC0tZ2l0IGEvYXJjaC9oZXhhZ29uL2tlcm5lbC9yZXNldC5jIGIvYXJjaC9oZXhhZ29uL2tlcm5l
bC9yZXNldC5jCmluZGV4IGRhMzYxMTRkOTI4Zi4uODM3MGRkYmNkZmQ5IDEwMDY0NAotLS0gYS9h
cmNoL2hleGFnb24va2VybmVsL3Jlc2V0LmMKKysrIGIvYXJjaC9oZXhhZ29uL2tlcm5lbC9yZXNl
dC5jCkBAIC0xOSw2ICsxOSwzIEBAIHZvaWQgbWFjaGluZV9oYWx0KHZvaWQpCiB2b2lkIG1hY2hp
bmVfcmVzdGFydChjaGFyICpjbWQpCiB7CiB9Ci0KLXZvaWQgKCpwbV9wb3dlcl9vZmYpKHZvaWQp
ID0gTlVMTDsKLUVYUE9SVF9TWU1CT0wocG1fcG93ZXJfb2ZmKTsKZGlmZiAtLWdpdCBhL2FyY2gv
aWE2NC9rZXJuZWwvcHJvY2Vzcy5jIGIvYXJjaC9pYTY0L2tlcm5lbC9wcm9jZXNzLmMKaW5kZXgg
NGViYmZhMDc2YTI2Li43MjEwNGI5Njc2NjggMTAwNjQ0Ci0tLSBhL2FyY2gvaWE2NC9rZXJuZWwv
cHJvY2Vzcy5jCisrKyBiL2FyY2gvaWE2NC9rZXJuZWwvcHJvY2Vzcy5jCkBAIC01Nyw4ICs1Nyw2
IEBAIHZvaWQgKCppYTY0X21hcmtfaWRsZSkoaW50KTsKIAogdW5zaWduZWQgbG9uZyBib290X29w
dGlvbl9pZGxlX292ZXJyaWRlID0gSURMRV9OT19PVkVSUklERTsKIEVYUE9SVF9TWU1CT0woYm9v
dF9vcHRpb25faWRsZV9vdmVycmlkZSk7Ci12b2lkICgqcG1fcG93ZXJfb2ZmKSAodm9pZCk7Ci1F
WFBPUlRfU1lNQk9MKHBtX3Bvd2VyX29mZik7CiAKIHN0YXRpYyB2b2lkCiBpYTY0X2RvX3Nob3df
c3RhY2sgKHN0cnVjdCB1bndfZnJhbWVfaW5mbyAqaW5mbywgdm9pZCAqYXJnKQpAQCAtNjAyLDgg
KzYwMCw3IEBAIG1hY2hpbmVfaGFsdCAodm9pZCkKIHZvaWQKIG1hY2hpbmVfcG93ZXJfb2ZmICh2
b2lkKQogewotCWlmIChwbV9wb3dlcl9vZmYpCi0JCXBtX3Bvd2VyX29mZigpOworCWRvX3Bvd2Vy
X29mZigpCiAJbWFjaGluZV9oYWx0KCk7CiB9CiAKZGlmZiAtLWdpdCBhL2FyY2gvbTY4ay9rZXJu
ZWwvcHJvY2Vzcy5jIGIvYXJjaC9tNjhrL2tlcm5lbC9wcm9jZXNzLmMKaW5kZXggMDgzNTlhNmUw
NThmLi5iOGRjMTBhNjMwZTEgMTAwNjQ0Ci0tLSBhL2FyY2gvbTY4ay9rZXJuZWwvcHJvY2Vzcy5j
CisrKyBiL2FyY2gvbTY4ay9rZXJuZWwvcHJvY2Vzcy5jCkBAIC03Miw5ICs3Miw2IEBAIHZvaWQg
bWFjaGluZV9wb3dlcl9vZmYodm9pZCkKIAlmb3IgKDs7KTsKIH0KIAotdm9pZCAoKnBtX3Bvd2Vy
X29mZikodm9pZCkgPSBtYWNoaW5lX3Bvd2VyX29mZjsKLUVYUE9SVF9TWU1CT0wocG1fcG93ZXJf
b2ZmKTsKLQogdm9pZCBzaG93X3JlZ3Moc3RydWN0IHB0X3JlZ3MgKiByZWdzKQogewogCXByX2lu
Zm8oIkZvcm1hdCAlMDJ4ICBWZWN0b3I6ICUwNHggIFBDOiAlMDhseCAgU3RhdHVzOiAlMDR4ICAg
ICVzXG4iLApkaWZmIC0tZ2l0IGEvYXJjaC9taWNyb2JsYXplL2tlcm5lbC9wcm9jZXNzLmMgYi9h
cmNoL21pY3JvYmxhemUva2VybmVsL3Byb2Nlc3MuYwppbmRleCA2NTdjMmJlYjY2NWUuLmYxZGQ2
NmExNGFiNiAxMDA2NDQKLS0tIGEvYXJjaC9taWNyb2JsYXplL2tlcm5lbC9wcm9jZXNzLmMKKysr
IGIvYXJjaC9taWNyb2JsYXplL2tlcm5lbC9wcm9jZXNzLmMKQEAgLTQ2LDkgKzQ2LDYgQEAgdm9p
ZCBzaG93X3JlZ3Moc3RydWN0IHB0X3JlZ3MgKnJlZ3MpCiAJCQkJcmVncy0+bXNyLCByZWdzLT5l
YXIsIHJlZ3MtPmVzciwgcmVncy0+ZnNyKTsKIH0KIAotdm9pZCAoKnBtX3Bvd2VyX29mZikodm9p
ZCkgPSBOVUxMOwotRVhQT1JUX1NZTUJPTChwbV9wb3dlcl9vZmYpOwotCiB2b2lkIGZsdXNoX3Ro
cmVhZCh2b2lkKQogewogfQpkaWZmIC0tZ2l0IGEvYXJjaC9taXBzL2tlcm5lbC9yZXNldC5jIGIv
YXJjaC9taXBzL2tlcm5lbC9yZXNldC5jCmluZGV4IDYyODg3ODBiNzc5ZS4uNzNlMzJlYmE0MjJm
IDEwMDY0NAotLS0gYS9hcmNoL21pcHMva2VybmVsL3Jlc2V0LmMKKysrIGIvYXJjaC9taXBzL2tl
cm5lbC9yZXNldC5jCkBAIC0yNSw5ICsyNSw2IEBACiAgKi8KIHZvaWQgKCpfbWFjaGluZV9yZXN0
YXJ0KShjaGFyICpjb21tYW5kKTsKIHZvaWQgKCpfbWFjaGluZV9oYWx0KSh2b2lkKTsKLXZvaWQg
KCpwbV9wb3dlcl9vZmYpKHZvaWQpOwotCi1FWFBPUlRfU1lNQk9MKHBtX3Bvd2VyX29mZik7CiAK
IHN0YXRpYyB2b2lkIG1hY2hpbmVfaGFuZyh2b2lkKQogewpAQCAtMTE0LDggKzExMSw3IEBAIHZv
aWQgbWFjaGluZV9oYWx0KHZvaWQpCiAKIHZvaWQgbWFjaGluZV9wb3dlcl9vZmYodm9pZCkKIHsK
LQlpZiAocG1fcG93ZXJfb2ZmKQotCQlwbV9wb3dlcl9vZmYoKTsKKwlkb19wb3dlcl9vZmYoKTsK
IAogI2lmZGVmIENPTkZJR19TTVAKIAlwcmVlbXB0X2Rpc2FibGUoKTsKZGlmZiAtLWdpdCBhL2Fy
Y2gvbmRzMzIva2VybmVsL3Byb2Nlc3MuYyBiL2FyY2gvbmRzMzIva2VybmVsL3Byb2Nlc3MuYwpp
bmRleCBlMDFhZDVkMTcyMjQuLjYyNGUyYTU2MzA4MiAxMDA2NDQKLS0tIGEvYXJjaC9uZHMzMi9r
ZXJuZWwvcHJvY2Vzcy5jCisrKyBiL2FyY2gvbmRzMzIva2VybmVsL3Byb2Nlc3MuYwpAQCAtMTIs
NiArMTIsNyBAQAogI2luY2x1ZGUgPGFzbS9mcHUuaD4KICNpbmNsdWRlIDxsaW51eC9wdHJhY2Uu
aD4KICNpbmNsdWRlIDxsaW51eC9yZWJvb3QuaD4KKyNpbmNsdWRlIDxsaW51eC9wbS5oPgogCiAj
aWYgSVNfRU5BQkxFRChDT05GSUdfTEFaWV9GUFUpCiBzdHJ1Y3QgdGFza19zdHJ1Y3QgKmxhc3Rf
dGFza191c2VkX21hdGg7CkBAIC0yNyw5ICsyOCw2IEBAIGV4dGVybiBpbmxpbmUgdm9pZCBhcmNo
X3Jlc2V0KGNoYXIgbW9kZSkKIAl9CiB9CiAKLXZvaWQgKCpwbV9wb3dlcl9vZmYpICh2b2lkKTsK
LUVYUE9SVF9TWU1CT0wocG1fcG93ZXJfb2ZmKTsKLQogc3RhdGljIGNoYXIgcmVib290X21vZGVf
bmRzMzIgPSAnaCc7CiAKIGludCBfX2luaXQgcmVib290X3NldHVwKGNoYXIgKnN0cikKQEAgLTU0
LDggKzUyLDcgQEAgRVhQT1JUX1NZTUJPTChtYWNoaW5lX2hhbHQpOwogCiB2b2lkIG1hY2hpbmVf
cG93ZXJfb2ZmKHZvaWQpCiB7Ci0JaWYgKHBtX3Bvd2VyX29mZikKLQkJcG1fcG93ZXJfb2ZmKCk7
CisJZG9fcG93ZXJfb2ZmKCk7CiB9CiAKIEVYUE9SVF9TWU1CT0wobWFjaGluZV9wb3dlcl9vZmYp
OwpkaWZmIC0tZ2l0IGEvYXJjaC9uaW9zMi9rZXJuZWwvcHJvY2Vzcy5jIGIvYXJjaC9uaW9zMi9r
ZXJuZWwvcHJvY2Vzcy5jCmluZGV4IDUwYjRlYjE5YTZjYy4uYTYxOTVjYzAyZWE0IDEwMDY0NAot
LS0gYS9hcmNoL25pb3MyL2tlcm5lbC9wcm9jZXNzLmMKKysrIGIvYXJjaC9uaW9zMi9rZXJuZWwv
cHJvY2Vzcy5jCkBAIC0yOCw5ICsyOCw2IEBACiBhc21saW5rYWdlIHZvaWQgcmV0X2Zyb21fZm9y
ayh2b2lkKTsKIGFzbWxpbmthZ2Ugdm9pZCByZXRfZnJvbV9rZXJuZWxfdGhyZWFkKHZvaWQpOwog
Ci12b2lkICgqcG1fcG93ZXJfb2ZmKSh2b2lkKSA9IE5VTEw7Ci1FWFBPUlRfU1lNQk9MKHBtX3Bv
d2VyX29mZik7Ci0KIHZvaWQgYXJjaF9jcHVfaWRsZSh2b2lkKQogewogCXJhd19sb2NhbF9pcnFf
ZW5hYmxlKCk7CmRpZmYgLS1naXQgYS9hcmNoL29wZW5yaXNjL2tlcm5lbC9wcm9jZXNzLmMgYi9h
cmNoL29wZW5yaXNjL2tlcm5lbC9wcm9jZXNzLmMKaW5kZXggM2M5ODcyOGNjZTI0Li5jMDIzNDNi
YWNmNTkgMTAwNjQ0Ci0tLSBhL2FyY2gvb3BlbnJpc2Mva2VybmVsL3Byb2Nlc3MuYworKysgYi9h
cmNoL29wZW5yaXNjL2tlcm5lbC9wcm9jZXNzLmMKQEAgLTg0LDkgKzg0LDYgQEAgdm9pZCBhcmNo
X2NwdV9pZGxlKHZvaWQpCiAJCW10c3ByKFNQUl9QTVIsIG1mc3ByKFNQUl9QTVIpIHwgU1BSX1BN
Ul9ETUUpOwogfQogCi12b2lkICgqcG1fcG93ZXJfb2ZmKSAodm9pZCkgPSBtYWNoaW5lX3Bvd2Vy
X29mZjsKLUVYUE9SVF9TWU1CT0wocG1fcG93ZXJfb2ZmKTsKLQogLyoKICAqIFdoZW4gYSBwcm9j
ZXNzIGRvZXMgYW4gImV4ZWMiLCBtYWNoaW5lIHN0YXRlIGxpa2UgRlBVIGFuZCBkZWJ1ZwogICog
cmVnaXN0ZXJzIG5lZWQgdG8gYmUgcmVzZXQuICBUaGlzIGlzIGEgaG9vayBmdW5jdGlvbiBmb3Ig
dGhhdC4KZGlmZiAtLWdpdCBhL2FyY2gvcGFyaXNjL2tlcm5lbC9wcm9jZXNzLmMgYi9hcmNoL3Bh
cmlzYy9rZXJuZWwvcHJvY2Vzcy5jCmluZGV4IGE5MmEyM2Q2YWNkOS4uOGI5NDU5OWM5NDgwIDEw
MDY0NAotLS0gYS9hcmNoL3BhcmlzYy9rZXJuZWwvcHJvY2Vzcy5jCisrKyBiL2FyY2gvcGFyaXNj
L2tlcm5lbC9wcm9jZXNzLmMKQEAgLTQxLDYgKzQxLDcgQEAKICNpbmNsdWRlIDxsaW51eC9yY3Vw
ZGF0ZS5oPgogI2luY2x1ZGUgPGxpbnV4L3JhbmRvbS5oPgogI2luY2x1ZGUgPGxpbnV4L25taS5o
PgorI2luY2x1ZGUgPGxpbnV4L3BtLmg+CiAKICNpbmNsdWRlIDxhc20vaW8uaD4KICNpbmNsdWRl
IDxhc20vYXNtLW9mZnNldHMuaD4KQEAgLTExNyw5ICsxMTgsOCBAQCB2b2lkIG1hY2hpbmVfcG93
ZXJfb2ZmKHZvaWQpCiAJcGRjX2NoYXNzaXNfc2VuZF9zdGF0dXMoUERDX0NIQVNTSVNfRElSRUNU
X1NIVVRET1dOKTsKIAogCS8qIGlwbWlfcG93ZXJvZmYgbWF5IGhhdmUgYmVlbiBpbnN0YWxsZWQu
ICovCi0JaWYgKHBtX3Bvd2VyX29mZikKLQkJcG1fcG93ZXJfb2ZmKCk7Ci0JCQorCWRvX3Bvd2Vy
X29mZigpOworCiAJLyogSXQgc2VlbXMgd2UgaGF2ZSBubyB3YXkgdG8gcG93ZXIgdGhlIHN5c3Rl
bSBvZmYgdmlhCiAJICogc29mdHdhcmUuIFRoZSB1c2VyIGhhcyB0byBwcmVzcyB0aGUgYnV0dG9u
IGhpbXNlbGYuICovCiAKQEAgLTEzMiw5ICsxMzIsNiBAQCB2b2lkIG1hY2hpbmVfcG93ZXJfb2Zm
KHZvaWQpCiAJZm9yICg7Oyk7CiB9CiAKLXZvaWQgKCpwbV9wb3dlcl9vZmYpKHZvaWQpOwotRVhQ
T1JUX1NZTUJPTChwbV9wb3dlcl9vZmYpOwotCiB2b2lkIG1hY2hpbmVfaGFsdCh2b2lkKQogewog
CW1hY2hpbmVfcG93ZXJfb2ZmKCk7CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMva2VybmVsL3Nl
dHVwLWNvbW1vbi5jIGIvYXJjaC9wb3dlcnBjL2tlcm5lbC9zZXR1cC1jb21tb24uYwppbmRleCA3
MWYzOGU5MjQ4YmUuLjNlZDQ0YjZlZTIzMiAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2tlcm5l
bC9zZXR1cC1jb21tb24uYworKysgYi9hcmNoL3Bvd2VycGMva2VybmVsL3NldHVwLWNvbW1vbi5j
CkBAIC0zMiw2ICszMiw3IEBACiAjaW5jbHVkZSA8bGludXgvb2ZfcGxhdGZvcm0uaD4KICNpbmNs
dWRlIDxsaW51eC9odWdldGxiLmg+CiAjaW5jbHVkZSA8bGludXgvcGd0YWJsZS5oPgorI2luY2x1
ZGUgPGxpbnV4L3BtLmg+CiAjaW5jbHVkZSA8YXNtL2RlYnVnZnMuaD4KICNpbmNsdWRlIDxhc20v
aW8uaD4KICNpbmNsdWRlIDxhc20vcGFjYS5oPgpAQCAtMTYzLDE4ICsxNjQsMTMgQEAgdm9pZCBt
YWNoaW5lX3Jlc3RhcnQoY2hhciAqY21kKQogdm9pZCBtYWNoaW5lX3Bvd2VyX29mZih2b2lkKQog
ewogCW1hY2hpbmVfc2h1dGRvd24oKTsKLQlpZiAocG1fcG93ZXJfb2ZmKQotCQlwbV9wb3dlcl9v
ZmYoKTsKLQorCWRvX3Bvd2VyX29mZigpOwogCXNtcF9zZW5kX3N0b3AoKTsKIAltYWNoaW5lX2hh
bmcoKTsKIH0KIC8qIFVzZWQgYnkgdGhlIEc1IHRoZXJtYWwgZHJpdmVyICovCiBFWFBPUlRfU1lN
Qk9MX0dQTChtYWNoaW5lX3Bvd2VyX29mZik7CiAKLXZvaWQgKCpwbV9wb3dlcl9vZmYpKHZvaWQp
OwotRVhQT1JUX1NZTUJPTF9HUEwocG1fcG93ZXJfb2ZmKTsKLQogdm9pZCBtYWNoaW5lX2hhbHQo
dm9pZCkKIHsKIAltYWNoaW5lX3NodXRkb3duKCk7CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMv
eG1vbi94bW9uLmMgYi9hcmNoL3Bvd2VycGMveG1vbi94bW9uLmMKaW5kZXggZGNkODE3Y2EyZWRm
Li4zOGQ3NmMyODM0MTIgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy94bW9uL3htb24uYworKysg
Yi9hcmNoL3Bvd2VycGMveG1vbi94bW9uLmMKQEAgLTI2LDYgKzI2LDcgQEAKICNpbmNsdWRlIDxs
aW51eC9jdHlwZS5oPgogI2luY2x1ZGUgPGxpbnV4L2hpZ2htZW0uaD4KICNpbmNsdWRlIDxsaW51
eC9zZWN1cml0eS5oPgorI2luY2x1ZGUgPGxpbnV4L3BtLmg+CiAKICNpbmNsdWRlIDxhc20vZGVi
dWdmcy5oPgogI2luY2x1ZGUgPGFzbS9wdHJhY2UuaD4KQEAgLTEyMzcsOCArMTIzOCw3IEBAIHN0
YXRpYyB2b2lkIGJvb3RjbWRzKHZvaWQpCiAJfSBlbHNlIGlmIChjbWQgPT0gJ2gnKSB7CiAJCXBw
Y19tZC5oYWx0KCk7CiAJfSBlbHNlIGlmIChjbWQgPT0gJ3AnKSB7Ci0JCWlmIChwbV9wb3dlcl9v
ZmYpCi0JCQlwbV9wb3dlcl9vZmYoKTsKKwkJZG9fcG93ZXJfb2ZmKCk7CiAJfQogfQogCmRpZmYg
LS1naXQgYS9hcmNoL3Jpc2N2L2tlcm5lbC9yZXNldC5jIGIvYXJjaC9yaXNjdi9rZXJuZWwvcmVz
ZXQuYwppbmRleCBlZTU4NzhkOTY4Y2MuLmY4YmNmNGQ4YjE5YiAxMDA2NDQKLS0tIGEvYXJjaC9y
aXNjdi9rZXJuZWwvcmVzZXQuYworKysgYi9hcmNoL3Jpc2N2L2tlcm5lbC9yZXNldC5jCkBAIC0x
Miw5ICsxMiw2IEBAIHN0YXRpYyB2b2lkIGRlZmF1bHRfcG93ZXJfb2ZmKHZvaWQpCiAJCXdhaXRf
Zm9yX2ludGVycnVwdCgpOwogfQogCi12b2lkICgqcG1fcG93ZXJfb2ZmKSh2b2lkKSA9IGRlZmF1
bHRfcG93ZXJfb2ZmOwotRVhQT1JUX1NZTUJPTChwbV9wb3dlcl9vZmYpOwotCiB2b2lkIG1hY2hp
bmVfcmVzdGFydChjaGFyICpjbWQpCiB7CiAJZG9fa2VybmVsX3Jlc3RhcnQoY21kKTsKQEAgLTIz
LDEwICsyMCwxMiBAQCB2b2lkIG1hY2hpbmVfcmVzdGFydChjaGFyICpjbWQpCiAKIHZvaWQgbWFj
aGluZV9oYWx0KHZvaWQpCiB7Ci0JcG1fcG93ZXJfb2ZmKCk7CisJZG9fcG93ZXJfb2ZmKCk7CisJ
ZGVmYXVsdF9wb3dlcl9vZmYoKTsKIH0KIAogdm9pZCBtYWNoaW5lX3Bvd2VyX29mZih2b2lkKQog
ewotCXBtX3Bvd2VyX29mZigpOworCWRvX3Bvd2VyX29mZigpOworCWRlZmF1bHRfcG93ZXJfb2Zm
KCk7CiB9CmRpZmYgLS1naXQgYS9hcmNoL3MzOTAva2VybmVsL3NldHVwLmMgYi9hcmNoL3MzOTAv
a2VybmVsL3NldHVwLmMKaW5kZXggMWZiZWQ5MWM3M2JjLi40ZTM0OGQzYjcxMWYgMTAwNjQ0Ci0t
LSBhL2FyY2gvczM5MC9rZXJuZWwvc2V0dXAuYworKysgYi9hcmNoL3MzOTAva2VybmVsL3NldHVw
LmMKQEAgLTMwMiw5ICszMDIsNiBAQCB2b2lkIG1hY2hpbmVfcG93ZXJfb2ZmKHZvaWQpCiAvKgog
ICogRHVtbXkgcG93ZXIgb2ZmIGZ1bmN0aW9uLgogICovCi12b2lkICgqcG1fcG93ZXJfb2ZmKSh2
b2lkKSA9IG1hY2hpbmVfcG93ZXJfb2ZmOwotRVhQT1JUX1NZTUJPTF9HUEwocG1fcG93ZXJfb2Zm
KTsKLQogdm9pZCAqcmVzdGFydF9zdGFjazsKIAogdW5zaWduZWQgbG9uZyBzdGFja19hbGxvYyh2
b2lkKQpkaWZmIC0tZ2l0IGEvYXJjaC9zaC9rZXJuZWwvcmVib290LmMgYi9hcmNoL3NoL2tlcm5l
bC9yZWJvb3QuYwppbmRleCA1YzMzZjAzNjQxOGIuLjhjOWI2M2UxZGJiYSAxMDA2NDQKLS0tIGEv
YXJjaC9zaC9rZXJuZWwvcmVib290LmMKKysrIGIvYXJjaC9zaC9rZXJuZWwvcmVib290LmMKQEAg
LTEwLDkgKzEwLDYgQEAKICNpbmNsdWRlIDxhc20vdGxiZmx1c2guaD4KICNpbmNsdWRlIDxhc20v
dHJhcHMuaD4KIAotdm9pZCAoKnBtX3Bvd2VyX29mZikodm9pZCk7Ci1FWFBPUlRfU1lNQk9MKHBt
X3Bvd2VyX29mZik7Ci0KIHN0YXRpYyB2b2lkIHdhdGNoZG9nX3RyaWdnZXJfaW1tZWRpYXRlKHZv
aWQpCiB7CiAJc2hfd2R0X3dyaXRlX2NudCgweEZGKTsKQEAgLTQ2LDggKzQzLDcgQEAgc3RhdGlj
IHZvaWQgbmF0aXZlX21hY2hpbmVfc2h1dGRvd24odm9pZCkKIAogc3RhdGljIHZvaWQgbmF0aXZl
X21hY2hpbmVfcG93ZXJfb2ZmKHZvaWQpCiB7Ci0JaWYgKHBtX3Bvd2VyX29mZikKLQkJcG1fcG93
ZXJfb2ZmKCk7CisJZG9fcG93ZXJfb2ZmKCk7CiB9CiAKIHN0YXRpYyB2b2lkIG5hdGl2ZV9tYWNo
aW5lX2hhbHQodm9pZCkKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2tlcm5lbC9yZWJvb3QuYyBiL2Fy
Y2gveDg2L2tlcm5lbC9yZWJvb3QuYwppbmRleCBkYjExNTk0M2U4YmQuLmNkZGY5Y2E0ZTZmNiAx
MDA2NDQKLS0tIGEvYXJjaC94ODYva2VybmVsL3JlYm9vdC5jCisrKyBiL2FyY2gveDg2L2tlcm5l
bC9yZWJvb3QuYwpAQCAtMzQsMTIgKzM0LDYgQEAKICNpbmNsdWRlIDxhc20vZWZpLmg+CiAKIC8q
Ci0gKiBQb3dlciBvZmYgZnVuY3Rpb24sIGlmIGFueQotICovCi12b2lkICgqcG1fcG93ZXJfb2Zm
KSh2b2lkKTsKLUVYUE9SVF9TWU1CT0wocG1fcG93ZXJfb2ZmKTsKLQotLyoKICAqIFRoaXMgaXMg
c2V0IGlmIHdlIG5lZWQgdG8gZ28gdGhyb3VnaCB0aGUgJ2VtZXJnZW5jeScgcGF0aC4KICAqIFdo
ZW4gbWFjaGluZV9lbWVyZ2VuY3lfcmVzdGFydCgpIGlzIGNhbGxlZCwgd2UgbWF5IGJlIG9uCiAg
KiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgYW5kIHdvbid0IGJlIGFibGUgdG8gZG8gYSBjbGVhbiBj
bGVhbnVwCkBAIC03NDcsMTEgKzc0MSwxMCBAQCBzdGF0aWMgdm9pZCBuYXRpdmVfbWFjaGluZV9o
YWx0KHZvaWQpCiAKIHN0YXRpYyB2b2lkIG5hdGl2ZV9tYWNoaW5lX3Bvd2VyX29mZih2b2lkKQog
ewotCWlmIChwbV9wb3dlcl9vZmYpIHsKLQkJaWYgKCFyZWJvb3RfZm9yY2UpCi0JCQltYWNoaW5l
X3NodXRkb3duKCk7Ci0JCXBtX3Bvd2VyX29mZigpOwotCX0KKwlpZiAoIXJlYm9vdF9mb3JjZSkK
KwkJbWFjaGluZV9zaHV0ZG93bigpOworCWRvX3Bvd2VyX29mZigpOworCiAJLyogQSBmYWxsYmFj
ayBpbiBjYXNlIHRoZXJlIGlzIG5vIFBNIGluZm8gYXZhaWxhYmxlICovCiAJdGJvb3Rfc2h1dGRv
d24oVEJfU0hVVERPV05fSEFMVCk7CiB9CmRpZmYgLS1naXQgYS9hcmNoL3g4Ni94ZW4vZW5saWdo
dGVuX3B2LmMgYi9hcmNoL3g4Ni94ZW4vZW5saWdodGVuX3B2LmMKaW5kZXggNDQwOTMwNjM2NGRj
Li43ZTU0MTZjMzE2ZDMgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L3hlbi9lbmxpZ2h0ZW5fcHYuYwor
KysgYi9hcmNoL3g4Ni94ZW4vZW5saWdodGVuX3B2LmMKQEAgLTMzLDYgKzMzLDcgQEAKICNpbmNs
dWRlIDxsaW51eC9nZnAuaD4KICNpbmNsdWRlIDxsaW51eC9lZGQuaD4KICNpbmNsdWRlIDxsaW51
eC9vYmp0b29sLmg+CisjaW5jbHVkZSA8bGludXgvcG0uaD4KIAogI2luY2x1ZGUgPHhlbi94ZW4u
aD4KICNpbmNsdWRlIDx4ZW4vZXZlbnRzLmg+CkBAIC0xMDg0LDggKzEwODUsNyBAQCBzdGF0aWMg
dm9pZCB4ZW5fbWFjaGluZV9oYWx0KHZvaWQpCiAKIHN0YXRpYyB2b2lkIHhlbl9tYWNoaW5lX3Bv
d2VyX29mZih2b2lkKQogewotCWlmIChwbV9wb3dlcl9vZmYpCi0JCXBtX3Bvd2VyX29mZigpOwor
CWRvX3Bvd2VyX29mZigpOwogCXhlbl9yZWJvb3QoU0hVVERPV05fcG93ZXJvZmYpOwogfQogCmRp
ZmYgLS1naXQgYS9hcmNoL3h0ZW5zYS9rZXJuZWwvcHJvY2Vzcy5jIGIvYXJjaC94dGVuc2Eva2Vy
bmVsL3Byb2Nlc3MuYwppbmRleCAzOTdhN2RlNTYzNzcuLmZiOGQ1ZTk4MjliYSAxMDA2NDQKLS0t
IGEvYXJjaC94dGVuc2Eva2VybmVsL3Byb2Nlc3MuYworKysgYi9hcmNoL3h0ZW5zYS9rZXJuZWwv
cHJvY2Vzcy5jCkBAIC01MSwxMCArNTEsNiBAQAogZXh0ZXJuIHZvaWQgcmV0X2Zyb21fZm9yayh2
b2lkKTsKIGV4dGVybiB2b2lkIHJldF9mcm9tX2tlcm5lbF90aHJlYWQodm9pZCk7CiAKLXZvaWQg
KCpwbV9wb3dlcl9vZmYpKHZvaWQpID0gTlVMTDsKLUVYUE9SVF9TWU1CT0wocG1fcG93ZXJfb2Zm
KTsKLQotCiAjaWZkZWYgQ09ORklHX1NUQUNLUFJPVEVDVE9SCiAjaW5jbHVkZSA8bGludXgvc3Rh
Y2twcm90ZWN0b3IuaD4KIHVuc2lnbmVkIGxvbmcgX19zdGFja19jaGtfZ3VhcmQgX19yZWFkX21v
c3RseTsKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvcG0uaCBiL2luY2x1ZGUvbGludXgvcG0u
aAppbmRleCA0N2FjYTZiYWMxZDYuLjc4NjI3Yzk3MGJlMCAxMDA2NDQKLS0tIGEvaW5jbHVkZS9s
aW51eC9wbS5oCisrKyBiL2luY2x1ZGUvbGludXgvcG0uaApAQCAtMjIsNiArMjIsOCBAQAogZXh0
ZXJuIHZvaWQgKCpwbV9wb3dlcl9vZmYpKHZvaWQpOwogZXh0ZXJuIHZvaWQgKCpwbV9wb3dlcl9v
ZmZfcHJlcGFyZSkodm9pZCk7CiAKK2V4dGVybiB2b2lkIGRvX3Bvd2VyX29mZih2b2lkKTsKKwog
c3RydWN0IGRldmljZTsgLyogd2UgaGF2ZSBhIGNpcmN1bGFyIGRlcCB3aXRoIGRldmljZS5oICov
CiAjaWZkZWYgQ09ORklHX1ZUX0NPTlNPTEVfU0xFRVAKIGV4dGVybiB2b2lkIHBtX3Z0X3N3aXRj
aF9yZXF1aXJlZChzdHJ1Y3QgZGV2aWNlICpkZXYsIGJvb2wgcmVxdWlyZWQpOwpkaWZmIC0tZ2l0
IGEva2VybmVsL3JlYm9vdC5jIGIva2VybmVsL3JlYm9vdC5jCmluZGV4IGViMWIxNTg1MDc2MS4u
ZWM0Y2Q2NmRkMWFlIDEwMDY0NAotLS0gYS9rZXJuZWwvcmVib290LmMKKysrIGIva2VybmVsL3Jl
Ym9vdC5jCkBAIC01Myw2ICs1MywxNiBAQCBpbnQgcmVib290X2ZvcmNlOwogdm9pZCAoKnBtX3Bv
d2VyX29mZl9wcmVwYXJlKSh2b2lkKTsKIEVYUE9SVF9TWU1CT0xfR1BMKHBtX3Bvd2VyX29mZl9w
cmVwYXJlKTsKIAordm9pZCAoKnBtX3Bvd2VyX29mZikodm9pZCk7CitFWFBPUlRfU1lNQk9MX0dQ
TChwbV9wb3dlcl9vZmYpOworCit2b2lkIGRvX3Bvd2VyX29mZih2b2lkKQoreworCWlmIChwbV9w
b3dlcl9vZmYpCisJCXBtX3Bvd2VyX29mZigpOworfQorRVhQT1JUX1NZTUJPTF9HUEwoZG9fcG93
ZXJfb2ZmKTsKKwogLyoqCiAgKgllbWVyZ2VuY3lfcmVzdGFydCAtIHJlYm9vdCB0aGUgc3lzdGVt
CiAgKgotLSAKMi4xMS4wCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fXwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMubGlicmVjb3Jlcy5v
cmcKaHR0cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVucmlzYwo=
