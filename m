Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 3281116312E
	for <lists+openrisc@lfdr.de>; Tue, 18 Feb 2020 21:00:30 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id DFDAF20895;
	Tue, 18 Feb 2020 21:00:29 +0100 (CET)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 20A432097E
 for <openrisc@lists.librecores.org>; Sun, 16 Feb 2020 09:20:02 +0100 (CET)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 176DC22522;
 Sun, 16 Feb 2020 08:19:51 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1581841200;
 bh=JKLJ1tKZ3fztALgqup/wk4buejQqYQyIwWENLCivm5I=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=DHawBwOaLPv7OEoszLtrM8YJM+6uYJO58rZulQFWhzEhJP2ZJ5qcXjbaV+wmYtYlW
 AGDhO7mt9uSOxVKPZU3beBo7QQURYVhDl+4ZLFSpR1uvY9YQsAnGCBSHULR/LxOUwY
 XHCCwIlICz7XaiX5bWgQJ0C1TN7BxlvPEn8W5i5E=
From: Mike Rapoport <rppt@kernel.org>
To: linux-kernel@vger.kernel.org
Date: Sun, 16 Feb 2020 10:18:37 +0200
Message-Id: <20200216081843.28670-8-rppt@kernel.org>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20200216081843.28670-1-rppt@kernel.org>
References: <20200216081843.28670-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Tue, 18 Feb 2020 21:00:15 +0100
Subject: [OpenRISC] [PATCH v2 07/13] powerpc: add support for folded p4d
 page tables
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 Geert Uytterhoeven <geert+renesas@glider.be>, linux-sh@vger.kernel.org,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>, linux-mm@kvack.org,
 Paul Mackerras <paulus@samba.org>, linux-hexagon@vger.kernel.org,
 Will Deacon <will@kernel.org>, kvmarm@lists.cs.columbia.edu,
 Jonas Bonn <jonas@southpole.se>, linux-arch@vger.kernel.org,
 Brian Cain <bcain@codeaurora.org>, Marc Zyngier <maz@kernel.org>,
 Russell King <linux@armlinux.org.uk>, Ley Foon Tan <ley.foon.tan@intel.com>,
 Mike Rapoport <rppt@linux.ibm.com>, Catalin Marinas <catalin.marinas@arm.com>,
 Julien Thierry <julien.thierry.kdev@gmail.com>,
 uclinux-h8-devel@lists.sourceforge.jp, Fenghua Yu <fenghua.yu@intel.com>,
 Arnd Bergmann <arnd@arndb.de>, Suzuki K Poulose <suzuki.poulose@arm.com>,
 kvm-ppc@vger.kernel.org, openrisc@lists.librecores.org,
 Guan Xuetao <gxt@pku.edu.cn>, linux-arm-kernel@lists.infradead.org,
 Christophe Leroy <christophe.leroy@c-s.fr>, Tony Luck <tony.luck@intel.com>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, James Morse <james.morse@arm.com>,
 Michael Ellerman <mpe@ellerman.id.au>, nios2-dev@lists.rocketboards.org,
 Andrew Morton <akpm@linux-foundation.org>, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKSW1wbGVtZW50IHByaW1p
dGl2ZXMgbmVjZXNzYXJ5IGZvciB0aGUgNHRoIGxldmVsIGZvbGRpbmcsIGFkZCB3YWxrcyBvZiBw
NGQKbGV2ZWwgd2hlcmUgYXBwcm9wcmlhdGUgYW5kIHJlcGxhY2UgNWxldmVsLWZpeHVwLmggd2l0
aCBwZ3RhYmxlLW5vcDRkLmguCgpTaWduZWQtb2ZmLWJ5OiBNaWtlIFJhcG9wb3J0IDxycHB0QGxp
bnV4LmlibS5jb20+ClRlc3RlZC1ieTogQ2hyaXN0b3BoZSBMZXJveSA8Y2hyaXN0b3BoZS5sZXJv
eUBjLXMuZnI+ICMgOHh4IGFuZCA4M3h4Ci0tLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jv
b2szcy8zMi9wZ3RhYmxlLmggIHwgIDEgLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2sz
cy82NC9oYXNoLmggICAgIHwgIDQgKy0KIGFyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3Mv
NjQvcGdhbGxvYy5oICB8ICA0ICstCiBhcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0
L3BndGFibGUuaCAgfCA1OCArKysrKysrKysrLS0tLS0tLS0KIGFyY2gvcG93ZXJwYy9pbmNsdWRl
L2FzbS9ib29rM3MvNjQvcmFkaXguaCAgICB8ICA2ICstCiBhcmNoL3Bvd2VycGMvaW5jbHVkZS9h
c20vbm9oYXNoLzMyL3BndGFibGUuaCAgfCAgMSAtCiBhcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20v
bm9oYXNoLzY0L3BnYWxsb2MuaCAgfCAgMiArLQogLi4uL2luY2x1ZGUvYXNtL25vaGFzaC82NC9w
Z3RhYmxlLTRrLmggICAgICAgIHwgMzIgKysrKystLS0tLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUv
YXNtL25vaGFzaC82NC9wZ3RhYmxlLmggIHwgIDYgKy0KIGFyY2gvcG93ZXJwYy9pbmNsdWRlL2Fz
bS9wZ3RhYmxlLmggICAgICAgICAgICB8ICA4ICsrKwogYXJjaC9wb3dlcnBjL2t2bS9ib29rM3Nf
NjRfbW11X3JhZGl4LmMgICAgICAgIHwgNTkgKysrKysrKysrKysrKysrKy0tLQogYXJjaC9wb3dl
cnBjL2xpYi9jb2RlLXBhdGNoaW5nLmMgICAgICAgICAgICAgIHwgIDcgKystCiBhcmNoL3Bvd2Vy
cGMvbW0vYm9vazNzMzIvbW11LmMgICAgICAgICAgICAgICAgfCAgMiArLQogYXJjaC9wb3dlcnBj
L21tL2Jvb2szczMyL3RsYi5jICAgICAgICAgICAgICAgIHwgIDQgKy0KIGFyY2gvcG93ZXJwYy9t
bS9ib29rM3M2NC9oYXNoX3BndGFibGUuYyAgICAgICB8ICA0ICstCiBhcmNoL3Bvd2VycGMvbW0v
Ym9vazNzNjQvcmFkaXhfcGd0YWJsZS5jICAgICAgfCAxOSArKysrLS0KIGFyY2gvcG93ZXJwYy9t
bS9ib29rM3M2NC9zdWJwYWdlX3Byb3QuYyAgICAgICB8ICA2ICstCiBhcmNoL3Bvd2VycGMvbW0v
aHVnZXRsYnBhZ2UuYyAgICAgICAgICAgICAgICAgfCAyOCArKysrKy0tLS0KIGFyY2gvcG93ZXJw
Yy9tbS9rYXNhbi9rYXNhbl9pbml0XzMyLmMgICAgICAgICB8ICA4ICstLQogYXJjaC9wb3dlcnBj
L21tL21lbS5jICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDQgKy0KIGFyY2gvcG93ZXJwYy9t
bS9ub2hhc2gvNDB4LmMgICAgICAgICAgICAgICAgICB8ICA0ICstCiBhcmNoL3Bvd2VycGMvbW0v
bm9oYXNoL2Jvb2szZV9wZ3RhYmxlLmMgICAgICAgfCAxNSArKystLQogYXJjaC9wb3dlcnBjL21t
L3BndGFibGUuYyAgICAgICAgICAgICAgICAgICAgIHwgMjUgKysrKysrKy0KIGFyY2gvcG93ZXJw
Yy9tbS9wZ3RhYmxlXzMyLmMgICAgICAgICAgICAgICAgICB8IDI4ICsrKysrLS0tLQogYXJjaC9w
b3dlcnBjL21tL3BndGFibGVfNjQuYyAgICAgICAgICAgICAgICAgIHwgMTAgKystLQogYXJjaC9w
b3dlcnBjL21tL3B0ZHVtcC9oYXNocGFnZXRhYmxlLmMgICAgICAgIHwgMjAgKysrKysrLQogYXJj
aC9wb3dlcnBjL21tL3B0ZHVtcC9wdGR1bXAuYyAgICAgICAgICAgICAgIHwgMjIgKysrKysrLQog
YXJjaC9wb3dlcnBjL3htb24veG1vbi5jICAgICAgICAgICAgICAgICAgICAgIHwgMTcgKysrKyst
CiAyOCBmaWxlcyBjaGFuZ2VkLCAyODQgaW5zZXJ0aW9ucygrKSwgMTIwIGRlbGV0aW9ucygtKQoK
ZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3MvMzIvcGd0YWJsZS5o
IGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy8zMi9wZ3RhYmxlLmgKaW5kZXggNWIz
OWMxMWU4ODRhLi4zOWVjMTEzNzFiZTAgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRl
L2FzbS9ib29rM3MvMzIvcGd0YWJsZS5oCisrKyBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9i
b29rM3MvMzIvcGd0YWJsZS5oCkBAIC0yLDcgKzIsNiBAQAogI2lmbmRlZiBfQVNNX1BPV0VSUENf
Qk9PSzNTXzMyX1BHVEFCTEVfSAogI2RlZmluZSBfQVNNX1BPV0VSUENfQk9PSzNTXzMyX1BHVEFC
TEVfSAogCi0jZGVmaW5lIF9fQVJDSF9VU0VfNUxFVkVMX0hBQ0sKICNpbmNsdWRlIDxhc20tZ2Vu
ZXJpYy9wZ3RhYmxlLW5vcG1kLmg+CiAKICNpbmNsdWRlIDxhc20vYm9vazNzLzMyL2hhc2guaD4K
ZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3MvNjQvaGFzaC5oIGIv
YXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9oYXNoLmgKaW5kZXggMjc4MWViZjZh
ZGQ0Li44NzZkMTUyOGMyY2YgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9i
b29rM3MvNjQvaGFzaC5oCisrKyBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3MvNjQv
aGFzaC5oCkBAIC0xMzQsOSArMTM0LDkgQEAgc3RhdGljIGlubGluZSBpbnQgZ2V0X3JlZ2lvbl9p
ZCh1bnNpZ25lZCBsb25nIGVhKQogCiAjZGVmaW5lCWhhc2hfX3BtZF9iYWQocG1kKQkJKHBtZF92
YWwocG1kKSAmIEhfUE1EX0JBRF9CSVRTKQogI2RlZmluZQloYXNoX19wdWRfYmFkKHB1ZCkJCShw
dWRfdmFsKHB1ZCkgJiBIX1BVRF9CQURfQklUUykKLXN0YXRpYyBpbmxpbmUgaW50IGhhc2hfX3Bn
ZF9iYWQocGdkX3QgcGdkKQorc3RhdGljIGlubGluZSBpbnQgaGFzaF9fcDRkX2JhZChwNGRfdCBw
NGQpCiB7Ci0JcmV0dXJuIChwZ2RfdmFsKHBnZCkgPT0gMCk7CisJcmV0dXJuIChwNGRfdmFsKHA0
ZCkgPT0gMCk7CiB9CiAjaWZkZWYgQ09ORklHX1NUUklDVF9LRVJORUxfUldYCiBleHRlcm4gdm9p
ZCBoYXNoX19tYXJrX3JvZGF0YV9ybyh2b2lkKTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9p
bmNsdWRlL2FzbS9ib29rM3MvNjQvcGdhbGxvYy5oIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNt
L2Jvb2szcy82NC9wZ2FsbG9jLmgKaW5kZXggYTQxZTkxYmQwNTgwLi42OWM1YjA1MTczNGYgMTAw
NjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3MvNjQvcGdhbGxvYy5oCisr
KyBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3MvNjQvcGdhbGxvYy5oCkBAIC04NSw5
ICs4NSw5IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBwZ2RfZnJlZShzdHJ1Y3QgbW1fc3RydWN0ICpt
bSwgcGdkX3QgKnBnZCkKIAlrbWVtX2NhY2hlX2ZyZWUoUEdUX0NBQ0hFKFBHRF9JTkRFWF9TSVpF
KSwgcGdkKTsKIH0KIAotc3RhdGljIGlubGluZSB2b2lkIHBnZF9wb3B1bGF0ZShzdHJ1Y3QgbW1f
c3RydWN0ICptbSwgcGdkX3QgKnBnZCwgcHVkX3QgKnB1ZCkKK3N0YXRpYyBpbmxpbmUgdm9pZCBw
NGRfcG9wdWxhdGUoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHA0ZF90ICpwZ2QsIHB1ZF90ICpwdWQp
CiB7Ci0JKnBnZCA9ICBfX3BnZChfX3BndGFibGVfcHRyX3ZhbChwdWQpIHwgUEdEX1ZBTF9CSVRT
KTsKKwkqcGdkID0gIF9fcDRkKF9fcGd0YWJsZV9wdHJfdmFsKHB1ZCkgfCBQR0RfVkFMX0JJVFMp
OwogfQogCiBzdGF0aWMgaW5saW5lIHB1ZF90ICpwdWRfYWxsb2Nfb25lKHN0cnVjdCBtbV9zdHJ1
Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHIpCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvaW5j
bHVkZS9hc20vYm9vazNzLzY0L3BndGFibGUuaCBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9i
b29rM3MvNjQvcGd0YWJsZS5oCmluZGV4IDIwMWE2OWU2YTM1NS4uZGRkZGJhZmZmMGFiIDEwMDY0
NAotLS0gYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0L3BndGFibGUuaAorKysg
Yi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0L3BndGFibGUuaApAQCAtMiw3ICsy
LDcgQEAKICNpZm5kZWYgX0FTTV9QT1dFUlBDX0JPT0szU182NF9QR1RBQkxFX0hfCiAjZGVmaW5l
IF9BU01fUE9XRVJQQ19CT09LM1NfNjRfUEdUQUJMRV9IXwogCi0jaW5jbHVkZSA8YXNtLWdlbmVy
aWMvNWxldmVsLWZpeHVwLmg+CisjaW5jbHVkZSA8YXNtLWdlbmVyaWMvcGd0YWJsZS1ub3A0ZC5o
PgogCiAjaWZuZGVmIF9fQVNTRU1CTFlfXwogI2luY2x1ZGUgPGxpbnV4L21tZGVidWcuaD4KQEAg
LTI1MSw3ICsyNTEsNyBAQCBleHRlcm4gdW5zaWduZWQgbG9uZyBfX3BtZF9mcmFnX3NpemVfc2hp
ZnQ7CiAvKiBCaXRzIHRvIG1hc2sgb3V0IGZyb20gYSBQVUQgdG8gZ2V0IHRvIHRoZSBQTUQgcGFn
ZSAqLwogI2RlZmluZSBQVURfTUFTS0VEX0JJVFMJCTB4YzAwMDAwMDAwMDAwMDBmZlVMCiAvKiBC
aXRzIHRvIG1hc2sgb3V0IGZyb20gYSBQR0QgdG8gZ2V0IHRvIHRoZSBQVUQgcGFnZSAqLwotI2Rl
ZmluZSBQR0RfTUFTS0VEX0JJVFMJCTB4YzAwMDAwMDAwMDAwMDBmZlVMCisjZGVmaW5lIFA0RF9N
QVNLRURfQklUUwkJMHhjMDAwMDAwMDAwMDAwMGZmVUwKIAogLyoKICAqIFVzZWQgYXMgYW4gaW5k
aWNhdG9yIGZvciByY3UgY2FsbGJhY2sgZnVuY3Rpb25zCkBAIC05NDksNTQgKzk0OSw2MCBAQCBz
dGF0aWMgaW5saW5lIGJvb2wgcHVkX2FjY2Vzc19wZXJtaXR0ZWQocHVkX3QgcHVkLCBib29sIHdy
aXRlKQogCXJldHVybiBwdGVfYWNjZXNzX3Blcm1pdHRlZChwdWRfcHRlKHB1ZCksIHdyaXRlKTsK
IH0KIAotI2RlZmluZSBwZ2Rfd3JpdGUocGdkKQkJcHRlX3dyaXRlKHBnZF9wdGUocGdkKSkKKyNk
ZWZpbmUgX19wNGRfcmF3KHgpCSgocDRkX3QpIHsgX19wZ2RfcmF3KHgpIH0pCitzdGF0aWMgaW5s
aW5lIF9fYmU2NCBwNGRfcmF3KHA0ZF90IHgpCit7CisJcmV0dXJuIHBnZF9yYXcoeC5wZ2QpOwor
fQorCisjZGVmaW5lIHA0ZF93cml0ZShwNGQpCQlwdGVfd3JpdGUocDRkX3B0ZShwNGQpKQogCi1z
dGF0aWMgaW5saW5lIHZvaWQgcGdkX2NsZWFyKHBnZF90ICpwZ2RwKQorc3RhdGljIGlubGluZSB2
b2lkIHA0ZF9jbGVhcihwNGRfdCAqcDRkcCkKIHsKLQkqcGdkcCA9IF9fcGdkKDApOworCSpwNGRw
ID0gX19wNGQoMCk7CiB9CiAKLXN0YXRpYyBpbmxpbmUgaW50IHBnZF9ub25lKHBnZF90IHBnZCkK
K3N0YXRpYyBpbmxpbmUgaW50IHA0ZF9ub25lKHA0ZF90IHA0ZCkKIHsKLQlyZXR1cm4gIXBnZF9y
YXcocGdkKTsKKwlyZXR1cm4gIXA0ZF9yYXcocDRkKTsKIH0KIAotc3RhdGljIGlubGluZSBpbnQg
cGdkX3ByZXNlbnQocGdkX3QgcGdkKQorc3RhdGljIGlubGluZSBpbnQgcDRkX3ByZXNlbnQocDRk
X3QgcDRkKQogewotCXJldHVybiAhIShwZ2RfcmF3KHBnZCkgJiBjcHVfdG9fYmU2NChfUEFHRV9Q
UkVTRU5UKSk7CisJcmV0dXJuICEhKHA0ZF9yYXcocDRkKSAmIGNwdV90b19iZTY0KF9QQUdFX1BS
RVNFTlQpKTsKIH0KIAotc3RhdGljIGlubGluZSBwdGVfdCBwZ2RfcHRlKHBnZF90IHBnZCkKK3N0
YXRpYyBpbmxpbmUgcHRlX3QgcDRkX3B0ZShwNGRfdCBwNGQpCiB7Ci0JcmV0dXJuIF9fcHRlX3Jh
dyhwZ2RfcmF3KHBnZCkpOworCXJldHVybiBfX3B0ZV9yYXcocDRkX3JhdyhwNGQpKTsKIH0KIAot
c3RhdGljIGlubGluZSBwZ2RfdCBwdGVfcGdkKHB0ZV90IHB0ZSkKK3N0YXRpYyBpbmxpbmUgcDRk
X3QgcHRlX3A0ZChwdGVfdCBwdGUpCiB7Ci0JcmV0dXJuIF9fcGdkX3JhdyhwdGVfcmF3KHB0ZSkp
OworCXJldHVybiBfX3A0ZF9yYXcocHRlX3JhdyhwdGUpKTsKIH0KIAotc3RhdGljIGlubGluZSBp
bnQgcGdkX2JhZChwZ2RfdCBwZ2QpCitzdGF0aWMgaW5saW5lIGludCBwNGRfYmFkKHA0ZF90IHA0
ZCkKIHsKIAlpZiAocmFkaXhfZW5hYmxlZCgpKQotCQlyZXR1cm4gcmFkaXhfX3BnZF9iYWQocGdk
KTsKLQlyZXR1cm4gaGFzaF9fcGdkX2JhZChwZ2QpOworCQlyZXR1cm4gcmFkaXhfX3A0ZF9iYWQo
cDRkKTsKKwlyZXR1cm4gaGFzaF9fcDRkX2JhZChwNGQpOwogfQogCi0jZGVmaW5lIHBnZF9hY2Nl
c3NfcGVybWl0dGVkIHBnZF9hY2Nlc3NfcGVybWl0dGVkCi1zdGF0aWMgaW5saW5lIGJvb2wgcGdk
X2FjY2Vzc19wZXJtaXR0ZWQocGdkX3QgcGdkLCBib29sIHdyaXRlKQorI2RlZmluZSBwNGRfYWNj
ZXNzX3Blcm1pdHRlZCBwNGRfYWNjZXNzX3Blcm1pdHRlZAorc3RhdGljIGlubGluZSBib29sIHA0
ZF9hY2Nlc3NfcGVybWl0dGVkKHA0ZF90IHA0ZCwgYm9vbCB3cml0ZSkKIHsKLQlyZXR1cm4gcHRl
X2FjY2Vzc19wZXJtaXR0ZWQocGdkX3B0ZShwZ2QpLCB3cml0ZSk7CisJcmV0dXJuIHB0ZV9hY2Nl
c3NfcGVybWl0dGVkKHA0ZF9wdGUocDRkKSwgd3JpdGUpOwogfQogCi1leHRlcm4gc3RydWN0IHBh
Z2UgKnBnZF9wYWdlKHBnZF90IHBnZCk7CitleHRlcm4gc3RydWN0IHBhZ2UgKnA0ZF9wYWdlKHA0
ZF90IHA0ZCk7CiAKIC8qIFBvaW50ZXJzIGluIHRoZSBwYWdlIHRhYmxlIHRyZWUgYXJlIHBoeXNp
Y2FsIGFkZHJlc3NlcyAqLwogI2RlZmluZSBfX3BndGFibGVfcHRyX3ZhbChwdHIpCV9fcGEocHRy
KQogCiAjZGVmaW5lIHBtZF9wYWdlX3ZhZGRyKHBtZCkJX192YShwbWRfdmFsKHBtZCkgJiB+UE1E
X01BU0tFRF9CSVRTKQogI2RlZmluZSBwdWRfcGFnZV92YWRkcihwdWQpCV9fdmEocHVkX3ZhbChw
dWQpICYgflBVRF9NQVNLRURfQklUUykKLSNkZWZpbmUgcGdkX3BhZ2VfdmFkZHIocGdkKQlfX3Zh
KHBnZF92YWwocGdkKSAmIH5QR0RfTUFTS0VEX0JJVFMpCisjZGVmaW5lIHA0ZF9wYWdlX3ZhZGRy
KHA0ZCkJX192YShwNGRfdmFsKHA0ZCkgJiB+UDREX01BU0tFRF9CSVRTKQogCiAjZGVmaW5lIHBn
ZF9pbmRleChhZGRyZXNzKSAoKChhZGRyZXNzKSA+PiAoUEdESVJfU0hJRlQpKSAmIChQVFJTX1BF
Ul9QR0QgLSAxKSkKICNkZWZpbmUgcHVkX2luZGV4KGFkZHJlc3MpICgoKGFkZHJlc3MpID4+IChQ
VURfU0hJRlQpKSAmIChQVFJTX1BFUl9QVUQgLSAxKSkKQEAgLTEwMTAsOCArMTAxNiw4IEBAIGV4
dGVybiBzdHJ1Y3QgcGFnZSAqcGdkX3BhZ2UocGdkX3QgcGdkKTsKIAogI2RlZmluZSBwZ2Rfb2Zm
c2V0KG1tLCBhZGRyZXNzKQkgKChtbSktPnBnZCArIHBnZF9pbmRleChhZGRyZXNzKSkKIAotI2Rl
ZmluZSBwdWRfb2Zmc2V0KHBnZHAsIGFkZHIpCVwKLQkoKChwdWRfdCAqKSBwZ2RfcGFnZV92YWRk
cigqKHBnZHApKSkgKyBwdWRfaW5kZXgoYWRkcikpCisjZGVmaW5lIHB1ZF9vZmZzZXQocDRkcCwg
YWRkcikJXAorCSgoKHB1ZF90ICopIHA0ZF9wYWdlX3ZhZGRyKCoocDRkcCkpKSArIHB1ZF9pbmRl
eChhZGRyKSkKICNkZWZpbmUgcG1kX29mZnNldChwdWRwLGFkZHIpIFwKIAkoKChwbWRfdCAqKSBw
dWRfcGFnZV92YWRkcigqKHB1ZHApKSkgKyBwbWRfaW5kZXgoYWRkcikpCiAjZGVmaW5lIHB0ZV9v
ZmZzZXRfa2VybmVsKGRpcixhZGRyKSBcCkBAIC0xMzY4LDYgKzEzNzQsMTIgQEAgc3RhdGljIGlu
bGluZSBib29sIHB1ZF9pc19sZWFmKHB1ZF90IHB1ZCkKIAlyZXR1cm4gISEocHVkX3JhdyhwdWQp
ICYgY3B1X3RvX2JlNjQoX1BBR0VfUFRFKSk7CiB9CiAKKyNkZWZpbmUgcDRkX2lzX2xlYWYgcDRk
X2lzX2xlYWYKK3N0YXRpYyBpbmxpbmUgYm9vbCBwNGRfaXNfbGVhZihwNGRfdCBwNGQpCit7CisJ
cmV0dXJuICEhKHA0ZF9yYXcocDRkKSAmIGNwdV90b19iZTY0KF9QQUdFX1BURSkpOworfQorCiAj
ZGVmaW5lIHBnZF9pc19sZWFmIHBnZF9pc19sZWFmCiAjZGVmaW5lIHBnZF9sZWFmIHBnZF9pc19s
ZWFmCiBzdGF0aWMgaW5saW5lIGJvb2wgcGdkX2lzX2xlYWYocGdkX3QgcGdkKQpkaWZmIC0tZ2l0
IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9yYWRpeC5oIGIvYXJjaC9wb3dl
cnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9yYWRpeC5oCmluZGV4IGQ5N2RiM2FkOWFhZS4uOWJj
YTJhYzY0MjIwIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0
L3JhZGl4LmgKKysrIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9yYWRpeC5o
CkBAIC0zMCw3ICszMCw3IEBACiAvKiBEb24ndCBoYXZlIGFueXRoaW5nIGluIHRoZSByZXNlcnZl
ZCBiaXRzIGFuZCBsZWFmIGJpdHMgKi8KICNkZWZpbmUgUkFESVhfUE1EX0JBRF9CSVRTCQkweDYw
MDAwMDAwMDAwMDAwZTBVTAogI2RlZmluZSBSQURJWF9QVURfQkFEX0JJVFMJCTB4NjAwMDAwMDAw
MDAwMDBlMFVMCi0jZGVmaW5lIFJBRElYX1BHRF9CQURfQklUUwkJMHg2MDAwMDAwMDAwMDAwMGUw
VUwKKyNkZWZpbmUgUkFESVhfUDREX0JBRF9CSVRTCQkweDYwMDAwMDAwMDAwMDAwZTBVTAogCiAj
ZGVmaW5lIFJBRElYX1BNRF9TSElGVAkJKFBBR0VfU0hJRlQgKyBSQURJWF9QVEVfSU5ERVhfU0la
RSkKICNkZWZpbmUgUkFESVhfUFVEX1NISUZUCQkoUkFESVhfUE1EX1NISUZUICsgUkFESVhfUE1E
X0lOREVYX1NJWkUpCkBAIC0yMjcsOSArMjI3LDkgQEAgc3RhdGljIGlubGluZSBpbnQgcmFkaXhf
X3B1ZF9iYWQocHVkX3QgcHVkKQogfQogCiAKLXN0YXRpYyBpbmxpbmUgaW50IHJhZGl4X19wZ2Rf
YmFkKHBnZF90IHBnZCkKK3N0YXRpYyBpbmxpbmUgaW50IHJhZGl4X19wNGRfYmFkKHA0ZF90IHA0
ZCkKIHsKLQlyZXR1cm4gISEocGdkX3ZhbChwZ2QpICYgUkFESVhfUEdEX0JBRF9CSVRTKTsKKwly
ZXR1cm4gISEocDRkX3ZhbChwNGQpICYgUkFESVhfUDREX0JBRF9CSVRTKTsKIH0KIAogI2lmZGVm
IENPTkZJR19UUkFOU1BBUkVOVF9IVUdFUEFHRQpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2lu
Y2x1ZGUvYXNtL25vaGFzaC8zMi9wZ3RhYmxlLmggYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20v
bm9oYXNoLzMyL3BndGFibGUuaAppbmRleCA2MGM0ZDgyOTE1MmUuLmQ0YzJjNDI1OWZhMyAxMDA2
NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC8zMi9wZ3RhYmxlLmgKKysr
IGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC8zMi9wZ3RhYmxlLmgKQEAgLTIsNyAr
Miw2IEBACiAjaWZuZGVmIF9BU01fUE9XRVJQQ19OT0hBU0hfMzJfUEdUQUJMRV9ICiAjZGVmaW5l
IF9BU01fUE9XRVJQQ19OT0hBU0hfMzJfUEdUQUJMRV9ICiAKLSNkZWZpbmUgX19BUkNIX1VTRV81
TEVWRUxfSEFDSwogI2luY2x1ZGUgPGFzbS1nZW5lcmljL3BndGFibGUtbm9wbWQuaD4KIAogI2lm
bmRlZiBfX0FTU0VNQkxZX18KZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9u
b2hhc2gvNjQvcGdhbGxvYy5oIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC82NC9w
Z2FsbG9jLmgKaW5kZXggYjk1MzRhNzkzMjkzLi42NjhhZWU2MDE3ZTcgMTAwNjQ0Ci0tLSBhL2Fy
Y2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvNjQvcGdhbGxvYy5oCisrKyBiL2FyY2gvcG93
ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvNjQvcGdhbGxvYy5oCkBAIC0xNSw3ICsxNSw3IEBAIHN0
cnVjdCB2bWVtbWFwX2JhY2tpbmcgewogfTsKIGV4dGVybiBzdHJ1Y3Qgdm1lbW1hcF9iYWNraW5n
ICp2bWVtbWFwX2xpc3Q7CiAKLSNkZWZpbmUgcGdkX3BvcHVsYXRlKE1NLCBQR0QsIFBVRCkJcGdk
X3NldChQR0QsICh1bnNpZ25lZCBsb25nKVBVRCkKKyNkZWZpbmUgcDRkX3BvcHVsYXRlKE1NLCBQ
NEQsIFBVRCkJcDRkX3NldChQNEQsICh1bnNpZ25lZCBsb25nKVBVRCkKIAogc3RhdGljIGlubGlu
ZSBwdWRfdCAqcHVkX2FsbG9jX29uZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9u
ZyBhZGRyKQogewpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC82
NC9wZ3RhYmxlLTRrLmggYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vbm9oYXNoLzY0L3BndGFi
bGUtNGsuaAppbmRleCBjNDBlYzMyYjgxOTQuLjgxYjFjNTRlM2NmMSAxMDA2NDQKLS0tIGEvYXJj
aC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC82NC9wZ3RhYmxlLTRrLmgKKysrIGIvYXJjaC9w
b3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC82NC9wZ3RhYmxlLTRrLmgKQEAgLTIsNyArMiw3IEBA
CiAjaWZuZGVmIF9BU01fUE9XRVJQQ19OT0hBU0hfNjRfUEdUQUJMRV80S19ICiAjZGVmaW5lIF9B
U01fUE9XRVJQQ19OT0hBU0hfNjRfUEdUQUJMRV80S19ICiAKLSNpbmNsdWRlIDxhc20tZ2VuZXJp
Yy81bGV2ZWwtZml4dXAuaD4KKyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9wZ3RhYmxlLW5vcDRkLmg+
CiAKIC8qCiAgKiBFbnRyaWVzIHBlciBwYWdlIGRpcmVjdG9yeSBsZXZlbC4gIFRoZSBQVEUgbGV2
ZWwgbXVzdCB1c2UgYSA2NGIgcmVjb3JkCkBAIC00NSw0MSArNDUsNDEgQEAKICNkZWZpbmUgUE1E
X01BU0tFRF9CSVRTCQkwCiAvKiBCaXRzIHRvIG1hc2sgb3V0IGZyb20gYSBQVUQgdG8gZ2V0IHRv
IHRoZSBQTUQgcGFnZSAqLwogI2RlZmluZSBQVURfTUFTS0VEX0JJVFMJCTAKLS8qIEJpdHMgdG8g
bWFzayBvdXQgZnJvbSBhIFBHRCB0byBnZXQgdG8gdGhlIFBVRCBwYWdlICovCi0jZGVmaW5lIFBH
RF9NQVNLRURfQklUUwkJMAorLyogQml0cyB0byBtYXNrIG91dCBmcm9tIGEgUDREIHRvIGdldCB0
byB0aGUgUFVEIHBhZ2UgKi8KKyNkZWZpbmUgUDREX01BU0tFRF9CSVRTCQkwCiAKIAogLyoKICAq
IDQtbGV2ZWwgcGFnZSB0YWJsZXMgcmVsYXRlZCBiaXRzCiAgKi8KIAotI2RlZmluZSBwZ2Rfbm9u
ZShwZ2QpCQkoIXBnZF92YWwocGdkKSkKLSNkZWZpbmUgcGdkX2JhZChwZ2QpCQkocGdkX3ZhbChw
Z2QpID09IDApCi0jZGVmaW5lIHBnZF9wcmVzZW50KHBnZCkJKHBnZF92YWwocGdkKSAhPSAwKQot
I2RlZmluZSBwZ2RfcGFnZV92YWRkcihwZ2QpCShwZ2RfdmFsKHBnZCkgJiB+UEdEX01BU0tFRF9C
SVRTKQorI2RlZmluZSBwNGRfbm9uZShwNGQpCQkoIXA0ZF92YWwocDRkKSkKKyNkZWZpbmUgcDRk
X2JhZChwNGQpCQkocDRkX3ZhbChwNGQpID09IDApCisjZGVmaW5lIHA0ZF9wcmVzZW50KHA0ZCkJ
KHA0ZF92YWwocDRkKSAhPSAwKQorI2RlZmluZSBwNGRfcGFnZV92YWRkcihwNGQpCShwNGRfdmFs
KHA0ZCkgJiB+UDREX01BU0tFRF9CSVRTKQogCiAjaWZuZGVmIF9fQVNTRU1CTFlfXwogCi1zdGF0
aWMgaW5saW5lIHZvaWQgcGdkX2NsZWFyKHBnZF90ICpwZ2RwKQorc3RhdGljIGlubGluZSB2b2lk
IHA0ZF9jbGVhcihwNGRfdCAqcDRkcCkKIHsKLQkqcGdkcCA9IF9fcGdkKDApOworCSpwNGRwID0g
X19wNGQoMCk7CiB9CiAKLXN0YXRpYyBpbmxpbmUgcHRlX3QgcGdkX3B0ZShwZ2RfdCBwZ2QpCitz
dGF0aWMgaW5saW5lIHB0ZV90IHA0ZF9wdGUocDRkX3QgcDRkKQogewotCXJldHVybiBfX3B0ZShw
Z2RfdmFsKHBnZCkpOworCXJldHVybiBfX3B0ZShwNGRfdmFsKHA0ZCkpOwogfQogCi1zdGF0aWMg
aW5saW5lIHBnZF90IHB0ZV9wZ2QocHRlX3QgcHRlKQorc3RhdGljIGlubGluZSBwNGRfdCBwdGVf
cDRkKHB0ZV90IHB0ZSkKIHsKLQlyZXR1cm4gX19wZ2QocHRlX3ZhbChwdGUpKTsKKwlyZXR1cm4g
X19wNGQocHRlX3ZhbChwdGUpKTsKIH0KLWV4dGVybiBzdHJ1Y3QgcGFnZSAqcGdkX3BhZ2UocGdk
X3QgcGdkKTsKK2V4dGVybiBzdHJ1Y3QgcGFnZSAqcDRkX3BhZ2UocDRkX3QgcDRkKTsKIAogI2Vu
ZGlmIC8qICFfX0FTU0VNQkxZX18gKi8KIAotI2RlZmluZSBwdWRfb2Zmc2V0KHBnZHAsIGFkZHIp
CVwKLSAgKCgocHVkX3QgKikgcGdkX3BhZ2VfdmFkZHIoKihwZ2RwKSkpICsgXAorI2RlZmluZSBw
dWRfb2Zmc2V0KHA0ZHAsIGFkZHIpCVwKKyAgKCgocHVkX3QgKikgcDRkX3BhZ2VfdmFkZHIoKihw
NGRwKSkpICsgXAogICAgICgoKGFkZHIpID4+IFBVRF9TSElGVCkgJiAoUFRSU19QRVJfUFVEIC0g
MSkpKQogCiAjZGVmaW5lIHB1ZF9FUlJPUihlKSBcCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMv
aW5jbHVkZS9hc20vbm9oYXNoLzY0L3BndGFibGUuaCBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2Fz
bS9ub2hhc2gvNjQvcGd0YWJsZS5oCmluZGV4IDlhMzNiOGJkODQyZC4uYjM2MGYyNjJiOWM2IDEw
MDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vbm9oYXNoLzY0L3BndGFibGUuaAor
KysgYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vbm9oYXNoLzY0L3BndGFibGUuaApAQCAtMTc1
LDExICsxNzUsMTEgQEAgc3RhdGljIGlubGluZSBwdWRfdCBwdGVfcHVkKHB0ZV90IHB0ZSkKIAly
ZXR1cm4gX19wdWQocHRlX3ZhbChwdGUpKTsKIH0KICNkZWZpbmUgcHVkX3dyaXRlKHB1ZCkJCXB0
ZV93cml0ZShwdWRfcHRlKHB1ZCkpCi0jZGVmaW5lIHBnZF93cml0ZShwZ2QpCQlwdGVfd3JpdGUo
cGdkX3B0ZShwZ2QpKQorI2RlZmluZSBwNGRfd3JpdGUocGdkKQkJcHRlX3dyaXRlKHA0ZF9wdGUo
cDRkKSkKIAotc3RhdGljIGlubGluZSB2b2lkIHBnZF9zZXQocGdkX3QgKnBnZHAsIHVuc2lnbmVk
IGxvbmcgdmFsKQorc3RhdGljIGlubGluZSB2b2lkIHA0ZF9zZXQocDRkX3QgKnA0ZHAsIHVuc2ln
bmVkIGxvbmcgdmFsKQogewotCSpwZ2RwID0gX19wZ2QodmFsKTsKKwkqcDRkcCA9IF9fcDRkKHZh
bCk7CiB9CiAKIC8qCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vcGd0YWJs
ZS5oIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL3BndGFibGUuaAppbmRleCA4Y2M1NDNlZDEx
NGMuLjBhMDVmZGRkNzg4MSAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL3Bn
dGFibGUuaAorKysgYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vcGd0YWJsZS5oCkBAIC0xMzks
NiArMTM5LDE0IEBAIHN0YXRpYyBpbmxpbmUgYm9vbCBwdWRfaXNfbGVhZihwdWRfdCBwdWQpCiB9
CiAjZW5kaWYKIAorI2lmbmRlZiBwNGRfaXNfbGVhZgorI2RlZmluZSBwNGRfaXNfbGVhZiBwNGRf
aXNfbGVhZgorc3RhdGljIGlubGluZSBib29sIHA0ZF9pc19sZWFmKHA0ZF90IHA0ZCkKK3sKKwly
ZXR1cm4gZmFsc2U7Cit9CisjZW5kaWYKKwogI2lmbmRlZiBwZ2RfaXNfbGVhZgogI2RlZmluZSBw
Z2RfaXNfbGVhZiBwZ2RfaXNfbGVhZgogc3RhdGljIGlubGluZSBib29sIHBnZF9pc19sZWFmKHBn
ZF90IHBnZCkKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9rdm0vYm9vazNzXzY0X21tdV9yYWRp
eC5jIGIvYXJjaC9wb3dlcnBjL2t2bS9ib29rM3NfNjRfbW11X3JhZGl4LmMKaW5kZXggODAzOTQw
ZDc5YjczLi41YWFjZmEwYjI3ZWYgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9rdm0vYm9vazNz
XzY0X21tdV9yYWRpeC5jCisrKyBiL2FyY2gvcG93ZXJwYy9rdm0vYm9vazNzXzY0X21tdV9yYWRp
eC5jCkBAIC00OTQsMTcgKzQ5NCwzOSBAQCBzdGF0aWMgdm9pZCBrdm1wcGNfdW5tYXBfZnJlZV9w
dWQoc3RydWN0IGt2bSAqa3ZtLCBwdWRfdCAqcHVkLAogCXB1ZF9mcmVlKGt2bS0+bW0sIHB1ZCk7
CiB9CiAKK3N0YXRpYyB2b2lkIGt2bXBwY191bm1hcF9mcmVlX3A0ZChzdHJ1Y3Qga3ZtICprdm0s
IHA0ZF90ICpwNGQsCisJCQkJICB1bnNpZ25lZCBpbnQgbHBpZCkKK3sKKwl1bnNpZ25lZCBsb25n
IGl1OworCXA0ZF90ICpwID0gcDRkOworCisJZm9yIChpdSA9IDA7IGl1IDwgUFRSU19QRVJfUDRE
OyArK2l1LCArK3ApIHsKKwkJaWYgKCFwNGRfcHJlc2VudCgqcCkpCisJCQljb250aW51ZTsKKwkJ
aWYgKHA0ZF9pc19sZWFmKCpwKSkgeworCQkJcDRkX2NsZWFyKHApOworCQl9IGVsc2UgeworCQkJ
cHVkX3QgKnB1ZDsKKworCQkJcHVkID0gcHVkX29mZnNldChwLCAwKTsKKwkJCWt2bXBwY191bm1h
cF9mcmVlX3B1ZChrdm0sIHB1ZCwgbHBpZCk7CisJCQlwNGRfY2xlYXIocCk7CisJCX0KKwl9CisJ
cDRkX2ZyZWUoa3ZtLT5tbSwgcDRkKTsKK30KKwogdm9pZCBrdm1wcGNfZnJlZV9wZ3RhYmxlX3Jh
ZGl4KHN0cnVjdCBrdm0gKmt2bSwgcGdkX3QgKnBnZCwgdW5zaWduZWQgaW50IGxwaWQpCiB7CiAJ
dW5zaWduZWQgbG9uZyBpZzsKIAogCWZvciAoaWcgPSAwOyBpZyA8IFBUUlNfUEVSX1BHRDsgKytp
ZywgKytwZ2QpIHsKLQkJcHVkX3QgKnB1ZDsKKwkJcDRkX3QgKnA0ZDsKIAogCQlpZiAoIXBnZF9w
cmVzZW50KCpwZ2QpKQogCQkJY29udGludWU7Ci0JCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCAwKTsK
LQkJa3ZtcHBjX3VubWFwX2ZyZWVfcHVkKGt2bSwgcHVkLCBscGlkKTsKKwkJcDRkID0gcDRkX29m
ZnNldChwZ2QsIDApOworCQlrdm1wcGNfdW5tYXBfZnJlZV9wNGQoa3ZtLCBwNGQsIGxwaWQpOwog
CQlwZ2RfY2xlYXIocGdkKTsKIAl9CiB9CkBAIC01NjYsNiArNTg4LDcgQEAgaW50IGt2bXBwY19j
cmVhdGVfcHRlKHN0cnVjdCBrdm0gKmt2bSwgcGdkX3QgKnBndGFibGUsIHB0ZV90IHB0ZSwKIAkJ
ICAgICAgdW5zaWduZWQgbG9uZyAqcm1hcHAsIHN0cnVjdCBybWFwX25lc3RlZCAqKm5fcm1hcCkK
IHsKIAlwZ2RfdCAqcGdkOworCXA0ZF90ICpwNGQsICpuZXdfcDRkID0gTlVMTDsKIAlwdWRfdCAq
cHVkLCAqbmV3X3B1ZCA9IE5VTEw7CiAJcG1kX3QgKnBtZCwgKm5ld19wbWQgPSBOVUxMOwogCXB0
ZV90ICpwdGVwLCAqbmV3X3B0ZXAgPSBOVUxMOwpAQCAtNTczLDkgKzU5NiwxNSBAQCBpbnQga3Zt
cHBjX2NyZWF0ZV9wdGUoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGd0YWJsZSwgcHRlX3QgcHRl
LAogCiAJLyogVHJhdmVyc2UgdGhlIGd1ZXN0J3MgMm5kLWxldmVsIHRyZWUsIGFsbG9jYXRlIG5l
dyBsZXZlbHMgbmVlZGVkICovCiAJcGdkID0gcGd0YWJsZSArIHBnZF9pbmRleChncGEpOwotCXB1
ZCA9IE5VTEw7CisJcDRkID0gTlVMTDsKIAlpZiAocGdkX3ByZXNlbnQoKnBnZCkpCi0JCXB1ZCA9
IHB1ZF9vZmZzZXQocGdkLCBncGEpOworCQlwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgZ3BhKTsKKwll
bHNlCisJCW5ld19wNGQgPSBwNGRfYWxsb2Nfb25lKGt2bS0+bW0sIGdwYSk7CisKKwlwdWQgPSBO
VUxMOworCWlmIChwNGRfcHJlc2VudCgqcDRkKSkKKwkJcHVkID0gcHVkX29mZnNldChwNGQsIGdw
YSk7CiAJZWxzZQogCQluZXdfcHVkID0gcHVkX2FsbG9jX29uZShrdm0tPm1tLCBncGEpOwogCkBA
IC01OTcsMTIgKzYyNiwxOCBAQCBpbnQga3ZtcHBjX2NyZWF0ZV9wdGUoc3RydWN0IGt2bSAqa3Zt
LCBwZ2RfdCAqcGd0YWJsZSwgcHRlX3QgcHRlLAogCS8qIE5vdyB0cmF2ZXJzZSBhZ2FpbiB1bmRl
ciB0aGUgbG9jayBhbmQgY2hhbmdlIHRoZSB0cmVlICovCiAJcmV0ID0gLUVOT01FTTsKIAlpZiAo
cGdkX25vbmUoKnBnZCkpIHsKKwkJaWYgKCFuZXdfcDRkKQorCQkJZ290byBvdXRfdW5sb2NrOwor
CQlwZ2RfcG9wdWxhdGUoa3ZtLT5tbSwgcGdkLCBuZXdfcDRkKTsKKwkJbmV3X3A0ZCA9IE5VTEw7
CisJfQorCWlmIChwNGRfbm9uZSgqcDRkKSkgewogCQlpZiAoIW5ld19wdWQpCiAJCQlnb3RvIG91
dF91bmxvY2s7Ci0JCXBnZF9wb3B1bGF0ZShrdm0tPm1tLCBwZ2QsIG5ld19wdWQpOworCQlwNGRf
cG9wdWxhdGUoa3ZtLT5tbSwgcDRkLCBuZXdfcHVkKTsKIAkJbmV3X3B1ZCA9IE5VTEw7CiAJfQot
CXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBncGEpOworCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBncGEp
OwogCWlmIChwdWRfaXNfbGVhZigqcHVkKSkgewogCQl1bnNpZ25lZCBsb25nIGhncGEgPSBncGEg
JiBQVURfTUFTSzsKIApAQCAtMTIyMCw2ICsxMjU1LDcgQEAgc3RhdGljIHNzaXplX3QgZGVidWdm
c19yYWRpeF9yZWFkKHN0cnVjdCBmaWxlICpmaWxlLCBjaGFyIF9fdXNlciAqYnVmLAogCXBnZF90
ICpwZ3Q7CiAJc3RydWN0IGt2bV9uZXN0ZWRfZ3Vlc3QgKm5lc3RlZDsKIAlwZ2RfdCBwZ2QsICpw
Z2RwOworCXA0ZF90IHA0ZCwgKnA0ZHA7CiAJcHVkX3QgcHVkLCAqcHVkcDsKIAlwbWRfdCBwbWQs
ICpwbWRwOwogCXB0ZV90ICpwdGVwOwpAQCAtMTI5OCw3ICsxMzM0LDE0IEBAIHN0YXRpYyBzc2l6
ZV90IGRlYnVnZnNfcmFkaXhfcmVhZChzdHJ1Y3QgZmlsZSAqZmlsZSwgY2hhciBfX3VzZXIgKmJ1
ZiwKIAkJCWNvbnRpbnVlOwogCQl9CiAKLQkJcHVkcCA9IHB1ZF9vZmZzZXQoJnBnZCwgZ3BhKTsK
KwkJcDRkcCA9IHA0ZF9vZmZzZXQoJnBnZCwgZ3BhKTsKKwkJcDRkID0gUkVBRF9PTkNFKCpwNGRw
KTsKKwkJaWYgKCEocDRkX3ZhbChwNGQpICYgX1BBR0VfUFJFU0VOVCkpIHsKKwkJCWdwYSA9IChn
cGEgJiBQNERfTUFTSykgKyBQNERfU0laRTsKKwkJCWNvbnRpbnVlOworCQl9CisKKwkJcHVkcCA9
IHB1ZF9vZmZzZXQoJnA0ZCwgZ3BhKTsKIAkJcHVkID0gUkVBRF9PTkNFKCpwdWRwKTsKIAkJaWYg
KCEocHVkX3ZhbChwdWQpICYgX1BBR0VfUFJFU0VOVCkpIHsKIAkJCWdwYSA9IChncGEgJiBQVURf
TUFTSykgKyBQVURfU0laRTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9saWIvY29kZS1wYXRj
aGluZy5jIGIvYXJjaC9wb3dlcnBjL2xpYi9jb2RlLXBhdGNoaW5nLmMKaW5kZXggMzM0NWYwMzlh
ODc2Li43YTU5ZjY4NjNjZWMgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9saWIvY29kZS1wYXRj
aGluZy5jCisrKyBiL2FyY2gvcG93ZXJwYy9saWIvY29kZS1wYXRjaGluZy5jCkBAIC0xMDcsMTMg
KzEwNywxOCBAQCBzdGF0aWMgaW5saW5lIGludCB1bm1hcF9wYXRjaF9hcmVhKHVuc2lnbmVkIGxv
bmcgYWRkcikKIAlwdGVfdCAqcHRlcDsKIAlwbWRfdCAqcG1kcDsKIAlwdWRfdCAqcHVkcDsKKwlw
NGRfdCAqcDRkcDsKIAlwZ2RfdCAqcGdkcDsKIAogCXBnZHAgPSBwZ2Rfb2Zmc2V0X2soYWRkcik7
CiAJaWYgKHVubGlrZWx5KCFwZ2RwKSkKIAkJcmV0dXJuIC1FSU5WQUw7CiAKLQlwdWRwID0gcHVk
X29mZnNldChwZ2RwLCBhZGRyKTsKKwlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlp
ZiAodW5saWtlbHkoIXA0ZHApKQorCQlyZXR1cm4gLUVJTlZBTDsKKworCXB1ZHAgPSBwdWRfb2Zm
c2V0KHA0ZHAsIGFkZHIpOwogCWlmICh1bmxpa2VseSghcHVkcCkpCiAJCXJldHVybiAtRUlOVkFM
OwogCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzMzIvbW11LmMgYi9hcmNoL3Bv
d2VycGMvbW0vYm9vazNzMzIvbW11LmMKaW5kZXggMGExYzY1YTJjNTY1Li5iMmZjM2U3MTE2NWMg
MTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3MzMi9tbXUuYworKysgYi9hcmNoL3Bv
d2VycGMvbW0vYm9vazNzMzIvbW11LmMKQEAgLTMxMiw3ICszMTIsNyBAQCB2b2lkIGhhc2hfcHJl
bG9hZChzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBlYSkKIAogCWlmICghSGFz
aCkKIAkJcmV0dXJuOwotCXBtZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwZ2Rfb2Zmc2V0KG1t
LCBlYSksIGVhKSwgZWEpOworCXBtZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwNGRfb2Zmc2V0
KHBnZF9vZmZzZXQobW0sIGVhKSwgZWEpLCBlYSksIGVhKTsKIAlpZiAoIXBtZF9ub25lKCpwbWQp
KQogCQlhZGRfaGFzaF9wYWdlKG1tLT5jb250ZXh0LmlkLCBlYSwgcG1kX3ZhbCgqcG1kKSk7CiB9
CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzMzIvdGxiLmMgYi9hcmNoL3Bvd2Vy
cGMvbW0vYm9vazNzMzIvdGxiLmMKaW5kZXggMmZjZDMyMTA0MGZmLi4xNzViYzMzYjQxYjcgMTAw
NjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3MzMi90bGIuYworKysgYi9hcmNoL3Bvd2Vy
cGMvbW0vYm9vazNzMzIvdGxiLmMKQEAgLTg3LDcgKzg3LDcgQEAgc3RhdGljIHZvaWQgZmx1c2hf
cmFuZ2Uoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgc3RhcnQsCiAJaWYgKHN0
YXJ0ID49IGVuZCkKIAkJcmV0dXJuOwogCWVuZCA9IChlbmQgLSAxKSB8IH5QQUdFX01BU0s7Ci0J
cG1kID0gcG1kX29mZnNldChwdWRfb2Zmc2V0KHBnZF9vZmZzZXQobW0sIHN0YXJ0KSwgc3RhcnQp
LCBzdGFydCk7CisJcG1kID0gcG1kX29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29m
ZnNldChtbSwgc3RhcnQpLCBzdGFydCksIHN0YXJ0KSwgc3RhcnQpOwogCWZvciAoOzspIHsKIAkJ
cG1kX2VuZCA9ICgoc3RhcnQgKyBQR0RJUl9TSVpFKSAmIFBHRElSX01BU0spIC0gMTsKIAkJaWYg
KHBtZF9lbmQgPiBlbmQpCkBAIC0xNDUsNyArMTQ1LDcgQEAgdm9pZCBmbHVzaF90bGJfcGFnZShz
dHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyB2bWFkZHIpCiAJCXJldHVy
bjsKIAl9CiAJbW0gPSAodm1hZGRyIDwgVEFTS19TSVpFKT8gdm1hLT52bV9tbTogJmluaXRfbW07
Ci0JcG1kID0gcG1kX29mZnNldChwdWRfb2Zmc2V0KHBnZF9vZmZzZXQobW0sIHZtYWRkciksIHZt
YWRkciksIHZtYWRkcik7CisJcG1kID0gcG1kX29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQo
cGdkX29mZnNldChtbSwgdm1hZGRyKSwgdm1hZGRyKSwgdm1hZGRyKSwgdm1hZGRyKTsKIAlpZiAo
IXBtZF9ub25lKCpwbWQpKQogCQlmbHVzaF9oYXNoX3BhZ2VzKG1tLT5jb250ZXh0LmlkLCB2bWFk
ZHIsIHBtZF92YWwoKnBtZCksIDEpOwogfQpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL2Jv
b2szczY0L2hhc2hfcGd0YWJsZS5jIGIvYXJjaC9wb3dlcnBjL21tL2Jvb2szczY0L2hhc2hfcGd0
YWJsZS5jCmluZGV4IDY0NzMzYjljYjIwYS4uOWNkMTU5MzdlODhhIDEwMDY0NAotLS0gYS9hcmNo
L3Bvd2VycGMvbW0vYm9vazNzNjQvaGFzaF9wZ3RhYmxlLmMKKysrIGIvYXJjaC9wb3dlcnBjL21t
L2Jvb2szczY0L2hhc2hfcGd0YWJsZS5jCkBAIC0xNDgsNiArMTQ4LDcgQEAgdm9pZCBoYXNoX192
bWVtbWFwX3JlbW92ZV9tYXBwaW5nKHVuc2lnbmVkIGxvbmcgc3RhcnQsCiBpbnQgaGFzaF9fbWFw
X2tlcm5lbF9wYWdlKHVuc2lnbmVkIGxvbmcgZWEsIHVuc2lnbmVkIGxvbmcgcGEsIHBncHJvdF90
IHByb3QpCiB7CiAJcGdkX3QgKnBnZHA7CisJcDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1ZHA7CiAJ
cG1kX3QgKnBtZHA7CiAJcHRlX3QgKnB0ZXA7CkBAIC0xNTUsNyArMTU2LDggQEAgaW50IGhhc2hf
X21hcF9rZXJuZWxfcGFnZSh1bnNpZ25lZCBsb25nIGVhLCB1bnNpZ25lZCBsb25nIHBhLCBwZ3By
b3RfdCBwcm90KQogCUJVSUxEX0JVR19PTihUQVNLX1NJWkVfVVNFUjY0ID4gSF9QR1RBQkxFX1JB
TkdFKTsKIAlpZiAoc2xhYl9pc19hdmFpbGFibGUoKSkgewogCQlwZ2RwID0gcGdkX29mZnNldF9r
KGVhKTsKLQkJcHVkcCA9IHB1ZF9hbGxvYygmaW5pdF9tbSwgcGdkcCwgZWEpOworCQlwNGRwID0g
cDRkX29mZnNldChwZ2RwLCBlYSk7CisJCXB1ZHAgPSBwdWRfYWxsb2MoJmluaXRfbW0sIHA0ZHAs
IGVhKTsKIAkJaWYgKCFwdWRwKQogCQkJcmV0dXJuIC1FTk9NRU07CiAJCXBtZHAgPSBwbWRfYWxs
b2MoJmluaXRfbW0sIHB1ZHAsIGVhKTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9ib29r
M3M2NC9yYWRpeF9wZ3RhYmxlLmMgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhfcGd0
YWJsZS5jCmluZGV4IGRkMWJlYTQ1MzI1Yy4uMTE3NjI1NTZmZTRkIDEwMDY0NAotLS0gYS9hcmNo
L3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhfcGd0YWJsZS5jCisrKyBiL2FyY2gvcG93ZXJwYy9t
bS9ib29rM3M2NC9yYWRpeF9wZ3RhYmxlLmMKQEAgLTY0LDE3ICs2NCwyNCBAQCBzdGF0aWMgaW50
IGVhcmx5X21hcF9rZXJuZWxfcGFnZSh1bnNpZ25lZCBsb25nIGVhLCB1bnNpZ25lZCBsb25nIHBh
LAogewogCXVuc2lnbmVkIGxvbmcgcGZuID0gcGEgPj4gUEFHRV9TSElGVDsKIAlwZ2RfdCAqcGdk
cDsKKwlwNGRfdCAqcDRkcDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAlwdGVfdCAq
cHRlcDsKIAogCXBnZHAgPSBwZ2Rfb2Zmc2V0X2soZWEpOwogCWlmIChwZ2Rfbm9uZSgqcGdkcCkp
IHsKKwkJcDRkcCA9IGVhcmx5X2FsbG9jX3BndGFibGUoUEdEX1RBQkxFX1NJWkUsIG5pZCwKKwkJ
CQkJCXJlZ2lvbl9zdGFydCwgcmVnaW9uX2VuZCk7CisJCXBnZF9wb3B1bGF0ZSgmaW5pdF9tbSwg
cGdkcCwgcDRkcCk7CisJfQorCXA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGVhKTsKKwlpZiAocDRk
X25vbmUoKnA0ZHApKSB7CiAJCXB1ZHAgPSBlYXJseV9hbGxvY19wZ3RhYmxlKFBVRF9UQUJMRV9T
SVpFLCBuaWQsCiAJCQkJCQlyZWdpb25fc3RhcnQsIHJlZ2lvbl9lbmQpOwotCQlwZ2RfcG9wdWxh
dGUoJmluaXRfbW0sIHBnZHAsIHB1ZHApOworCQlwNGRfcG9wdWxhdGUoJmluaXRfbW0sIHA0ZHAs
IHB1ZHApOwogCX0KLQlwdWRwID0gcHVkX29mZnNldChwZ2RwLCBlYSk7CisJcHVkcCA9IHB1ZF9v
ZmZzZXQocDRkcCwgZWEpOwogCWlmIChtYXBfcGFnZV9zaXplID09IFBVRF9TSVpFKSB7CiAJCXB0
ZXAgPSAocHRlX3QgKilwdWRwOwogCQlnb3RvIHNldF90aGVfcHRlOwpAQCAtMTE0LDYgKzEyMSw3
IEBAIHN0YXRpYyBpbnQgX19tYXBfa2VybmVsX3BhZ2UodW5zaWduZWQgbG9uZyBlYSwgdW5zaWdu
ZWQgbG9uZyBwYSwKIHsKIAl1bnNpZ25lZCBsb25nIHBmbiA9IHBhID4+IFBBR0VfU0hJRlQ7CiAJ
cGdkX3QgKnBnZHA7CisJcDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7
CiAJcHRlX3QgKnB0ZXA7CkBAIC0xMzYsNyArMTQ0LDggQEAgc3RhdGljIGludCBfX21hcF9rZXJu
ZWxfcGFnZSh1bnNpZ25lZCBsb25nIGVhLCB1bnNpZ25lZCBsb25nIHBhLAogCSAqIGJvb3QuCiAJ
ICovCiAJcGdkcCA9IHBnZF9vZmZzZXRfayhlYSk7Ci0JcHVkcCA9IHB1ZF9hbGxvYygmaW5pdF9t
bSwgcGdkcCwgZWEpOworCXA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGVhKTsKKwlwdWRwID0gcHVk
X2FsbG9jKCZpbml0X21tLCBwNGRwLCBlYSk7CiAJaWYgKCFwdWRwKQogCQlyZXR1cm4gLUVOT01F
TTsKIAlpZiAobWFwX3BhZ2Vfc2l6ZSA9PSBQVURfU0laRSkgewpAQCAtMTczLDYgKzE4Miw3IEBA
IHZvaWQgcmFkaXhfX2NoYW5nZV9tZW1vcnlfcmFuZ2UodW5zaWduZWQgbG9uZyBzdGFydCwgdW5z
aWduZWQgbG9uZyBlbmQsCiB7CiAJdW5zaWduZWQgbG9uZyBpZHg7CiAJcGdkX3QgKnBnZHA7CisJ
cDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7CiAJcHRlX3QgKnB0ZXA7
CkBAIC0xODUsNyArMTk1LDggQEAgdm9pZCByYWRpeF9fY2hhbmdlX21lbW9yeV9yYW5nZSh1bnNp
Z25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCwKIAogCWZvciAoaWR4ID0gc3RhcnQ7
IGlkeCA8IGVuZDsgaWR4ICs9IFBBR0VfU0laRSkgewogCQlwZ2RwID0gcGdkX29mZnNldF9rKGlk
eCk7Ci0JCXB1ZHAgPSBwdWRfYWxsb2MoJmluaXRfbW0sIHBnZHAsIGlkeCk7CisJCXA0ZHAgPSBw
NGRfb2Zmc2V0KHBnZHAsIGlkeCk7CisJCXB1ZHAgPSBwdWRfYWxsb2MoJmluaXRfbW0sIHA0ZHAs
IGlkeCk7CiAJCWlmICghcHVkcCkKIAkJCWNvbnRpbnVlOwogCQlpZiAocHVkX2lzX2xlYWYoKnB1
ZHApKSB7CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvc3VicGFnZV9wcm90
LmMgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvc3VicGFnZV9wcm90LmMKaW5kZXggMmVmMjRh
NTNmNGM5Li4yN2RhZWVkMWExNDEgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2
NC9zdWJwYWdlX3Byb3QuYworKysgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvc3VicGFnZV9w
cm90LmMKQEAgLTU0LDYgKzU0LDcgQEAgc3RhdGljIHZvaWQgaHB0ZV9mbHVzaF9yYW5nZShzdHJ1
Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyLAogCQkJICAgICBpbnQgbnBhZ2Vz
KQogewogCXBnZF90ICpwZ2Q7CisJcDRkX3QgKnA0ZDsKIAlwdWRfdCAqcHVkOwogCXBtZF90ICpw
bWQ7CiAJcHRlX3QgKnB0ZTsKQEAgLTYyLDcgKzYzLDEwIEBAIHN0YXRpYyB2b2lkIGhwdGVfZmx1
c2hfcmFuZ2Uoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkciwKIAlwZ2Qg
PSBwZ2Rfb2Zmc2V0KG1tLCBhZGRyKTsKIAlpZiAocGdkX25vbmUoKnBnZCkpCiAJCXJldHVybjsK
LQlwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgYWRkcik7CisJcDRkID0gcDRkX29mZnNldChwZ2QsIGFk
ZHIpOworCWlmIChwNGRfbm9uZSgqcDRkKSkKKwkJcmV0dXJuOworCXB1ZCA9IHB1ZF9vZmZzZXQo
cDRkLCBhZGRyKTsKIAlpZiAocHVkX25vbmUoKnB1ZCkpCiAJCXJldHVybjsKIAlwbWQgPSBwbWRf
b2Zmc2V0KHB1ZCwgYWRkcik7CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vaHVnZXRsYnBh
Z2UuYyBiL2FyY2gvcG93ZXJwYy9tbS9odWdldGxicGFnZS5jCmluZGV4IDczZDQ4NzNmYzdmOC4u
NDNkNDYzZjIwZmMzIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vaHVnZXRsYnBhZ2UuYwor
KysgYi9hcmNoL3Bvd2VycGMvbW0vaHVnZXRsYnBhZ2UuYwpAQCAtMTEyLDYgKzExMiw3IEBAIHN0
YXRpYyBpbnQgX19odWdlcHRlX2FsbG9jKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBodWdlcGRfdCAq
aHBkcCwKIHB0ZV90ICpodWdlX3B0ZV9hbGxvYyhzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWdu
ZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIHN6KQogewogCXBnZF90ICpwZzsKKwlwNGRfdCAq
cDQ7CiAJcHVkX3QgKnB1OwogCXBtZF90ICpwbTsKIAlodWdlcGRfdCAqaHBkcCA9IE5VTEw7CkBA
IC0xMjEsMjAgKzEyMiwyMSBAQCBwdGVfdCAqaHVnZV9wdGVfYWxsb2Moc3RydWN0IG1tX3N0cnVj
dCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBzegogCiAJYWRkciAmPSB+
KHN6LTEpOwogCXBnID0gcGdkX29mZnNldChtbSwgYWRkcik7CisJcDQgPSBwNGRfb2Zmc2V0KHBn
LCBhZGRyKTsKIAogI2lmZGVmIENPTkZJR19QUENfQk9PSzNTXzY0CiAJaWYgKHBzaGlmdCA9PSBQ
R0RJUl9TSElGVCkKIAkJLyogMTZHQiBodWdlIHBhZ2UgKi8KLQkJcmV0dXJuIChwdGVfdCAqKSBw
ZzsKKwkJcmV0dXJuIChwdGVfdCAqKSBwNDsKIAllbHNlIGlmIChwc2hpZnQgPiBQVURfU0hJRlQp
IHsKIAkJLyoKIAkJICogV2UgbmVlZCB0byB1c2UgaHVnZXBkIHRhYmxlCiAJCSAqLwogCQlwdGwg
PSAmbW0tPnBhZ2VfdGFibGVfbG9jazsKLQkJaHBkcCA9IChodWdlcGRfdCAqKXBnOworCQlocGRw
ID0gKGh1Z2VwZF90ICopcDQ7CiAJfSBlbHNlIHsKIAkJcGRzaGlmdCA9IFBVRF9TSElGVDsKLQkJ
cHUgPSBwdWRfYWxsb2MobW0sIHBnLCBhZGRyKTsKKwkJcHUgPSBwdWRfYWxsb2MobW0sIHA0LCBh
ZGRyKTsKIAkJaWYgKCFwdSkKIAkJCXJldHVybiBOVUxMOwogCQlpZiAocHNoaWZ0ID09IFBVRF9T
SElGVCkKQEAgLTE1OSwxMCArMTYxLDEwIEBAIHB0ZV90ICpodWdlX3B0ZV9hbGxvYyhzdHJ1Y3Qg
bW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIHN6CiAjZWxz
ZQogCWlmIChwc2hpZnQgPj0gUEdESVJfU0hJRlQpIHsKIAkJcHRsID0gJm1tLT5wYWdlX3RhYmxl
X2xvY2s7Ci0JCWhwZHAgPSAoaHVnZXBkX3QgKilwZzsKKwkJaHBkcCA9IChodWdlcGRfdCAqKXA0
OwogCX0gZWxzZSB7CiAJCXBkc2hpZnQgPSBQVURfU0hJRlQ7Ci0JCXB1ID0gcHVkX2FsbG9jKG1t
LCBwZywgYWRkcik7CisJCXB1ID0gcHVkX2FsbG9jKG1tLCBwNCwgYWRkcik7CiAJCWlmICghcHUp
CiAJCQlyZXR1cm4gTlVMTDsKIAkJaWYgKHBzaGlmdCA+PSBQVURfU0hJRlQpIHsKQEAgLTM4NCw3
ICszODYsNyBAQCBzdGF0aWMgdm9pZCBodWdldGxiX2ZyZWVfcG1kX3JhbmdlKHN0cnVjdCBtbXVf
Z2F0aGVyICp0bGIsIHB1ZF90ICpwdWQsCiAJbW1fZGVjX25yX3BtZHModGxiLT5tbSk7CiB9CiAK
LXN0YXRpYyB2b2lkIGh1Z2V0bGJfZnJlZV9wdWRfcmFuZ2Uoc3RydWN0IG1tdV9nYXRoZXIgKnRs
YiwgcGdkX3QgKnBnZCwKK3N0YXRpYyB2b2lkIGh1Z2V0bGJfZnJlZV9wdWRfcmFuZ2Uoc3RydWN0
IG1tdV9nYXRoZXIgKnRsYiwgcDRkX3QgKnA0ZCwKIAkJCQkgICB1bnNpZ25lZCBsb25nIGFkZHIs
IHVuc2lnbmVkIGxvbmcgZW5kLAogCQkJCSAgIHVuc2lnbmVkIGxvbmcgZmxvb3IsIHVuc2lnbmVk
IGxvbmcgY2VpbGluZykKIHsKQEAgLTM5NCw3ICszOTYsNyBAQCBzdGF0aWMgdm9pZCBodWdldGxi
X2ZyZWVfcHVkX3JhbmdlKHN0cnVjdCBtbXVfZ2F0aGVyICp0bGIsIHBnZF90ICpwZ2QsCiAKIAlz
dGFydCA9IGFkZHI7CiAJZG8gewotCQlwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgYWRkcik7CisJCXB1
ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyKTsKIAkJbmV4dCA9IHB1ZF9hZGRyX2VuZChhZGRyLCBl
bmQpOwogCQlpZiAoIWlzX2h1Z2VwZChfX2h1Z2VwZChwdWRfdmFsKCpwdWQpKSkpIHsKIAkJCWlm
IChwdWRfbm9uZV9vcl9jbGVhcl9iYWQocHVkKSkKQEAgLTQyOSw4ICs0MzEsOCBAQCBzdGF0aWMg
dm9pZCBodWdldGxiX2ZyZWVfcHVkX3JhbmdlKHN0cnVjdCBtbXVfZ2F0aGVyICp0bGIsIHBnZF90
ICpwZ2QsCiAJaWYgKGVuZCAtIDEgPiBjZWlsaW5nIC0gMSkKIAkJcmV0dXJuOwogCi0JcHVkID0g
cHVkX29mZnNldChwZ2QsIHN0YXJ0KTsKLQlwZ2RfY2xlYXIocGdkKTsKKwlwdWQgPSBwdWRfb2Zm
c2V0KHA0ZCwgc3RhcnQpOworCXA0ZF9jbGVhcihwNGQpOwogCXB1ZF9mcmVlX3RsYih0bGIsIHB1
ZCwgc3RhcnQpOwogCW1tX2RlY19ucl9wdWRzKHRsYi0+bW0pOwogfQpAQCAtNDQzLDYgKzQ0NSw3
IEBAIHZvaWQgaHVnZXRsYl9mcmVlX3BnZF9yYW5nZShzdHJ1Y3QgbW11X2dhdGhlciAqdGxiLAog
CQkJICAgIHVuc2lnbmVkIGxvbmcgZmxvb3IsIHVuc2lnbmVkIGxvbmcgY2VpbGluZykKIHsKIAlw
Z2RfdCAqcGdkOworCXA0ZF90ICpwNGQ7CiAJdW5zaWduZWQgbG9uZyBuZXh0OwogCiAJLyoKQEAg
LTQ2NSwxMCArNDY4LDExIEBAIHZvaWQgaHVnZXRsYl9mcmVlX3BnZF9yYW5nZShzdHJ1Y3QgbW11
X2dhdGhlciAqdGxiLAogCWRvIHsKIAkJbmV4dCA9IHBnZF9hZGRyX2VuZChhZGRyLCBlbmQpOwog
CQlwZ2QgPSBwZ2Rfb2Zmc2V0KHRsYi0+bW0sIGFkZHIpOworCQlwNGQgPSBwNGRfb2Zmc2V0KHBn
ZCwgYWRkcik7CiAJCWlmICghaXNfaHVnZXBkKF9faHVnZXBkKHBnZF92YWwoKnBnZCkpKSkgewot
CQkJaWYgKHBnZF9ub25lX29yX2NsZWFyX2JhZChwZ2QpKQorCQkJaWYgKHA0ZF9ub25lX29yX2Ns
ZWFyX2JhZChwNGQpKQogCQkJCWNvbnRpbnVlOwotCQkJaHVnZXRsYl9mcmVlX3B1ZF9yYW5nZSh0
bGIsIHBnZCwgYWRkciwgbmV4dCwgZmxvb3IsIGNlaWxpbmcpOworCQkJaHVnZXRsYl9mcmVlX3B1
ZF9yYW5nZSh0bGIsIHA0ZCwgYWRkciwgbmV4dCwgZmxvb3IsIGNlaWxpbmcpOwogCQl9IGVsc2Ug
ewogCQkJdW5zaWduZWQgbG9uZyBtb3JlOwogCQkJLyoKQEAgLTQ4MSw3ICs0ODUsNyBAQCB2b2lk
IGh1Z2V0bGJfZnJlZV9wZ2RfcmFuZ2Uoc3RydWN0IG1tdV9nYXRoZXIgKnRsYiwKIAkJCWlmICht
b3JlID4gbmV4dCkKIAkJCQluZXh0ID0gbW9yZTsKIAotCQkJZnJlZV9odWdlcGRfcmFuZ2UodGxi
LCAoaHVnZXBkX3QgKilwZ2QsIFBHRElSX1NISUZULAorCQkJZnJlZV9odWdlcGRfcmFuZ2UodGxi
LCAoaHVnZXBkX3QgKilwNGQsIFBHRElSX1NISUZULAogCQkJCQkgIGFkZHIsIG5leHQsIGZsb29y
LCBjZWlsaW5nKTsKIAkJfQogCX0gd2hpbGUgKGFkZHIgPSBuZXh0LCBhZGRyICE9IGVuZCk7CmRp
ZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5jIGIvYXJjaC9w
b3dlcnBjL21tL2thc2FuL2thc2FuX2luaXRfMzIuYwppbmRleCAxNmRkOTViZDA3NDkuLmVlZDNm
MWFlM2I5MCAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL21tL2thc2FuL2thc2FuX2luaXRfMzIu
YworKysgYi9hcmNoL3Bvd2VycGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5jCkBAIC0zNiw3ICsz
Niw3IEBAIHN0YXRpYyBpbnQgX19pbml0IGthc2FuX2luaXRfc2hhZG93X3BhZ2VfdGFibGVzKHVu
c2lnbmVkIGxvbmcga19zdGFydCwgdW5zaWduZWQKIAl1bnNpZ25lZCBsb25nIGtfY3VyLCBrX25l
eHQ7CiAJcHRlX3QgKm5ldyA9IE5VTEw7CiAKLQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQo
cGdkX29mZnNldF9rKGtfc3RhcnQpLCBrX3N0YXJ0KSwga19zdGFydCk7CisJcG1kID0gcG1kX29m
ZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKGtfc3RhcnQpLCBrX3N0YXJ0
KSwga19zdGFydCksIGtfc3RhcnQpOwogCiAJZm9yIChrX2N1ciA9IGtfc3RhcnQ7IGtfY3VyICE9
IGtfZW5kOyBrX2N1ciA9IGtfbmV4dCwgcG1kKyspIHsKIAkJa19uZXh0ID0gcGdkX2FkZHJfZW5k
KGtfY3VyLCBrX2VuZCk7CkBAIC03OCw3ICs3OCw3IEBAIHN0YXRpYyBpbnQgX19pbml0IGthc2Fu
X2luaXRfcmVnaW9uKHZvaWQgKnN0YXJ0LCBzaXplX3Qgc2l6ZSkKIAlibG9jayA9IG1lbWJsb2Nr
X2FsbG9jKGtfZW5kIC0ga19zdGFydCwgUEFHRV9TSVpFKTsKIAogCWZvciAoa19jdXIgPSBrX3N0
YXJ0ICYgUEFHRV9NQVNLOyBrX2N1ciA8IGtfZW5kOyBrX2N1ciArPSBQQUdFX1NJWkUpIHsKLQkJ
cG1kX3QgKnBtZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwZ2Rfb2Zmc2V0X2soa19jdXIpLCBr
X2N1ciksIGtfY3VyKTsKKwkJcG1kX3QgKnBtZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwNGRf
b2Zmc2V0KHBnZF9vZmZzZXRfayhrX2N1ciksIGtfY3VyKSwga19jdXIpLCBrX2N1cik7CiAJCXZv
aWQgKnZhID0gYmxvY2sgKyBrX2N1ciAtIGtfc3RhcnQ7CiAJCXB0ZV90IHB0ZSA9IHBmbl9wdGUo
UEhZU19QRk4oX19wYSh2YSkpLCBQQUdFX0tFUk5FTCk7CiAKQEAgLTEwMiw3ICsxMDIsNyBAQCBz
dGF0aWMgdm9pZCBfX2luaXQga2FzYW5fcmVtYXBfZWFybHlfc2hhZG93X3JvKHZvaWQpCiAJa2Fz
YW5fcG9wdWxhdGVfcHRlKGthc2FuX2Vhcmx5X3NoYWRvd19wdGUsIHByb3QpOwogCiAJZm9yIChr
X2N1ciA9IGtfc3RhcnQgJiBQQUdFX01BU0s7IGtfY3VyIDwga19lbmQ7IGtfY3VyICs9IFBBR0Vf
U0laRSkgewotCQlwbWRfdCAqcG1kID0gcG1kX29mZnNldChwdWRfb2Zmc2V0KHBnZF9vZmZzZXRf
ayhrX2N1ciksIGtfY3VyKSwga19jdXIpOworCQlwbWRfdCAqcG1kID0gcG1kX29mZnNldChwdWRf
b2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKGtfY3VyKSwga19jdXIpLCBrX2N1ciksIGtf
Y3VyKTsKIAkJcHRlX3QgKnB0ZXAgPSBwdGVfb2Zmc2V0X2tlcm5lbChwbWQsIGtfY3VyKTsKIAog
CQlpZiAoKHB0ZV92YWwoKnB0ZXApICYgUFRFX1JQTl9NQVNLKSAhPSBwYSkKQEAgLTIwMiw3ICsy
MDIsNyBAQCB2b2lkIF9faW5pdCBrYXNhbl9lYXJseV9pbml0KHZvaWQpCiAJdW5zaWduZWQgbG9u
ZyBhZGRyID0gS0FTQU5fU0hBRE9XX1NUQVJUOwogCXVuc2lnbmVkIGxvbmcgZW5kID0gS0FTQU5f
U0hBRE9XX0VORDsKIAl1bnNpZ25lZCBsb25nIG5leHQ7Ci0JcG1kX3QgKnBtZCA9IHBtZF9vZmZz
ZXQocHVkX29mZnNldChwZ2Rfb2Zmc2V0X2soYWRkciksIGFkZHIpLCBhZGRyKTsKKwlwbWRfdCAq
cG1kID0gcG1kX29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKGFkZHIp
LCBhZGRyKSwgYWRkciksIGFkZHIpOwogCiAJQlVJTERfQlVHX09OKEtBU0FOX1NIQURPV19TVEFS
VCAmIH5QR0RJUl9NQVNLKTsKIApkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL21lbS5jIGIv
YXJjaC9wb3dlcnBjL21tL21lbS5jCmluZGV4IGVmN2IxMTE5YjJlMi4uODI2MmIzODRkY2YzIDEw
MDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vbWVtLmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL21l
bS5jCkBAIC02OSw4ICs2OSw4IEBAIEVYUE9SVF9TWU1CT0woa21hcF9wcm90KTsKIAogc3RhdGlj
IGlubGluZSBwdGVfdCAqdmlydF90b19rcHRlKHVuc2lnbmVkIGxvbmcgdmFkZHIpCiB7Ci0JcmV0
dXJuIHB0ZV9vZmZzZXRfa2VybmVsKHBtZF9vZmZzZXQocHVkX29mZnNldChwZ2Rfb2Zmc2V0X2so
dmFkZHIpLAotCQkJdmFkZHIpLCB2YWRkciksIHZhZGRyKTsKKwlyZXR1cm4gcHRlX29mZnNldF9r
ZXJuZWwocG1kX29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKHZhZGRy
KSwKKwkJCXZhZGRyKSwgdmFkZHIpLCB2YWRkciksIHZhZGRyKTsKIH0KICNlbmRpZgogCmRpZmYg
LS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vbm9oYXNoLzQweC5jIGIvYXJjaC9wb3dlcnBjL21tL25v
aGFzaC80MHguYwppbmRleCBmMzQ4MTA0ZWI0NjEuLjdhYWY3MTU1ZTM1MCAxMDA2NDQKLS0tIGEv
YXJjaC9wb3dlcnBjL21tL25vaGFzaC80MHguYworKysgYi9hcmNoL3Bvd2VycGMvbW0vbm9oYXNo
LzQweC5jCkBAIC0xMDQsNyArMTA0LDcgQEAgdW5zaWduZWQgbG9uZyBfX2luaXQgbW11X21hcGlu
X3JhbSh1bnNpZ25lZCBsb25nIGJhc2UsIHVuc2lnbmVkIGxvbmcgdG9wKQogCQlwbWRfdCAqcG1k
cDsKIAkJdW5zaWduZWQgbG9uZyB2YWwgPSBwIHwgX1BNRF9TSVpFXzE2TSB8IF9QQUdFX0VYRUMg
fCBfUEFHRV9IV1dSSVRFOwogCi0JCXBtZHAgPSBwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocGdkX29m
ZnNldF9rKHYpLCB2KSwgdik7CisJCXBtZHAgPSBwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocDRkX29m
ZnNldChwZ2Rfb2Zmc2V0X2sodiksIHYpLCB2KSwgdik7CiAJCSpwbWRwKysgPSBfX3BtZCh2YWwp
OwogCQkqcG1kcCsrID0gX19wbWQodmFsKTsKIAkJKnBtZHArKyA9IF9fcG1kKHZhbCk7CkBAIC0x
MTksNyArMTE5LDcgQEAgdW5zaWduZWQgbG9uZyBfX2luaXQgbW11X21hcGluX3JhbSh1bnNpZ25l
ZCBsb25nIGJhc2UsIHVuc2lnbmVkIGxvbmcgdG9wKQogCQlwbWRfdCAqcG1kcDsKIAkJdW5zaWdu
ZWQgbG9uZyB2YWwgPSBwIHwgX1BNRF9TSVpFXzRNIHwgX1BBR0VfRVhFQyB8IF9QQUdFX0hXV1JJ
VEU7CiAKLQkJcG1kcCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwZ2Rfb2Zmc2V0X2sodiksIHYp
LCB2KTsKKwkJcG1kcCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwNGRfb2Zmc2V0KHBnZF9vZmZz
ZXRfayh2KSwgdiksIHYpLCB2KTsKIAkJKnBtZHAgPSBfX3BtZCh2YWwpOwogCiAJCXYgKz0gTEFS
R0VfUEFHRV9TSVpFXzRNOwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL25vaGFzaC9ib29r
M2VfcGd0YWJsZS5jIGIvYXJjaC9wb3dlcnBjL21tL25vaGFzaC9ib29rM2VfcGd0YWJsZS5jCmlu
ZGV4IDQ2MzdmZGQ0NjljZi4uYTYyZDU5YTkyOGJlIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMv
bW0vbm9oYXNoL2Jvb2szZV9wZ3RhYmxlLmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL25vaGFzaC9i
b29rM2VfcGd0YWJsZS5jCkBAIC03Myw2ICs3Myw3IEBAIHN0YXRpYyB2b2lkIF9faW5pdCAqZWFy
bHlfYWxsb2NfcGd0YWJsZSh1bnNpZ25lZCBsb25nIHNpemUpCiBpbnQgX19yZWYgbWFwX2tlcm5l
bF9wYWdlKHVuc2lnbmVkIGxvbmcgZWEsIHVuc2lnbmVkIGxvbmcgcGEsIHBncHJvdF90IHByb3Qp
CiB7CiAJcGdkX3QgKnBnZHA7CisJcDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1ZHA7CiAJcG1kX3Qg
KnBtZHA7CiAJcHRlX3QgKnB0ZXA7CkBAIC04MCw3ICs4MSwxMCBAQCBpbnQgX19yZWYgbWFwX2tl
cm5lbF9wYWdlKHVuc2lnbmVkIGxvbmcgZWEsIHVuc2lnbmVkIGxvbmcgcGEsIHBncHJvdF90IHBy
b3QpCiAJQlVJTERfQlVHX09OKFRBU0tfU0laRV9VU0VSNjQgPiBQR1RBQkxFX1JBTkdFKTsKIAlp
ZiAoc2xhYl9pc19hdmFpbGFibGUoKSkgewogCQlwZ2RwID0gcGdkX29mZnNldF9rKGVhKTsKLQkJ
cHVkcCA9IHB1ZF9hbGxvYygmaW5pdF9tbSwgcGdkcCwgZWEpOworCQlwNGRwID0gcDRkX2FsbG9j
KCZpbml0X21tLCBwZ2RwLCBlYSk7CisJCWlmICghcDRkcCkKKwkJCXJldHVybiAtRU5PTUVNOwor
CQlwdWRwID0gcHVkX2FsbG9jKCZpbml0X21tLCBwNGRwLCBlYSk7CiAJCWlmICghcHVkcCkKIAkJ
CXJldHVybiAtRU5PTUVNOwogCQlwbWRwID0gcG1kX2FsbG9jKCZpbml0X21tLCBwdWRwLCBlYSk7
CkBAIC05MSwxMyArOTUsMTYgQEAgaW50IF9fcmVmIG1hcF9rZXJuZWxfcGFnZSh1bnNpZ25lZCBs
b25nIGVhLCB1bnNpZ25lZCBsb25nIHBhLCBwZ3Byb3RfdCBwcm90KQogCQkJcmV0dXJuIC1FTk9N
RU07CiAJfSBlbHNlIHsKIAkJcGdkcCA9IHBnZF9vZmZzZXRfayhlYSk7Ci0jaWZuZGVmIF9fUEFH
RVRBQkxFX1BVRF9GT0xERUQKIAkJaWYgKHBnZF9ub25lKCpwZ2RwKSkgewogCQkJcHVkcCA9IGVh
cmx5X2FsbG9jX3BndGFibGUoUFVEX1RBQkxFX1NJWkUpOwogCQkJcGdkX3BvcHVsYXRlKCZpbml0
X21tLCBwZ2RwLCBwdWRwKTsKIAkJfQotI2VuZGlmIC8qICFfX1BBR0VUQUJMRV9QVURfRk9MREVE
ICovCi0JCXB1ZHAgPSBwdWRfb2Zmc2V0KHBnZHAsIGVhKTsKKwkJcDRkcCA9IHA0ZF9vZmZzZXQo
cGdkcCwgZWEpOworCQlpZiAocDRkX25vbmUoKnA0ZHApKSB7CisJCQlwbWRwID0gZWFybHlfYWxs
b2NfcGd0YWJsZShQTURfVEFCTEVfU0laRSk7CisJCQlwNGRfcG9wdWxhdGUoJmluaXRfbW0sIHA0
ZHAsIHBtZHApOworCQl9CisJCXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIGVhKTsKIAkJaWYgKHB1
ZF9ub25lKCpwdWRwKSkgewogCQkJcG1kcCA9IGVhcmx5X2FsbG9jX3BndGFibGUoUE1EX1RBQkxF
X1NJWkUpOwogCQkJcHVkX3BvcHVsYXRlKCZpbml0X21tLCBwdWRwLCBwbWRwKTsKZGlmZiAtLWdp
dCBhL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlLmMgYi9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZS5j
CmluZGV4IGUzNzU5YjY5ZjgxYi4uZGNhNmE3MmRhMjZhIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2Vy
cGMvbW0vcGd0YWJsZS5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlLmMKQEAgLTI2NSw2
ICsyNjUsNyBAQCBpbnQgaHVnZV9wdGVwX3NldF9hY2Nlc3NfZmxhZ3Moc3RydWN0IHZtX2FyZWFf
c3RydWN0ICp2bWEsCiB2b2lkIGFzc2VydF9wdGVfbG9ja2VkKHN0cnVjdCBtbV9zdHJ1Y3QgKm1t
LCB1bnNpZ25lZCBsb25nIGFkZHIpCiB7CiAJcGdkX3QgKnBnZDsKKwlwNGRfdCAqcDRkOwogCXB1
ZF90ICpwdWQ7CiAJcG1kX3QgKnBtZDsKIApAQCAtMjcyLDcgKzI3Myw5IEBAIHZvaWQgYXNzZXJ0
X3B0ZV9sb2NrZWQoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcikKIAkJ
cmV0dXJuOwogCXBnZCA9IG1tLT5wZ2QgKyBwZ2RfaW5kZXgoYWRkcik7CiAJQlVHX09OKHBnZF9u
b25lKCpwZ2QpKTsKLQlwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgYWRkcik7CisJcDRkID0gcDRkX29m
ZnNldChwZ2QsIGFkZHIpOworCUJVR19PTihwNGRfbm9uZSgqcDRkKSk7CisJcHVkID0gcHVkX29m
ZnNldChwNGQsIGFkZHIpOwogCUJVR19PTihwdWRfbm9uZSgqcHVkKSk7CiAJcG1kID0gcG1kX29m
ZnNldChwdWQsIGFkZHIpOwogCS8qCkBAIC0zMTMsNiArMzE2LDcgQEAgcHRlX3QgKl9fZmluZF9s
aW51eF9wdGUocGdkX3QgKnBnZGlyLCB1bnNpZ25lZCBsb25nIGVhLAogCQkJYm9vbCAqaXNfdGhw
LCB1bnNpZ25lZCAqaHBhZ2Vfc2hpZnQpCiB7CiAJcGdkX3QgcGdkLCAqcGdkcDsKKwlwNGRfdCBw
NGQsICpwNGRwOwogCXB1ZF90IHB1ZCwgKnB1ZHA7CiAJcG1kX3QgcG1kLCAqcG1kcDsKIAlwdGVf
dCAqcmV0X3B0ZTsKQEAgLTM0NiwxMyArMzUwLDMwIEBAIHB0ZV90ICpfX2ZpbmRfbGludXhfcHRl
KHBnZF90ICpwZ2RpciwgdW5zaWduZWQgbG9uZyBlYSwKIAkJZ290byBvdXRfaHVnZTsKIAl9CiAK
KwlwZHNoaWZ0ID0gUDREX1NISUZUOworCXA0ZHAgPSBwNGRfb2Zmc2V0KCZwZ2QsIGVhKTsKKwlw
NGQgID0gUkVBRF9PTkNFKCpwNGRwKTsKKworCWlmIChwNGRfbm9uZShwNGQpKQorCQlyZXR1cm4g
TlVMTDsKKworCWlmIChwNGRfaXNfbGVhZihwNGQpKSB7CisJCXJldF9wdGUgPSAocHRlX3QgKilw
NGRwOworCQlnb3RvIG91dDsKKwl9CisKKwlpZiAoaXNfaHVnZXBkKF9faHVnZXBkKHA0ZF92YWwo
cDRkKSkpKSB7CisJCWhwZHAgPSAoaHVnZXBkX3QgKikmcDRkOworCQlnb3RvIG91dF9odWdlOwor
CX0KKwogCS8qCiAJICogRXZlbiBpZiB3ZSBlbmQgdXAgd2l0aCBhbiB1bm1hcCwgdGhlIHBndGFi
bGUgd2lsbCBub3QKIAkgKiBiZSBmcmVlZCwgYmVjYXVzZSB3ZSBkbyBhbiByY3UgZnJlZSBhbmQg
aGVyZSB3ZSBhcmUKIAkgKiBpcnEgZGlzYWJsZWQKIAkgKi8KIAlwZHNoaWZ0ID0gUFVEX1NISUZU
OwotCXB1ZHAgPSBwdWRfb2Zmc2V0KCZwZ2QsIGVhKTsKKwlwdWRwID0gcHVkX29mZnNldCgmcDRk
LCBlYSk7CiAJcHVkICA9IFJFQURfT05DRSgqcHVkcCk7CiAKIAlpZiAocHVkX25vbmUocHVkKSkK
ZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlXzMyLmMgYi9hcmNoL3Bvd2VycGMv
bW0vcGd0YWJsZV8zMi5jCmluZGV4IDVmYjkwZWRkODY1ZS4uYWQyMTdlNWUwMzlmIDEwMDY0NAot
LS0gYS9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZV8zMi5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9w
Z3RhYmxlXzMyLmMKQEAgLTYzLDcgKzYzLDcgQEAgaW50IF9fcmVmIG1hcF9rZXJuZWxfcGFnZSh1
bnNpZ25lZCBsb25nIHZhLCBwaHlzX2FkZHJfdCBwYSwgcGdwcm90X3QgcHJvdCkKIAlpbnQgZXJy
ID0gLUVOT01FTTsKIAogCS8qIFVzZSB1cHBlciAxMCBiaXRzIG9mIFZBIHRvIGluZGV4IHRoZSBm
aXJzdCBsZXZlbCBtYXAgKi8KLQlwZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwZ2Rfb2Zmc2V0
X2sodmEpLCB2YSksIHZhKTsKKwlwZCA9IHBtZF9vZmZzZXQocHVkX29mZnNldChwNGRfb2Zmc2V0
KHBnZF9vZmZzZXRfayh2YSksIHZhKSwgdmEpLCB2YSk7CiAJLyogVXNlIG1pZGRsZSAxMCBiaXRz
IG9mIFZBIHRvIGluZGV4IHRoZSBzZWNvbmQtbGV2ZWwgbWFwICovCiAJaWYgKGxpa2VseShzbGFi
X2lzX2F2YWlsYWJsZSgpKSkKIAkJcGcgPSBwdGVfYWxsb2Nfa2VybmVsKHBkLCB2YSk7CkBAIC0x
MzAsNiArMTMwLDcgQEAgc3RhdGljIGludAogZ2V0X3B0ZXB0cihzdHJ1Y3QgbW1fc3RydWN0ICpt
bSwgdW5zaWduZWQgbG9uZyBhZGRyLCBwdGVfdCAqKnB0ZXAsIHBtZF90ICoqcG1kcCkKIHsKICAg
ICAgICAgcGdkX3QJKnBnZDsKKwlwNGRfdAkqcDRkOwogCXB1ZF90CSpwdWQ7CiAgICAgICAgIHBt
ZF90CSpwbWQ7CiAgICAgICAgIHB0ZV90CSpwdGU7CkBAIC0xMzcsMTcgKzEzOCwyMCBAQCBnZXRf
cHRlcHRyKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHIsIHB0ZV90ICoq
cHRlcCwgcG1kX3QgKipwbWRwKQogCiAgICAgICAgIHBnZCA9IHBnZF9vZmZzZXQobW0sIGFkZHIg
JiBQQUdFX01BU0spOwogICAgICAgICBpZiAocGdkKSB7Ci0JCXB1ZCA9IHB1ZF9vZmZzZXQocGdk
LCBhZGRyICYgUEFHRV9NQVNLKTsKLQkJaWYgKHB1ZCAmJiBwdWRfcHJlc2VudCgqcHVkKSkgewot
CQkJcG1kID0gcG1kX29mZnNldChwdWQsIGFkZHIgJiBQQUdFX01BU0spOwotCQkJaWYgKHBtZF9w
cmVzZW50KCpwbWQpKSB7Ci0JCQkJcHRlID0gcHRlX29mZnNldF9tYXAocG1kLCBhZGRyICYgUEFH
RV9NQVNLKTsKLQkJCQlpZiAocHRlKSB7Ci0JCQkJCXJldHZhbCA9IDE7Ci0JCQkJCSpwdGVwID0g
cHRlOwotCQkJCQlpZiAocG1kcCkKLQkJCQkJCSpwbWRwID0gcG1kOwotCQkJCQkvKiBYWFggY2Fs
bGVyIG5lZWRzIHRvIGRvIHB0ZV91bm1hcCwgeXVjayAqLworCQlwNGQgPSBwNGRfb2Zmc2V0KHBn
ZCwgYWRkciAmIFBBR0VfTUFTSyk7CisJCWlmIChwNGQgJiYgcDRkX3ByZXNlbnQoKnA0ZCkpIHsK
KwkJCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyICYgUEFHRV9NQVNLKTsKKwkJCWlmIChwdWQg
JiYgcHVkX3ByZXNlbnQoKnB1ZCkpIHsKKwkJCQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRkciAm
IFBBR0VfTUFTSyk7CisJCQkJaWYgKHBtZF9wcmVzZW50KCpwbWQpKSB7CisJCQkJCXB0ZSA9IHB0
ZV9vZmZzZXRfbWFwKHBtZCwgYWRkciAmIFBBR0VfTUFTSyk7CisJCQkJCWlmIChwdGUpIHsKKwkJ
CQkJCXJldHZhbCA9IDE7CisJCQkJCQkqcHRlcCA9IHB0ZTsKKwkJCQkJCWlmIChwbWRwKQorCQkJ
CQkJCSpwbWRwID0gcG1kOworCQkJCQkJLyogWFhYIGNhbGxlciBuZWVkcyB0byBkbyBwdGVfdW5t
YXAsIHl1Y2sgKi8KKwkJCQkJfQogCQkJCX0KIAkJCX0KIAkJfQpkaWZmIC0tZ2l0IGEvYXJjaC9w
b3dlcnBjL21tL3BndGFibGVfNjQuYyBiL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlXzY0LmMKaW5k
ZXggZTc4ODMyZGNlN2JiLi4xZjg2YTg4ZmQ0YmIgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9t
bS9wZ3RhYmxlXzY0LmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL3BndGFibGVfNjQuYwpAQCAtMTAx
LDEzICsxMDEsMTMgQEAgRVhQT1JUX1NZTUJPTChfX3B0ZV9mcmFnX3NpemVfc2hpZnQpOwogCiAj
aWZuZGVmIF9fUEFHRVRBQkxFX1BVRF9GT0xERUQKIC8qIDQgbGV2ZWwgcGFnZSB0YWJsZSAqLwot
c3RydWN0IHBhZ2UgKnBnZF9wYWdlKHBnZF90IHBnZCkKK3N0cnVjdCBwYWdlICpwNGRfcGFnZShw
NGRfdCBwNGQpCiB7Ci0JaWYgKHBnZF9pc19sZWFmKHBnZCkpIHsKLQkJVk1fV0FSTl9PTighcGdk
X2h1Z2UocGdkKSk7Ci0JCXJldHVybiBwdGVfcGFnZShwZ2RfcHRlKHBnZCkpOworCWlmIChwNGRf
aXNfbGVhZihwNGQpKSB7CisJCVZNX1dBUk5fT04oIXA0ZF9odWdlKHA0ZCkpOworCQlyZXR1cm4g
cHRlX3BhZ2UocDRkX3B0ZShwNGQpKTsKIAl9Ci0JcmV0dXJuIHZpcnRfdG9fcGFnZShwZ2RfcGFn
ZV92YWRkcihwZ2QpKTsKKwlyZXR1cm4gdmlydF90b19wYWdlKHA0ZF9wYWdlX3ZhZGRyKHA0ZCkp
OwogfQogI2VuZGlmCiAKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9wdGR1bXAvaGFzaHBh
Z2V0YWJsZS5jIGIvYXJjaC9wb3dlcnBjL21tL3B0ZHVtcC9oYXNocGFnZXRhYmxlLmMKaW5kZXgg
YTA3Mjc4MDI3YzZmLi5hYzM2MGFkODY1YTggMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9tbS9w
dGR1bXAvaGFzaHBhZ2V0YWJsZS5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9wdGR1bXAvaGFzaHBh
Z2V0YWJsZS5jCkBAIC00MTcsOSArNDE3LDkgQEAgc3RhdGljIHZvaWQgd2Fsa19wbWQoc3RydWN0
IHBnX3N0YXRlICpzdCwgcHVkX3QgKnB1ZCwgdW5zaWduZWQgbG9uZyBzdGFydCkKIAl9CiB9CiAK
LXN0YXRpYyB2b2lkIHdhbGtfcHVkKHN0cnVjdCBwZ19zdGF0ZSAqc3QsIHBnZF90ICpwZ2QsIHVu
c2lnbmVkIGxvbmcgc3RhcnQpCitzdGF0aWMgdm9pZCB3YWxrX3B1ZChzdHJ1Y3QgcGdfc3RhdGUg
KnN0LCBwNGRfdCAqcDRkLCB1bnNpZ25lZCBsb25nIHN0YXJ0KQogewotCXB1ZF90ICpwdWQgPSBw
dWRfb2Zmc2V0KHBnZCwgMCk7CisJcHVkX3QgKnB1ZCA9IHB1ZF9vZmZzZXQocDRkLCAwKTsKIAl1
bnNpZ25lZCBsb25nIGFkZHI7CiAJdW5zaWduZWQgaW50IGk7CiAKQEAgLTQzMSw2ICs0MzEsMjAg
QEAgc3RhdGljIHZvaWQgd2Fsa19wdWQoc3RydWN0IHBnX3N0YXRlICpzdCwgcGdkX3QgKnBnZCwg
dW5zaWduZWQgbG9uZyBzdGFydCkKIAl9CiB9CiAKK3N0YXRpYyB2b2lkIHdhbGtfcDRkKHN0cnVj
dCBwZ19zdGF0ZSAqc3QsIHBnZF90ICpwZ2QsIHVuc2lnbmVkIGxvbmcgc3RhcnQpCit7CisJcDRk
X3QgKnA0ZCA9IHA0ZF9vZmZzZXQocGdkLCAwKTsKKwl1bnNpZ25lZCBsb25nIGFkZHI7CisJdW5z
aWduZWQgaW50IGk7CisKKwlmb3IgKGkgPSAwOyBpIDwgUFRSU19QRVJfUDREOyBpKyssIHA0ZCsr
KSB7CisJCWFkZHIgPSBzdGFydCArIGkgKiBQNERfU0laRTsKKwkJaWYgKCFwNGRfbm9uZSgqcDRk
KSkKKwkJCS8qIHA0ZCBleGlzdHMgKi8KKwkJCXdhbGtfcHVkKHN0LCBwNGQsIGFkZHIpOworCX0K
K30KKwogc3RhdGljIHZvaWQgd2Fsa19wYWdldGFibGVzKHN0cnVjdCBwZ19zdGF0ZSAqc3QpCiB7
CiAJcGdkX3QgKnBnZCA9IHBnZF9vZmZzZXRfaygwVUwpOwpAQCAtNDQ1LDcgKzQ1OSw3IEBAIHN0
YXRpYyB2b2lkIHdhbGtfcGFnZXRhYmxlcyhzdHJ1Y3QgcGdfc3RhdGUgKnN0KQogCQlhZGRyID0g
S0VSTl9WSVJUX1NUQVJUICsgaSAqIFBHRElSX1NJWkU7CiAJCWlmICghcGdkX25vbmUoKnBnZCkp
CiAJCQkvKiBwZ2QgZXhpc3RzICovCi0JCQl3YWxrX3B1ZChzdCwgcGdkLCBhZGRyKTsKKwkJCXdh
bGtfcDRkKHN0LCBwZ2QsIGFkZHIpOwogCX0KIH0KIApkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBj
L21tL3B0ZHVtcC9wdGR1bXAuYyBiL2FyY2gvcG93ZXJwYy9tbS9wdGR1bXAvcHRkdW1wLmMKaW5k
ZXggMjA2MTU2MjU1MjQ3Li43YmQ0YjgxZDViNWQgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9t
bS9wdGR1bXAvcHRkdW1wLmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL3B0ZHVtcC9wdGR1bXAuYwpA
QCAtMjc3LDkgKzI3Nyw5IEBAIHN0YXRpYyB2b2lkIHdhbGtfcG1kKHN0cnVjdCBwZ19zdGF0ZSAq
c3QsIHB1ZF90ICpwdWQsIHVuc2lnbmVkIGxvbmcgc3RhcnQpCiAJfQogfQogCi1zdGF0aWMgdm9p
ZCB3YWxrX3B1ZChzdHJ1Y3QgcGdfc3RhdGUgKnN0LCBwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25n
IHN0YXJ0KQorc3RhdGljIHZvaWQgd2Fsa19wdWQoc3RydWN0IHBnX3N0YXRlICpzdCwgcDRkX3Qg
KnA0ZCwgdW5zaWduZWQgbG9uZyBzdGFydCkKIHsKLQlwdWRfdCAqcHVkID0gcHVkX29mZnNldChw
Z2QsIDApOworCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgMCk7CiAJdW5zaWduZWQgbG9u
ZyBhZGRyOwogCXVuc2lnbmVkIGludCBpOwogCkBAIC0yOTMsNiArMjkzLDIyIEBAIHN0YXRpYyB2
b2lkIHdhbGtfcHVkKHN0cnVjdCBwZ19zdGF0ZSAqc3QsIHBnZF90ICpwZ2QsIHVuc2lnbmVkIGxv
bmcgc3RhcnQpCiAJfQogfQogCitzdGF0aWMgdm9pZCB3YWxrX3A0ZChzdHJ1Y3QgcGdfc3RhdGUg
KnN0LCBwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIHN0YXJ0KQoreworCXA0ZF90ICpwNGQgPSBw
NGRfb2Zmc2V0KHBnZCwgMCk7CisJdW5zaWduZWQgbG9uZyBhZGRyOworCXVuc2lnbmVkIGludCBp
OworCisJZm9yIChpID0gMDsgaSA8IFBUUlNfUEVSX1A0RDsgaSsrLCBwNGQrKykgeworCQlhZGRy
ID0gc3RhcnQgKyBpICogUDREX1NJWkU7CisJCWlmICghcDRkX25vbmUoKnA0ZCkgJiYgIXA0ZF9p
c19sZWFmKCpwNGQpKQorCQkJLyogcDRkIGV4aXN0cyAqLworCQkJd2Fsa19wdWQoc3QsIHA0ZCwg
YWRkcik7CisJCWVsc2UKKwkJCW5vdGVfcGFnZShzdCwgYWRkciwgMiwgcDRkX3ZhbCgqcDRkKSk7
CisJfQorfQorCiBzdGF0aWMgdm9pZCB3YWxrX3BhZ2V0YWJsZXMoc3RydWN0IHBnX3N0YXRlICpz
dCkKIHsKIAl1bnNpZ25lZCBpbnQgaTsKQEAgLTMwNiw3ICszMjIsNyBAQCBzdGF0aWMgdm9pZCB3
YWxrX3BhZ2V0YWJsZXMoc3RydWN0IHBnX3N0YXRlICpzdCkKIAlmb3IgKGkgPSBwZ2RfaW5kZXgo
YWRkcik7IGkgPCBQVFJTX1BFUl9QR0Q7IGkrKywgcGdkKyssIGFkZHIgKz0gUEdESVJfU0laRSkg
ewogCQlpZiAoIXBnZF9ub25lKCpwZ2QpICYmICFwZ2RfaXNfbGVhZigqcGdkKSkKIAkJCS8qIHBn
ZCBleGlzdHMgKi8KLQkJCXdhbGtfcHVkKHN0LCBwZ2QsIGFkZHIpOworCQkJd2Fsa19wNGQoc3Qs
IHBnZCwgYWRkcik7CiAJCWVsc2UKIAkJCW5vdGVfcGFnZShzdCwgYWRkciwgMSwgcGdkX3ZhbCgq
cGdkKSk7CiAJfQpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL3htb24veG1vbi5jIGIvYXJjaC9w
b3dlcnBjL3htb24veG1vbi5jCmluZGV4IGU4Yzg0ZDI2NTYwMi4uYzdiZDExNDViMjY4IDEwMDY0
NAotLS0gYS9hcmNoL3Bvd2VycGMveG1vbi94bW9uLmMKKysrIGIvYXJjaC9wb3dlcnBjL3htb24v
eG1vbi5jCkBAIC0zMTMwLDYgKzMxMzAsNyBAQCBzdGF0aWMgdm9pZCBzaG93X3B0ZSh1bnNpZ25l
ZCBsb25nIGFkZHIpCiAJc3RydWN0IHRhc2tfc3RydWN0ICp0c2sgPSBOVUxMOwogCXN0cnVjdCBt
bV9zdHJ1Y3QgKm1tOwogCXBnZF90ICpwZ2RwLCAqcGdkaXI7CisJcDRkX3QgKnA0ZHA7CiAJcHVk
X3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7CiAJcHRlX3QgKnB0ZXA7CkBAIC0zMTc0LDcgKzMxNzUs
MjEgQEAgc3RhdGljIHZvaWQgc2hvd19wdGUodW5zaWduZWQgbG9uZyBhZGRyKQogCX0KIAlwcmlu
dGYoInBnZHAgQCAweCVweCA9IDB4JTAxNmx4XG4iLCBwZ2RwLCBwZ2RfdmFsKCpwZ2RwKSk7CiAK
LQlwdWRwID0gcHVkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlwNGRwID0gcDRkX29mZnNldChwZ2Rw
LCBhZGRyKTsKKworCWlmIChwNGRfbm9uZSgqcDRkcCkpIHsKKwkJcHJpbnRmKCJObyB2YWxpZCBQ
NERcbiIpOworCQlyZXR1cm47CisJfQorCisJaWYgKHA0ZF9pc19sZWFmKCpwNGRwKSkgeworCQlm
b3JtYXRfcHRlKHA0ZHAsIHA0ZF92YWwoKnA0ZHApKTsKKwkJcmV0dXJuOworCX0KKworCXByaW50
ZigicDRkcCBAIDB4JXB4ID0gMHglMDE2bHhcbiIsIHA0ZHAsIHA0ZF92YWwoKnA0ZHApKTsKKwor
CXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIGFkZHIpOwogCiAJaWYgKHB1ZF9ub25lKCpwdWRwKSkg
ewogCQlwcmludGYoIk5vIHZhbGlkIFBVRFxuIik7Ci0tIAoyLjI0LjAKCl9fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcgbGlzdApP
cGVuUklTQ0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29yZXMub3Jn
L2xpc3RpbmZvL29wZW5yaXNjCg==
