Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id DBDC62460B1
	for <lists+openrisc@lfdr.de>; Mon, 17 Aug 2020 10:46:10 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 7B0A220D0C;
	Mon, 17 Aug 2020 10:46:10 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id B370F20CBE
 for <openrisc@lists.librecores.org>; Tue, 28 Jul 2020 07:12:44 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 062C32177B;
 Tue, 28 Jul 2020 05:12:33 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1595913163;
 bh=AgkSEjcZN+4R6IPrVqzpRXpoFcyMHs54nGgAVWDTHPg=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=x+PwdBnFBSyRKhO6/VqoU+SYFSiUr4ZPNt1hhIVRjzQ9HePzYy2S+Yej0Z/u11LyZ
 uG+rbcxXiMNQpl4LSWOpjj+pufoPsK+yHEQT836x2daZ8a9CQWGcIAPHex79AOe15D
 gx9ohcFjCH4Hd8YFqXCT+rPcPQSgxmmLmhUebxnM=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Tue, 28 Jul 2020 08:11:41 +0300
Message-Id: <20200728051153.1590-4-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200728051153.1590-1-rppt@kernel.org>
References: <20200728051153.1590-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Mon, 17 Aug 2020 10:45:37 +0200
Subject: [OpenRISC] [PATCH 03/15] arm,
 xtensa: simplify initialization of high memory pages
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: linux-sh@vger.kernel.org, Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Marek Szyprowski <m.szyprowski@samsung.com>,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Yoshinori Sato <ysato@users.sourceforge.jp>,
 Michael Ellerman <mpe@ellerman.id.au>, x86@kernel.org,
 Russell King <linux@armlinux.org.uk>, Mike Rapoport <rppt@linux.ibm.com>,
 clang-built-linux@googlegroups.com, Ingo Molnar <mingo@redhat.com>,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Thomas Gleixner <tglx@linutronix.de>, linux-arm-kernel@lists.infradead.org,
 Michal Simek <monstr@monstr.eu>, linux-mm@kvack.org,
 linuxppc-dev@lists.ozlabs.org, linux-kernel@vger.kernel.org,
 iommu@lists.linux-foundation.org, Palmer Dabbelt <palmer@dabbelt.com>,
 Christoph Hellwig <hch@lst.de>, Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlIGZ1bmN0aW9uIGZy
ZWVfaGlnaHBhZ2VzKCkgaW4gYm90aCBhcm0gYW5kIHh0ZW5zYSBlc3NlbnRpYWxseSBvcGVuLWNv
ZGUKZm9yX2VhY2hfZnJlZV9tZW1fcmFuZ2UoKSBsb29wIHRvIGRldGVjdCBoaWdoIG1lbW9yeSBw
YWdlcyB0aGF0IHdlcmUgbm90CnJlc2VydmVkIGFuZCB0aGF0IHNob3VsZCBiZSBpbml0aWFsaXpl
ZCBhbmQgcGFzc2VkIHRvIHRoZSBidWRkeSBhbGxvY2F0b3IuCgpSZXBsYWNlIG9wZW4tY29kZWQg
aW1wbGVtZW50YXRpb24gb2YgZm9yX2VhY2hfZnJlZV9tZW1fcmFuZ2UoKSB3aXRoIHVzYWdlCm9m
IG1lbWJsb2NrIEFQSSB0byBzaW1wbGlmeSB0aGUgY29kZS4KClNpZ25lZC1vZmYtYnk6IE1pa2Ug
UmFwb3BvcnQgPHJwcHRAbGludXguaWJtLmNvbT4KLS0tCiBhcmNoL2FybS9tbS9pbml0LmMgICAg
fCA0OCArKysrKysrLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiBhcmNoL3h0ZW5zYS9t
bS9pbml0LmMgfCA1NSArKysrKysrKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
CiAyIGZpbGVzIGNoYW5nZWQsIDE4IGluc2VydGlvbnMoKyksIDg1IGRlbGV0aW9ucygtKQoKZGlm
ZiAtLWdpdCBhL2FyY2gvYXJtL21tL2luaXQuYyBiL2FyY2gvYXJtL21tL2luaXQuYwppbmRleCAw
MWUxOGU0M2IxNzQuLjYyNmFmMzQ4ZWI4ZiAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vaW5pdC5j
CisrKyBiL2FyY2gvYXJtL21tL2luaXQuYwpAQCAtMzUyLDYxICszNTIsMjkgQEAgc3RhdGljIHZv
aWQgX19pbml0IGZyZWVfdW51c2VkX21lbW1hcCh2b2lkKQogI2VuZGlmCiB9CiAKLSNpZmRlZiBD
T05GSUdfSElHSE1FTQotc3RhdGljIGlubGluZSB2b2lkIGZyZWVfYXJlYV9oaWdoKHVuc2lnbmVk
IGxvbmcgcGZuLCB1bnNpZ25lZCBsb25nIGVuZCkKLXsKLQlmb3IgKDsgcGZuIDwgZW5kOyBwZm4r
KykKLQkJZnJlZV9oaWdobWVtX3BhZ2UocGZuX3RvX3BhZ2UocGZuKSk7Ci19Ci0jZW5kaWYKLQog
c3RhdGljIHZvaWQgX19pbml0IGZyZWVfaGlnaHBhZ2VzKHZvaWQpCiB7CiAjaWZkZWYgQ09ORklH
X0hJR0hNRU0KIAl1bnNpZ25lZCBsb25nIG1heF9sb3cgPSBtYXhfbG93X3BmbjsKLQlzdHJ1Y3Qg
bWVtYmxvY2tfcmVnaW9uICptZW0sICpyZXM7CisJcGh5c19hZGRyX3QgcmFuZ2Vfc3RhcnQsIHJh
bmdlX2VuZDsKKwl1NjQgaTsKIAogCS8qIHNldCBoaWdobWVtIHBhZ2UgZnJlZSAqLwotCWZvcl9l
YWNoX21lbWJsb2NrKG1lbW9yeSwgbWVtKSB7Ci0JCXVuc2lnbmVkIGxvbmcgc3RhcnQgPSBtZW1i
bG9ja19yZWdpb25fbWVtb3J5X2Jhc2VfcGZuKG1lbSk7Ci0JCXVuc2lnbmVkIGxvbmcgZW5kID0g
bWVtYmxvY2tfcmVnaW9uX21lbW9yeV9lbmRfcGZuKG1lbSk7CisJZm9yX2VhY2hfZnJlZV9tZW1f
cmFuZ2UoaSwgTlVNQV9OT19OT0RFLCBNRU1CTE9DS19OT05FLAorCQkJCSZyYW5nZV9zdGFydCwg
JnJhbmdlX2VuZCwgTlVMTCkgeworCQl1bnNpZ25lZCBsb25nIHN0YXJ0ID0gUEhZU19QRk4ocmFu
Z2Vfc3RhcnQpOworCQl1bnNpZ25lZCBsb25nIGVuZCA9IFBIWVNfUEZOKHJhbmdlX2VuZCk7CiAK
IAkJLyogSWdub3JlIGNvbXBsZXRlIGxvd21lbSBlbnRyaWVzICovCiAJCWlmIChlbmQgPD0gbWF4
X2xvdykKIAkJCWNvbnRpbnVlOwogCi0JCWlmIChtZW1ibG9ja19pc19ub21hcChtZW0pKQotCQkJ
Y29udGludWU7Ci0KIAkJLyogVHJ1bmNhdGUgcGFydGlhbCBoaWdobWVtIGVudHJpZXMgKi8KIAkJ
aWYgKHN0YXJ0IDwgbWF4X2xvdykKIAkJCXN0YXJ0ID0gbWF4X2xvdzsKIAotCQkvKiBGaW5kIGFu
ZCBleGNsdWRlIGFueSByZXNlcnZlZCByZWdpb25zICovCi0JCWZvcl9lYWNoX21lbWJsb2NrKHJl
c2VydmVkLCByZXMpIHsKLQkJCXVuc2lnbmVkIGxvbmcgcmVzX3N0YXJ0LCByZXNfZW5kOwotCi0J
CQlyZXNfc3RhcnQgPSBtZW1ibG9ja19yZWdpb25fcmVzZXJ2ZWRfYmFzZV9wZm4ocmVzKTsKLQkJ
CXJlc19lbmQgPSBtZW1ibG9ja19yZWdpb25fcmVzZXJ2ZWRfZW5kX3BmbihyZXMpOwotCi0JCQlp
ZiAocmVzX2VuZCA8IHN0YXJ0KQotCQkJCWNvbnRpbnVlOwotCQkJaWYgKHJlc19zdGFydCA8IHN0
YXJ0KQotCQkJCXJlc19zdGFydCA9IHN0YXJ0OwotCQkJaWYgKHJlc19zdGFydCA+IGVuZCkKLQkJ
CQlyZXNfc3RhcnQgPSBlbmQ7Ci0JCQlpZiAocmVzX2VuZCA+IGVuZCkKLQkJCQlyZXNfZW5kID0g
ZW5kOwotCQkJaWYgKHJlc19zdGFydCAhPSBzdGFydCkKLQkJCQlmcmVlX2FyZWFfaGlnaChzdGFy
dCwgcmVzX3N0YXJ0KTsKLQkJCXN0YXJ0ID0gcmVzX2VuZDsKLQkJCWlmIChzdGFydCA9PSBlbmQp
Ci0JCQkJYnJlYWs7Ci0JCX0KLQotCQkvKiBBbmQgbm93IGZyZWUgYW55dGhpbmcgd2hpY2ggcmVt
YWlucyAqLwotCQlpZiAoc3RhcnQgPCBlbmQpCi0JCQlmcmVlX2FyZWFfaGlnaChzdGFydCwgZW5k
KTsKKwkJZm9yICg7IHN0YXJ0IDwgZW5kOyBzdGFydCsrKQorCQkJZnJlZV9oaWdobWVtX3BhZ2Uo
cGZuX3RvX3BhZ2Uoc3RhcnQpKTsKIAl9CiAjZW5kaWYKIH0KZGlmZiAtLWdpdCBhL2FyY2gveHRl
bnNhL21tL2luaXQuYyBiL2FyY2gveHRlbnNhL21tL2luaXQuYwppbmRleCBhMDViMzA2Y2YzNzEu
LmFkOWQ1OWQ5M2YzOSAxMDA2NDQKLS0tIGEvYXJjaC94dGVuc2EvbW0vaW5pdC5jCisrKyBiL2Fy
Y2gveHRlbnNhL21tL2luaXQuYwpAQCAtNzksNjcgKzc5LDMyIEBAIHZvaWQgX19pbml0IHpvbmVz
X2luaXQodm9pZCkKIAlmcmVlX2FyZWFfaW5pdChtYXhfem9uZV9wZm4pOwogfQogCi0jaWZkZWYg
Q09ORklHX0hJR0hNRU0KLXN0YXRpYyB2b2lkIF9faW5pdCBmcmVlX2FyZWFfaGlnaCh1bnNpZ25l
ZCBsb25nIHBmbiwgdW5zaWduZWQgbG9uZyBlbmQpCi17Ci0JZm9yICg7IHBmbiA8IGVuZDsgcGZu
KyspCi0JCWZyZWVfaGlnaG1lbV9wYWdlKHBmbl90b19wYWdlKHBmbikpOwotfQotCiBzdGF0aWMg
dm9pZCBfX2luaXQgZnJlZV9oaWdocGFnZXModm9pZCkKIHsKKyNpZmRlZiBDT05GSUdfSElHSE1F
TQogCXVuc2lnbmVkIGxvbmcgbWF4X2xvdyA9IG1heF9sb3dfcGZuOwotCXN0cnVjdCBtZW1ibG9j
a19yZWdpb24gKm1lbSwgKnJlczsKKwlwaHlzX2FkZHJfdCByYW5nZV9zdGFydCwgcmFuZ2VfZW5k
OworCXU2NCBpOwogCi0JcmVzZXRfYWxsX3pvbmVzX21hbmFnZWRfcGFnZXMoKTsKIAkvKiBzZXQg
aGlnaG1lbSBwYWdlIGZyZWUgKi8KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIG1lbSkgewot
CQl1bnNpZ25lZCBsb25nIHN0YXJ0ID0gbWVtYmxvY2tfcmVnaW9uX21lbW9yeV9iYXNlX3Bmbiht
ZW0pOwotCQl1bnNpZ25lZCBsb25nIGVuZCA9IG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfZW5kX3Bm
bihtZW0pOworCWZvcl9lYWNoX2ZyZWVfbWVtX3JhbmdlKGksIE5VTUFfTk9fTk9ERSwgTUVNQkxP
Q0tfTk9ORSwKKwkJCQkmcmFuZ2Vfc3RhcnQsICZyYW5nZV9lbmQsIE5VTEwpIHsKKwkJdW5zaWdu
ZWQgbG9uZyBzdGFydCA9IFBIWVNfUEZOKHJhbmdlX3N0YXJ0KTsKKwkJdW5zaWduZWQgbG9uZyBl
bmQgPSBQSFlTX1BGTihyYW5nZV9lbmQpOwogCiAJCS8qIElnbm9yZSBjb21wbGV0ZSBsb3dtZW0g
ZW50cmllcyAqLwogCQlpZiAoZW5kIDw9IG1heF9sb3cpCiAJCQljb250aW51ZTsKIAotCQlpZiAo
bWVtYmxvY2tfaXNfbm9tYXAobWVtKSkKLQkJCWNvbnRpbnVlOwotCiAJCS8qIFRydW5jYXRlIHBh
cnRpYWwgaGlnaG1lbSBlbnRyaWVzICovCiAJCWlmIChzdGFydCA8IG1heF9sb3cpCiAJCQlzdGFy
dCA9IG1heF9sb3c7CiAKLQkJLyogRmluZCBhbmQgZXhjbHVkZSBhbnkgcmVzZXJ2ZWQgcmVnaW9u
cyAqLwotCQlmb3JfZWFjaF9tZW1ibG9jayhyZXNlcnZlZCwgcmVzKSB7Ci0JCQl1bnNpZ25lZCBs
b25nIHJlc19zdGFydCwgcmVzX2VuZDsKLQotCQkJcmVzX3N0YXJ0ID0gbWVtYmxvY2tfcmVnaW9u
X3Jlc2VydmVkX2Jhc2VfcGZuKHJlcyk7Ci0JCQlyZXNfZW5kID0gbWVtYmxvY2tfcmVnaW9uX3Jl
c2VydmVkX2VuZF9wZm4ocmVzKTsKLQotCQkJaWYgKHJlc19lbmQgPCBzdGFydCkKLQkJCQljb250
aW51ZTsKLQkJCWlmIChyZXNfc3RhcnQgPCBzdGFydCkKLQkJCQlyZXNfc3RhcnQgPSBzdGFydDsK
LQkJCWlmIChyZXNfc3RhcnQgPiBlbmQpCi0JCQkJcmVzX3N0YXJ0ID0gZW5kOwotCQkJaWYgKHJl
c19lbmQgPiBlbmQpCi0JCQkJcmVzX2VuZCA9IGVuZDsKLQkJCWlmIChyZXNfc3RhcnQgIT0gc3Rh
cnQpCi0JCQkJZnJlZV9hcmVhX2hpZ2goc3RhcnQsIHJlc19zdGFydCk7Ci0JCQlzdGFydCA9IHJl
c19lbmQ7Ci0JCQlpZiAoc3RhcnQgPT0gZW5kKQotCQkJCWJyZWFrOwotCQl9Ci0KLQkJLyogQW5k
IG5vdyBmcmVlIGFueXRoaW5nIHdoaWNoIHJlbWFpbnMgKi8KLQkJaWYgKHN0YXJ0IDwgZW5kKQot
CQkJZnJlZV9hcmVhX2hpZ2goc3RhcnQsIGVuZCk7CisJCWZvciAoOyBzdGFydCA8IGVuZDsgc3Rh
cnQrKykKKwkJCWZyZWVfaGlnaG1lbV9wYWdlKHBmbl90b19wYWdlKHN0YXJ0KSk7CiAJfQotfQot
I2Vsc2UKLXN0YXRpYyB2b2lkIF9faW5pdCBmcmVlX2hpZ2hwYWdlcyh2b2lkKQotewotfQogI2Vu
ZGlmCit9CiAKIC8qCiAgKiBJbml0aWFsaXplIG1lbW9yeSBwYWdlcy4KLS0gCjIuMjYuMgoKX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KT3BlblJJU0MgbWFp
bGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMub3JnCmh0dHBzOi8vbGlzdHMubGli
cmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJpc2MK
