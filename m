Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id F2AD02460D9
	for <lists+openrisc@lfdr.de>; Mon, 17 Aug 2020 10:46:44 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id C705220EAA;
	Mon, 17 Aug 2020 10:46:44 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 248D120D7A
 for <openrisc@lists.librecores.org>; Sun,  2 Aug 2020 18:39:12 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 9C6F7207BB;
 Sun,  2 Aug 2020 16:39:00 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1596386350;
 bh=gqBMOJufupVT6nwjCYDhdQzDn7YpaiO3JM6cP/9C3wE=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=LeAsAzWKRP59PigJoeA+XtS0FJGWFVUdDhjkFEKClGxmxsaW6+DxphUxN6CoYMYaT
 tl2WX65cznSnalnk9ZwonQBu35jxUPNSqyzIs2PyJpU9XishZghg1BraDKduHM2ouD
 WedM8Ivn0Ro/l/b30nFV0/UkeZIodRQvAC8k7/4U=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Sun,  2 Aug 2020 19:36:00 +0300
Message-Id: <20200802163601.8189-17-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200802163601.8189-1-rppt@kernel.org>
References: <20200802163601.8189-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Mon, 17 Aug 2020 10:45:38 +0200
Subject: [OpenRISC] [PATCH v2 16/17] memblock: implement
 for_each_reserved_mem_region() using __next_mem_region()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Thomas Gleixner <tglx@linutronix.de>,
 Emil Renner Berthing <kernel@esmil.dk>, linux-sh@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Christoph Hellwig <hch@lst.de>,
 Marek Szyprowski <m.szyprowski@samsung.com>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Michael Ellerman <mpe@ellerman.id.au>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Mike Rapoport <rppt@linux.ibm.com>, clang-built-linux@googlegroups.com,
 Ingo Molnar <mingo@redhat.com>, linux-arm-kernel@lists.infradead.org,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Hari Bathini <hbathini@linux.ibm.com>, Michal Simek <monstr@monstr.eu>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, linux-mm@kvack.org,
 linux-kernel@vger.kernel.org, iommu@lists.linux-foundation.org,
 Palmer Dabbelt <palmer@dabbelt.com>, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKSXRlcmF0aW9uIG92ZXIg
bWVtYmxvY2sucmVzZXJ2ZWQgd2l0aCBmb3JfZWFjaF9yZXNlcnZlZF9tZW1fcmVnaW9uKCkgdXNl
ZApfX25leHRfcmVzZXJ2ZWRfbWVtX3JlZ2lvbigpIHRoYXQgaW1wbGVtZW50ZWQgYSBzdWJzZXQg
b2YKX19uZXh0X21lbV9yZWdpb24oKS4KClVzZSBfX2Zvcl9lYWNoX21lbV9yYW5nZSgpIGFuZCwg
ZXNzZW50aWFsbHksIF9fbmV4dF9tZW1fcmVnaW9uKCkgd2l0aAphcHByb3ByaWF0ZSBwYXJhbWV0
ZXJzIHRvIHJlZHVjZSBjb2RlIGR1cGxpY2F0aW9uLgoKV2hpbGUgb24gaXQsIHJlbmFtZSBmb3Jf
ZWFjaF9yZXNlcnZlZF9tZW1fcmVnaW9uKCkgdG8KZm9yX2VhY2hfcmVzZXJ2ZWRfbWVtX3Jhbmdl
KCkgZm9yIGNvbnNpc3RlbmN5LgoKU2lnbmVkLW9mZi1ieTogTWlrZSBSYXBvcG9ydCA8cnBwdEBs
aW51eC5pYm0uY29tPgotLS0KIC5jbGFuZy1mb3JtYXQgICAgICAgICAgICAgICAgICAgIHwgIDIg
Ky0KIGFyY2gvYXJtNjQva2VybmVsL3NldHVwLmMgICAgICAgIHwgIDIgKy0KIGRyaXZlcnMvaXJx
Y2hpcC9pcnEtZ2ljLXYzLWl0cy5jIHwgIDIgKy0KIGluY2x1ZGUvbGludXgvbWVtYmxvY2suaCAg
ICAgICAgIHwgMTIgKysrLS0tLS0tCiBtbS9tZW1ibG9jay5jICAgICAgICAgICAgICAgICAgICB8
IDQ2ICsrKysrKystLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiA1IGZpbGVzIGNoYW5nZWQsIDE3
IGluc2VydGlvbnMoKyksIDQ3IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhLy5jbGFuZy1mb3Jt
YXQgYi8uY2xhbmctZm9ybWF0CmluZGV4IDUyZWRlZGFiMjVjZS4uZTI4YTg0OWExYzU4IDEwMDY0
NAotLS0gYS8uY2xhbmctZm9ybWF0CisrKyBiLy5jbGFuZy1mb3JtYXQKQEAgLTI2Niw3ICsyNjYs
NyBAQCBGb3JFYWNoTWFjcm9zOgogICAtICdmb3JfZWFjaF9wcm9jZXNzX3RocmVhZCcKICAgLSAn
Zm9yX2VhY2hfcHJvcGVydHlfb2Zfbm9kZScKICAgLSAnZm9yX2VhY2hfcmVnaXN0ZXJlZF9mYicK
LSAgLSAnZm9yX2VhY2hfcmVzZXJ2ZWRfbWVtX3JlZ2lvbicKKyAgLSAnZm9yX2VhY2hfcmVzZXJ2
ZWRfbWVtX3JhbmdlJwogICAtICdmb3JfZWFjaF9ydGRfY29kZWNfZGFpcycKICAgLSAnZm9yX2Vh
Y2hfcnRkX2NvZGVjX2RhaXNfcm9sbGJhY2snCiAgIC0gJ2Zvcl9lYWNoX3J0ZF9jb21wb25lbnRz
JwpkaWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9rZXJuZWwvc2V0dXAuYyBiL2FyY2gvYXJtNjQva2Vy
bmVsL3NldHVwLmMKaW5kZXggOTNiMzg0NGNmNDQyLi5mM2FlYzcyNDRhYWIgMTAwNjQ0Ci0tLSBh
L2FyY2gvYXJtNjQva2VybmVsL3NldHVwLmMKKysrIGIvYXJjaC9hcm02NC9rZXJuZWwvc2V0dXAu
YwpAQCAtMjU3LDcgKzI1Nyw3IEBAIHN0YXRpYyBpbnQgX19pbml0IHJlc2VydmVfbWVtYmxvY2tf
cmVzZXJ2ZWRfcmVnaW9ucyh2b2lkKQogCQlpZiAoIW1lbWJsb2NrX2lzX3JlZ2lvbl9yZXNlcnZl
ZChtZW0tPnN0YXJ0LCBtZW1fc2l6ZSkpCiAJCQljb250aW51ZTsKIAotCQlmb3JfZWFjaF9yZXNl
cnZlZF9tZW1fcmVnaW9uKGosICZyX3N0YXJ0LCAmcl9lbmQpIHsKKwkJZm9yX2VhY2hfcmVzZXJ2
ZWRfbWVtX3JhbmdlKGosICZyX3N0YXJ0LCAmcl9lbmQpIHsKIAkJCXJlc291cmNlX3NpemVfdCBz
dGFydCwgZW5kOwogCiAJCQlzdGFydCA9IG1heChQRk5fUEhZUyhQRk5fRE9XTihyX3N0YXJ0KSks
IG1lbS0+c3RhcnQpOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9pcnFjaGlwL2lycS1naWMtdjMtaXRz
LmMgYi9kcml2ZXJzL2lycWNoaXAvaXJxLWdpYy12My1pdHMuYwppbmRleCBiZWFjNGNhZWZhZDku
Ljk5NzFmZDhjZjZiNiAxMDA2NDQKLS0tIGEvZHJpdmVycy9pcnFjaGlwL2lycS1naWMtdjMtaXRz
LmMKKysrIGIvZHJpdmVycy9pcnFjaGlwL2lycS1naWMtdjMtaXRzLmMKQEAgLTIxOTIsNyArMjE5
Miw3IEBAIHN0YXRpYyBib29sIGdpY19jaGVja19yZXNlcnZlZF9yYW5nZShwaHlzX2FkZHJfdCBh
ZGRyLCB1bnNpZ25lZCBsb25nIHNpemUpCiAKIAlhZGRyX2VuZCA9IGFkZHIgKyBzaXplIC0gMTsK
IAotCWZvcl9lYWNoX3Jlc2VydmVkX21lbV9yZWdpb24oaSwgJnN0YXJ0LCAmZW5kKSB7CisJZm9y
X2VhY2hfcmVzZXJ2ZWRfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgewogCQlpZiAoYWRkciA+
PSBzdGFydCAmJiBhZGRyX2VuZCA8PSBlbmQpCiAJCQlyZXR1cm4gdHJ1ZTsKIAl9CmRpZmYgLS1n
aXQgYS9pbmNsdWRlL2xpbnV4L21lbWJsb2NrLmggYi9pbmNsdWRlL2xpbnV4L21lbWJsb2NrLmgK
aW5kZXggZWMyZmQ4ZjMyYTE5Li45ZTUxYjNmZDQxMzQgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGlu
dXgvbWVtYmxvY2suaAorKysgYi9pbmNsdWRlL2xpbnV4L21lbWJsb2NrLmgKQEAgLTEzNiw5ICsx
MzYsNiBAQCB2b2lkIF9fbmV4dF9tZW1fcmFuZ2VfcmV2KHU2NCAqaWR4LCBpbnQgbmlkLCBlbnVt
IG1lbWJsb2NrX2ZsYWdzIGZsYWdzLAogCQkJICBzdHJ1Y3QgbWVtYmxvY2tfdHlwZSAqdHlwZV9i
LCBwaHlzX2FkZHJfdCAqb3V0X3N0YXJ0LAogCQkJICBwaHlzX2FkZHJfdCAqb3V0X2VuZCwgaW50
ICpvdXRfbmlkKTsKIAotdm9pZCBfX25leHRfcmVzZXJ2ZWRfbWVtX3JlZ2lvbih1NjQgKmlkeCwg
cGh5c19hZGRyX3QgKm91dF9zdGFydCwKLQkJCQlwaHlzX2FkZHJfdCAqb3V0X2VuZCk7Ci0KIHZv
aWQgX19tZW1ibG9ja19mcmVlX2xhdGUocGh5c19hZGRyX3QgYmFzZSwgcGh5c19hZGRyX3Qgc2l6
ZSk7CiAKIC8qKgpAQCAtMTkzLDcgKzE5MCw3IEBAIHZvaWQgX19tZW1ibG9ja19mcmVlX2xhdGUo
cGh5c19hZGRyX3QgYmFzZSwgcGh5c19hZGRyX3Qgc2l6ZSk7CiAJCQkgICAgIE1FTUJMT0NLX05P
TkUsIHBfc3RhcnQsIHBfZW5kLCBOVUxMKQogCiAvKioKLSAqIGZvcl9lYWNoX3Jlc2VydmVkX21l
bV9yZWdpb24gLSBpdGVyYXRlIG92ZXIgYWxsIHJlc2VydmVkIG1lbWJsb2NrIGFyZWFzCisgKiBm
b3JfZWFjaF9yZXNlcnZlZF9tZW1fcmFuZ2UgLSBpdGVyYXRlIG92ZXIgYWxsIHJlc2VydmVkIG1l
bWJsb2NrIGFyZWFzCiAgKiBAaTogdTY0IHVzZWQgYXMgbG9vcCB2YXJpYWJsZQogICogQHBfc3Rh
cnQ6IHB0ciB0byBwaHlzX2FkZHJfdCBmb3Igc3RhcnQgYWRkcmVzcyBvZiB0aGUgcmFuZ2UsIGNh
biBiZSAlTlVMTAogICogQHBfZW5kOiBwdHIgdG8gcGh5c19hZGRyX3QgZm9yIGVuZCBhZGRyZXNz
IG9mIHRoZSByYW5nZSwgY2FuIGJlICVOVUxMCkBAIC0yMDEsMTAgKzE5OCw5IEBAIHZvaWQgX19t
ZW1ibG9ja19mcmVlX2xhdGUocGh5c19hZGRyX3QgYmFzZSwgcGh5c19hZGRyX3Qgc2l6ZSk7CiAg
KiBXYWxrcyBvdmVyIHJlc2VydmVkIGFyZWFzIG9mIG1lbWJsb2NrLiBBdmFpbGFibGUgYXMgc29v
biBhcyBtZW1ibG9jawogICogaXMgaW5pdGlhbGl6ZWQuCiAgKi8KLSNkZWZpbmUgZm9yX2VhY2hf
cmVzZXJ2ZWRfbWVtX3JlZ2lvbihpLCBwX3N0YXJ0LCBwX2VuZCkJCQlcCi0JZm9yIChpID0gMFVM
LCBfX25leHRfcmVzZXJ2ZWRfbWVtX3JlZ2lvbigmaSwgcF9zdGFydCwgcF9lbmQpOwlcCi0JICAg
ICBpICE9ICh1NjQpVUxMT05HX01BWDsJCQkJCVwKLQkgICAgIF9fbmV4dF9yZXNlcnZlZF9tZW1f
cmVnaW9uKCZpLCBwX3N0YXJ0LCBwX2VuZCkpCisjZGVmaW5lIGZvcl9lYWNoX3Jlc2VydmVkX21l
bV9yYW5nZShpLCBwX3N0YXJ0LCBwX2VuZCkJCQlcCisJX19mb3JfZWFjaF9tZW1fcmFuZ2UoaSwg
Jm1lbWJsb2NrLnJlc2VydmVkLCBOVUxMLCBOVU1BX05PX05PREUsCVwKKwkJCSAgICAgTUVNQkxP
Q0tfTk9ORSwgcF9zdGFydCwgcF9lbmQsIE5VTEwpCiAKIHN0YXRpYyBpbmxpbmUgYm9vbCBtZW1i
bG9ja19pc19ob3RwbHVnZ2FibGUoc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqbSkKIHsKZGlmZiAt
LWdpdCBhL21tL21lbWJsb2NrLmMgYi9tbS9tZW1ibG9jay5jCmluZGV4IDQ4ZDYxNDM1MmIyNS4u
ZGFkZjU3OWY3YzUzIDEwMDY0NAotLS0gYS9tbS9tZW1ibG9jay5jCisrKyBiL21tL21lbWJsb2Nr
LmMKQEAgLTk0Niw0MiArOTQ2LDE2IEBAIGludCBfX2luaXRfbWVtYmxvY2sgbWVtYmxvY2tfY2xl
YXJfbm9tYXAocGh5c19hZGRyX3QgYmFzZSwgcGh5c19hZGRyX3Qgc2l6ZSkKIAlyZXR1cm4gbWVt
YmxvY2tfc2V0Y2xyX2ZsYWcoYmFzZSwgc2l6ZSwgMCwgTUVNQkxPQ0tfTk9NQVApOwogfQogCi0v
KioKLSAqIF9fbmV4dF9yZXNlcnZlZF9tZW1fcmVnaW9uIC0gbmV4dCBmdW5jdGlvbiBmb3IgZm9y
X2VhY2hfcmVzZXJ2ZWRfcmVnaW9uKCkKLSAqIEBpZHg6IHBvaW50ZXIgdG8gdTY0IGxvb3AgdmFy
aWFibGUKLSAqIEBvdXRfc3RhcnQ6IHB0ciB0byBwaHlzX2FkZHJfdCBmb3Igc3RhcnQgYWRkcmVz
cyBvZiB0aGUgcmVnaW9uLCBjYW4gYmUgJU5VTEwKLSAqIEBvdXRfZW5kOiBwdHIgdG8gcGh5c19h
ZGRyX3QgZm9yIGVuZCBhZGRyZXNzIG9mIHRoZSByZWdpb24sIGNhbiBiZSAlTlVMTAotICoKLSAq
IEl0ZXJhdGUgb3ZlciBhbGwgcmVzZXJ2ZWQgbWVtb3J5IHJlZ2lvbnMuCi0gKi8KLXZvaWQgX19p
bml0X21lbWJsb2NrIF9fbmV4dF9yZXNlcnZlZF9tZW1fcmVnaW9uKHU2NCAqaWR4LAotCQkJCQkg
ICBwaHlzX2FkZHJfdCAqb3V0X3N0YXJ0LAotCQkJCQkgICBwaHlzX2FkZHJfdCAqb3V0X2VuZCkK
LXsKLQlzdHJ1Y3QgbWVtYmxvY2tfdHlwZSAqdHlwZSA9ICZtZW1ibG9jay5yZXNlcnZlZDsKLQot
CWlmICgqaWR4IDwgdHlwZS0+Y250KSB7Ci0JCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnIgPSAm
dHlwZS0+cmVnaW9uc1sqaWR4XTsKLQkJcGh5c19hZGRyX3QgYmFzZSA9IHItPmJhc2U7Ci0JCXBo
eXNfYWRkcl90IHNpemUgPSByLT5zaXplOwotCi0JCWlmIChvdXRfc3RhcnQpCi0JCQkqb3V0X3N0
YXJ0ID0gYmFzZTsKLQkJaWYgKG91dF9lbmQpCi0JCQkqb3V0X2VuZCA9IGJhc2UgKyBzaXplIC0g
MTsKLQotCQkqaWR4ICs9IDE7Ci0JCXJldHVybjsKLQl9Ci0KLQkvKiBzaWduYWwgZW5kIG9mIGl0
ZXJhdGlvbiAqLwotCSppZHggPSBVTExPTkdfTUFYOwotfQotCi1zdGF0aWMgYm9vbCBzaG91bGRf
c2tpcF9yZWdpb24oc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqbSwgaW50IG5pZCwgaW50IGZsYWdz
KQorc3RhdGljIGJvb2wgX19pbml0X21lbWJsb2NrIHNob3VsZF9za2lwX3JlZ2lvbihzdHJ1Y3Qg
bWVtYmxvY2tfdHlwZSAqdHlwZSwKKwkJCQkJICAgICAgIHN0cnVjdCBtZW1ibG9ja19yZWdpb24g
Km0sCisJCQkJCSAgICAgICBpbnQgbmlkLCBpbnQgZmxhZ3MpCiB7CiAJaW50IG1fbmlkID0gbWVt
YmxvY2tfZ2V0X3JlZ2lvbl9ub2RlKG0pOwogCisJLyogd2UgbmV2ZXIgc2tpcCByZWdpb25zIHdo
ZW4gaXRlcmF0aW5nIG1lbWJsb2NrLnJlc2VydmVkICovCisJaWYgKHR5cGUgPT0gJm1lbWJsb2Nr
LnJlc2VydmVkKQorCQlyZXR1cm4gZmFsc2U7CisKIAkvKiBvbmx5IG1lbW9yeSByZWdpb25zIGFy
ZSBhc3NvY2lhdGVkIHdpdGggbm9kZXMsIGNoZWNrIGl0ICovCiAJaWYgKG5pZCAhPSBOVU1BX05P
X05PREUgJiYgbmlkICE9IG1fbmlkKQogCQlyZXR1cm4gdHJ1ZTsKQEAgLTEwNDgsNyArMTAyMiw3
IEBAIHZvaWQgX19pbml0X21lbWJsb2NrIF9fbmV4dF9tZW1fcmFuZ2UodTY0ICppZHgsIGludCBu
aWQsCiAJCXBoeXNfYWRkcl90IG1fZW5kID0gbS0+YmFzZSArIG0tPnNpemU7CiAJCWludAkgICAg
bV9uaWQgPSBtZW1ibG9ja19nZXRfcmVnaW9uX25vZGUobSk7CiAKLQkJaWYgKHNob3VsZF9za2lw
X3JlZ2lvbihtLCBuaWQsIGZsYWdzKSkKKwkJaWYgKHNob3VsZF9za2lwX3JlZ2lvbih0eXBlX2Es
IG0sIG5pZCwgZmxhZ3MpKQogCQkJY29udGludWU7CiAKIAkJaWYgKCF0eXBlX2IpIHsKQEAgLTEx
NTIsNyArMTEyNiw3IEBAIHZvaWQgX19pbml0X21lbWJsb2NrIF9fbmV4dF9tZW1fcmFuZ2VfcmV2
KHU2NCAqaWR4LCBpbnQgbmlkLAogCQlwaHlzX2FkZHJfdCBtX2VuZCA9IG0tPmJhc2UgKyBtLT5z
aXplOwogCQlpbnQgbV9uaWQgPSBtZW1ibG9ja19nZXRfcmVnaW9uX25vZGUobSk7CiAKLQkJaWYg
KHNob3VsZF9za2lwX3JlZ2lvbihtLCBuaWQsIGZsYWdzKSkKKwkJaWYgKHNob3VsZF9za2lwX3Jl
Z2lvbih0eXBlX2EsIG0sIG5pZCwgZmxhZ3MpKQogCQkJY29udGludWU7CiAKIAkJaWYgKCF0eXBl
X2IpIHsKQEAgLTE5NzcsNyArMTk1MSw3IEBAIHN0YXRpYyB1bnNpZ25lZCBsb25nIF9faW5pdCBm
cmVlX2xvd19tZW1vcnlfY29yZV9lYXJseSh2b2lkKQogCiAJbWVtYmxvY2tfY2xlYXJfaG90cGx1
ZygwLCAtMSk7CiAKLQlmb3JfZWFjaF9yZXNlcnZlZF9tZW1fcmVnaW9uKGksICZzdGFydCwgJmVu
ZCkKKwlmb3JfZWFjaF9yZXNlcnZlZF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKQogCQlyZXNl
cnZlX2Jvb3RtZW1fcmVnaW9uKHN0YXJ0LCBlbmQpOwogCiAJLyoKLS0gCjIuMjYuMgoKX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KT3BlblJJU0MgbWFpbGlu
ZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMub3JnCmh0dHBzOi8vbGlzdHMubGlicmVj
b3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJpc2MK
