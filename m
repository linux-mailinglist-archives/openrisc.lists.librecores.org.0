Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 966F616312A
	for <lists+openrisc@lfdr.de>; Tue, 18 Feb 2020 21:00:27 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 56A3420689;
	Tue, 18 Feb 2020 21:00:27 +0100 (CET)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 520D720971
 for <openrisc@lists.librecores.org>; Sun, 16 Feb 2020 09:19:34 +0100 (CET)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 8026A206E2;
 Sun, 16 Feb 2020 08:19:24 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1581841173;
 bh=F0cCXmb/o7liiZO71D4JlF7q0Z7SA6J4fHvegp69+aU=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=rBq9D5EOTNL2n6IOAtc3DNc+59sJmevw9INs0JmZ5qXchOxb1gBLusegKMjj1oy17
 It+LItcob4cVrN357xTNxEQBRoInKjUeEQCsAn9M8FpfjdWf/lA+t2gNE2u4uAoN3w
 fYO1ySaLyF9O8d0JM0UTuz62r+615NS1HD/ulQ0Y=
From: Mike Rapoport <rppt@kernel.org>
To: linux-kernel@vger.kernel.org
Date: Sun, 16 Feb 2020 10:18:34 +0200
Message-Id: <20200216081843.28670-5-rppt@kernel.org>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20200216081843.28670-1-rppt@kernel.org>
References: <20200216081843.28670-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Tue, 18 Feb 2020 21:00:15 +0100
Subject: [OpenRISC] [PATCH v2 04/13] ia64: add support for folded p4d page
 tables
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 Geert Uytterhoeven <geert+renesas@glider.be>, linux-sh@vger.kernel.org,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>, linux-mm@kvack.org,
 Paul Mackerras <paulus@samba.org>, linux-hexagon@vger.kernel.org,
 Will Deacon <will@kernel.org>, kvmarm@lists.cs.columbia.edu,
 Jonas Bonn <jonas@southpole.se>, linux-arch@vger.kernel.org,
 Brian Cain <bcain@codeaurora.org>, Marc Zyngier <maz@kernel.org>,
 Russell King <linux@armlinux.org.uk>, Ley Foon Tan <ley.foon.tan@intel.com>,
 Mike Rapoport <rppt@linux.ibm.com>, Catalin Marinas <catalin.marinas@arm.com>,
 Julien Thierry <julien.thierry.kdev@gmail.com>,
 uclinux-h8-devel@lists.sourceforge.jp, Fenghua Yu <fenghua.yu@intel.com>,
 Arnd Bergmann <arnd@arndb.de>, Suzuki K Poulose <suzuki.poulose@arm.com>,
 kvm-ppc@vger.kernel.org, openrisc@lists.librecores.org,
 Guan Xuetao <gxt@pku.edu.cn>, linux-arm-kernel@lists.infradead.org,
 Christophe Leroy <christophe.leroy@c-s.fr>, Tony Luck <tony.luck@intel.com>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, James Morse <james.morse@arm.com>,
 Michael Ellerman <mpe@ellerman.id.au>, nios2-dev@lists.rocketboards.org,
 Andrew Morton <akpm@linux-foundation.org>, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKSW1wbGVtZW50IHByaW1p
dGl2ZXMgbmVjZXNzYXJ5IGZvciB0aGUgNHRoIGxldmVsIGZvbGRpbmcsIGFkZCB3YWxrcyBvZiBw
NGQKbGV2ZWwgd2hlcmUgYXBwcm9wcmlhdGUsIHJlbW92ZSB1c2FnZSBvZiBfX0FSQ0hfVVNFXzVM
RVZFTF9IQUNLIGFuZCByZXBsYWNlCjVsZXZlbC1maXh1cC5oIHdpdGggcGd0YWJsZS1ub3A0ZC5o
CgpTaWduZWQtb2ZmLWJ5OiBNaWtlIFJhcG9wb3J0IDxycHB0QGxpbnV4LmlibS5jb20+Ci0tLQog
YXJjaC9pYTY0L2luY2x1ZGUvYXNtL3BnYWxsb2MuaCB8ICA0ICsrLS0KIGFyY2gvaWE2NC9pbmNs
dWRlL2FzbS9wZ3RhYmxlLmggfCAxNyArKysrKysrKy0tLS0tLS0tLQogYXJjaC9pYTY0L21tL2Zh
dWx0LmMgICAgICAgICAgICB8ICA3ICsrKysrKy0KIGFyY2gvaWE2NC9tbS9odWdldGxicGFnZS5j
ICAgICAgfCAxOCArKysrKysrKysrKystLS0tLS0KIGFyY2gvaWE2NC9tbS9pbml0LmMgICAgICAg
ICAgICAgfCAyOCArKysrKysrKysrKysrKysrKysrKysrKystLS0tCiA1IGZpbGVzIGNoYW5nZWQs
IDUyIGluc2VydGlvbnMoKyksIDIyIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2FyY2gvaWE2
NC9pbmNsdWRlL2FzbS9wZ2FsbG9jLmggYi9hcmNoL2lhNjQvaW5jbHVkZS9hc20vcGdhbGxvYy5o
CmluZGV4IGY0YzQ5MTA0NDg4Mi4uMmEzMDUwMzQ1MDk5IDEwMDY0NAotLS0gYS9hcmNoL2lhNjQv
aW5jbHVkZS9hc20vcGdhbGxvYy5oCisrKyBiL2FyY2gvaWE2NC9pbmNsdWRlL2FzbS9wZ2FsbG9j
LmgKQEAgLTM2LDkgKzM2LDkgQEAgc3RhdGljIGlubGluZSB2b2lkIHBnZF9mcmVlKHN0cnVjdCBt
bV9zdHJ1Y3QgKm1tLCBwZ2RfdCAqcGdkKQogCiAjaWYgQ09ORklHX1BHVEFCTEVfTEVWRUxTID09
IDQKIHN0YXRpYyBpbmxpbmUgdm9pZAotcGdkX3BvcHVsYXRlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1t
LCBwZ2RfdCAqIHBnZF9lbnRyeSwgcHVkX3QgKiBwdWQpCitwNGRfcG9wdWxhdGUoc3RydWN0IG1t
X3N0cnVjdCAqbW0sIHA0ZF90ICogcDRkX2VudHJ5LCBwdWRfdCAqIHB1ZCkKIHsKLQlwZ2RfdmFs
KCpwZ2RfZW50cnkpID0gX19wYShwdWQpOworCXA0ZF92YWwoKnA0ZF9lbnRyeSkgPSBfX3BhKHB1
ZCk7CiB9CiAKIHN0YXRpYyBpbmxpbmUgcHVkX3QgKnB1ZF9hbGxvY19vbmUoc3RydWN0IG1tX3N0
cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcikKZGlmZiAtLWdpdCBhL2FyY2gvaWE2NC9pbmNs
dWRlL2FzbS9wZ3RhYmxlLmggYi9hcmNoL2lhNjQvaW5jbHVkZS9hc20vcGd0YWJsZS5oCmluZGV4
IGQ2MDJlN2M2MjJkYi4uYzg3Zjc4OWJjOTE0IDEwMDY0NAotLS0gYS9hcmNoL2lhNjQvaW5jbHVk
ZS9hc20vcGd0YWJsZS5oCisrKyBiL2FyY2gvaWE2NC9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKQEAg
LTI4MywxMiArMjgzLDEyIEBAIGV4dGVybiB1bnNpZ25lZCBsb25nIFZNQUxMT0NfRU5EOwogI2Rl
ZmluZSBwdWRfcGFnZShwdWQpCQkJdmlydF90b19wYWdlKChwdWRfdmFsKHB1ZCkgKyBQQUdFX09G
RlNFVCkpCiAKICNpZiBDT05GSUdfUEdUQUJMRV9MRVZFTFMgPT0gNAotI2RlZmluZSBwZ2Rfbm9u
ZShwZ2QpCQkJKCFwZ2RfdmFsKHBnZCkpCi0jZGVmaW5lIHBnZF9iYWQocGdkKQkJCSghaWE2NF9w
aHlzX2FkZHJfdmFsaWQocGdkX3ZhbChwZ2QpKSkKLSNkZWZpbmUgcGdkX3ByZXNlbnQocGdkKQkJ
KHBnZF92YWwocGdkKSAhPSAwVUwpCi0jZGVmaW5lIHBnZF9jbGVhcihwZ2RwKQkJCShwZ2RfdmFs
KCoocGdkcCkpID0gMFVMKQotI2RlZmluZSBwZ2RfcGFnZV92YWRkcihwZ2QpCQkoKHVuc2lnbmVk
IGxvbmcpIF9fdmEocGdkX3ZhbChwZ2QpICYgX1BGTl9NQVNLKSkKLSNkZWZpbmUgcGdkX3BhZ2Uo
cGdkKQkJCXZpcnRfdG9fcGFnZSgocGdkX3ZhbChwZ2QpICsgUEFHRV9PRkZTRVQpKQorI2RlZmlu
ZSBwNGRfbm9uZShwNGQpCQkJKCFwNGRfdmFsKHA0ZCkpCisjZGVmaW5lIHA0ZF9iYWQocDRkKQkJ
CSghaWE2NF9waHlzX2FkZHJfdmFsaWQocDRkX3ZhbChwNGQpKSkKKyNkZWZpbmUgcDRkX3ByZXNl
bnQocDRkKQkJKHA0ZF92YWwocDRkKSAhPSAwVUwpCisjZGVmaW5lIHA0ZF9jbGVhcihwNGRwKQkJ
CShwNGRfdmFsKCoocDRkcCkpID0gMFVMKQorI2RlZmluZSBwNGRfcGFnZV92YWRkcihwNGQpCQko
KHVuc2lnbmVkIGxvbmcpIF9fdmEocDRkX3ZhbChwNGQpICYgX1BGTl9NQVNLKSkKKyNkZWZpbmUg
cDRkX3BhZ2UocDRkKQkJCXZpcnRfdG9fcGFnZSgocDRkX3ZhbChwNGQpICsgUEFHRV9PRkZTRVQp
KQogI2VuZGlmCiAKIC8qCkBAIC0zODgsNyArMzg4LDcgQEAgcGdkX29mZnNldCAoY29uc3Qgc3Ry
dWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcmVzcykKICNpZiBDT05GSUdfUEdU
QUJMRV9MRVZFTFMgPT0gNAogLyogRmluZCBhbiBlbnRyeSBpbiB0aGUgc2Vjb25kLWxldmVsIHBh
Z2UgdGFibGUuLiAqLwogI2RlZmluZSBwdWRfb2Zmc2V0KGRpcixhZGRyKSBcCi0JKChwdWRfdCAq
KSBwZ2RfcGFnZV92YWRkcigqKGRpcikpICsgKCgoYWRkcikgPj4gUFVEX1NISUZUKSAmIChQVFJT
X1BFUl9QVUQgLSAxKSkpCisJKChwdWRfdCAqKSBwNGRfcGFnZV92YWRkcigqKGRpcikpICsgKCgo
YWRkcikgPj4gUFVEX1NISUZUKSAmIChQVFJTX1BFUl9QVUQgLSAxKSkpCiAjZW5kaWYKIAogLyog
RmluZCBhbiBlbnRyeSBpbiB0aGUgdGhpcmQtbGV2ZWwgcGFnZSB0YWJsZS4uICovCkBAIC01ODIs
MTAgKzU4Miw5IEBAIGV4dGVybiBzdHJ1Y3QgcGFnZSAqemVyb19wYWdlX21lbW1hcF9wdHI7CiAK
IAogI2lmIENPTkZJR19QR1RBQkxFX0xFVkVMUyA9PSAzCi0jZGVmaW5lIF9fQVJDSF9VU0VfNUxF
VkVMX0hBQ0sKICNpbmNsdWRlIDxhc20tZ2VuZXJpYy9wZ3RhYmxlLW5vcHVkLmg+CiAjZW5kaWYK
LSNpbmNsdWRlIDxhc20tZ2VuZXJpYy81bGV2ZWwtZml4dXAuaD4KKyNpbmNsdWRlIDxhc20tZ2Vu
ZXJpYy9wZ3RhYmxlLW5vcDRkLmg+CiAjaW5jbHVkZSA8YXNtLWdlbmVyaWMvcGd0YWJsZS5oPgog
CiAjZW5kaWYgLyogX0FTTV9JQTY0X1BHVEFCTEVfSCAqLwpkaWZmIC0tZ2l0IGEvYXJjaC9pYTY0
L21tL2ZhdWx0LmMgYi9hcmNoL2lhNjQvbW0vZmF1bHQuYwppbmRleCBjMmYyOTlmZTllMDQuLmVj
OTk0MTM1Y2I3NCAxMDA2NDQKLS0tIGEvYXJjaC9pYTY0L21tL2ZhdWx0LmMKKysrIGIvYXJjaC9p
YTY0L21tL2ZhdWx0LmMKQEAgLTI5LDYgKzI5LDcgQEAgc3RhdGljIGludAogbWFwcGVkX2tlcm5l
bF9wYWdlX2lzX3ByZXNlbnQgKHVuc2lnbmVkIGxvbmcgYWRkcmVzcykKIHsKIAlwZ2RfdCAqcGdk
OworCXA0ZF90ICpwNGQ7CiAJcHVkX3QgKnB1ZDsKIAlwbWRfdCAqcG1kOwogCXB0ZV90ICpwdGVw
LCBwdGU7CkBAIC0zNyw3ICszOCwxMSBAQCBtYXBwZWRfa2VybmVsX3BhZ2VfaXNfcHJlc2VudCAo
dW5zaWduZWQgbG9uZyBhZGRyZXNzKQogCWlmIChwZ2Rfbm9uZSgqcGdkKSB8fCBwZ2RfYmFkKCpw
Z2QpKQogCQlyZXR1cm4gMDsKIAotCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBhZGRyZXNzKTsKKwlw
NGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcmVzcyk7CisJaWYgKHA0ZF9ub25lKCpwNGQpIHx8IHA0
ZF9iYWQoKnA0ZCkpCisJCXJldHVybiAwOworCisJcHVkID0gcHVkX29mZnNldChwNGQsIGFkZHJl
c3MpOwogCWlmIChwdWRfbm9uZSgqcHVkKSB8fCBwdWRfYmFkKCpwdWQpKQogCQlyZXR1cm4gMDsK
IApkaWZmIC0tZ2l0IGEvYXJjaC9pYTY0L21tL2h1Z2V0bGJwYWdlLmMgYi9hcmNoL2lhNjQvbW0v
aHVnZXRsYnBhZ2UuYwppbmRleCBkMTZlNDE5ZmQ3MTIuLjMyMzUyYTczZGYwYyAxMDA2NDQKLS0t
IGEvYXJjaC9pYTY0L21tL2h1Z2V0bGJwYWdlLmMKKysrIGIvYXJjaC9pYTY0L21tL2h1Z2V0bGJw
YWdlLmMKQEAgLTMwLDEyICszMCwxNCBAQCBodWdlX3B0ZV9hbGxvYyhzdHJ1Y3QgbW1fc3RydWN0
ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIHN6KQogewogCXVuc2lnbmVk
IGxvbmcgdGFkZHIgPSBodGxicGFnZV90b19wYWdlKGFkZHIpOwogCXBnZF90ICpwZ2Q7CisJcDRk
X3QgKnA0ZDsKIAlwdWRfdCAqcHVkOwogCXBtZF90ICpwbWQ7CiAJcHRlX3QgKnB0ZSA9IE5VTEw7
CiAKIAlwZ2QgPSBwZ2Rfb2Zmc2V0KG1tLCB0YWRkcik7Ci0JcHVkID0gcHVkX2FsbG9jKG1tLCBw
Z2QsIHRhZGRyKTsKKwlwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgdGFkZHIpOworCXB1ZCA9IHB1ZF9h
bGxvYyhtbSwgcDRkLCB0YWRkcik7CiAJaWYgKHB1ZCkgewogCQlwbWQgPSBwbWRfYWxsb2MobW0s
IHB1ZCwgdGFkZHIpOwogCQlpZiAocG1kKQpAQCAtNDksMTcgKzUxLDIxIEBAIGh1Z2VfcHRlX29m
ZnNldCAoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQg
bG9uZyBzeikKIHsKIAl1bnNpZ25lZCBsb25nIHRhZGRyID0gaHRsYnBhZ2VfdG9fcGFnZShhZGRy
KTsKIAlwZ2RfdCAqcGdkOworCXA0ZF90ICpwNGQ7CiAJcHVkX3QgKnB1ZDsKIAlwbWRfdCAqcG1k
OwogCXB0ZV90ICpwdGUgPSBOVUxMOwogCiAJcGdkID0gcGdkX29mZnNldChtbSwgdGFkZHIpOwog
CWlmIChwZ2RfcHJlc2VudCgqcGdkKSkgewotCQlwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgdGFkZHIp
OwotCQlpZiAocHVkX3ByZXNlbnQoKnB1ZCkpIHsKLQkJCXBtZCA9IHBtZF9vZmZzZXQocHVkLCB0
YWRkcik7Ci0JCQlpZiAocG1kX3ByZXNlbnQoKnBtZCkpCi0JCQkJcHRlID0gcHRlX29mZnNldF9t
YXAocG1kLCB0YWRkcik7CisJCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwkJaWYgKHA0
ZF9wcmVzZW50KCpwNGQpKSB7CisJCQlwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgdGFkZHIpOworCQkJ
aWYgKHB1ZF9wcmVzZW50KCpwdWQpKSB7CisJCQkJcG1kID0gcG1kX29mZnNldChwdWQsIHRhZGRy
KTsKKwkJCQlpZiAocG1kX3ByZXNlbnQoKnBtZCkpCisJCQkJCXB0ZSA9IHB0ZV9vZmZzZXRfbWFw
KHBtZCwgdGFkZHIpOworCQkJfQogCQl9CiAJfQogCmRpZmYgLS1naXQgYS9hcmNoL2lhNjQvbW0v
aW5pdC5jIGIvYXJjaC9pYTY0L21tL2luaXQuYwppbmRleCBiMDFkNjhhMmQ1ZDkuLjQ4MDhmNTgy
MjBhYyAxMDA2NDQKLS0tIGEvYXJjaC9pYTY0L21tL2luaXQuYworKysgYi9hcmNoL2lhNjQvbW0v
aW5pdC5jCkBAIC0yMDgsNiArMjA4LDcgQEAgc3RhdGljIHN0cnVjdCBwYWdlICogX19pbml0CiBw
dXRfa2VybmVsX3BhZ2UgKHN0cnVjdCBwYWdlICpwYWdlLCB1bnNpZ25lZCBsb25nIGFkZHJlc3Ms
IHBncHJvdF90IHBncHJvdCkKIHsKIAlwZ2RfdCAqcGdkOworCXA0ZF90ICpwNGQ7CiAJcHVkX3Qg
KnB1ZDsKIAlwbWRfdCAqcG1kOwogCXB0ZV90ICpwdGU7CkBAIC0yMTUsNyArMjE2LDEwIEBAIHB1
dF9rZXJuZWxfcGFnZSAoc3RydWN0IHBhZ2UgKnBhZ2UsIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywg
cGdwcm90X3QgcGdwcm90KQogCXBnZCA9IHBnZF9vZmZzZXRfayhhZGRyZXNzKTsJCS8qIG5vdGU6
IHRoaXMgaXMgTk9UIHBnZF9vZmZzZXQoKSEgKi8KIAogCXsKLQkJcHVkID0gcHVkX2FsbG9jKCZp
bml0X21tLCBwZ2QsIGFkZHJlc3MpOworCQlwNGQgPSBwNGRfYWxsb2MoJmluaXRfbW0sIHBnZCwg
YWRkcmVzcyk7CisJCWlmICghcDRkKQorCQkJZ290byBvdXQ7CisJCXB1ZCA9IHB1ZF9hbGxvYygm
aW5pdF9tbSwgcDRkLCBhZGRyZXNzKTsKIAkJaWYgKCFwdWQpCiAJCQlnb3RvIG91dDsKIAkJcG1k
ID0gcG1kX2FsbG9jKCZpbml0X21tLCBwdWQsIGFkZHJlc3MpOwpAQCAtMzgyLDYgKzM4Niw3IEBA
IGludCB2bWVtbWFwX2ZpbmRfbmV4dF92YWxpZF9wZm4oaW50IG5vZGUsIGludCBpKQogCiAJZG8g
ewogCQlwZ2RfdCAqcGdkOworCQlwNGRfdCAqcDRkOwogCQlwdWRfdCAqcHVkOwogCQlwbWRfdCAq
cG1kOwogCQlwdGVfdCAqcHRlOwpAQCAtMzkyLDcgKzM5NywxMyBAQCBpbnQgdm1lbW1hcF9maW5k
X25leHRfdmFsaWRfcGZuKGludCBub2RlLCBpbnQgaSkKIAkJCWNvbnRpbnVlOwogCQl9CiAKLQkJ
cHVkID0gcHVkX29mZnNldChwZ2QsIGVuZF9hZGRyZXNzKTsKKwkJcDRkID0gcDRkX29mZnNldChw
Z2QsIGVuZF9hZGRyZXNzKTsKKwkJaWYgKHA0ZF9ub25lKCpwNGQpKSB7CisJCQllbmRfYWRkcmVz
cyArPSBQNERfU0laRTsKKwkJCWNvbnRpbnVlOworCQl9CisKKwkJcHVkID0gcHVkX29mZnNldChw
NGQsIGVuZF9hZGRyZXNzKTsKIAkJaWYgKHB1ZF9ub25lKCpwdWQpKSB7CiAJCQllbmRfYWRkcmVz
cyArPSBQVURfU0laRTsKIAkJCWNvbnRpbnVlOwpAQCAtNDMwLDYgKzQ0MSw3IEBAIGludCBfX2lu
aXQgY3JlYXRlX21lbV9tYXBfcGFnZV90YWJsZSh1NjQgc3RhcnQsIHU2NCBlbmQsIHZvaWQgKmFy
ZykKIAlzdHJ1Y3QgcGFnZSAqbWFwX3N0YXJ0LCAqbWFwX2VuZDsKIAlpbnQgbm9kZTsKIAlwZ2Rf
dCAqcGdkOworCXA0ZF90ICpwNGQ7CiAJcHVkX3QgKnB1ZDsKIAlwbWRfdCAqcG1kOwogCXB0ZV90
ICpwdGU7CkBAIC00NDQsMTIgKzQ1NiwyMCBAQCBpbnQgX19pbml0IGNyZWF0ZV9tZW1fbWFwX3Bh
Z2VfdGFibGUodTY0IHN0YXJ0LCB1NjQgZW5kLCB2b2lkICphcmcpCiAJZm9yIChhZGRyZXNzID0g
c3RhcnRfcGFnZTsgYWRkcmVzcyA8IGVuZF9wYWdlOyBhZGRyZXNzICs9IFBBR0VfU0laRSkgewog
CQlwZ2QgPSBwZ2Rfb2Zmc2V0X2soYWRkcmVzcyk7CiAJCWlmIChwZ2Rfbm9uZSgqcGdkKSkgewor
CQkJcDRkID0gbWVtYmxvY2tfYWxsb2Nfbm9kZShQQUdFX1NJWkUsIFBBR0VfU0laRSwgbm9kZSk7
CisJCQlpZiAoIXA0ZCkKKwkJCQlnb3RvIGVycl9hbGxvYzsKKwkJCXBnZF9wb3B1bGF0ZSgmaW5p
dF9tbSwgcGdkLCBwNGQpOworCQl9CisJCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyZXNzKTsK
KworCQlpZiAocDRkX25vbmUoKnA0ZCkpIHsKIAkJCXB1ZCA9IG1lbWJsb2NrX2FsbG9jX25vZGUo
UEFHRV9TSVpFLCBQQUdFX1NJWkUsIG5vZGUpOwogCQkJaWYgKCFwdWQpCiAJCQkJZ290byBlcnJf
YWxsb2M7Ci0JCQlwZ2RfcG9wdWxhdGUoJmluaXRfbW0sIHBnZCwgcHVkKTsKKwkJCXA0ZF9wb3B1
bGF0ZSgmaW5pdF9tbSwgcDRkLCBwdWQpOwogCQl9Ci0JCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBh
ZGRyZXNzKTsKKwkJcHVkID0gcHVkX29mZnNldChwNGQsIGFkZHJlc3MpOwogCiAJCWlmIChwdWRf
bm9uZSgqcHVkKSkgewogCQkJcG1kID0gbWVtYmxvY2tfYWxsb2Nfbm9kZShQQUdFX1NJWkUsIFBB
R0VfU0laRSwgbm9kZSk7Ci0tIAoyLjI0LjAKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcgbGlzdApPcGVuUklTQ0BsaXN0cy5s
aWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29yZXMub3JnL2xpc3RpbmZvL29wZW5y
aXNjCg==
