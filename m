Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id B83021E5030
	for <lists+openrisc@lfdr.de>; Wed, 27 May 2020 23:19:23 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 60BDD20BF5;
	Wed, 27 May 2020 23:19:23 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 42E3A20ABD
 for <openrisc@lists.librecores.org>; Thu, 14 May 2020 19:05:48 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 1DDC620727;
 Thu, 14 May 2020 17:05:32 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1589475947;
 bh=3LW49w1l0p01gsnm3LP0+1vRXAKhhSAd1ng4BpgT36Y=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=qYuGnVPkVuV2n3YizeLTxgOb+WilQf4vxkvJXoDv+L20oj+p7oG1ART+UCxdNzcL1
 sEP8XuRV2h2BrzIE6GUQjuGJivosS7mjKA/VBSo4E4vcSu+OaokPtoyZYL82D5yW4v
 YobAQ+IEnDWWTbu4B7gYV+2hk20w4324/WhN9y7U=
From: Mike Rapoport <rppt@kernel.org>
To: linux-kernel@vger.kernel.org
Date: Thu, 14 May 2020 20:03:23 +0300
Message-Id: <20200514170327.31389-9-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200514170327.31389-1-rppt@kernel.org>
References: <20200514170327.31389-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Wed, 27 May 2020 23:18:58 +0200
Subject: [OpenRISC] [PATCH v2 08/12] mm: pgtable: add shortcuts for
 accessing kernel PMD and PTE
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 linux-sh@vger.kernel.org, Catalin Marinas <catalin.marinas@arm.com>,
 Heiko Carstens <heiko.carstens@de.ibm.com>, Max Filippov <jcmvbkbc@gmail.com>,
 Guo Ren <guoren@kernel.org>, Matthew Wilcox <willy@infradead.org>,
 sparclinux@vger.kernel.org, linux-hexagon@vger.kernel.org,
 linux-riscv@lists.infradead.org, Vincent Chen <deanbo422@gmail.com>,
 Will Deacon <will@kernel.org>, Greg Ungerer <gerg@linux-m68k.org>,
 linux-arch@vger.kernel.org, linux-s390@vger.kernel.org,
 linux-c6x-dev@linux-c6x.org, Brian Cain <bcain@codeaurora.org>,
 Michael Ellerman <mpe@ellerman.id.au>, Helge Deller <deller@gmx.de>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Ley Foon Tan <ley.foon.tan@intel.com>, Mike Rapoport <rppt@linux.ibm.com>,
 Ingo Molnar <mingo@redhat.com>, linux-parisc@vger.kernel.org,
 Mark Salter <msalter@redhat.com>, Matt Turner <mattst88@gmail.com>,
 linux-snps-arc@lists.infradead.org, linux-xtensa@linux-xtensa.org,
 Arnd Bergmann <arnd@arndb.de>, linux-alpha@vger.kernel.org,
 linux-um@lists.infradead.org, linux-m68k@lists.linux-m68k.org,
 Tony Luck <tony.luck@intel.com>, Borislav Petkov <bp@alien8.de>,
 Greentime Hu <green.hu@gmail.com>, Paul Walmsley <paul.walmsley@sifive.com>,
 linux-csky@vger.kernel.org, Guan Xuetao <gxt@pku.edu.cn>,
 linux-arm-kernel@lists.infradead.org, Chris Zankel <chris@zankel.net>,
 Michal Simek <monstr@monstr.eu>,
 Thomas Bogendoerfer <tsbogend@alpha.franken.de>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, Nick Hu <nickhu@andestech.com>,
 linux-mm@kvack.org, Vineet Gupta <vgupta@synopsys.com>,
 linux-mips@vger.kernel.org, openrisc@lists.librecores.org,
 Thomas Gleixner <tglx@linutronix.de>, Richard Weinberger <richard@nod.at>,
 Andrew Morton <akpm@linux-foundation.org>, linuxppc-dev@lists.ozlabs.org,
 "David S. Miller" <davem@davemloft.net>, Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlIHBvd2VycGMgMzIt
Yml0IGltcGxlbWVudGF0aW9uIG9mIHBndGFibGUgaGFzIG5pY2Ugc2hvcnRjdXRzIGZvcgphY2Nl
c3Npbmcga2VybmVsIFBNRCBhbmQgUFRFIGZvciBhIGdpdmVuIHZpcnR1YWwgYWRkcmVzcy4KTWFr
ZSB0aGlzIGhlbHBlcnMgYXZhaWxhYmxlIGZvciBhbGwgYXJjaGl0ZWN0dXJlcy4KClNpZ25lZC1v
ZmYtYnk6IE1pa2UgUmFwb3BvcnQgPHJwcHRAbGludXguaWJtLmNvbT4KLS0tCiBhcmNoL2FyYy9t
bS9oaWdobWVtLmMgICAgICAgICAgICAgICAgIHwgMTAgKy0tLS0tLS0KIGFyY2gvYXJtL21hY2gt
c2ExMTAwL2Fzc2FiZXQuYyAgICAgICAgfCAgMiArLQogYXJjaC9hcm0vbW0vaGlnaG1lbS5jICAg
ICAgICAgICAgICAgICB8ICA0ICsrLS0KIGFyY2gvYXJtL21tL2lvcmVtYXAuYyAgICAgICAgICAg
ICAgICAgfCAzMSArKysrLS0tLS0tLS0tLS0tLS0tLS0tLS0KIGFyY2gvYXJtL21tL21tLmggICAg
ICAgICAgICAgICAgICAgICAgfCAgNSAtLS0tCiBhcmNoL2FybS9tbS9tbXUuYyAgICAgICAgICAg
ICAgICAgICAgIHwgIDcgKy0tLS0tCiBhcmNoL2hleGFnb24vaW5jbHVkZS9hc20vZml4bWFwLmgg
ICAgIHwgIDQgLS0tLQogYXJjaC9tNjhrL21tL21vdG9yb2xhLmMgICAgICAgICAgICAgICB8IDI2
ICsrKystLS0tLS0tLS0tLS0tLS0tCiBhcmNoL21pY3JvYmxhemUva2VybmVsL3NpZ25hbC5jICAg
ICAgIHwgIDggKy0tLS0tLQogYXJjaC9taWNyb2JsYXplL21tL2luaXQuYyAgICAgICAgICAgICB8
ICA5IC0tLS0tLS0KIGFyY2gvbWlwcy9pbmNsdWRlL2FzbS9maXhtYXAuaCAgICAgICAgfCAgMyAt
LS0KIGFyY2gvbWlwcy9tbS9jLXIzay5jICAgICAgICAgICAgICAgICAgfCAxMCArKy0tLS0tLQog
YXJjaC9taXBzL21tL2MtcjRrLmMgICAgICAgICAgICAgICAgICB8IDEwICsrLS0tLS0tCiBhcmNo
L21pcHMvbW0vYy10eDM5LmMgICAgICAgICAgICAgICAgIHwgMTAgKystLS0tLS0KIGFyY2gvbWlw
cy9tbS9oaWdobWVtLmMgICAgICAgICAgICAgICAgfCAgMiArLQogYXJjaC9uZHMzMi9pbmNsdWRl
L2FzbS9wZ3RhYmxlLmggICAgICB8ICAyIC0tCiBhcmNoL25kczMyL21tL2luaXQuYyAgICAgICAg
ICAgICAgICAgIHwgMTMgKystLS0tLS0tLQogYXJjaC9uZHMzMi9tbS9wcm9jLmMgICAgICAgICAg
ICAgICAgICB8ICA2ICstLS0tCiBhcmNoL3BhcmlzYy9tbS9maXhtYXAuYyAgICAgICAgICAgICAg
IHwgIDYgKy0tLS0KIGFyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggICAgfCAxOSAt
LS0tLS0tLS0tLS0tLS0KIGFyY2gvcG93ZXJwYy9tbS9ib29rM3MzMi9tbXUuYyAgICAgICAgfCAg
MiArLQogYXJjaC9wb3dlcnBjL21tL2Jvb2szczMyL3RsYi5jICAgICAgICB8ICA0ICsrLS0KIGFy
Y2gvcG93ZXJwYy9tbS9rYXNhbi9rYXNhbl9pbml0XzMyLmMgfCAgOCArKystLS0tCiBhcmNoL3Bv
d2VycGMvbW0vbm9oYXNoLzQweC5jICAgICAgICAgIHwgIDQgKystLQogYXJjaC9wb3dlcnBjL21t
L3BndGFibGVfMzIuYyAgICAgICAgICB8ICAyICstCiBhcmNoL3MzOTAvbW0vcGFnZWF0dHIuYyAg
ICAgICAgICAgICAgIHwgMTAgKy0tLS0tLS0KIGFyY2gvc2gvbW0vY2FjaGUtc2g0LmMgICAgICAg
ICAgICAgICAgfCAgOCArLS0tLS0tCiBhcmNoL3NoL21tL2ttYXAuYyAgICAgICAgICAgICAgICAg
ICAgIHwgIDUgKy0tLQogYXJjaC9zcGFyYy9tbS9oaWdobWVtLmMgICAgICAgICAgICAgICB8IDEy
ICsrLS0tLS0tLS0KIGFyY2gvc3BhcmMvbW0vaW5pdF82NC5jICAgICAgICAgICAgICAgfCAgNiAr
LS0tLQogYXJjaC9zcGFyYy9tbS9pby11bml0LmMgICAgICAgICAgICAgICB8IDEwICsrLS0tLS0t
CiBhcmNoL3NwYXJjL21tL2lvbW11LmMgICAgICAgICAgICAgICAgIHwgIDggKy0tLS0tLQogYXJj
aC9zcGFyYy9tbS9zcm1tdS5jICAgICAgICAgICAgICAgICB8IDM0ICsrKy0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLQogYXJjaC91bS9rZXJuZWwvbWVtLmMgICAgICAgICAgICAgICAgICB8IDEwICst
LS0tLS0tCiBhcmNoL3VtL2tlcm5lbC90cmFwLmMgICAgICAgICAgICAgICAgIHwgIDggKy0tLS0t
LQogYXJjaC91bmljb3JlMzIvbW0vbW0uaCAgICAgICAgICAgICAgICB8IDEwIC0tLS0tLS0tCiBh
cmNoL3g4Ni9tbS9pbml0XzMyLmMgICAgICAgICAgICAgICAgIHwgMjYgKysrLS0tLS0tLS0tLS0t
LS0tLS0KIGFyY2gveHRlbnNhL2luY2x1ZGUvYXNtL2ZpeG1hcC5oICAgICAgfCAgOCAtLS0tLS0t
CiBhcmNoL3h0ZW5zYS9tbS9oaWdobWVtLmMgICAgICAgICAgICAgIHwgIDIgKy0KIGFyY2gveHRl
bnNhL21tL2thc2FuX2luaXQuYyAgICAgICAgICAgfCAxMCArKy0tLS0tLQogYXJjaC94dGVuc2Ev
bW0vbW11LmMgICAgICAgICAgICAgICAgICB8ICA1ICstLS0KIGluY2x1ZGUvbGludXgvcGd0YWJs
ZS5oICAgICAgICAgICAgICAgfCAyNCArKysrKysrKysrKysrKysrKysrCiA0MiBmaWxlcyBjaGFu
Z2VkLCA4MCBpbnNlcnRpb25zKCspLCAzMjMgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvYXJj
aC9hcmMvbW0vaGlnaG1lbS5jIGIvYXJjaC9hcmMvbW0vaGlnaG1lbS5jCmluZGV4IGQ2Yjc0ODgz
ZmQxZi4uMWI5ZjQ3M2M2MzY5IDEwMDY0NAotLS0gYS9hcmNoL2FyYy9tbS9oaWdobWVtLmMKKysr
IGIvYXJjaC9hcmMvbW0vaGlnaG1lbS5jCkBAIC05MiwxNyArOTIsOSBAQCBFWFBPUlRfU1lNQk9M
KGt1bm1hcF9hdG9taWNfaGlnaCk7CiAKIHN0YXRpYyBub2lubGluZSBwdGVfdCAqIF9faW5pdCBh
bGxvY19rbWFwX3BndGFibGUodW5zaWduZWQgbG9uZyBrdmFkZHIpCiB7Ci0JcGdkX3QgKnBnZF9r
OwotCXA0ZF90ICpwNGRfazsKLQlwdWRfdCAqcHVkX2s7Ci0JcG1kX3QgKnBtZF9rOworCXBtZF90
ICpwbWRfayA9IHBtZF9vZmZfayhrdmFkZHIpOwogCXB0ZV90ICpwdGVfazsKIAotCXBnZF9rID0g
cGdkX29mZnNldF9rKGt2YWRkcik7Ci0JcDRkX2sgPSBwNGRfb2Zmc2V0KHBnZF9rLCBrdmFkZHIp
OwotCXB1ZF9rID0gcHVkX29mZnNldChwNGRfaywga3ZhZGRyKTsKLQlwbWRfayA9IHBtZF9vZmZz
ZXQocHVkX2ssIGt2YWRkcik7Ci0KIAlwdGVfayA9IChwdGVfdCAqKW1lbWJsb2NrX2FsbG9jX2xv
dyhQQUdFX1NJWkUsIFBBR0VfU0laRSk7CiAJaWYgKCFwdGVfaykKIAkJcGFuaWMoIiVzOiBGYWls
ZWQgdG8gYWxsb2NhdGUgJWx1IGJ5dGVzIGFsaWduPTB4JWx4XG4iLApkaWZmIC0tZ2l0IGEvYXJj
aC9hcm0vbWFjaC1zYTExMDAvYXNzYWJldC5jIGIvYXJjaC9hcm0vbWFjaC1zYTExMDAvYXNzYWJl
dC5jCmluZGV4IDhlM2Y1ZmRiNDg4My4uYWEyNjVlZGU1NzMwIDEwMDY0NAotLS0gYS9hcmNoL2Fy
bS9tYWNoLXNhMTEwMC9hc3NhYmV0LmMKKysrIGIvYXJjaC9hcm0vbWFjaC1zYTExMDAvYXNzYWJl
dC5jCkBAIC02MzIsNyArNjMyLDcgQEAgc3RhdGljIHZvaWQgX19pbml0IG1hcF9zYTExMDBfZ3Bp
b19yZWdzKCB2b2lkICkKIAlpbnQgcHJvdCA9IFBNRF9UWVBFX1NFQ1QgfCBQTURfU0VDVF9BUF9X
UklURSB8IFBNRF9ET01BSU4oRE9NQUlOX0lPKTsKIAlwbWRfdCAqcG1kOwogCi0JcG1kID0gcG1k
X29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKHZpcnQpLCB2aXJ0KSwg
dmlydCksIHZpcnQpOworCXBtZCA9IHBtZF9vZmZfayh2aXJ0KTsKIAkqcG1kID0gX19wbWQocGh5
cyB8IHByb3QpOwogCWZsdXNoX3BtZF9lbnRyeShwbWQpOwogfQpkaWZmIC0tZ2l0IGEvYXJjaC9h
cm0vbW0vaGlnaG1lbS5jIGIvYXJjaC9hcm0vbW0vaGlnaG1lbS5jCmluZGV4IGUwMTNmNmI4MTMy
OC4uMTg3ZmFiMjI3YjUwIDEwMDY0NAotLS0gYS9hcmNoL2FybS9tbS9oaWdobWVtLmMKKysrIGIv
YXJjaC9hcm0vbW0vaGlnaG1lbS5jCkBAIC0xOCw3ICsxOCw3IEBACiBzdGF0aWMgaW5saW5lIHZv
aWQgc2V0X2ZpeG1hcF9wdGUoaW50IGlkeCwgcHRlX3QgcHRlKQogewogCXVuc2lnbmVkIGxvbmcg
dmFkZHIgPSBfX2ZpeF90b192aXJ0KGlkeCk7Ci0JcHRlX3QgKnB0ZXAgPSBwdGVfb2Zmc2V0X2tl
cm5lbChwbWRfb2ZmX2sodmFkZHIpLCB2YWRkcik7CisJcHRlX3QgKnB0ZXAgPSB2aXJ0X3RvX2tw
dGUodmFkZHIpOwogCiAJc2V0X3B0ZV9leHQocHRlcCwgcHRlLCAwKTsKIAlsb2NhbF9mbHVzaF90
bGJfa2VybmVsX3BhZ2UodmFkZHIpOwpAQCAtMjYsNyArMjYsNyBAQCBzdGF0aWMgaW5saW5lIHZv
aWQgc2V0X2ZpeG1hcF9wdGUoaW50IGlkeCwgcHRlX3QgcHRlKQogCiBzdGF0aWMgaW5saW5lIHB0
ZV90IGdldF9maXhtYXBfcHRlKHVuc2lnbmVkIGxvbmcgdmFkZHIpCiB7Ci0JcHRlX3QgKnB0ZXAg
PSBwdGVfb2Zmc2V0X2tlcm5lbChwbWRfb2ZmX2sodmFkZHIpLCB2YWRkcik7CisJcHRlX3QgKnB0
ZXAgPSB2aXJ0X3RvX2twdGUodmFkZHIpOwogCiAJcmV0dXJuICpwdGVwOwogfQpkaWZmIC0tZ2l0
IGEvYXJjaC9hcm0vbW0vaW9yZW1hcC5jIGIvYXJjaC9hcm0vbW0vaW9yZW1hcC5jCmluZGV4IDc1
NTI5ZDc2ZDI4Yy4uMDAwZTgyMTAwMDBiIDEwMDY0NAotLS0gYS9hcmNoL2FybS9tbS9pb3JlbWFw
LmMKKysrIGIvYXJjaC9hcm0vbW0vaW9yZW1hcC5jCkBAIC0xNDEsMTYgKzE0MSw4IEBAIHZvaWQg
X19jaGVja192bWFsbG9jX3NlcShzdHJ1Y3QgbW1fc3RydWN0ICptbSkKIHN0YXRpYyB2b2lkIHVu
bWFwX2FyZWFfc2VjdGlvbnModW5zaWduZWQgbG9uZyB2aXJ0LCB1bnNpZ25lZCBsb25nIHNpemUp
CiB7CiAJdW5zaWduZWQgbG9uZyBhZGRyID0gdmlydCwgZW5kID0gdmlydCArIChzaXplICYgfihT
Wl8xTSAtIDEpKTsKLQlwZ2RfdCAqcGdkOwotCXA0ZF90ICpwNGQ7Ci0JcHVkX3QgKnB1ZDsKLQlw
bWRfdCAqcG1kcDsKLQotCWZsdXNoX2NhY2hlX3Z1bm1hcChhZGRyLCBlbmQpOwotCXBnZCA9IHBn
ZF9vZmZzZXRfayhhZGRyKTsKLQlwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcik7Ci0JcHVkID0g
cHVkX29mZnNldChwNGQsIGFkZHIpOwotCXBtZHAgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRkcik7CisJ
cG1kX3QgKnBtZHAgPSBwbWRfb2ZmX2soYWRkcik7CisKIAlkbyB7CiAJCXBtZF90IHBtZCA9ICpw
bWRwOwogCkBAIC0xOTEsMTAgKzE4Myw3IEBAIHJlbWFwX2FyZWFfc2VjdGlvbnModW5zaWduZWQg
bG9uZyB2aXJ0LCB1bnNpZ25lZCBsb25nIHBmbiwKIAkJICAgIHNpemVfdCBzaXplLCBjb25zdCBz
dHJ1Y3QgbWVtX3R5cGUgKnR5cGUpCiB7CiAJdW5zaWduZWQgbG9uZyBhZGRyID0gdmlydCwgZW5k
ID0gdmlydCArIHNpemU7Ci0JcGdkX3QgKnBnZDsKLQlwNGRfdCAqcDRkOwotCXB1ZF90ICpwdWQ7
Ci0JcG1kX3QgKnBtZDsKKwlwbWRfdCAqcG1kID0gcG1kX29mZl9rKGFkZHIpOwogCiAJLyoKIAkg
KiBSZW1vdmUgYW5kIGZyZWUgYW55IFBURS1iYXNlZCBtYXBwaW5nLCBhbmQKQEAgLTIwMiwxMCAr
MTkxLDYgQEAgcmVtYXBfYXJlYV9zZWN0aW9ucyh1bnNpZ25lZCBsb25nIHZpcnQsIHVuc2lnbmVk
IGxvbmcgcGZuLAogCSAqLwogCXVubWFwX2FyZWFfc2VjdGlvbnModmlydCwgc2l6ZSk7CiAKLQlw
Z2QgPSBwZ2Rfb2Zmc2V0X2soYWRkcik7Ci0JcDRkID0gcDRkX29mZnNldChwZ2QsIGFkZHIpOwot
CXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyKTsKLQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRk
cik7CiAJZG8gewogCQlwbWRbMF0gPSBfX3BtZChfX3Bmbl90b19waHlzKHBmbikgfCB0eXBlLT5w
cm90X3NlY3QpOwogCQlwZm4gKz0gU1pfMU0gPj4gUEFHRV9TSElGVDsKQEAgLTIyNSwyMSArMjEw
LDEzIEBAIHJlbWFwX2FyZWFfc3VwZXJzZWN0aW9ucyh1bnNpZ25lZCBsb25nIHZpcnQsIHVuc2ln
bmVkIGxvbmcgcGZuLAogCQkJIHNpemVfdCBzaXplLCBjb25zdCBzdHJ1Y3QgbWVtX3R5cGUgKnR5
cGUpCiB7CiAJdW5zaWduZWQgbG9uZyBhZGRyID0gdmlydCwgZW5kID0gdmlydCArIHNpemU7Ci0J
cGdkX3QgKnBnZDsKLQlwNGRfdCAqcDRkOwotCXB1ZF90ICpwdWQ7Ci0JcG1kX3QgKnBtZDsKKwlw
bWRfdCAqcG1kID0gcG1kX29mZl9rKGFkZHIpOwogCiAJLyoKIAkgKiBSZW1vdmUgYW5kIGZyZWUg
YW55IFBURS1iYXNlZCBtYXBwaW5nLCBhbmQKIAkgKiBzeW5jIHRoZSBjdXJyZW50IGtlcm5lbCBt
YXBwaW5nLgogCSAqLwogCXVubWFwX2FyZWFfc2VjdGlvbnModmlydCwgc2l6ZSk7Ci0KLQlwZ2Qg
PSBwZ2Rfb2Zmc2V0X2sodmlydCk7Ci0JcDRkID0gcDRkX29mZnNldChwZ2QsIGFkZHIpOwotCXB1
ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyKTsKLQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRkcik7
CiAJZG8gewogCQl1bnNpZ25lZCBsb25nIHN1cGVyX3BtZF92YWwsIGk7CiAKZGlmZiAtLWdpdCBh
L2FyY2gvYXJtL21tL21tLmggYi9hcmNoL2FybS9tbS9tbS5oCmluZGV4IGY5NTg3ZDVmYThhNC4u
OWZmNjgzNjEyZjJhIDEwMDY0NAotLS0gYS9hcmNoL2FybS9tbS9tbS5oCisrKyBiL2FyY2gvYXJt
L21tL21tLmgKQEAgLTM1LDExICszNSw2IEBAIHN0YXRpYyBpbmxpbmUgcHRlX3QgZ2V0X3RvcF9w
dGUodW5zaWduZWQgbG9uZyB2YSkKIAlyZXR1cm4gKnB0ZXA7CiB9CiAKLXN0YXRpYyBpbmxpbmUg
cG1kX3QgKnBtZF9vZmZfayh1bnNpZ25lZCBsb25nIHZpcnQpCi17Ci0JcmV0dXJuIHBtZF9vZmZz
ZXQocHVkX29mZnNldChwNGRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2aXJ0KSwgdmlydCksIHZpcnQp
LCB2aXJ0KTsKLX0KLQogc3RydWN0IG1lbV90eXBlIHsKIAlwdGV2YWxfdCBwcm90X3B0ZTsKIAlw
dGV2YWxfdCBwcm90X3B0ZV9zMjsKZGlmZiAtLWdpdCBhL2FyY2gvYXJtL21tL21tdS5jIGIvYXJj
aC9hcm0vbW0vbW11LmMKaW5kZXggYzQyNTI4OGYxYTg2Li42MjgwMjhiZmJiOTIgMTAwNjQ0Ci0t
LSBhL2FyY2gvYXJtL21tL21tdS5jCisrKyBiL2FyY2gvYXJtL21tL21tdS5jCkBAIC0zNTYsMTIg
KzM1Niw3IEBAIHN0YXRpYyBwdGVfdCAqcHRlX29mZnNldF9sYXRlX2ZpeG1hcChwbWRfdCAqZGly
LCB1bnNpZ25lZCBsb25nIGFkZHIpCiAKIHN0YXRpYyBpbmxpbmUgcG1kX3QgKiBfX2luaXQgZml4
bWFwX3BtZCh1bnNpZ25lZCBsb25nIGFkZHIpCiB7Ci0JcGdkX3QgKnBnZCA9IHBnZF9vZmZzZXRf
ayhhZGRyKTsKLQlwNGRfdCAqcDRkID0gcDRkX29mZnNldChwZ2QsIGFkZHIpOwotCXB1ZF90ICpw
dWQgPSBwdWRfb2Zmc2V0KHA0ZCwgYWRkcik7Ci0JcG1kX3QgKnBtZCA9IHBtZF9vZmZzZXQocHVk
LCBhZGRyKTsKLQotCXJldHVybiBwbWQ7CisJcmV0dXJuIHBtZF9vZmZfayhhZGRyKTsKIH0KIAog
dm9pZCBfX2luaXQgZWFybHlfZml4bWFwX2luaXQodm9pZCkKZGlmZiAtLWdpdCBhL2FyY2gvaGV4
YWdvbi9pbmNsdWRlL2FzbS9maXhtYXAuaCBiL2FyY2gvaGV4YWdvbi9pbmNsdWRlL2FzbS9maXht
YXAuaAppbmRleCA5N2IxYjA2MmU3NTAuLjkyMDY2MGEwNGFhNCAxMDA2NDQKLS0tIGEvYXJjaC9o
ZXhhZ29uL2luY2x1ZGUvYXNtL2ZpeG1hcC5oCisrKyBiL2FyY2gvaGV4YWdvbi9pbmNsdWRlL2Fz
bS9maXhtYXAuaApAQCAtMTUsOCArMTUsNCBAQAogCiAjaW5jbHVkZSA8YXNtLWdlbmVyaWMvZml4
bWFwLmg+CiAKLSNkZWZpbmUga21hcF9nZXRfZml4bWFwX3B0ZSh2YWRkcikgXAotCXB0ZV9vZmZz
ZXRfa2VybmVsKHBtZF9vZmZzZXQocHVkX29mZnNldChwNGRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2
YWRkciksIFwKLQkJCQkodmFkZHIpKSwgKHZhZGRyKSksICh2YWRkcikpLCAodmFkZHIpKQotCiAj
ZW5kaWYKZGlmZiAtLWdpdCBhL2FyY2gvbTY4ay9tbS9tb3Rvcm9sYS5jIGIvYXJjaC9tNjhrL21t
L21vdG9yb2xhLmMKaW5kZXggOGU1ZTc0MTIxYTc4Li4yYmIwMDZiZGMzMWMgMTAwNjQ0Ci0tLSBh
L2FyY2gvbTY4ay9tbS9tb3Rvcm9sYS5jCisrKyBiL2FyY2gvbTY4ay9tbS9tb3Rvcm9sYS5jCkBA
IC01NCwxNyArNTQsOCBAQCBzdGF0aWMgaW5saW5lIHZvaWQgbm9jYWNoZV9wYWdlKHZvaWQgKnZh
ZGRyKQogCXVuc2lnbmVkIGxvbmcgYWRkciA9ICh1bnNpZ25lZCBsb25nKXZhZGRyOwogCiAJaWYg
KENQVV9JU18wNDBfT1JfMDYwKSB7Ci0JCXBnZF90ICpkaXI7Ci0JCXA0ZF90ICpwNGRwOwotCQlw
dWRfdCAqcHVkcDsKLQkJcG1kX3QgKnBtZHA7Ci0JCXB0ZV90ICpwdGVwOwotCi0JCWRpciA9IHBn
ZF9vZmZzZXRfayhhZGRyKTsKLQkJcDRkcCA9IHA0ZF9vZmZzZXQoZGlyLCBhZGRyKTsKLQkJcHVk
cCA9IHB1ZF9vZmZzZXQocDRkcCwgYWRkcik7Ci0JCXBtZHAgPSBwbWRfb2Zmc2V0KHB1ZHAsIGFk
ZHIpOwotCQlwdGVwID0gcHRlX29mZnNldF9rZXJuZWwocG1kcCwgYWRkcik7CisJCXB0ZV90ICpw
dGVwID0gdmlydF90b19rcHRlKGFkZHIpOworCiAJCSpwdGVwID0gcHRlX21rbm9jYWNoZSgqcHRl
cCk7CiAJfQogfQpAQCAtNzQsMTcgKzY1LDggQEAgc3RhdGljIGlubGluZSB2b2lkIGNhY2hlX3Bh
Z2Uodm9pZCAqdmFkZHIpCiAJdW5zaWduZWQgbG9uZyBhZGRyID0gKHVuc2lnbmVkIGxvbmcpdmFk
ZHI7CiAKIAlpZiAoQ1BVX0lTXzA0MF9PUl8wNjApIHsKLQkJcGdkX3QgKmRpcjsKLQkJcDRkX3Qg
KnA0ZHA7Ci0JCXB1ZF90ICpwdWRwOwotCQlwbWRfdCAqcG1kcDsKLQkJcHRlX3QgKnB0ZXA7Ci0K
LQkJZGlyID0gcGdkX29mZnNldF9rKGFkZHIpOwotCQlwNGRwID0gcDRkX29mZnNldChkaXIsIGFk
ZHIpOwotCQlwdWRwID0gcHVkX29mZnNldChwNGRwLCBhZGRyKTsKLQkJcG1kcCA9IHBtZF9vZmZz
ZXQocHVkcCwgYWRkcik7Ci0JCXB0ZXAgPSBwdGVfb2Zmc2V0X2tlcm5lbChwbWRwLCBhZGRyKTsK
KwkJcHRlX3QgKnB0ZXAgPSB2aXJ0X3RvX2twdGUoYWRkcik7CisKIAkJKnB0ZXAgPSBwdGVfbWtj
YWNoZSgqcHRlcCk7CiAJfQogfQpkaWZmIC0tZ2l0IGEvYXJjaC9taWNyb2JsYXplL2tlcm5lbC9z
aWduYWwuYyBiL2FyY2gvbWljcm9ibGF6ZS9rZXJuZWwvc2lnbmFsLmMKaW5kZXggN2RjZDJlNGQ0
MzBlLi4yOGIxZWM0YjRlNzkgMTAwNjQ0Ci0tLSBhL2FyY2gvbWljcm9ibGF6ZS9rZXJuZWwvc2ln
bmFsLmMKKysrIGIvYXJjaC9taWNyb2JsYXplL2tlcm5lbC9zaWduYWwuYwpAQCAtMTU5LDkgKzE1
OSw2IEBAIHN0YXRpYyBpbnQgc2V0dXBfcnRfZnJhbWUoc3RydWN0IGtzaWduYWwgKmtzaWcsIHNp
Z3NldF90ICpzZXQsCiAJaW50IGVyciA9IDAsIHNpZyA9IGtzaWctPnNpZzsKIAl1bnNpZ25lZCBs
b25nIGFkZHJlc3MgPSAwOwogI2lmZGVmIENPTkZJR19NTVUKLQlwZ2RfdCAqcGdkcDsKLQlwNGRf
dCAqcDRkcDsKLQlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAlwdGVfdCAqcHRlcDsKICNl
bmRpZgpAQCAtMTk3LDEwICsxOTQsNyBAQCBzdGF0aWMgaW50IHNldHVwX3J0X2ZyYW1lKHN0cnVj
dCBrc2lnbmFsICprc2lnLCBzaWdzZXRfdCAqc2V0LAogCiAJYWRkcmVzcyA9ICgodW5zaWduZWQg
bG9uZylmcmFtZS0+dHJhbXApOwogI2lmZGVmIENPTkZJR19NTVUKLQlwZ2RwID0gcGdkX29mZnNl
dChjdXJyZW50LT5tbSwgYWRkcmVzcyk7Ci0JcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgYWRkcmVz
cyk7Ci0JcHVkcCA9IHB1ZF9vZmZzZXQocDRkcCwgYWRkcmVzcyk7Ci0JcG1kcCA9IHBtZF9vZmZz
ZXQocHVkcCwgYWRkcmVzcyk7CisJcG1kcCA9IHBtZF9vZmZfayhhZGRyZXNzKTsKIAogCXByZWVt
cHRfZGlzYWJsZSgpOwogCXB0ZXAgPSBwdGVfb2Zmc2V0X21hcChwbWRwLCBhZGRyZXNzKTsKZGlm
ZiAtLWdpdCBhL2FyY2gvbWljcm9ibGF6ZS9tbS9pbml0LmMgYi9hcmNoL21pY3JvYmxhemUvbW0v
aW5pdC5jCmluZGV4IGQ5NDNmNjk3ODRiMS4uNTIxYjU5YmE3MTZjIDEwMDY0NAotLS0gYS9hcmNo
L21pY3JvYmxhemUvbW0vaW5pdC5jCisrKyBiL2FyY2gvbWljcm9ibGF6ZS9tbS9pbml0LmMKQEAg
LTUwLDE1ICs1MCw2IEBAIHVuc2lnbmVkIGxvbmcgbG93bWVtX3NpemU7CiBwdGVfdCAqa21hcF9w
dGU7CiBFWFBPUlRfU1lNQk9MKGttYXBfcHRlKTsKIAotc3RhdGljIGlubGluZSBwdGVfdCAqdmly
dF90b19rcHRlKHVuc2lnbmVkIGxvbmcgdmFkZHIpCi17Ci0JcGdkX3QgKnBnZCA9IHBnZF9vZmZz
ZXRfayh2YWRkcik7Ci0JcDRkX3QgKnA0ZCA9IHA0ZF9vZmZzZXQocGdkLCB2YWRkcik7Ci0JcHVk
X3QgKnB1ZCA9IHB1ZF9vZmZzZXQocDRkLCB2YWRkcik7Ci0KLQlyZXR1cm4gcHRlX29mZnNldF9r
ZXJuZWwocG1kX29mZnNldChwdWQsIHZhZGRyKSwgdmFkZHIpOwotfQotCiBzdGF0aWMgdm9pZCBf
X2luaXQgaGlnaG1lbV9pbml0KHZvaWQpCiB7CiAJcHJfZGVidWcoIiV4XG4iLCAodTMyKVBLTUFQ
X0JBU0UpOwpkaWZmIC0tZ2l0IGEvYXJjaC9taXBzL2luY2x1ZGUvYXNtL2ZpeG1hcC5oIGIvYXJj
aC9taXBzL2luY2x1ZGUvYXNtL2ZpeG1hcC5oCmluZGV4IDE3ODRkNDM0OGMzNi4uNzQzNTM1YmU3
NTI4IDEwMDY0NAotLS0gYS9hcmNoL21pcHMvaW5jbHVkZS9hc20vZml4bWFwLmgKKysrIGIvYXJj
aC9taXBzL2luY2x1ZGUvYXNtL2ZpeG1hcC5oCkBAIC02OSw5ICs2OSw2IEBAIGVudW0gZml4ZWRf
YWRkcmVzc2VzIHsKIAogI2luY2x1ZGUgPGFzbS1nZW5lcmljL2ZpeG1hcC5oPgogCi0jZGVmaW5l
IGttYXBfZ2V0X2ZpeG1hcF9wdGUodmFkZHIpCQkJCQlcCi0JcHRlX29mZnNldF9rZXJuZWwocG1k
X29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKHZhZGRyKSwgKHZhZGRy
KSksICh2YWRkcikpLCAodmFkZHIpKSwgKHZhZGRyKSkKLQogLyoKICAqIENhbGxlZCBmcm9tIHBn
dGFibGVfaW5pdCgpCiAgKi8KZGlmZiAtLWdpdCBhL2FyY2gvbWlwcy9tbS9jLXIzay5jIGIvYXJj
aC9taXBzL21tL2MtcjNrLmMKaW5kZXggOWY0YTkzZjhiOTk2Li5kZjY3NTVjYTE4OTIgMTAwNjQ0
Ci0tLSBhL2FyY2gvbWlwcy9tbS9jLXIzay5jCisrKyBiL2FyY2gvbWlwcy9tbS9jLXIzay5jCkBA
IC0yMzksOSArMjM5LDYgQEAgc3RhdGljIHZvaWQgcjNrX2ZsdXNoX2NhY2hlX3BhZ2Uoc3RydWN0
IHZtX2FyZWFfc3RydWN0ICp2bWEsCiAJdW5zaWduZWQgbG9uZyBrYWRkciA9IEtTRUcwQUREUihw
Zm4gPDwgUEFHRV9TSElGVCk7CiAJaW50IGV4ZWMgPSB2bWEtPnZtX2ZsYWdzICYgVk1fRVhFQzsK
IAlzdHJ1Y3QgbW1fc3RydWN0ICptbSA9IHZtYS0+dm1fbW07Ci0JcGdkX3QgKnBnZHA7Ci0JcDRk
X3QgKnA0ZHA7Ci0JcHVkX3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7CiAJcHRlX3QgKnB0ZXA7CiAK
QEAgLTI1MiwxMSArMjQ5LDggQEAgc3RhdGljIHZvaWQgcjNrX2ZsdXNoX2NhY2hlX3BhZ2Uoc3Ry
dWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiAJaWYgKGNwdV9jb250ZXh0KHNtcF9wcm9jZXNzb3Jf
aWQoKSwgbW0pID09IDApCiAJCXJldHVybjsKIAotCXBnZHAgPSBwZ2Rfb2Zmc2V0KG1tLCBhZGRy
KTsKLQlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKLQlwdWRwID0gcHVkX29mZnNldChw
NGRwLCBhZGRyKTsKLQlwbWRwID0gcG1kX29mZnNldChwdWRwLCBhZGRyKTsKLQlwdGVwID0gcHRl
X29mZnNldChwbWRwLCBhZGRyKTsKKwlwbWRwID0gcG1kX29mZihtbSwgYWRkcik7CisJcHRlcCA9
IHB0ZV9vZmZzZXRfa2VybmVsKHBtZHAsIGFkZHIpOwogCiAJLyogSW52YWxpZCA9PiBubyBzdWNo
IHBhZ2UgaW4gdGhlIGNhY2hlLiAgKi8KIAlpZiAoIShwdGVfdmFsKCpwdGVwKSAmIF9QQUdFX1BS
RVNFTlQpKQpkaWZmIC0tZ2l0IGEvYXJjaC9taXBzL21tL2MtcjRrLmMgYi9hcmNoL21pcHMvbW0v
Yy1yNGsuYwppbmRleCA1ZmU4NDBjMWI4OTcuLjM3MjIyOTJlMGI2NSAxMDA2NDQKLS0tIGEvYXJj
aC9taXBzL21tL2MtcjRrLmMKKysrIGIvYXJjaC9taXBzL21tL2MtcjRrLmMKQEAgLTY1Miw5ICs2
NTIsNiBAQCBzdGF0aWMgaW5saW5lIHZvaWQgbG9jYWxfcjRrX2ZsdXNoX2NhY2hlX3BhZ2Uodm9p
ZCAqYXJncykKIAlpbnQgZXhlYyA9IHZtYS0+dm1fZmxhZ3MgJiBWTV9FWEVDOwogCXN0cnVjdCBt
bV9zdHJ1Y3QgKm1tID0gdm1hLT52bV9tbTsKIAlpbnQgbWFwX2NvaGVyZW50ID0gMDsKLQlwZ2Rf
dCAqcGdkcDsKLQlwNGRfdCAqcDRkcDsKLQlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAlw
dGVfdCAqcHRlcDsKIAl2b2lkICp2YWRkcjsKQEAgLTY2NywxMSArNjY0LDggQEAgc3RhdGljIGlu
bGluZSB2b2lkIGxvY2FsX3I0a19mbHVzaF9jYWNoZV9wYWdlKHZvaWQgKmFyZ3MpCiAJCXJldHVy
bjsKIAogCWFkZHIgJj0gUEFHRV9NQVNLOwotCXBnZHAgPSBwZ2Rfb2Zmc2V0KG1tLCBhZGRyKTsK
LQlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKLQlwdWRwID0gcHVkX29mZnNldChwNGRw
LCBhZGRyKTsKLQlwbWRwID0gcG1kX29mZnNldChwdWRwLCBhZGRyKTsKLQlwdGVwID0gcHRlX29m
ZnNldChwbWRwLCBhZGRyKTsKKwlwbWRwID0gcG1kX29mZihtbSwgYWRkcik7CisJcHRlcCA9IHB0
ZV9vZmZzZXRfa2VybmVsKHBtZHAsIGFkZHIpOwogCiAJLyoKIAkgKiBJZiB0aGUgcGFnZSBpc24n
dCBtYXJrZWQgdmFsaWQsIHRoZSBwYWdlIGNhbm5vdCBwb3NzaWJseSBiZQpkaWZmIC0tZ2l0IGEv
YXJjaC9taXBzL21tL2MtdHgzOS5jIGIvYXJjaC9taXBzL21tL2MtdHgzOS5jCmluZGV4IDIwNDA1
OWQyOGYyMS4uMDNkZmJiNDBlYzczIDEwMDY0NAotLS0gYS9hcmNoL21pcHMvbW0vYy10eDM5LmMK
KysrIGIvYXJjaC9taXBzL21tL2MtdHgzOS5jCkBAIC0xNjgsOSArMTY4LDYgQEAgc3RhdGljIHZv
aWQgdHgzOV9mbHVzaF9jYWNoZV9wYWdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNp
Z25lZCBsb25nIHBhZ2UKIHsKIAlpbnQgZXhlYyA9IHZtYS0+dm1fZmxhZ3MgJiBWTV9FWEVDOwog
CXN0cnVjdCBtbV9zdHJ1Y3QgKm1tID0gdm1hLT52bV9tbTsKLQlwZ2RfdCAqcGdkcDsKLQlwNGRf
dCAqcDRkcDsKLQlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAlwdGVfdCAqcHRlcDsKIApA
QCAtMTgyLDExICsxNzksOCBAQCBzdGF0aWMgdm9pZCB0eDM5X2ZsdXNoX2NhY2hlX3BhZ2Uoc3Ry
dWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHVuc2lnbmVkIGxvbmcgcGFnZQogCQlyZXR1cm47CiAK
IAlwYWdlICY9IFBBR0VfTUFTSzsKLQlwZ2RwID0gcGdkX29mZnNldChtbSwgcGFnZSk7Ci0JcDRk
cCA9IHA0ZF9vZmZzZXQocGdkcCwgcGFnZSk7Ci0JcHVkcCA9IHB1ZF9vZmZzZXQocDRkcCwgcGFn
ZSk7Ci0JcG1kcCA9IHBtZF9vZmZzZXQocHVkcCwgcGFnZSk7Ci0JcHRlcCA9IHB0ZV9vZmZzZXQo
cG1kcCwgcGFnZSk7CisJcG1kcCA9IHBtZF9vZmYobW0sIHBhZ2UpOworCXB0ZXAgPSBwdGVfb2Zm
c2V0X2tlcm5lbChwbWRwLCBwYWdlKTsKIAogCS8qCiAJICogSWYgdGhlIHBhZ2UgaXNuJ3QgbWFy
a2VkIHZhbGlkLCB0aGUgcGFnZSBjYW5ub3QgcG9zc2libHkgYmUKZGlmZiAtLWdpdCBhL2FyY2gv
bWlwcy9tbS9oaWdobWVtLmMgYi9hcmNoL21pcHMvbW0vaGlnaG1lbS5jCmluZGV4IDM3ZTI0NGNk
YjE0ZS4uYWU4ODJlZDE4YjJiIDEwMDY0NAotLS0gYS9hcmNoL21pcHMvbW0vaGlnaG1lbS5jCisr
KyBiL2FyY2gvbWlwcy9tbS9oaWdobWVtLmMKQEAgLTkzLDUgKzkzLDUgQEAgdm9pZCBfX2luaXQg
a21hcF9pbml0KHZvaWQpCiAKIAkvKiBjYWNoZSB0aGUgZmlyc3Qga21hcCBwdGUgKi8KIAlrbWFw
X3ZzdGFydCA9IF9fZml4X3RvX3ZpcnQoRklYX0tNQVBfQkVHSU4pOwotCWttYXBfcHRlID0ga21h
cF9nZXRfZml4bWFwX3B0ZShrbWFwX3ZzdGFydCk7CisJa21hcF9wdGUgPSB2aXJ0X3RvX2twdGUo
a21hcF92c3RhcnQpOwogfQpkaWZmIC0tZ2l0IGEvYXJjaC9uZHMzMi9pbmNsdWRlL2FzbS9wZ3Rh
YmxlLmggYi9hcmNoL25kczMyL2luY2x1ZGUvYXNtL3BndGFibGUuaAppbmRleCA1MWZlMWM1Njc3
MDIuLjk1Yzc1MjgyY2I0NyAxMDA2NDQKLS0tIGEvYXJjaC9uZHMzMi9pbmNsdWRlL2FzbS9wZ3Rh
YmxlLmgKKysrIGIvYXJjaC9uZHMzMi9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKQEAgLTE5NSw4ICsx
OTUsNiBAQCBleHRlcm4gdm9pZCBwYWdpbmdfaW5pdCh2b2lkKTsKICNkZWZpbmUgcHRlX3VubWFw
KHB0ZSkJCWRvIHsgfSB3aGlsZSAoMCkKICNkZWZpbmUgcHRlX3VubWFwX25lc3RlZChwdGUpCWRv
IHsgfSB3aGlsZSAoMCkKIAotI2RlZmluZSBwbWRfb2ZmX2soYWRkcmVzcykJcG1kX29mZnNldChw
dWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKGFkZHJlc3MpLCAoYWRkcmVzcykpLCAo
YWRkcmVzcykpLCAoYWRkcmVzcykpCi0KICNkZWZpbmUgc2V0X3B0ZV9hdChtbSxhZGRyLHB0ZXAs
cHRldmFsKSBzZXRfcHRlKHB0ZXAscHRldmFsKQogLyoKICAqIFNldCBhIGxldmVsIDEgdHJhbnNs
YXRpb24gdGFibGUgZW50cnksIGFuZCBjbGVhbiBpdCBvdXQgb2YKZGlmZiAtLWdpdCBhL2FyY2gv
bmRzMzIvbW0vaW5pdC5jIGIvYXJjaC9uZHMzMi9tbS9pbml0LmMKaW5kZXggOTExNDdjY2E0YjY0
Li5mYTg2ZjdiMmY0MTYgMTAwNjQ0Ci0tLSBhL2FyY2gvbmRzMzIvbW0vaW5pdC5jCisrKyBiL2Fy
Y2gvbmRzMzIvbW0vaW5pdC5jCkBAIC05OCw5ICs5OCw2IEBAIHN0YXRpYyBwbWRfdCAqZml4bWFw
X3BtZF9wOwogc3RhdGljIHZvaWQgX19pbml0IGZpeGVkcmFuZ2VfaW5pdCh2b2lkKQogewogCXVu
c2lnbmVkIGxvbmcgdmFkZHI7Ci0JcGdkX3QgKnBnZDsKLQlwNGRfdCAqcDRkOwotCXB1ZF90ICpw
dWQ7CiAJcG1kX3QgKnBtZDsKICNpZmRlZiBDT05GSUdfSElHSE1FTQogCXB0ZV90ICpwdGU7CkBA
IC0xMTAsMTAgKzEwNyw3IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBmaXhlZHJhbmdlX2luaXQodm9p
ZCkKIAkgKiBGaXhlZCBtYXBwaW5nczoKIAkgKi8KIAl2YWRkciA9IF9fZml4X3RvX3ZpcnQoX19l
bmRfb2ZfZml4ZWRfYWRkcmVzc2VzIC0gMSk7Ci0JcGdkID0gc3dhcHBlcl9wZ19kaXIgKyBwZ2Rf
aW5kZXgodmFkZHIpOwotCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCB2YWRkcik7Ci0JcHVkID0gcHVk
X29mZnNldChwNGQsIHZhZGRyKTsKLQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgdmFkZHIpOworCXBt
ZCA9IHBtZF9vZmZfayh2YWRkcik7CiAJZml4bWFwX3BtZF9wID0gbWVtYmxvY2tfYWxsb2MoUEFH
RV9TSVpFLCBQQUdFX1NJWkUpOwogCWlmICghZml4bWFwX3BtZF9wKQogCQlwYW5pYygiJXM6IEZh
aWxlZCB0byBhbGxvY2F0ZSAlbHUgYnl0ZXMgYWxpZ249MHglbHhcbiIsCkBAIC0xMjYsMTAgKzEy
MCw3IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBmaXhlZHJhbmdlX2luaXQodm9pZCkKIAkgKi8KIAl2
YWRkciA9IFBLTUFQX0JBU0U7CiAKLQlwZ2QgPSBzd2FwcGVyX3BnX2RpciArIHBnZF9pbmRleCh2
YWRkcik7Ci0JcDRkID0gcDRkX29mZnNldChwZ2QsIHZhZGRyKTsKLQlwdWQgPSBwdWRfb2Zmc2V0
KHA0ZCwgdmFkZHIpOwotCXBtZCA9IHBtZF9vZmZzZXQocHVkLCB2YWRkcik7CisJcG1kID0gcG1k
X29mZl9rKHZhZGRyKTsKIAlwdGUgPSBtZW1ibG9ja19hbGxvYyhQQUdFX1NJWkUsIFBBR0VfU0la
RSk7CiAJaWYgKCFwdGUpCiAJCXBhbmljKCIlczogRmFpbGVkIHRvIGFsbG9jYXRlICVsdSBieXRl
cyBhbGlnbj0weCVseFxuIiwKZGlmZiAtLWdpdCBhL2FyY2gvbmRzMzIvbW0vcHJvYy5jIGIvYXJj
aC9uZHMzMi9tbS9wcm9jLmMKaW5kZXggYTJiOWFhY2M1Zjg5Li44NDhjODQ1ZjVmMzMgMTAwNjQ0
Ci0tLSBhL2FyY2gvbmRzMzIvbW0vcHJvYy5jCisrKyBiL2FyY2gvbmRzMzIvbW0vcHJvYy5jCkBA
IC0xNSwxNCArMTUsMTAgQEAgZXh0ZXJuIHN0cnVjdCBjYWNoZV9pbmZvIEwxX2NhY2hlX2luZm9b
Ml07CiAKIGludCB2YV9rZXJuZWxfcHJlc2VudCh1bnNpZ25lZCBsb25nIGFkZHIpCiB7Ci0JcDRk
X3QgKnA0ZDsKLQlwdWRfdCAqcHVkOwogCXBtZF90ICpwbWQ7CiAJcHRlX3QgKnB0ZXAsIHB0ZTsK
IAotCXA0ZCA9IHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKGFkZHIpLCBhZGRyKTsKLQlwdWQgPSBw
dWRfb2Zmc2V0KHA0ZCwgYWRkcik7Ci0JcG1kID0gcG1kX29mZnNldChwdWQsIGFkZHIpOworCXBt
ZCA9IHBtZF9vZmZfayhhZGRyKTsKIAlpZiAoIXBtZF9ub25lKCpwbWQpKSB7CiAJCXB0ZXAgPSBw
dGVfb2Zmc2V0X21hcChwbWQsIGFkZHIpOwogCQlwdGUgPSAqcHRlcDsKZGlmZiAtLWdpdCBhL2Fy
Y2gvcGFyaXNjL21tL2ZpeG1hcC5jIGIvYXJjaC9wYXJpc2MvbW0vZml4bWFwLmMKaW5kZXggZTJk
OGIwYTg1N2VlLi4yNDQyNmE3ZTFhNWUgMTAwNjQ0Ci0tLSBhL2FyY2gvcGFyaXNjL21tL2ZpeG1h
cC5jCisrKyBiL2FyY2gvcGFyaXNjL21tL2ZpeG1hcC5jCkBAIC0zMywxMSArMzMsNyBAQCB2b2lk
IG5vdHJhY2Ugc2V0X2ZpeG1hcChlbnVtIGZpeGVkX2FkZHJlc3NlcyBpZHgsIHBoeXNfYWRkcl90
IHBoeXMpCiB2b2lkIG5vdHJhY2UgY2xlYXJfZml4bWFwKGVudW0gZml4ZWRfYWRkcmVzc2VzIGlk
eCkKIHsKIAl1bnNpZ25lZCBsb25nIHZhZGRyID0gX19maXhfdG9fdmlydChpZHgpOwotCXBnZF90
ICpwZ2QgPSBwZ2Rfb2Zmc2V0X2sodmFkZHIpOwotCXA0ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBn
ZCwgdmFkZHIpOwotCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgdmFkZHIpOwotCXBtZF90
ICpwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgdmFkZHIpOwotCXB0ZV90ICpwdGUgPSBwdGVfb2Zmc2V0
X2tlcm5lbChwbWQsIHZhZGRyKTsKKwlwdGVfdCAqcHRlID0gdmlydF90b19rcHRlKHZhZGRyKTsK
IAogCWlmIChXQVJOX09OKHB0ZV9ub25lKCpwdGUpKSkKIAkJcmV0dXJuOwpkaWZmIC0tZ2l0IGEv
YXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL3BndGFibGUuaCBiL2FyY2gvcG93ZXJwYy9pbmNsdWRl
L2FzbS9wZ3RhYmxlLmgKaW5kZXggYTkyOGJkYWQ5ODJmLi5kOTE3YzQxYjVjNjIgMTAwNjQ0Ci0t
LSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKKysrIGIvYXJjaC9wb3dlcnBj
L2luY2x1ZGUvYXNtL3BndGFibGUuaApAQCAtNDEsMjUgKzQxLDYgQEAgc3RydWN0IG1tX3N0cnVj
dDsKIAogI2lmbmRlZiBfX0FTU0VNQkxZX18KIAotI2lmZGVmIENPTkZJR19QUEMzMgotc3RhdGlj
IGlubGluZSBwbWRfdCAqcG1kX3B0cihzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9u
ZyB2YSkKLXsKLQlyZXR1cm4gcG1kX29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29m
ZnNldChtbSwgdmEpLCB2YSksIHZhKSwgdmEpOwotfQotCi1zdGF0aWMgaW5saW5lIHBtZF90ICpw
bWRfcHRyX2sodW5zaWduZWQgbG9uZyB2YSkKLXsKLQlyZXR1cm4gcG1kX29mZnNldChwdWRfb2Zm
c2V0KHA0ZF9vZmZzZXQocGdkX29mZnNldF9rKHZhKSwgdmEpLCB2YSksIHZhKTsKLX0KLQotc3Rh
dGljIGlubGluZSBwdGVfdCAqdmlydF90b19rcHRlKHVuc2lnbmVkIGxvbmcgdmFkZHIpCi17Ci0J
cG1kX3QgKnBtZCA9IHBtZF9wdHJfayh2YWRkcik7Ci0KLQlyZXR1cm4gcG1kX25vbmUoKnBtZCkg
PyBOVUxMIDogcHRlX29mZnNldF9rZXJuZWwocG1kLCB2YWRkcik7Ci19Ci0jZW5kaWYKLQogI2lu
Y2x1ZGUgPGFzbS90bGJmbHVzaC5oPgogCiAvKiBLZWVwIHRoZXNlIGFzIGEgbWFjcm9zIHRvIGF2
b2lkIGluY2x1ZGUgZGVwZW5kZW5jeSBtZXNzICovCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMv
bW0vYm9vazNzMzIvbW11LmMgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzMzIvbW11LmMKaW5kZXgg
MzliYTUzY2E1YmI1Li5hZmQ4Y2FmM2Y4ZjUgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9tbS9i
b29rM3MzMi9tbXUuYworKysgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzMzIvbW11LmMKQEAgLTMx
Miw3ICszMTIsNyBAQCB2b2lkIGhhc2hfcHJlbG9hZChzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5z
aWduZWQgbG9uZyBlYSkKIAogCWlmICghSGFzaCkKIAkJcmV0dXJuOwotCXBtZCA9IHBtZF9wdHIo
bW0sIGVhKTsKKwlwbWQgPSBwbWRfb2ZmKG1tLCBlYSk7CiAJaWYgKCFwbWRfbm9uZSgqcG1kKSkK
IAkJYWRkX2hhc2hfcGFnZShtbS0+Y29udGV4dC5pZCwgZWEsIHBtZF92YWwoKnBtZCkpOwogfQpk
aWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL2Jvb2szczMyL3RsYi5jIGIvYXJjaC9wb3dlcnBj
L21tL2Jvb2szczMyL3RsYi5jCmluZGV4IGRjOTAzOWExNzBhYS4uMTU3Zjk4ZjZhZWE5IDEwMDY0
NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzMzIvdGxiLmMKKysrIGIvYXJjaC9wb3dlcnBj
L21tL2Jvb2szczMyL3RsYi5jCkBAIC05MCw3ICs5MCw3IEBAIHN0YXRpYyB2b2lkIGZsdXNoX3Jh
bmdlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAogCWlmIChzdGFy
dCA+PSBlbmQpCiAJCXJldHVybjsKIAllbmQgPSAoZW5kIC0gMSkgfCB+UEFHRV9NQVNLOwotCXBt
ZCA9IHBtZF9wdHIobW0sIHN0YXJ0KTsKKwlwbWQgPSBwbWRfb2ZmKG1tLCBzdGFydCk7CiAJZm9y
ICg7OykgewogCQlwbWRfZW5kID0gKChzdGFydCArIFBHRElSX1NJWkUpICYgUEdESVJfTUFTSykg
LSAxOwogCQlpZiAocG1kX2VuZCA+IGVuZCkKQEAgLTE0OCw3ICsxNDgsNyBAQCB2b2lkIGZsdXNo
X3RsYl9wYWdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIHZtYWRk
cikKIAkJcmV0dXJuOwogCX0KIAltbSA9ICh2bWFkZHIgPCBUQVNLX1NJWkUpPyB2bWEtPnZtX21t
OiAmaW5pdF9tbTsKLQlwbWQgPSBwbWRfcHRyKG1tLCB2bWFkZHIpOworCXBtZCA9IHBtZF9vZmYo
bW0sIHZtYWRkcik7CiAJaWYgKCFwbWRfbm9uZSgqcG1kKSkKIAkJZmx1c2hfaGFzaF9wYWdlcyht
bS0+Y29udGV4dC5pZCwgdm1hZGRyLCBwbWRfdmFsKCpwbWQpLCAxKTsKIH0KZGlmZiAtLWdpdCBh
L2FyY2gvcG93ZXJwYy9tbS9rYXNhbi9rYXNhbl9pbml0XzMyLmMgYi9hcmNoL3Bvd2VycGMvbW0v
a2FzYW4va2FzYW5faW5pdF8zMi5jCmluZGV4IGM5OWFhOGNiYWFjNS4uMTZhMzU5YWUxNjg2IDEw
MDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5jCisrKyBiL2Fy
Y2gvcG93ZXJwYy9tbS9rYXNhbi9rYXNhbl9pbml0XzMyLmMKQEAgLTM2LDcgKzM2LDcgQEAgc3Rh
dGljIGludCBfX2luaXQga2FzYW5faW5pdF9zaGFkb3dfcGFnZV90YWJsZXModW5zaWduZWQgbG9u
ZyBrX3N0YXJ0LCB1bnNpZ25lZAogCXVuc2lnbmVkIGxvbmcga19jdXIsIGtfbmV4dDsKIAlwdGVf
dCAqbmV3ID0gTlVMTDsKIAotCXBtZCA9IHBtZF9wdHJfayhrX3N0YXJ0KTsKKwlwbWQgPSBwbWRf
b2ZmX2soa19zdGFydCk7CiAKIAlmb3IgKGtfY3VyID0ga19zdGFydDsga19jdXIgIT0ga19lbmQ7
IGtfY3VyID0ga19uZXh0LCBwbWQrKykgewogCQlrX25leHQgPSBwZ2RfYWRkcl9lbmQoa19jdXIs
IGtfZW5kKTsKQEAgLTc4LDcgKzc4LDcgQEAgc3RhdGljIGludCBfX2luaXQga2FzYW5faW5pdF9y
ZWdpb24odm9pZCAqc3RhcnQsIHNpemVfdCBzaXplKQogCWJsb2NrID0gbWVtYmxvY2tfYWxsb2Mo
a19lbmQgLSBrX3N0YXJ0LCBQQUdFX1NJWkUpOwogCiAJZm9yIChrX2N1ciA9IGtfc3RhcnQgJiBQ
QUdFX01BU0s7IGtfY3VyIDwga19lbmQ7IGtfY3VyICs9IFBBR0VfU0laRSkgewotCQlwbWRfdCAq
cG1kID0gcG1kX3B0cl9rKGtfY3VyKTsKKwkJcG1kX3QgKnBtZCA9IHBtZF9vZmZfayhrX2N1cik7
CiAJCXZvaWQgKnZhID0gYmxvY2sgKyBrX2N1ciAtIGtfc3RhcnQ7CiAJCXB0ZV90IHB0ZSA9IHBm
bl9wdGUoUEhZU19QRk4oX19wYSh2YSkpLCBQQUdFX0tFUk5FTCk7CiAKQEAgLTEwMiw3ICsxMDIs
NyBAQCBzdGF0aWMgdm9pZCBfX2luaXQga2FzYW5fcmVtYXBfZWFybHlfc2hhZG93X3JvKHZvaWQp
CiAJa2FzYW5fcG9wdWxhdGVfcHRlKGthc2FuX2Vhcmx5X3NoYWRvd19wdGUsIHByb3QpOwogCiAJ
Zm9yIChrX2N1ciA9IGtfc3RhcnQgJiBQQUdFX01BU0s7IGtfY3VyICE9IGtfZW5kOyBrX2N1ciAr
PSBQQUdFX1NJWkUpIHsKLQkJcG1kX3QgKnBtZCA9IHBtZF9wdHJfayhrX2N1cik7CisJCXBtZF90
ICpwbWQgPSBwbWRfb2ZmX2soa19jdXIpOwogCQlwdGVfdCAqcHRlcCA9IHB0ZV9vZmZzZXRfa2Vy
bmVsKHBtZCwga19jdXIpOwogCiAJCWlmICgocHRlX3ZhbCgqcHRlcCkgJiBQVEVfUlBOX01BU0sp
ICE9IHBhKQpAQCAtMTk2LDcgKzE5Niw3IEBAIHZvaWQgX19pbml0IGthc2FuX2Vhcmx5X2luaXQo
dm9pZCkKIAl1bnNpZ25lZCBsb25nIGFkZHIgPSBLQVNBTl9TSEFET1dfU1RBUlQ7CiAJdW5zaWdu
ZWQgbG9uZyBlbmQgPSBLQVNBTl9TSEFET1dfRU5EOwogCXVuc2lnbmVkIGxvbmcgbmV4dDsKLQlw
bWRfdCAqcG1kID0gcG1kX3B0cl9rKGFkZHIpOworCXBtZF90ICpwbWQgPSBwbWRfb2ZmX2soYWRk
cik7CiAKIAlCVUlMRF9CVUdfT04oS0FTQU5fU0hBRE9XX1NUQVJUICYgflBHRElSX01BU0spOwog
CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vbm9oYXNoLzQweC5jIGIvYXJjaC9wb3dlcnBj
L21tL25vaGFzaC80MHguYwppbmRleCA3MjM1MTJiNzE3NTguLmI5ODBlNDk2YmRjNyAxMDA2NDQK
LS0tIGEvYXJjaC9wb3dlcnBjL21tL25vaGFzaC80MHguYworKysgYi9hcmNoL3Bvd2VycGMvbW0v
bm9oYXNoLzQweC5jCkBAIC0xMDMsNyArMTAzLDcgQEAgdW5zaWduZWQgbG9uZyBfX2luaXQgbW11
X21hcGluX3JhbSh1bnNpZ25lZCBsb25nIGJhc2UsIHVuc2lnbmVkIGxvbmcgdG9wKQogCQlwbWRf
dCAqcG1kcDsKIAkJdW5zaWduZWQgbG9uZyB2YWwgPSBwIHwgX1BNRF9TSVpFXzE2TSB8IF9QQUdF
X0VYRUMgfCBfUEFHRV9IV1dSSVRFOwogCi0JCXBtZHAgPSBwbWRfcHRyX2sodik7CisJCXBtZHAg
PSBwbWRfb2ZmX2sodik7CiAJCSpwbWRwKysgPSBfX3BtZCh2YWwpOwogCQkqcG1kcCsrID0gX19w
bWQodmFsKTsKIAkJKnBtZHArKyA9IF9fcG1kKHZhbCk7CkBAIC0xMTgsNyArMTE4LDcgQEAgdW5z
aWduZWQgbG9uZyBfX2luaXQgbW11X21hcGluX3JhbSh1bnNpZ25lZCBsb25nIGJhc2UsIHVuc2ln
bmVkIGxvbmcgdG9wKQogCQlwbWRfdCAqcG1kcDsKIAkJdW5zaWduZWQgbG9uZyB2YWwgPSBwIHwg
X1BNRF9TSVpFXzRNIHwgX1BBR0VfRVhFQyB8IF9QQUdFX0hXV1JJVEU7CiAKLQkJcG1kcCA9IHBt
ZF9wdHJfayh2KTsKKwkJcG1kcCA9IHBtZF9vZmZfayh2KTsKIAkJKnBtZHAgPSBfX3BtZCh2YWwp
OwogCiAJCXYgKz0gTEFSR0VfUEFHRV9TSVpFXzRNOwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBj
L21tL3BndGFibGVfMzIuYyBiL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlXzMyLmMKaW5kZXggNzM4
ZTVlMzhhNGJlLi4zMDExMjY2YzA4OWYgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9tbS9wZ3Rh
YmxlXzMyLmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL3BndGFibGVfMzIuYwpAQCAtNjIsNyArNjIs
NyBAQCBpbnQgX19yZWYgbWFwX2tlcm5lbF9wYWdlKHVuc2lnbmVkIGxvbmcgdmEsIHBoeXNfYWRk
cl90IHBhLCBwZ3Byb3RfdCBwcm90KQogCWludCBlcnIgPSAtRU5PTUVNOwogCiAJLyogVXNlIHVw
cGVyIDEwIGJpdHMgb2YgVkEgdG8gaW5kZXggdGhlIGZpcnN0IGxldmVsIG1hcCAqLwotCXBkID0g
cG1kX3B0cl9rKHZhKTsKKwlwZCA9IHBtZF9vZmZfayh2YSk7CiAJLyogVXNlIG1pZGRsZSAxMCBi
aXRzIG9mIFZBIHRvIGluZGV4IHRoZSBzZWNvbmQtbGV2ZWwgbWFwICovCiAJaWYgKGxpa2VseShz
bGFiX2lzX2F2YWlsYWJsZSgpKSkKIAkJcGcgPSBwdGVfYWxsb2Nfa2VybmVsKHBkLCB2YSk7CmRp
ZmYgLS1naXQgYS9hcmNoL3MzOTAvbW0vcGFnZWF0dHIuYyBiL2FyY2gvczM5MC9tbS9wYWdlYXR0
ci5jCmluZGV4IDczMmMxMjE0NWQwNC4uMzk3OTQ0Yjk5MDZiIDEwMDY0NAotLS0gYS9hcmNoL3Mz
OTAvbW0vcGFnZWF0dHIuYworKysgYi9hcmNoL3MzOTAvbW0vcGFnZWF0dHIuYwpAQCAtMzM3LDE5
ICszMzcsMTEgQEAgdm9pZCBfX2tlcm5lbF9tYXBfcGFnZXMoc3RydWN0IHBhZ2UgKnBhZ2UsIGlu
dCBudW1wYWdlcywgaW50IGVuYWJsZSkKIHsKIAl1bnNpZ25lZCBsb25nIGFkZHJlc3M7CiAJaW50
IG5yLCBpLCBqOwotCXBnZF90ICpwZ2Q7Ci0JcDRkX3QgKnA0ZDsKLQlwdWRfdCAqcHVkOwotCXBt
ZF90ICpwbWQ7CiAJcHRlX3QgKnB0ZTsKIAogCWZvciAoaSA9IDA7IGkgPCBudW1wYWdlczspIHsK
IAkJYWRkcmVzcyA9IHBhZ2VfdG9fcGh5cyhwYWdlICsgaSk7Ci0JCXBnZCA9IHBnZF9vZmZzZXRf
ayhhZGRyZXNzKTsKLQkJcDRkID0gcDRkX29mZnNldChwZ2QsIGFkZHJlc3MpOwotCQlwdWQgPSBw
dWRfb2Zmc2V0KHA0ZCwgYWRkcmVzcyk7Ci0JCXBtZCA9IHBtZF9vZmZzZXQocHVkLCBhZGRyZXNz
KTsKLQkJcHRlID0gcHRlX29mZnNldF9rZXJuZWwocG1kLCBhZGRyZXNzKTsKKwkJcHRlID0gdmly
dF90b19rcHRlKGFkZHJlc3MpOwogCQluciA9ICh1bnNpZ25lZCBsb25nKXB0ZSA+PiBpbG9nMihz
aXplb2YobG9uZykpOwogCQluciA9IFBUUlNfUEVSX1BURSAtIChuciAmIChQVFJTX1BFUl9QVEUg
LSAxKSk7CiAJCW5yID0gbWluKG51bXBhZ2VzIC0gaSwgbnIpOwpkaWZmIC0tZ2l0IGEvYXJjaC9z
aC9tbS9jYWNoZS1zaDQuYyBiL2FyY2gvc2gvbW0vY2FjaGUtc2g0LmMKaW5kZXggZWQ1OTlkYWRk
Njk4Li5kZTllMGE2MGUxMTkgMTAwNjQ0Ci0tLSBhL2FyY2gvc2gvbW0vY2FjaGUtc2g0LmMKKysr
IGIvYXJjaC9zaC9tbS9jYWNoZS1zaDQuYwpAQCAtMjA3LDkgKzIwNyw2IEBAIHN0YXRpYyB2b2lk
IHNoNF9mbHVzaF9jYWNoZV9wYWdlKHZvaWQgKmFyZ3MpCiAJc3RydWN0IHBhZ2UgKnBhZ2U7CiAJ
dW5zaWduZWQgbG9uZyBhZGRyZXNzLCBwZm4sIHBoeXM7CiAJaW50IG1hcF9jb2hlcmVudCA9IDA7
Ci0JcGdkX3QgKnBnZDsKLQlwNGRfdCAqcDRkOwotCXB1ZF90ICpwdWQ7CiAJcG1kX3QgKnBtZDsK
IAlwdGVfdCAqcHRlOwogCXZvaWQgKnZhZGRyOwpAQCAtMjIzLDEwICsyMjAsNyBAQCBzdGF0aWMg
dm9pZCBzaDRfZmx1c2hfY2FjaGVfcGFnZSh2b2lkICphcmdzKQogCWlmIChjcHVfY29udGV4dChz
bXBfcHJvY2Vzc29yX2lkKCksIHZtYS0+dm1fbW0pID09IE5PX0NPTlRFWFQpCiAJCXJldHVybjsK
IAotCXBnZCA9IHBnZF9vZmZzZXQodm1hLT52bV9tbSwgYWRkcmVzcyk7Ci0JcDRkID0gcDRkX29m
ZnNldChwZ2QsIGFkZHJlc3MpOwotCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyZXNzKTsKLQlw
bWQgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRkcmVzcyk7CisJcG1kID0gcG1kX29mZih2bWEtPnZtX21t
LCBhZGRyZXNzKTsKIAlwdGUgPSBwdGVfb2Zmc2V0X2tlcm5lbChwbWQsIGFkZHJlc3MpOwogCiAJ
LyogSWYgdGhlIHBhZ2UgaXNuJ3QgcHJlc2VudCwgdGhlcmUgaXMgbm90aGluZyB0byBkbyBoZXJl
LiAqLwpkaWZmIC0tZ2l0IGEvYXJjaC9zaC9tbS9rbWFwLmMgYi9hcmNoL3NoL21tL2ttYXAuYwpp
bmRleCAwZTcwMzkxMzdmNWEuLjczZmQ3Y2M5OTQzMCAxMDA2NDQKLS0tIGEvYXJjaC9zaC9tbS9r
bWFwLmMKKysrIGIvYXJjaC9zaC9tbS9rbWFwLmMKQEAgLTE0LDkgKzE0LDYgQEAKICNpbmNsdWRl
IDxhc20vbW11X2NvbnRleHQuaD4KICNpbmNsdWRlIDxhc20vY2FjaGVmbHVzaC5oPgogCi0jZGVm
aW5lIGttYXBfZ2V0X2ZpeG1hcF9wdGUodmFkZHIpICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIFwKLQlwdGVfb2Zmc2V0X2tlcm5lbChwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocDRk
X29mZnNldChwZ2Rfb2Zmc2V0X2sodmFkZHIpLCAodmFkZHIpKSwgKHZhZGRyKSksICh2YWRkcikp
LCB2YWRkcikKLQogc3RhdGljIHB0ZV90ICprbWFwX2NvaGVyZW50X3B0ZTsKIAogdm9pZCBfX2lu
aXQga21hcF9jb2hlcmVudF9pbml0KHZvaWQpCkBAIC0yNSw3ICsyMiw3IEBAIHZvaWQgX19pbml0
IGttYXBfY29oZXJlbnRfaW5pdCh2b2lkKQogCiAJLyogY2FjaGUgdGhlIGZpcnN0IGNvaGVyZW50
IGttYXAgcHRlICovCiAJdmFkZHIgPSBfX2ZpeF90b192aXJ0KEZJWF9DTUFQX0JFR0lOKTsKLQlr
bWFwX2NvaGVyZW50X3B0ZSA9IGttYXBfZ2V0X2ZpeG1hcF9wdGUodmFkZHIpOworCWttYXBfY29o
ZXJlbnRfcHRlID0gdmlydF90b19rcHRlKHZhZGRyKTsKIH0KIAogdm9pZCAqa21hcF9jb2hlcmVu
dChzdHJ1Y3QgcGFnZSAqcGFnZSwgdW5zaWduZWQgbG9uZyBhZGRyKQpkaWZmIC0tZ2l0IGEvYXJj
aC9zcGFyYy9tbS9oaWdobWVtLmMgYi9hcmNoL3NwYXJjL21tL2hpZ2htZW0uYwppbmRleCBkMjM3
ZDkwMmY5YzMuLjYyNTIyMWVjMjAxMCAxMDA2NDQKLS0tIGEvYXJjaC9zcGFyYy9tbS9oaWdobWVt
LmMKKysrIGIvYXJjaC9zcGFyYy9tbS9oaWdobWVtLmMKQEAgLTM2LDE4ICszNiwxMCBAQCBzdGF0
aWMgcHRlX3QgKmttYXBfcHRlOwogCiB2b2lkIF9faW5pdCBrbWFwX2luaXQodm9pZCkKIHsKLQl1
bnNpZ25lZCBsb25nIGFkZHJlc3M7Ci0JcDRkX3QgKnA0ZDsKLQlwdWRfdCAqcHVkOwotCXBtZF90
ICpkaXI7Ci0KLQlhZGRyZXNzID0gX19maXhfdG9fdmlydChGSVhfS01BUF9CRUdJTik7Ci0JcDRk
ID0gcDRkX29mZnNldChwZ2Rfb2Zmc2V0X2soYWRkcmVzcyksIGFkZHJlc3MpOwotCXB1ZCA9IHB1
ZF9vZmZzZXQocDRkLCBhZGRyZXNzKTsKLQlkaXIgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRkcmVzcyk7
CisJdW5zaWduZWQgbG9uZyBhZGRyZXNzID0gX19maXhfdG9fdmlydChGSVhfS01BUF9CRUdJTik7
CiAKICAgICAgICAgLyogY2FjaGUgdGhlIGZpcnN0IGttYXAgcHRlICovCi0gICAgICAgIGttYXBf
cHRlID0gcHRlX29mZnNldF9rZXJuZWwoZGlyLCBhZGRyZXNzKTsKKyAgICAgICAga21hcF9wdGUg
PSB2aXJ0X3RvX2twdGUoYWRkcmVzcyk7CiB9CiAKIHZvaWQgKmttYXBfYXRvbWljX2hpZ2hfcHJv
dChzdHJ1Y3QgcGFnZSAqcGFnZSwgcGdwcm90X3QgcHJvdCkKZGlmZiAtLWdpdCBhL2FyY2gvc3Bh
cmMvbW0vaW5pdF82NC5jIGIvYXJjaC9zcGFyYy9tbS9pbml0XzY0LmMKaW5kZXggMTQxNjE0ZjE5
MDg0Li4wMmU2ZTVlMGYxMDYgMTAwNjQ0Ci0tLSBhL2FyY2gvc3BhcmMvbW0vaW5pdF82NC5jCisr
KyBiL2FyY2gvc3BhcmMvbW0vaW5pdF82NC5jCkBAIC01MDMsMTEgKzUwMyw3IEBAIHZvaWQgX19r
cHJvYmVzIGZsdXNoX2ljYWNoZV9yYW5nZSh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBs
b25nIGVuZCkKIAkJCWlmIChrYWRkciA+PSBQQUdFX09GRlNFVCkKIAkJCQlwYWRkciA9IGthZGRy
ICYgbWFzazsKIAkJCWVsc2UgewotCQkJCXBnZF90ICpwZ2RwID0gcGdkX29mZnNldF9rKGthZGRy
KTsKLQkJCQlwNGRfdCAqcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwga2FkZHIpOwotCQkJCXB1ZF90
ICpwdWRwID0gcHVkX29mZnNldChwNGRwLCBrYWRkcik7Ci0JCQkJcG1kX3QgKnBtZHAgPSBwbWRf
b2Zmc2V0KHB1ZHAsIGthZGRyKTsKLQkJCQlwdGVfdCAqcHRlcCA9IHB0ZV9vZmZzZXRfa2VybmVs
KHBtZHAsIGthZGRyKTsKKwkJCQlwdGVfdCAqcHRlcCA9IHZpcnRfdG9fa3B0ZShrYWRkcik7CiAK
IAkJCQlwYWRkciA9IHB0ZV92YWwoKnB0ZXApICYgbWFzazsKIAkJCX0KZGlmZiAtLWdpdCBhL2Fy
Y2gvc3BhcmMvbW0vaW8tdW5pdC5jIGIvYXJjaC9zcGFyYy9tbS9pby11bml0LmMKaW5kZXggNGFl
ZWQ1ODBiNGQ0Li5iZmNjMDRiZmNlNTQgMTAwNjQ0Ci0tLSBhL2FyY2gvc3BhcmMvbW0vaW8tdW5p
dC5jCisrKyBiL2FyY2gvc3BhcmMvbW0vaW8tdW5pdC5jCkBAIC0yNDAsMjEgKzI0MCwxNSBAQCBz
dGF0aWMgdm9pZCAqaW91bml0X2FsbG9jKHN0cnVjdCBkZXZpY2UgKmRldiwgc2l6ZV90IGxlbiwK
IAl3aGlsZShhZGRyIDwgZW5kKSB7CiAJCXBhZ2UgPSB2YTsKIAkJewotCQkJcGdkX3QgKnBnZHA7
Ci0JCQlwNGRfdCAqcDRkcDsKLQkJCXB1ZF90ICpwdWRwOwogCQkJcG1kX3QgKnBtZHA7CiAJCQlw
dGVfdCAqcHRlcDsKIAkJCWxvbmcgaTsKIAotCQkJcGdkcCA9IHBnZF9vZmZzZXQoJmluaXRfbW0s
IGFkZHIpOwotCQkJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgYWRkcik7Ci0JCQlwdWRwID0gcHVk
X29mZnNldChwNGRwLCBhZGRyKTsKLQkJCXBtZHAgPSBwbWRfb2Zmc2V0KHB1ZHAsIGFkZHIpOwor
CQkJcG1kcCA9IHBtZF9vZmZfayhhZGRyKTsKIAkJCXB0ZXAgPSBwdGVfb2Zmc2V0X21hcChwbWRw
LCBhZGRyKTsKIAogCQkJc2V0X3B0ZShwdGVwLCBta19wdGUodmlydF90b19wYWdlKHBhZ2UpLCBk
dm1hX3Byb3QpKTsKLQkJCQorCiAJCQlpID0gKChhZGRyIC0gSU9VTklUX0RNQV9CQVNFKSA+PiBQ
QUdFX1NISUZUKTsKIAogCQkJaW9wdGUgPSBpb3VuaXQtPnBhZ2VfdGFibGUgKyBpOwpkaWZmIC0t
Z2l0IGEvYXJjaC9zcGFyYy9tbS9pb21tdS5jIGIvYXJjaC9zcGFyYy9tbS9pb21tdS5jCmluZGV4
IGZhOWUyOThmZDk4NS4uMzViMDAyZWIzMTJlIDEwMDY0NAotLS0gYS9hcmNoL3NwYXJjL21tL2lv
bW11LmMKKysrIGIvYXJjaC9zcGFyYy9tbS9pb21tdS5jCkBAIC0zNDgsOSArMzQ4LDYgQEAgc3Rh
dGljIHZvaWQgKnNidXNfaW9tbXVfYWxsb2Moc3RydWN0IGRldmljZSAqZGV2LCBzaXplX3QgbGVu
LAogCXdoaWxlKGFkZHIgPCBlbmQpIHsKIAkJcGFnZSA9IHZhOwogCQl7Ci0JCQlwZ2RfdCAqcGdk
cDsKLQkJCXA0ZF90ICpwNGRwOwotCQkJcHVkX3QgKnB1ZHA7CiAJCQlwbWRfdCAqcG1kcDsKIAkJ
CXB0ZV90ICpwdGVwOwogCkBAIC0zNjEsMTAgKzM1OCw3IEBAIHN0YXRpYyB2b2lkICpzYnVzX2lv
bW11X2FsbG9jKHN0cnVjdCBkZXZpY2UgKmRldiwgc2l6ZV90IGxlbiwKIAkJCWVsc2UKIAkJCQlf
X2ZsdXNoX3BhZ2VfdG9fcmFtKHBhZ2UpOwogCi0JCQlwZ2RwID0gcGdkX29mZnNldCgmaW5pdF9t
bSwgYWRkcik7Ci0JCQlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKLQkJCXB1ZHAgPSBw
dWRfb2Zmc2V0KHA0ZHAsIGFkZHIpOwotCQkJcG1kcCA9IHBtZF9vZmZzZXQocHVkcCwgYWRkcik7
CisJCQlwbWRwID0gcG1kX29mZl9rKGFkZHIpOwogCQkJcHRlcCA9IHB0ZV9vZmZzZXRfbWFwKHBt
ZHAsIGFkZHIpOwogCiAJCQlzZXRfcHRlKHB0ZXAsIG1rX3B0ZSh2aXJ0X3RvX3BhZ2UocGFnZSks
IGR2bWFfcHJvdCkpOwpkaWZmIC0tZ2l0IGEvYXJjaC9zcGFyYy9tbS9zcm1tdS5jIGIvYXJjaC9z
cGFyYy9tbS9zcm1tdS5jCmluZGV4IDMwNjQ4YzFmODc4Ni4uOTA2ODAyZjBlYmU5IDEwMDY0NAot
LS0gYS9hcmNoL3NwYXJjL21tL3NybW11LmMKKysrIGIvYXJjaC9zcGFyYy9tbS9zcm1tdS5jCkBA
IC01MTgsMTkgKzUxOCwxMCBAQCB2b2lkIHN3aXRjaF9tbShzdHJ1Y3QgbW1fc3RydWN0ICpvbGRf
bW0sIHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLAogc3RhdGljIGlubGluZSB2b2lkIHNybW11X21hcGlv
YWRkcih1bnNpZ25lZCBsb25nIHBoeXNhZGRyLAogCQkJCSAgIHVuc2lnbmVkIGxvbmcgdmlydF9h
ZGRyLCBpbnQgYnVzX3R5cGUpCiB7Ci0JcGdkX3QgKnBnZHA7Ci0JcDRkX3QgKnA0ZHA7Ci0JcHVk
X3QgKnB1ZHA7Ci0JcG1kX3QgKnBtZHA7Ci0JcHRlX3QgKnB0ZXA7CisJcHRlX3QgKnB0ZXAgPSB2
aXJ0X3RvX2twdGUodmlydF9hZGRyKTsKIAl1bnNpZ25lZCBsb25nIHRtcDsKIAogCXBoeXNhZGRy
ICY9IFBBR0VfTUFTSzsKLQlwZ2RwID0gcGdkX29mZnNldF9rKHZpcnRfYWRkcik7Ci0JcDRkcCA9
IHA0ZF9vZmZzZXQocGdkcCwgdmlydF9hZGRyKTsKLQlwdWRwID0gcHVkX29mZnNldChwNGRwLCB2
aXJ0X2FkZHIpOwotCXBtZHAgPSBwbWRfb2Zmc2V0KHB1ZHAsIHZpcnRfYWRkcik7Ci0JcHRlcCA9
IHB0ZV9vZmZzZXRfa2VybmVsKHBtZHAsIHZpcnRfYWRkcik7CiAJdG1wID0gKHBoeXNhZGRyID4+
IDQpIHwgU1JNTVVfRVRfUFRFOwogCiAJLyogSSBuZWVkIHRvIHRlc3Qgd2hldGhlciB0aGlzIGlz
IGNvbnNpc3RlbnQgb3ZlciBhbGwKQEAgLTU1NywxOCArNTQ4LDcgQEAgdm9pZCBzcm1tdV9tYXBp
b3JhbmdlKHVuc2lnbmVkIGludCBidXMsIHVuc2lnbmVkIGxvbmcgeHBhLAogCiBzdGF0aWMgaW5s
aW5lIHZvaWQgc3JtbXVfdW5tYXBpb2FkZHIodW5zaWduZWQgbG9uZyB2aXJ0X2FkZHIpCiB7Ci0J
cGdkX3QgKnBnZHA7Ci0JcDRkX3QgKnA0ZHA7Ci0JcHVkX3QgKnB1ZHA7Ci0JcG1kX3QgKnBtZHA7
Ci0JcHRlX3QgKnB0ZXA7Ci0KLQotCXBnZHAgPSBwZ2Rfb2Zmc2V0X2sodmlydF9hZGRyKTsKLQlw
NGRwID0gcDRkX29mZnNldChwZ2RwLCB2aXJ0X2FkZHIpOwotCXB1ZHAgPSBwdWRfb2Zmc2V0KHA0
ZHAsIHZpcnRfYWRkcik7Ci0JcG1kcCA9IHBtZF9vZmZzZXQocHVkcCwgdmlydF9hZGRyKTsKLQlw
dGVwID0gcHRlX29mZnNldF9rZXJuZWwocG1kcCwgdmlydF9hZGRyKTsKKwlwdGVfdCAqcHRlcCA9
IHZpcnRfdG9fa3B0ZSh2aXJ0X2FkZHIpOwogCiAJLyogTm8gbmVlZCB0byBmbHVzaCB1bmNhY2hl
YWJsZSBwYWdlLiAqLwogCV9fcHRlX2NsZWFyKHB0ZXApOwpAQCAtOTI5LDEwICs5MDksNiBAQCB2
b2lkIF9faW5pdCBzcm1tdV9wYWdpbmdfaW5pdCh2b2lkKQogCWludCBpOwogCXBoYW5kbGUgY3B1
bm9kZTsKIAljaGFyIG5vZGVfc3RyWzEyOF07Ci0JcGdkX3QgKnBnZDsKLQlwNGRfdCAqcDRkOwot
CXB1ZF90ICpwdWQ7Ci0JcG1kX3QgKnBtZDsKIAlwdGVfdCAqcHRlOwogCXVuc2lnbmVkIGxvbmcg
cGFnZXNfYXZhaWw7CiAKQEAgLTk5MiwxMSArOTY4LDcgQEAgdm9pZCBfX2luaXQgc3JtbXVfcGFn
aW5nX2luaXQodm9pZCkKIAkJX19maXhfdG9fdmlydChfX2VuZF9vZl9maXhlZF9hZGRyZXNzZXMg
LSAxKSwgRklYQUREUl9UT1ApOwogCXNybW11X2FsbG9jYXRlX3B0YWJsZV9za2VsZXRvbihQS01B
UF9CQVNFLCBQS01BUF9FTkQpOwogCi0JcGdkID0gcGdkX29mZnNldF9rKFBLTUFQX0JBU0UpOwot
CXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBQS01BUF9CQVNFKTsKLQlwdWQgPSBwdWRfb2Zmc2V0KHA0
ZCwgUEtNQVBfQkFTRSk7Ci0JcG1kID0gcG1kX29mZnNldChwdWQsIFBLTUFQX0JBU0UpOwotCXB0
ZSA9IHB0ZV9vZmZzZXRfa2VybmVsKHBtZCwgUEtNQVBfQkFTRSk7CisJcHRlID0gdmlydF90b19r
cHRlKFBLTUFQX0JBU0UpOwogCXBrbWFwX3BhZ2VfdGFibGUgPSBwdGU7CiAKIAlmbHVzaF9jYWNo
ZV9hbGwoKTsKZGlmZiAtLWdpdCBhL2FyY2gvdW0va2VybmVsL21lbS5jIGIvYXJjaC91bS9rZXJu
ZWwvbWVtLmMKaW5kZXggNDAxYjIyZjE0NzQzLi5jMmZmNzZjODk4MWUgMTAwNjQ0Ci0tLSBhL2Fy
Y2gvdW0va2VybmVsL21lbS5jCisrKyBiL2FyY2gvdW0va2VybmVsL21lbS5jCkBAIC0xMjUsMTAg
KzEyNSw2IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBmaXhhZGRyX3VzZXJfaW5pdCggdm9pZCkKIHsK
ICNpZmRlZiBDT05GSUdfQVJDSF9SRVVTRV9IT1NUX1ZTWVNDQUxMX0FSRUEKIAlsb25nIHNpemUg
PSBGSVhBRERSX1VTRVJfRU5EIC0gRklYQUREUl9VU0VSX1NUQVJUOwotCXBnZF90ICpwZ2Q7Ci0J
cDRkX3QgKnA0ZDsKLQlwdWRfdCAqcHVkOwotCXBtZF90ICpwbWQ7CiAJcHRlX3QgKnB0ZTsKIAlw
aHlzX3QgcDsKIAl1bnNpZ25lZCBsb25nIHYsIHZhZGRyID0gRklYQUREUl9VU0VSX1NUQVJUOwpA
QCAtMTQ2LDExICsxNDIsNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgZml4YWRkcl91c2VyX2luaXQo
IHZvaWQpCiAJcCA9IF9fcGEodik7CiAJZm9yICggOyBzaXplID4gMDsgc2l6ZSAtPSBQQUdFX1NJ
WkUsIHZhZGRyICs9IFBBR0VfU0laRSwKIAkJICAgICAgcCArPSBQQUdFX1NJWkUpIHsKLQkJcGdk
ID0gc3dhcHBlcl9wZ19kaXIgKyBwZ2RfaW5kZXgodmFkZHIpOwotCQlwNGQgPSBwNGRfb2Zmc2V0
KHBnZCwgdmFkZHIpOwotCQlwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgdmFkZHIpOwotCQlwbWQgPSBw
bWRfb2Zmc2V0KHB1ZCwgdmFkZHIpOwotCQlwdGUgPSBwdGVfb2Zmc2V0X2tlcm5lbChwbWQsIHZh
ZGRyKTsKKwkJcHRlID0gdmlydF90b19rcHRlKHZhZGRyKTsKIAkJcHRlX3NldF92YWwoKnB0ZSwg
cCwgUEFHRV9SRUFET05MWSk7CiAJfQogI2VuZGlmCmRpZmYgLS1naXQgYS9hcmNoL3VtL2tlcm5l
bC90cmFwLmMgYi9hcmNoL3VtL2tlcm5lbC90cmFwLmMKaW5kZXggYjZiYTY5NDkyM2U0Li45YzRi
N2U3M2FiOGQgMTAwNjQ0Ci0tLSBhL2FyY2gvdW0va2VybmVsL3RyYXAuYworKysgYi9hcmNoL3Vt
L2tlcm5lbC90cmFwLmMKQEAgLTI2LDkgKzI2LDYgQEAgaW50IGhhbmRsZV9wYWdlX2ZhdWx0KHVu
c2lnbmVkIGxvbmcgYWRkcmVzcywgdW5zaWduZWQgbG9uZyBpcCwKIHsKIAlzdHJ1Y3QgbW1fc3Ry
dWN0ICptbSA9IGN1cnJlbnQtPm1tOwogCXN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hOwotCXBn
ZF90ICpwZ2Q7Ci0JcDRkX3QgKnA0ZDsKLQlwdWRfdCAqcHVkOwogCXBtZF90ICpwbWQ7CiAJcHRl
X3QgKnB0ZTsKIAlpbnQgZXJyID0gLUVGQVVMVDsKQEAgLTEwMiwxMCArOTksNyBAQCBpbnQgaGFu
ZGxlX3BhZ2VfZmF1bHQodW5zaWduZWQgbG9uZyBhZGRyZXNzLCB1bnNpZ25lZCBsb25nIGlwLAog
CQkJfQogCQl9CiAKLQkJcGdkID0gcGdkX29mZnNldChtbSwgYWRkcmVzcyk7Ci0JCXA0ZCA9IHA0
ZF9vZmZzZXQocGdkLCBhZGRyZXNzKTsKLQkJcHVkID0gcHVkX29mZnNldChwNGQsIGFkZHJlc3Mp
OwotCQlwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRkcmVzcyk7CisJCXBtZCA9IHBtZF9vZmYobW0s
IGFkZHJlc3MpOwogCQlwdGUgPSBwdGVfb2Zmc2V0X2tlcm5lbChwbWQsIGFkZHJlc3MpOwogCX0g
d2hpbGUgKCFwdGVfcHJlc2VudCgqcHRlKSk7CiAJZXJyID0gMDsKZGlmZiAtLWdpdCBhL2FyY2gv
dW5pY29yZTMyL21tL21tLmggYi9hcmNoL3VuaWNvcmUzMi9tbS9tbS5oCmluZGV4IDI3MTI3YWJj
OTVmYi4uZjE1N2Y1ZDI0OWFiIDEwMDY0NAotLS0gYS9hcmNoL3VuaWNvcmUzMi9tbS9tbS5oCisr
KyBiL2FyY2gvdW5pY29yZTMyL21tL21tLmgKQEAgLTE0LDE2ICsxNCw2IEBAIGV4dGVybiBpbnQg
c3lzY3RsX292ZXJjb21taXRfbWVtb3J5OwogCiAjZGVmaW5lIFRPUF9QVEUoeCkJcHRlX29mZnNl
dF9rZXJuZWwodG9wX3BtZCwgeCkKIAotc3RhdGljIGlubGluZSBwbWRfdCAqcG1kX29mZihwZ2Rf
dCAqcGdkLCB1bnNpZ25lZCBsb25nIHZpcnQpCi17Ci0JcmV0dXJuIHBtZF9vZmZzZXQoKHB1ZF90
ICopcGdkLCB2aXJ0KTsKLX0KLQotc3RhdGljIGlubGluZSBwbWRfdCAqcG1kX29mZl9rKHVuc2ln
bmVkIGxvbmcgdmlydCkKLXsKLQlyZXR1cm4gcG1kX29mZihwZ2Rfb2Zmc2V0X2sodmlydCksIHZp
cnQpOwotfQotCiBzdHJ1Y3QgbWVtX3R5cGUgewogCXVuc2lnbmVkIGludCBwcm90X3B0ZTsKIAl1
bnNpZ25lZCBpbnQgcHJvdF9sMTsKZGlmZiAtLWdpdCBhL2FyY2gveDg2L21tL2luaXRfMzIuYyBi
L2FyY2gveDg2L21tL2luaXRfMzIuYwppbmRleCA2YTgyMTcyN2NlYWYuLmJkYTkwOWUzZTM3ZSAx
MDA2NDQKLS0tIGEvYXJjaC94ODYvbW0vaW5pdF8zMi5jCisrKyBiL2FyY2gveDg2L21tL2luaXRf
MzIuYwpAQCAtMzk1LDE1ICszOTUsNiBAQCBrZXJuZWxfcGh5c2ljYWxfbWFwcGluZ19pbml0KHVu
c2lnbmVkIGxvbmcgc3RhcnQsCiAKIHB0ZV90ICprbWFwX3B0ZTsKIAotc3RhdGljIGlubGluZSBw
dGVfdCAqa21hcF9nZXRfZml4bWFwX3B0ZSh1bnNpZ25lZCBsb25nIHZhZGRyKQotewotCXBnZF90
ICpwZ2QgPSBwZ2Rfb2Zmc2V0X2sodmFkZHIpOwotCXA0ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBn
ZCwgdmFkZHIpOwotCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgdmFkZHIpOwotCXBtZF90
ICpwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgdmFkZHIpOwotCXJldHVybiBwdGVfb2Zmc2V0X2tlcm5l
bChwbWQsIHZhZGRyKTsKLX0KLQogc3RhdGljIHZvaWQgX19pbml0IGttYXBfaW5pdCh2b2lkKQog
ewogCXVuc2lnbmVkIGxvbmcga21hcF92c3RhcnQ7CkBAIC00MTIsMjggKzQwMywxNyBAQCBzdGF0
aWMgdm9pZCBfX2luaXQga21hcF9pbml0KHZvaWQpCiAJICogQ2FjaGUgdGhlIGZpcnN0IGttYXAg
cHRlOgogCSAqLwogCWttYXBfdnN0YXJ0ID0gX19maXhfdG9fdmlydChGSVhfS01BUF9CRUdJTik7
Ci0Ja21hcF9wdGUgPSBrbWFwX2dldF9maXhtYXBfcHRlKGttYXBfdnN0YXJ0KTsKKwlrbWFwX3B0
ZSA9IHZpcnRfdG9fa3B0ZShrbWFwX3ZzdGFydCk7CiB9CiAKICNpZmRlZiBDT05GSUdfSElHSE1F
TQogc3RhdGljIHZvaWQgX19pbml0IHBlcm1hbmVudF9rbWFwc19pbml0KHBnZF90ICpwZ2RfYmFz
ZSkKIHsKLQl1bnNpZ25lZCBsb25nIHZhZGRyOwotCXBnZF90ICpwZ2Q7Ci0JcDRkX3QgKnA0ZDsK
LQlwdWRfdCAqcHVkOwotCXBtZF90ICpwbWQ7Ci0JcHRlX3QgKnB0ZTsKKwl1bnNpZ25lZCBsb25n
IHZhZGRyID0gUEtNQVBfQkFTRTsKIAotCXZhZGRyID0gUEtNQVBfQkFTRTsKIAlwYWdlX3RhYmxl
X3JhbmdlX2luaXQodmFkZHIsIHZhZGRyICsgUEFHRV9TSVpFKkxBU1RfUEtNQVAsIHBnZF9iYXNl
KTsKIAotCXBnZCA9IHN3YXBwZXJfcGdfZGlyICsgcGdkX2luZGV4KHZhZGRyKTsKLQlwNGQgPSBw
NGRfb2Zmc2V0KHBnZCwgdmFkZHIpOwotCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCB2YWRkcik7Ci0J
cG1kID0gcG1kX29mZnNldChwdWQsIHZhZGRyKTsKLQlwdGUgPSBwdGVfb2Zmc2V0X2tlcm5lbChw
bWQsIHZhZGRyKTsKLQlwa21hcF9wYWdlX3RhYmxlID0gcHRlOworCXBrbWFwX3BhZ2VfdGFibGUg
PSB2aXJ0X3RvX2twdGUodmFkZHIpOwogfQogCiB2b2lkIF9faW5pdCBhZGRfaGlnaHBhZ2VzX3dp
dGhfYWN0aXZlX3JlZ2lvbnMoaW50IG5pZCwKZGlmZiAtLWdpdCBhL2FyY2gveHRlbnNhL2luY2x1
ZGUvYXNtL2ZpeG1hcC5oIGIvYXJjaC94dGVuc2EvaW5jbHVkZS9hc20vZml4bWFwLmgKaW5kZXgg
ODlhNmQxYjc5OTRkLi5hMDZmZmIwYzYxYzcgMTAwNjQ0Ci0tLSBhL2FyY2gveHRlbnNhL2luY2x1
ZGUvYXNtL2ZpeG1hcC5oCisrKyBiL2FyY2gveHRlbnNhL2luY2x1ZGUvYXNtL2ZpeG1hcC5oCkBA
IC03NiwxMiArNzYsNCBAQCBzdGF0aWMgaW5saW5lIHVuc2lnbmVkIGxvbmcgdmlydF90b19maXgo
Y29uc3QgdW5zaWduZWQgbG9uZyB2YWRkcikKIAogI2VuZGlmCiAKLSNkZWZpbmUga21hcF9nZXRf
Zml4bWFwX3B0ZSh2YWRkcikgXAotCXB0ZV9vZmZzZXRfa2VybmVsKCBcCi0JCXBtZF9vZmZzZXQo
cHVkX29mZnNldChwNGRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2YWRkciksIFwKLQkJCQkJCSAodmFk
ZHIpKSwgXAotCQkJCSAgICAgICh2YWRkcikpLCBcCi0JCQkgICAodmFkZHIpKSwgXAotCQkodmFk
ZHIpKQotCiAjZW5kaWYKZGlmZiAtLWdpdCBhL2FyY2gveHRlbnNhL21tL2hpZ2htZW0uYyBiL2Fy
Y2gveHRlbnNhL21tL2hpZ2htZW0uYwppbmRleCA5OWI1YWQxMzdhYjUuLjY3MzE5NmZlODYyZSAx
MDA2NDQKLS0tIGEvYXJjaC94dGVuc2EvbW0vaGlnaG1lbS5jCisrKyBiL2FyY2gveHRlbnNhL21t
L2hpZ2htZW0uYwpAQCAtODYsNiArODYsNiBAQCB2b2lkIF9faW5pdCBrbWFwX2luaXQodm9pZCkK
IAlCVUlMRF9CVUdfT04oUEtNQVBfQkFTRSA8IFRMQlRFTVBfQkFTRV8xICsgVExCVEVNUF9TSVpF
KTsKIAkvKiBjYWNoZSB0aGUgZmlyc3Qga21hcCBwdGUgKi8KIAlrbWFwX3ZzdGFydCA9IF9fZml4
X3RvX3ZpcnQoRklYX0tNQVBfQkVHSU4pOwotCWttYXBfcHRlID0ga21hcF9nZXRfZml4bWFwX3B0
ZShrbWFwX3ZzdGFydCk7CisJa21hcF9wdGUgPSB2aXJ0X3RvX2twdGUoa21hcF92c3RhcnQpOwog
CWttYXBfd2FpdHF1ZXVlc19pbml0KCk7CiB9CmRpZmYgLS1naXQgYS9hcmNoL3h0ZW5zYS9tbS9r
YXNhbl9pbml0LmMgYi9hcmNoL3h0ZW5zYS9tbS9rYXNhbl9pbml0LmMKaW5kZXggZTNiYWEyMWZm
MjRjLi4xZmVmMjRkYjJmZjYgMTAwNjQ0Ci0tLSBhL2FyY2gveHRlbnNhL21tL2thc2FuX2luaXQu
YworKysgYi9hcmNoL3h0ZW5zYS9tbS9rYXNhbl9pbml0LmMKQEAgLTE5LDEwICsxOSw3IEBACiB2
b2lkIF9faW5pdCBrYXNhbl9lYXJseV9pbml0KHZvaWQpCiB7CiAJdW5zaWduZWQgbG9uZyB2YWRk
ciA9IEtBU0FOX1NIQURPV19TVEFSVDsKLQlwZ2RfdCAqcGdkID0gcGdkX29mZnNldF9rKHZhZGRy
KTsKLQlwNGRfdCAqcDRkID0gcDRkX29mZnNldChwZ2QsIHZhZGRyKTsKLQlwdWRfdCAqcHVkID0g
cHVkX29mZnNldChwNGQsIHZhZGRyKTsKLQlwbWRfdCAqcG1kID0gcG1kX29mZnNldChwdWQsIHZh
ZGRyKTsKKwlwbWRfdCAqcG1kID0gcG1kX29mZl9rKHZhZGRyKTsKIAlpbnQgaTsKIAogCWZvciAo
aSA9IDA7IGkgPCBQVFJTX1BFUl9QVEU7ICsraSkKQEAgLTQzLDEwICs0MCw3IEBAIHN0YXRpYyB2
b2lkIF9faW5pdCBwb3B1bGF0ZSh2b2lkICpzdGFydCwgdm9pZCAqZW5kKQogCXVuc2lnbmVkIGxv
bmcgbl9wbWRzID0gbl9wYWdlcyAvIFBUUlNfUEVSX1BURTsKIAl1bnNpZ25lZCBsb25nIGksIGo7
CiAJdW5zaWduZWQgbG9uZyB2YWRkciA9ICh1bnNpZ25lZCBsb25nKXN0YXJ0OwotCXBnZF90ICpw
Z2QgPSBwZ2Rfb2Zmc2V0X2sodmFkZHIpOwotCXA0ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBnZCwg
dmFkZHIpOwotCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgdmFkZHIpOwotCXBtZF90ICpw
bWQgPSBwbWRfb2Zmc2V0KHB1ZCwgdmFkZHIpOworCXBtZF90ICpwbWQgPSBwbWRfb2ZmX2sodmFk
ZHIpOwogCXB0ZV90ICpwdGUgPSBtZW1ibG9ja19hbGxvYyhuX3BhZ2VzICogc2l6ZW9mKHB0ZV90
KSwgUEFHRV9TSVpFKTsKIAogCWlmICghcHRlKQpkaWZmIC0tZ2l0IGEvYXJjaC94dGVuc2EvbW0v
bW11LmMgYi9hcmNoL3h0ZW5zYS9tbS9tbXUuYwppbmRleCAzN2U0NzhhMjc4NzcuLmZkMjE5M2Rm
OGExNCAxMDA2NDQKLS0tIGEvYXJjaC94dGVuc2EvbW0vbW11LmMKKysrIGIvYXJjaC94dGVuc2Ev
bW0vbW11LmMKQEAgLTIxLDEwICsyMSw3IEBACiAjaWYgZGVmaW5lZChDT05GSUdfSElHSE1FTSkK
IHN0YXRpYyB2b2lkICogX19pbml0IGluaXRfcG1kKHVuc2lnbmVkIGxvbmcgdmFkZHIsIHVuc2ln
bmVkIGxvbmcgbl9wYWdlcykKIHsKLQlwZ2RfdCAqcGdkID0gcGdkX29mZnNldF9rKHZhZGRyKTsK
LQlwNGRfdCAqcDRkID0gcDRkX29mZnNldChwZ2QsIHZhZGRyKTsKLQlwdWRfdCAqcHVkID0gcHVk
X29mZnNldChwNGQsIHZhZGRyKTsKLQlwbWRfdCAqcG1kID0gcG1kX29mZnNldChwdWQsIHZhZGRy
KTsKKwlwbWRfdCAqcG1kID0gcG1kX29mZl9rKHZhZGRyKTsKIAlwdGVfdCAqcHRlOwogCXVuc2ln
bmVkIGxvbmcgaTsKIApkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9wZ3RhYmxlLmggYi9pbmNs
dWRlL2xpbnV4L3BndGFibGUuaAppbmRleCAyZjcxZTU4NmFhODcuLjhkMDkyY2VhZDZlYSAxMDA2
NDQKLS0tIGEvaW5jbHVkZS9saW51eC9wZ3RhYmxlLmgKKysrIGIvaW5jbHVkZS9saW51eC9wZ3Rh
YmxlLmgKQEAgLTI4LDYgKzI4LDMwIEBACiAjZGVmaW5lIFVTRVJfUEdUQUJMRVNfQ0VJTElORwkw
VUwKICNlbmRpZgogCisvKgorICogSW4gbWFueSBjYXNlcyBpdCBpcyBrbm93biB0aGF0IGEgdmly
dHVhbCBhZGRyZXNzIGlzIG1hcHBlZCBhdCBQTUQgb3IgUFRFCisgKiBsZXZlbCwgc28gaW5zdGVh
ZCBvZiB0cmF2ZXJzaW5nIGFsbCB0aGUgcGFnZSB0YWJsZSBsZXZlbHMsIHdlIGNhbiBnZXQgYQor
ICogcG9pbnRlciB0byB0aGUgUE1EIGVudHJ5IGluIHVzZXIgb3Iga2VybmVsIHBhZ2UgdGFibGUg
b3IgdHJhbnNsYXRlIGEgdmlydHVhbAorICogYWRkcmVzcyB0byB0aGUgcG9pbnRlciBpbiB0aGUg
UFRFIGluIHRoZSBrZXJuZWwgcGFnZSB0YWJsZXMgd2l0aCBzaW1wbGUKKyAqIGhlbHBlcnMuCisg
Ki8KK3N0YXRpYyBpbmxpbmUgcG1kX3QgKnBtZF9vZmYoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVu
c2lnbmVkIGxvbmcgdmEpCit7CisJcmV0dXJuIHBtZF9vZmZzZXQocHVkX29mZnNldChwNGRfb2Zm
c2V0KHBnZF9vZmZzZXQobW0sIHZhKSwgdmEpLCB2YSksIHZhKTsKK30KKworc3RhdGljIGlubGlu
ZSBwbWRfdCAqcG1kX29mZl9rKHVuc2lnbmVkIGxvbmcgdmEpCit7CisJcmV0dXJuIHBtZF9vZmZz
ZXQocHVkX29mZnNldChwNGRfb2Zmc2V0KHBnZF9vZmZzZXRfayh2YSksIHZhKSwgdmEpLCB2YSk7
Cit9CisKK3N0YXRpYyBpbmxpbmUgcHRlX3QgKnZpcnRfdG9fa3B0ZSh1bnNpZ25lZCBsb25nIHZh
ZGRyKQoreworCXBtZF90ICpwbWQgPSBwbWRfb2ZmX2sodmFkZHIpOworCisJcmV0dXJuIHBtZF9u
b25lKCpwbWQpID8gTlVMTCA6IHB0ZV9vZmZzZXRfa2VybmVsKHBtZCwgdmFkZHIpOworfQorCiAj
aWZuZGVmIF9fSEFWRV9BUkNIX1BURVBfU0VUX0FDQ0VTU19GTEFHUwogZXh0ZXJuIGludCBwdGVw
X3NldF9hY2Nlc3NfZmxhZ3Moc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiAJCQkJIHVuc2ln
bmVkIGxvbmcgYWRkcmVzcywgcHRlX3QgKnB0ZXAsCi0tIAoyLjI2LjIKCl9fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcgbGlzdApP
cGVuUklTQ0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29yZXMub3Jn
L2xpc3RpbmZvL29wZW5yaXNjCg==
