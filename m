Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 9D1731B209C
	for <lists+openrisc@lfdr.de>; Tue, 21 Apr 2020 10:01:41 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id B0E2620ADA;
	Tue, 21 Apr 2020 10:01:38 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id CBA882099C
 for <openrisc@lists.librecores.org>; Sun, 12 Apr 2020 21:50:08 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 121262074B;
 Sun, 12 Apr 2020 19:49:52 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1586721007;
 bh=HpVptRrO3ApHuHVEl/zOWf1H98QI0nbdXGe6dbN/sz4=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=gBqC6whqdEfCGiNJsiMdJFz4QZ4elUIrt6fwDR9gLmqLa41AzjmXiYcDeo7ANTyKV
 Tb7iN+7vdrnfPQ0K+e37uB8GzTNgwaelA/5omHEj2EBoNhOZwWV7ZAnRAv5V0GWaSo
 s43iWzfp3Hz5AciqeYVEgx1WYzdMOnGWtzF69EuY=
From: Mike Rapoport <rppt@kernel.org>
To: linux-kernel@vger.kernel.org
Date: Sun, 12 Apr 2020 22:48:41 +0300
Message-Id: <20200412194859.12663-4-rppt@kernel.org>
X-Mailer: git-send-email 2.25.1
In-Reply-To: <20200412194859.12663-1-rppt@kernel.org>
References: <20200412194859.12663-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Tue, 21 Apr 2020 10:01:35 +0200
Subject: [OpenRISC] [PATCH 03/21] mm: remove CONFIG_HAVE_MEMBLOCK_NODE_MAP
 option
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 linux-doc@vger.kernel.org, Catalin Marinas <catalin.marinas@arm.com>,
 Heiko Carstens <heiko.carstens@de.ibm.com>, Michal Hocko <mhocko@kernel.org>,
 "James E.J. Bottomley" <James.Bottomley@HansenPartnership.com>,
 Max Filippov <jcmvbkbc@gmail.com>, Guo Ren <guoren@kernel.org>,
 linux-csky@vger.kernel.org, linux-parisc@vger.kernel.org,
 sparclinux@vger.kernel.org, linux-hexagon@vger.kernel.org,
 linux-riscv@lists.infradead.org, Mike Rapoport <rppt@linux.ibm.com>,
 Greg Ungerer <gerg@linux-m68k.org>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Jonathan Corbet <corbet@lwn.net>,
 linux-sh@vger.kernel.org, Michael Ellerman <mpe@ellerman.id.au>,
 Helge Deller <deller@gmx.de>, x86@kernel.org,
 Russell King <linux@armlinux.org.uk>, Ley Foon Tan <ley.foon.tan@intel.com>,
 Yoshinori Sato <ysato@users.sourceforge.jp>,
 linux-arm-kernel@lists.infradead.org, Mark Salter <msalter@redhat.com>,
 Matt Turner <mattst88@gmail.com>, linux-snps-arc@lists.infradead.org,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 linux-alpha@vger.kernel.org, linux-um@lists.infradead.org,
 linux-m68k@lists.linux-m68k.org, Tony Luck <tony.luck@intel.com>,
 Greentime Hu <green.hu@gmail.com>, Paul Walmsley <paul.walmsley@sifive.com>,
 Guan Xuetao <gxt@pku.edu.cn>, Hoan Tran <Hoan@os.amperecomputing.com>,
 Michal Simek <monstr@monstr.eu>,
 Thomas Bogendoerfer <tsbogend@alpha.franken.de>,
 Brian Cain <bcain@codeaurora.org>, Nick Hu <nickhu@andestech.com>,
 linux-mm@kvack.org, Vineet Gupta <vgupta@synopsys.com>,
 linux-mips@vger.kernel.org, openrisc@lists.librecores.org,
 Richard Weinberger <richard@nod.at>, Andrew Morton <akpm@linux-foundation.org>,
 linuxppc-dev@lists.ozlabs.org, "David S. Miller" <davem@davemloft.net>,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlIENPTkZJR19IQVZF
X01FTUJMT0NLX05PREVfTUFQIGlzIHVzZWQgdG8gZGlmZmVyZW50aWF0ZSBpbml0aWFsaXphdGlv
bgpvZiBub2RlcyBhbmQgem9uZXMgc3RydWN0dXJlcyBiZXR3ZWVuIHRoZSBzeXN0ZW1zIHRoYXQg
aGF2ZSByZWdpb24gdG8gbm9kZQptYXBwaW5nIGluIG1lbWJsb2NrIGFuZCB0aG9zZSB0aGF0IGRv
bid0LgoKQ3VycmVudGx5IGFsbCB0aGUgTlVNQSBhcmNoaXRlY3R1cmVzIGVuYWJsZSB0aGlzIG9w
dGlvbiBhbmQgZm9yIHRoZQpub24tTlVNQSBzeXN0ZW1zIHdlIGNhbiBwcmVzdW1lIHRoYXQgYWxs
IHRoZSBtZW1vcnkgYmVsb25ncyB0byBub2RlIDAgYW5kCnRoZXJlZm9yZSB0aGUgY29tcGlsZSB0
aW1lIGNvbmZpZ3VyYXRpb24gb3B0aW9uIGlzIG5vdCByZXF1aXJlZC4KClRoZSByZW1haW5pbmcg
ZmV3IGFyY2hpdGVjdHVyZXMgdGhhdCB1c2UgRElTQ09OVElHTUVNIHdpdGhvdXQgTlVNQSBhcmUK
ZWFzaWx5IHVwZGF0ZWQgdG8gdXNlIG1lbWJsb2NrX2FkZF9ub2RlKCkgaW5zdGVhZCBvZiBtZW1i
bG9ja19hZGQoKSBhbmQKdGh1cyBoYXZlIHByb3BlciBjb3JyZXNwb25kZW5jZSBvZiBtZW1ibG9j
ayByZWdpb25zIHRvIE5VTUEgbm9kZXMuCgpTdGlsbCwgZnJlZV9hcmVhX2luaXRfbm9kZSgpIG11
c3QgaGF2ZSBhIGJhY2t3YXJkIGNvbXBhdGlibGUgdmVyc2lvbgpiZWNhdXNlIGl0cyBzZW1hbnRp
Y3Mgd2l0aCBhbmQgd2l0aG91dCBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUCBpcwpkaWZm
ZXJlbnQuIE9uY2UgYWxsIHRoZSBhcmNoaXRlY3R1cmVzIHdpbGwgdXNlIHRoZSBuZXcgc2VtYW50
aWNzLCB0aGUKZW50aXJlIGNvbXBhdGliaWxpdHkgbGF5ZXIgY2FuIGJlIGRyb3BwZWQuCgpUbyBh
dm9pZCBhZGRpdGlvbiBvZiBleHRyYSBydW4gdGltZSBtZW1vcnkgdG8gc3RvcmUgbm9kZSBpZCBm
b3IKYXJjaGl0ZWN0dXJlcyB0aGF0IGtlZXAgbWVtYmxvY2sgYnV0IGhhdmUgb25seSBhIHNpbmds
ZSBub2RlLCB0aGUgbm9kZSBpZApmaWVsZCBvZiB0aGUgbWVtYmxvY2tfcmVnaW9uIGlzIGd1YXJk
ZWQgYnkgQ09ORklHX05FRURfTVVMVElQTEVfTk9ERVMgYW5kCnRoZSBjb3JyZXNwb25kaW5nIGFj
Y2Vzc29ycyBwcmVzdW1lIHRoYXQgaW4gdGhvc2UgY2FzZXMgaXQgaXMgYWx3YXlzIDAuCgpTaWdu
ZWQtb2ZmLWJ5OiBNaWtlIFJhcG9wb3J0IDxycHB0QGxpbnV4LmlibS5jb20+Ci0tLQogLi4uL3Zt
L251bWEtbWVtYmxvY2svYXJjaC1zdXBwb3J0LnR4dCAgICAgICAgIHwgIDM0IC0tLS0tLQogYXJj
aC9hbHBoYS9tbS9udW1hLmMgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICA0ICstCiBhcmNo
L2FybTY0L0tjb25maWcgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIDEgLQogYXJjaC9p
YTY0L0tjb25maWcgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAxIC0KIGFyY2gvbTY4
ay9tbS9tb3Rvcm9sYS5jICAgICAgICAgICAgICAgICAgICAgICB8ICAgNCArLQogYXJjaC9taWNy
b2JsYXplL0tjb25maWcgICAgICAgICAgICAgICAgICAgICAgIHwgICAxIC0KIGFyY2gvbWlwcy9L
Y29uZmlnICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgMSAtCiBhcmNoL3Bvd2VycGMv
S2NvbmZpZyAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIDEgLQogYXJjaC9yaXNjdi9LY29u
ZmlnICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAxIC0KIGFyY2gvczM5MC9LY29uZmln
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgMSAtCiBhcmNoL3NoL0tjb25maWcgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIDEgLQogYXJjaC9zcGFyYy9LY29uZmlnICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAxIC0KIGFyY2gveDg2L0tjb25maWcgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICB8ICAgMSAtCiBpbmNsdWRlL2xpbnV4L21lbWJsb2NrLmgg
ICAgICAgICAgICAgICAgICAgICAgfCAgIDggKy0KIGluY2x1ZGUvbGludXgvbW0uaCAgICAgICAg
ICAgICAgICAgICAgICAgICAgICB8ICAxMiArLS0KIGluY2x1ZGUvbGludXgvbW16b25lLmggICAg
ICAgICAgICAgICAgICAgICAgICB8ICAgMiArLQogbW0vS2NvbmZpZyAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIHwgICAzIC0KIG1tL21lbWJsb2NrLmMgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICB8ICAxMSArLQogbW0vbWVtb3J5X2hvdHBsdWcuYyAgICAgICAgICAg
ICAgICAgICAgICAgICAgIHwgICA0IC0KIG1tL3BhZ2VfYWxsb2MuYyAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICB8IDEwMSArKysrKysrKysrLS0tLS0tLS0KIDIwIGZpbGVzIGNoYW5nZWQs
IDc0IGluc2VydGlvbnMoKyksIDExOSBkZWxldGlvbnMoLSkKIGRlbGV0ZSBtb2RlIDEwMDY0NCBE
b2N1bWVudGF0aW9uL2ZlYXR1cmVzL3ZtL251bWEtbWVtYmxvY2svYXJjaC1zdXBwb3J0LnR4dAoK
ZGlmZiAtLWdpdCBhL0RvY3VtZW50YXRpb24vZmVhdHVyZXMvdm0vbnVtYS1tZW1ibG9jay9hcmNo
LXN1cHBvcnQudHh0IGIvRG9jdW1lbnRhdGlvbi9mZWF0dXJlcy92bS9udW1hLW1lbWJsb2NrL2Fy
Y2gtc3VwcG9ydC50eHQKZGVsZXRlZCBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDMwMDRiZWIwZmQ3
MS4uMDAwMDAwMDAwMDAwCi0tLSBhL0RvY3VtZW50YXRpb24vZmVhdHVyZXMvdm0vbnVtYS1tZW1i
bG9jay9hcmNoLXN1cHBvcnQudHh0CisrKyAvZGV2L251bGwKQEAgLTEsMzQgKzAsMCBAQAotIwot
IyBGZWF0dXJlIG5hbWU6ICAgICAgICAgIG51bWEtbWVtYmxvY2sKLSMgICAgICAgICBLY29uZmln
OiAgICAgICBIQVZFX01FTUJMT0NLX05PREVfTUFQCi0jICAgICAgICAgZGVzY3JpcHRpb246ICAg
YXJjaCBzdXBwb3J0cyBOVU1BIGF3YXJlIG1lbWJsb2NrcwotIwotICAgIC0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tCi0gICAgfCAgICAgICAgIGFyY2ggfHN0YXR1c3wKLSAgICAtLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLQotICAgIHwgICAgICAgYWxwaGE6IHwgVE9ETyB8Ci0gICAgfCAgICAgICAgIGFy
YzogfCAgLi4gIHwKLSAgICB8ICAgICAgICAgYXJtOiB8ICAuLiAgfAotICAgIHwgICAgICAgYXJt
NjQ6IHwgIG9rICB8Ci0gICAgfCAgICAgICAgIGM2eDogfCAgLi4gIHwKLSAgICB8ICAgICAgICBj
c2t5OiB8ICAuLiAgfAotICAgIHwgICAgICAgaDgzMDA6IHwgIC4uICB8Ci0gICAgfCAgICAgaGV4
YWdvbjogfCAgLi4gIHwKLSAgICB8ICAgICAgICBpYTY0OiB8ICBvayAgfAotICAgIHwgICAgICAg
IG02OGs6IHwgIC4uICB8Ci0gICAgfCAgbWljcm9ibGF6ZTogfCAgb2sgIHwKLSAgICB8ICAgICAg
ICBtaXBzOiB8ICBvayAgfAotICAgIHwgICAgICAgbmRzMzI6IHwgVE9ETyB8Ci0gICAgfCAgICAg
ICBuaW9zMjogfCAgLi4gIHwKLSAgICB8ICAgIG9wZW5yaXNjOiB8ICAuLiAgfAotICAgIHwgICAg
ICBwYXJpc2M6IHwgIC4uICB8Ci0gICAgfCAgICAgcG93ZXJwYzogfCAgb2sgIHwKLSAgICB8ICAg
ICAgIHJpc2N2OiB8ICBvayAgfAotICAgIHwgICAgICAgIHMzOTA6IHwgIG9rICB8Ci0gICAgfCAg
ICAgICAgICBzaDogfCAgb2sgIHwKLSAgICB8ICAgICAgIHNwYXJjOiB8ICBvayAgfAotICAgIHwg
ICAgICAgICAgdW06IHwgIC4uICB8Ci0gICAgfCAgIHVuaWNvcmUzMjogfCAgLi4gIHwKLSAgICB8
ICAgICAgICAgeDg2OiB8ICBvayAgfAotICAgIHwgICAgICB4dGVuc2E6IHwgIC4uICB8Ci0gICAg
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KZGlmZiAtLWdpdCBhL2FyY2gvYWxwaGEvbW0vbnVtYS5j
IGIvYXJjaC9hbHBoYS9tbS9udW1hLmMKaW5kZXggZDBiNzMzNzFlOTg1Li5hMjRjZDEzZTcxY2Ig
MTAwNjQ0Ci0tLSBhL2FyY2gvYWxwaGEvbW0vbnVtYS5jCisrKyBiL2FyY2gvYWxwaGEvbW0vbnVt
YS5jCkBAIC0xNDQsOCArMTQ0LDggQEAgc2V0dXBfbWVtb3J5X25vZGUoaW50IG5pZCwgdm9pZCAq
a2VybmVsX2VuZCkKIAlpZiAoIW5pZCAmJiAobm9kZV9tYXhfcGZuIDwgZW5kX2tlcm5lbF9wZm4g
fHwgbm9kZV9taW5fcGZuID4gc3RhcnRfa2VybmVsX3BmbikpCiAJCXBhbmljKCJrZXJuZWwgbG9h
ZGVkIG91dCBvZiByYW0iKTsKIAotCW1lbWJsb2NrX2FkZChQRk5fUEhZUyhub2RlX21pbl9wZm4p
LAotCQkgICAgIChub2RlX21heF9wZm4gLSBub2RlX21pbl9wZm4pIDw8IFBBR0VfU0hJRlQpOwor
CW1lbWJsb2NrX2FkZF9ub2RlKFBGTl9QSFlTKG5vZGVfbWluX3BmbiksCisJCQkgIChub2RlX21h
eF9wZm4gLSBub2RlX21pbl9wZm4pIDw8IFBBR0VfU0hJRlQsIG5pZCk7CiAKIAkvKiBab25lIHN0
YXJ0IHBoeXMtYWRkciBtdXN0IGJlIDJeKE1BWF9PUkRFUi0xKSBhbGlnbmVkLgogCSAgIE5vdGUg
dGhhdCB3ZSByb3VuZCB0aGlzIGRvd24sIG5vdCB1cCAtIG5vZGUgbWVtb3J5CmRpZmYgLS1naXQg
YS9hcmNoL2FybTY0L0tjb25maWcgYi9hcmNoL2FybTY0L0tjb25maWcKaW5kZXggNDBmYjA1ZDk2
YzYwLi45NTcxNTEwMTNkMTAgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtNjQvS2NvbmZpZworKysgYi9h
cmNoL2FybTY0L0tjb25maWcKQEAgLTE1Niw3ICsxNTYsNiBAQCBjb25maWcgQVJNNjQKIAlzZWxl
Y3QgSEFWRV9HQ0NfUExVR0lOUwogCXNlbGVjdCBIQVZFX0hXX0JSRUFLUE9JTlQgaWYgUEVSRl9F
VkVOVFMKIAlzZWxlY3QgSEFWRV9JUlFfVElNRV9BQ0NPVU5USU5HCi0Jc2VsZWN0IEhBVkVfTUVN
QkxPQ0tfTk9ERV9NQVAgaWYgTlVNQQogCXNlbGVjdCBIQVZFX05NSQogCXNlbGVjdCBIQVZFX1BB
VEFfUExBVEZPUk0KIAlzZWxlY3QgSEFWRV9QRVJGX0VWRU5UUwpkaWZmIC0tZ2l0IGEvYXJjaC9p
YTY0L0tjb25maWcgYi9hcmNoL2lhNjQvS2NvbmZpZwppbmRleCBiYWI3Y2Q4Nzg0NjQuLjg4YjA1
YjUyNTZhOSAxMDA2NDQKLS0tIGEvYXJjaC9pYTY0L0tjb25maWcKKysrIGIvYXJjaC9pYTY0L0tj
b25maWcKQEAgLTMxLDcgKzMxLDYgQEAgY29uZmlnIElBNjQKIAlzZWxlY3QgSEFWRV9GVU5DVElP
Tl9UUkFDRVIKIAlzZWxlY3QgVFRZCiAJc2VsZWN0IEhBVkVfQVJDSF9UUkFDRUhPT0sKLQlzZWxl
Y3QgSEFWRV9NRU1CTE9DS19OT0RFX01BUAogCXNlbGVjdCBIQVZFX1ZJUlRfQ1BVX0FDQ09VTlRJ
TkcKIAlzZWxlY3QgRE1BX05PTkNPSEVSRU5UX01NQVAKIAlzZWxlY3QgQVJDSF9IQVNfU1lOQ19E
TUFfRk9SX0NQVQpkaWZmIC0tZ2l0IGEvYXJjaC9tNjhrL21tL21vdG9yb2xhLmMgYi9hcmNoL202
OGsvbW0vbW90b3JvbGEuYwppbmRleCBmYzE2MTkwZWMyZDYuLjg0YWI1OTYzY2FiYiAxMDA2NDQK
LS0tIGEvYXJjaC9tNjhrL21tL21vdG9yb2xhLmMKKysrIGIvYXJjaC9tNjhrL21tL21vdG9yb2xh
LmMKQEAgLTM4Niw3ICszODYsNyBAQCB2b2lkIF9faW5pdCBwYWdpbmdfaW5pdCh2b2lkKQogCiAJ
bWluX2FkZHIgPSBtNjhrX21lbW9yeVswXS5hZGRyOwogCW1heF9hZGRyID0gbWluX2FkZHIgKyBt
NjhrX21lbW9yeVswXS5zaXplOwotCW1lbWJsb2NrX2FkZChtNjhrX21lbW9yeVswXS5hZGRyLCBt
NjhrX21lbW9yeVswXS5zaXplKTsKKwltZW1ibG9ja19hZGRfbm9kZShtNjhrX21lbW9yeVswXS5h
ZGRyLCBtNjhrX21lbW9yeVswXS5zaXplLCAwKTsKIAlmb3IgKGkgPSAxOyBpIDwgbTY4a19udW1f
bWVtb3J5OykgewogCQlpZiAobTY4a19tZW1vcnlbaV0uYWRkciA8IG1pbl9hZGRyKSB7CiAJCQlw
cmludGsoIklnbm9yaW5nIG1lbW9yeSBjaHVuayBhdCAweCVseDoweCVseCBiZWZvcmUgdGhlIGZp
cnN0IGNodW5rXG4iLApAQCAtMzk3LDcgKzM5Nyw3IEBAIHZvaWQgX19pbml0IHBhZ2luZ19pbml0
KHZvaWQpCiAJCQkJKG02OGtfbnVtX21lbW9yeSAtIGkpICogc2l6ZW9mKHN0cnVjdCBtNjhrX21l
bV9pbmZvKSk7CiAJCQljb250aW51ZTsKIAkJfQotCQltZW1ibG9ja19hZGQobTY4a19tZW1vcnlb
aV0uYWRkciwgbTY4a19tZW1vcnlbaV0uc2l6ZSk7CisJCW1lbWJsb2NrX2FkZF9ub2RlKG02OGtf
bWVtb3J5W2ldLmFkZHIsIG02OGtfbWVtb3J5W2ldLnNpemUsIGkpOwogCQlhZGRyID0gbTY4a19t
ZW1vcnlbaV0uYWRkciArIG02OGtfbWVtb3J5W2ldLnNpemU7CiAJCWlmIChhZGRyID4gbWF4X2Fk
ZHIpCiAJCQltYXhfYWRkciA9IGFkZHI7CmRpZmYgLS1naXQgYS9hcmNoL21pY3JvYmxhemUvS2Nv
bmZpZyBiL2FyY2gvbWljcm9ibGF6ZS9LY29uZmlnCmluZGV4IDk2MDZjMjQ0YjViOC4uZDI2MmFj
MGM4NzE0IDEwMDY0NAotLS0gYS9hcmNoL21pY3JvYmxhemUvS2NvbmZpZworKysgYi9hcmNoL21p
Y3JvYmxhemUvS2NvbmZpZwpAQCAtMzIsNyArMzIsNiBAQCBjb25maWcgTUlDUk9CTEFaRQogCXNl
bGVjdCBIQVZFX0ZUUkFDRV9NQ09VTlRfUkVDT1JECiAJc2VsZWN0IEhBVkVfRlVOQ1RJT05fR1JB
UEhfVFJBQ0VSCiAJc2VsZWN0IEhBVkVfRlVOQ1RJT05fVFJBQ0VSCi0Jc2VsZWN0IEhBVkVfTUVN
QkxPQ0tfTk9ERV9NQVAKIAlzZWxlY3QgSEFWRV9PUFJPRklMRQogCXNlbGVjdCBIQVZFX1BDSQog
CXNlbGVjdCBJUlFfRE9NQUlOCmRpZmYgLS1naXQgYS9hcmNoL21pcHMvS2NvbmZpZyBiL2FyY2gv
bWlwcy9LY29uZmlnCmluZGV4IDY5MDcxOGIzNzAxYS4uOTRhOTFiNWI3NzU5IDEwMDY0NAotLS0g
YS9hcmNoL21pcHMvS2NvbmZpZworKysgYi9hcmNoL21pcHMvS2NvbmZpZwpAQCAtNzIsNyArNzIs
NiBAQCBjb25maWcgTUlQUwogCXNlbGVjdCBIQVZFX0tQUk9CRVMKIAlzZWxlY3QgSEFWRV9LUkVU
UFJPQkVTCiAJc2VsZWN0IEhBVkVfTERfREVBRF9DT0RFX0RBVEFfRUxJTUlOQVRJT04KLQlzZWxl
Y3QgSEFWRV9NRU1CTE9DS19OT0RFX01BUAogCXNlbGVjdCBIQVZFX01PRF9BUkNIX1NQRUNJRklD
CiAJc2VsZWN0IEhBVkVfTk1JCiAJc2VsZWN0IEhBVkVfT1BST0ZJTEUKZGlmZiAtLWdpdCBhL2Fy
Y2gvcG93ZXJwYy9LY29uZmlnIGIvYXJjaC9wb3dlcnBjL0tjb25maWcKaW5kZXggOTI0YzU0MWE5
MjYwLi41Zjg2YjIyYjdkMmMgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9LY29uZmlnCisrKyBi
L2FyY2gvcG93ZXJwYy9LY29uZmlnCkBAIC0yMTAsNyArMjEwLDYgQEAgY29uZmlnIFBQQwogCXNl
bGVjdCBIQVZFX0tSRVRQUk9CRVMKIAlzZWxlY3QgSEFWRV9MRF9ERUFEX0NPREVfREFUQV9FTElN
SU5BVElPTgogCXNlbGVjdCBIQVZFX0xJVkVQQVRDSAkJCWlmIEhBVkVfRFlOQU1JQ19GVFJBQ0Vf
V0lUSF9SRUdTCi0Jc2VsZWN0IEhBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKIAlzZWxlY3QgSEFWRV9N
T0RfQVJDSF9TUEVDSUZJQwogCXNlbGVjdCBIQVZFX05NSQkJCQlpZiBQRVJGX0VWRU5UUyB8fCAo
UFBDNjQgJiYgUFBDX0JPT0szUykKIAlzZWxlY3QgSEFWRV9IQVJETE9DS1VQX0RFVEVDVE9SX0FS
Q0gJaWYgKFBQQzY0ICYmIFBQQ19CT09LM1MpCmRpZmYgLS1naXQgYS9hcmNoL3Jpc2N2L0tjb25m
aWcgYi9hcmNoL3Jpc2N2L0tjb25maWcKaW5kZXggYTE5NzI1ODU5NWVmLi5mZjViYjhlODA0NzUg
MTAwNjQ0Ci0tLSBhL2FyY2gvcmlzY3YvS2NvbmZpZworKysgYi9hcmNoL3Jpc2N2L0tjb25maWcK
QEAgLTMyLDcgKzMyLDYgQEAgY29uZmlnIFJJU0NWCiAJc2VsZWN0IEhBVkVfQVJDSF9BVURJVFNZ
U0NBTEwKIAlzZWxlY3QgSEFWRV9BUkNIX1NFQ0NPTVBfRklMVEVSCiAJc2VsZWN0IEhBVkVfQVNN
X01PRFZFUlNJT05TCi0Jc2VsZWN0IEhBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKIAlzZWxlY3QgSEFW
RV9ETUFfQ09OVElHVU9VUyBpZiBNTVUKIAlzZWxlY3QgSEFWRV9GVVRFWF9DTVBYQ0hHIGlmIEZV
VEVYCiAJc2VsZWN0IEhBVkVfUEVSRl9FVkVOVFMKZGlmZiAtLWdpdCBhL2FyY2gvczM5MC9LY29u
ZmlnIGIvYXJjaC9zMzkwL0tjb25maWcKaW5kZXggMjE2N2JjZTk5M2ZmLi5kNmRjNjkzM2FkYzIg
MTAwNjQ0Ci0tLSBhL2FyY2gvczM5MC9LY29uZmlnCisrKyBiL2FyY2gvczM5MC9LY29uZmlnCkBA
IC0xNjIsNyArMTYyLDYgQEAgY29uZmlnIFMzOTAKIAlzZWxlY3QgSEFWRV9MSVZFUEFUQ0gKIAlz
ZWxlY3QgSEFWRV9QRVJGX1JFR1MKIAlzZWxlY3QgSEFWRV9QRVJGX1VTRVJfU1RBQ0tfRFVNUAot
CXNlbGVjdCBIQVZFX01FTUJMT0NLX05PREVfTUFQCiAJc2VsZWN0IEhBVkVfTUVNQkxPQ0tfUEhZ
U19NQVAKIAlzZWxlY3QgTU1VX0dBVEhFUl9OT19HQVRIRVIKIAlzZWxlY3QgSEFWRV9NT0RfQVJD
SF9TUEVDSUZJQwpkaWZmIC0tZ2l0IGEvYXJjaC9zaC9LY29uZmlnIGIvYXJjaC9zaC9LY29uZmln
CmluZGV4IGI0ZjBlMzdiODNlYi4uYmU3YzRmNjk5MTEzIDEwMDY0NAotLS0gYS9hcmNoL3NoL0tj
b25maWcKKysrIGIvYXJjaC9zaC9LY29uZmlnCkBAIC05LDcgKzksNiBAQCBjb25maWcgU1VQRVJI
CiAJc2VsZWN0IENMS0RFVl9MT09LVVAKIAlzZWxlY3QgRE1BX0RFQ0xBUkVfQ09IRVJFTlQKIAlz
ZWxlY3QgSEFWRV9JREUgaWYgSEFTX0lPUE9SVF9NQVAKLQlzZWxlY3QgSEFWRV9NRU1CTE9DS19O
T0RFX01BUAogCXNlbGVjdCBIQVZFX09QUk9GSUxFCiAJc2VsZWN0IEhBVkVfQVJDSF9UUkFDRUhP
T0sKIAlzZWxlY3QgSEFWRV9QRVJGX0VWRU5UUwpkaWZmIC0tZ2l0IGEvYXJjaC9zcGFyYy9LY29u
ZmlnIGIvYXJjaC9zcGFyYy9LY29uZmlnCmluZGV4IGRhNTE1ZmRhZDgzZC4uNzk1MjA2YjdiNTUy
IDEwMDY0NAotLS0gYS9hcmNoL3NwYXJjL0tjb25maWcKKysrIGIvYXJjaC9zcGFyYy9LY29uZmln
CkBAIC02NSw3ICs2NSw2IEBAIGNvbmZpZyBTUEFSQzY0CiAJc2VsZWN0IEhBVkVfS1JFVFBST0JF
UwogCXNlbGVjdCBIQVZFX0tQUk9CRVMKIAlzZWxlY3QgTU1VX0dBVEhFUl9SQ1VfVEFCTEVfRlJF
RSBpZiBTTVAKLQlzZWxlY3QgSEFWRV9NRU1CTE9DS19OT0RFX01BUAogCXNlbGVjdCBIQVZFX0FS
Q0hfVFJBTlNQQVJFTlRfSFVHRVBBR0UKIAlzZWxlY3QgSEFWRV9EWU5BTUlDX0ZUUkFDRQogCXNl
bGVjdCBIQVZFX0ZUUkFDRV9NQ09VTlRfUkVDT1JECmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9LY29u
ZmlnIGIvYXJjaC94ODYvS2NvbmZpZwppbmRleCAxZDYxMDRlYThhZjAuLjlkM2U5NWI0ZmI4NSAx
MDA2NDQKLS0tIGEvYXJjaC94ODYvS2NvbmZpZworKysgYi9hcmNoL3g4Ni9LY29uZmlnCkBAIC0x
OTAsNyArMTkwLDYgQEAgY29uZmlnIFg4NgogCXNlbGVjdCBIQVZFX0tSRVRQUk9CRVMKIAlzZWxl
Y3QgSEFWRV9LVk0KIAlzZWxlY3QgSEFWRV9MSVZFUEFUQ0gJCQlpZiBYODZfNjQKLQlzZWxlY3Qg
SEFWRV9NRU1CTE9DS19OT0RFX01BUAogCXNlbGVjdCBIQVZFX01JWEVEX0JSRUFLUE9JTlRTX1JF
R1MKIAlzZWxlY3QgSEFWRV9NT0RfQVJDSF9TUEVDSUZJQwogCXNlbGVjdCBIQVZFX01PVkVfUE1E
CmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L21lbWJsb2NrLmggYi9pbmNsdWRlL2xpbnV4L21l
bWJsb2NrLmgKaW5kZXggNmJjMzdhNzMxZDI3Li40NWFiZmM1NGRhMzcgMTAwNjQ0Ci0tLSBhL2lu
Y2x1ZGUvbGludXgvbWVtYmxvY2suaAorKysgYi9pbmNsdWRlL2xpbnV4L21lbWJsb2NrLmgKQEAg
LTUwLDcgKzUwLDcgQEAgc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiB7CiAJcGh5c19hZGRyX3QgYmFz
ZTsKIAlwaHlzX2FkZHJfdCBzaXplOwogCWVudW0gbWVtYmxvY2tfZmxhZ3MgZmxhZ3M7Ci0jaWZk
ZWYgQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKKyNpZmRlZiBDT05GSUdfTkVFRF9NVUxU
SVBMRV9OT0RFUwogCWludCBuaWQ7CiAjZW5kaWYKIH07CkBAIC0yMTUsNyArMjE1LDYgQEAgc3Rh
dGljIGlubGluZSBib29sIG1lbWJsb2NrX2lzX25vbWFwKHN0cnVjdCBtZW1ibG9ja19yZWdpb24g
Km0pCiAJcmV0dXJuIG0tPmZsYWdzICYgTUVNQkxPQ0tfTk9NQVA7CiB9CiAKLSNpZmRlZiBDT05G
SUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUAogaW50IG1lbWJsb2NrX3NlYXJjaF9wZm5fbmlkKHVu
c2lnbmVkIGxvbmcgcGZuLCB1bnNpZ25lZCBsb25nICpzdGFydF9wZm4sCiAJCQkgICAgdW5zaWdu
ZWQgbG9uZyAgKmVuZF9wZm4pOwogdm9pZCBfX25leHRfbWVtX3Bmbl9yYW5nZShpbnQgKmlkeCwg
aW50IG5pZCwgdW5zaWduZWQgbG9uZyAqb3V0X3N0YXJ0X3BmbiwKQEAgLTIzNCw3ICsyMzMsNiBA
QCB2b2lkIF9fbmV4dF9tZW1fcGZuX3JhbmdlKGludCAqaWR4LCBpbnQgbmlkLCB1bnNpZ25lZCBs
b25nICpvdXRfc3RhcnRfcGZuLAogI2RlZmluZSBmb3JfZWFjaF9tZW1fcGZuX3JhbmdlKGksIG5p
ZCwgcF9zdGFydCwgcF9lbmQsIHBfbmlkKQkJXAogCWZvciAoaSA9IC0xLCBfX25leHRfbWVtX3Bm
bl9yYW5nZSgmaSwgbmlkLCBwX3N0YXJ0LCBwX2VuZCwgcF9uaWQpOyBcCiAJICAgICBpID49IDA7
IF9fbmV4dF9tZW1fcGZuX3JhbmdlKCZpLCBuaWQsIHBfc3RhcnQsIHBfZW5kLCBwX25pZCkpCi0j
ZW5kaWYgLyogQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAgKi8KIAogI2lmZGVmIENPTkZJ
R19ERUZFUlJFRF9TVFJVQ1RfUEFHRV9JTklUCiB2b2lkIF9fbmV4dF9tZW1fcGZuX3JhbmdlX2lu
X3pvbmUodTY0ICppZHgsIHN0cnVjdCB6b25lICp6b25lLApAQCAtMzEwLDEwICszMDgsMTAgQEAg
dm9pZCBfX25leHRfbWVtX3Bmbl9yYW5nZV9pbl96b25lKHU2NCAqaWR4LCBzdHJ1Y3Qgem9uZSAq
em9uZSwKIAlmb3JfZWFjaF9tZW1fcmFuZ2VfcmV2KGksICZtZW1ibG9jay5tZW1vcnksICZtZW1i
bG9jay5yZXNlcnZlZCwJXAogCQkJICAgICAgIG5pZCwgZmxhZ3MsIHBfc3RhcnQsIHBfZW5kLCBw
X25pZCkKIAotI2lmZGVmIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQCiBpbnQgbWVtYmxv
Y2tfc2V0X25vZGUocGh5c19hZGRyX3QgYmFzZSwgcGh5c19hZGRyX3Qgc2l6ZSwKIAkJICAgICAg
c3RydWN0IG1lbWJsb2NrX3R5cGUgKnR5cGUsIGludCBuaWQpOwogCisjaWZkZWYgQ09ORklHX05F
RURfTVVMVElQTEVfTk9ERVMKIHN0YXRpYyBpbmxpbmUgdm9pZCBtZW1ibG9ja19zZXRfcmVnaW9u
X25vZGUoc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqciwgaW50IG5pZCkKIHsKIAlyLT5uaWQgPSBu
aWQ7CkBAIC0zMzIsNyArMzMwLDcgQEAgc3RhdGljIGlubGluZSBpbnQgbWVtYmxvY2tfZ2V0X3Jl
Z2lvbl9ub2RlKGNvbnN0IHN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnIpCiB7CiAJcmV0dXJuIDA7
CiB9Ci0jZW5kaWYgLyogQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAgKi8KKyNlbmRpZiAv
KiBDT05GSUdfTkVFRF9NVUxUSVBMRV9OT0RFUyAqLwogCiAvKiBGbGFncyBmb3IgbWVtYmxvY2sg
YWxsb2NhdGlvbiBBUElzICovCiAjZGVmaW5lIE1FTUJMT0NLX0FMTE9DX0FOWVdIRVJFCSh+KHBo
eXNfYWRkcl90KTApCmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L21tLmggYi9pbmNsdWRlL2xp
bnV4L21tLmgKaW5kZXggYTQwNDAyNmQxNGQ0Li41OTAzYmJiZGIzMzYgMTAwNjQ0Ci0tLSBhL2lu
Y2x1ZGUvbGludXgvbW0uaAorKysgYi9pbmNsdWRlL2xpbnV4L21tLmgKQEAgLTIzNDQsOSArMjM0
NCw4IEBAIHN0YXRpYyBpbmxpbmUgdW5zaWduZWQgbG9uZyBnZXRfbnVtX3BoeXNwYWdlcyh2b2lk
KQogCXJldHVybiBwaHlzX3BhZ2VzOwogfQogCi0jaWZkZWYgQ09ORklHX0hBVkVfTUVNQkxPQ0tf
Tk9ERV9NQVAKIC8qCi0gKiBXaXRoIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQIHNldCwg
YW4gYXJjaGl0ZWN0dXJlIG1heSBpbml0aWFsaXNlIGl0cworICogVXNpbmcgbWVtYmxvY2sgbm9k
ZSBtYXBwaW5ncywgYW4gYXJjaGl0ZWN0dXJlIG1heSBpbml0aWFsaXNlIGl0cwogICogem9uZXMs
IGFsbG9jYXRlIHRoZSBiYWNraW5nIG1lbV9tYXAgYW5kIGFjY291bnQgZm9yIG1lbW9yeSBob2xl
cyBpbiBhIG1vcmUKICAqIGFyY2hpdGVjdHVyZSBpbmRlcGVuZGVudCBtYW5uZXIuIFRoaXMgaXMg
YSBzdWJzdGl0dXRlIGZvciBjcmVhdGluZyB0aGUKICAqIHpvbmVfc2l6ZXNbXSBhbmQgemhvbGVz
X3NpemVbXSBhcnJheXMgYW5kIHBhc3NpbmcgdGhlbSB0bwpAQCAtMjM2Nyw5ICsyMzY2LDYgQEAg
c3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIGdldF9udW1fcGh5c3BhZ2VzKHZvaWQpCiAgKiBy
ZWdpc3RlcmVkIHBoeXNpY2FsIHBhZ2UgcmFuZ2UuICBTaW1pbGFybHkKICAqIHNwYXJzZV9tZW1v
cnlfcHJlc2VudF93aXRoX2FjdGl2ZV9yZWdpb25zKCkgY2FsbHMgbWVtb3J5X3ByZXNlbnQoKSBm
b3IKICAqIGVhY2ggcmFuZ2Ugd2hlbiBTUEFSU0VNRU0gaXMgZW5hYmxlZC4KLSAqCi0gKiBTZWUg
bW0vcGFnZV9hbGxvYy5jIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGVhY2ggZnVuY3Rpb24gZXhw
b3NlZCBieQotICogQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAuCiAgKi8KIGV4dGVybiB2
b2lkIGZyZWVfYXJlYV9pbml0X25vZGVzKHVuc2lnbmVkIGxvbmcgKm1heF96b25lX3Bmbik7CiB1
bnNpZ25lZCBsb25nIG5vZGVfbWFwX3Bmbl9hbGlnbm1lbnQodm9pZCk7CkBAIC0yMzg0LDEzICsy
MzgwLDkgQEAgZXh0ZXJuIHZvaWQgZnJlZV9ib290bWVtX3dpdGhfYWN0aXZlX3JlZ2lvbnMoaW50
IG5pZCwKIAkJCQkJCXVuc2lnbmVkIGxvbmcgbWF4X2xvd19wZm4pOwogZXh0ZXJuIHZvaWQgc3Bh
cnNlX21lbW9yeV9wcmVzZW50X3dpdGhfYWN0aXZlX3JlZ2lvbnMoaW50IG5pZCk7CiAKLSNlbmRp
ZiAvKiBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUCAqLwotCi0jaWYgIWRlZmluZWQoQ09O
RklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVApICYmIFwKLSAgICAhZGVmaW5lZChDT05GSUdfSEFW
RV9BUkNIX0VBUkxZX1BGTl9UT19OSUQpCisjaWZuZGVmIENPTkZJR19ORUVEX01VTFRJUExFX05P
REVTCiBzdGF0aWMgaW5saW5lIGludCBlYXJseV9wZm5fdG9fbmlkKHVuc2lnbmVkIGxvbmcgcGZu
KQogewotCUJVSUxEX0JVR19PTihJU19FTkFCTEVEKENPTkZJR19OVU1BKSk7CiAJcmV0dXJuIDA7
CiB9CiAjZWxzZQpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9tbXpvbmUuaCBiL2luY2x1ZGUv
bGludXgvbW16b25lLmgKaW5kZXggN2I1YjZlYmE0MDJmLi5mZmMyYTNkNjAzNmIgMTAwNjQ0Ci0t
LSBhL2luY2x1ZGUvbGludXgvbW16b25lLmgKKysrIGIvaW5jbHVkZS9saW51eC9tbXpvbmUuaApA
QCAtODc0LDcgKzg3NCw3IEBAIGV4dGVybiBpbnQgbW92YWJsZV96b25lOwogI2lmZGVmIENPTkZJ
R19ISUdITUVNCiBzdGF0aWMgaW5saW5lIGludCB6b25lX21vdmFibGVfaXNfaGlnaG1lbSh2b2lk
KQogewotI2lmZGVmIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQCisjaWZkZWYgQ09ORklH
X05FRURfTVVMVElQTEVfTk9ERVMKIAlyZXR1cm4gbW92YWJsZV96b25lID09IFpPTkVfSElHSE1F
TTsKICNlbHNlCiAJcmV0dXJuIChaT05FX01PVkFCTEUgLSAxKSA9PSBaT05FX0hJR0hNRU07CmRp
ZmYgLS1naXQgYS9tbS9LY29uZmlnIGIvbW0vS2NvbmZpZwppbmRleCBjMWFjYzM0YzFjMzUuLmFh
YTViZGFhMWM4YSAxMDA2NDQKLS0tIGEvbW0vS2NvbmZpZworKysgYi9tbS9LY29uZmlnCkBAIC0x
MjYsOSArMTI2LDYgQEAgY29uZmlnIFNQQVJTRU1FTV9WTUVNTUFQCiAJICBwZm5fdG9fcGFnZSBh
bmQgcGFnZV90b19wZm4gb3BlcmF0aW9ucy4gIFRoaXMgaXMgdGhlIG1vc3QKIAkgIGVmZmljaWVu
dCBvcHRpb24gd2hlbiBzdWZmaWNpZW50IGtlcm5lbCByZXNvdXJjZXMgYXJlIGF2YWlsYWJsZS4K
IAotY29uZmlnIEhBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKLQlib29sCi0KIGNvbmZpZyBIQVZFX01F
TUJMT0NLX1BIWVNfTUFQCiAJYm9vbAogCmRpZmYgLS1naXQgYS9tbS9tZW1ibG9jay5jIGIvbW0v
bWVtYmxvY2suYwppbmRleCA0M2UyZmQzMDA2YzEuLjc0MzY1OWQ4OGZjNCAxMDA2NDQKLS0tIGEv
bW0vbWVtYmxvY2suYworKysgYi9tbS9tZW1ibG9jay5jCkBAIC02MjAsNyArNjIwLDcgQEAgc3Rh
dGljIGludCBfX2luaXRfbWVtYmxvY2sgbWVtYmxvY2tfYWRkX3JhbmdlKHN0cnVjdCBtZW1ibG9j
a190eXBlICp0eXBlLAogCQkgKiBhcmVhLCBpbnNlcnQgdGhhdCBwb3J0aW9uLgogCQkgKi8KIAkJ
aWYgKHJiYXNlID4gYmFzZSkgewotI2lmZGVmIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQ
CisjaWZkZWYgQ09ORklHX05FRURfTVVMVElQTEVfTk9ERVMKIAkJCVdBUk5fT04obmlkICE9IG1l
bWJsb2NrX2dldF9yZWdpb25fbm9kZShyZ24pKTsKICNlbmRpZgogCQkJV0FSTl9PTihmbGFncyAh
PSByZ24tPmZsYWdzKTsKQEAgLTExOTcsNyArMTE5Nyw2IEBAIHZvaWQgX19pbml0X21lbWJsb2Nr
IF9fbmV4dF9tZW1fcmFuZ2VfcmV2KHU2NCAqaWR4LCBpbnQgbmlkLAogCSppZHggPSBVTExPTkdf
TUFYOwogfQogCi0jaWZkZWYgQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKIC8qCiAgKiBD
b21tb24gaXRlcmF0b3IgaW50ZXJmYWNlIHVzZWQgdG8gZGVmaW5lIGZvcl9lYWNoX21lbV9wZm5f
cmFuZ2UoKS4KICAqLwpAQCAtMTI0Nyw2ICsxMjQ2LDcgQEAgdm9pZCBfX2luaXRfbWVtYmxvY2sg
X19uZXh0X21lbV9wZm5fcmFuZ2UoaW50ICppZHgsIGludCBuaWQsCiBpbnQgX19pbml0X21lbWJs
b2NrIG1lbWJsb2NrX3NldF9ub2RlKHBoeXNfYWRkcl90IGJhc2UsIHBoeXNfYWRkcl90IHNpemUs
CiAJCQkJICAgICAgc3RydWN0IG1lbWJsb2NrX3R5cGUgKnR5cGUsIGludCBuaWQpCiB7CisjaWZk
ZWYgQ09ORklHX05FRURfTVVMVElQTEVfTk9ERVMKIAlpbnQgc3RhcnRfcmduLCBlbmRfcmduOwog
CWludCBpLCByZXQ7CiAKQEAgLTEyNTgsOSArMTI1OCwxMCBAQCBpbnQgX19pbml0X21lbWJsb2Nr
IG1lbWJsb2NrX3NldF9ub2RlKHBoeXNfYWRkcl90IGJhc2UsIHBoeXNfYWRkcl90IHNpemUsCiAJ
CW1lbWJsb2NrX3NldF9yZWdpb25fbm9kZSgmdHlwZS0+cmVnaW9uc1tpXSwgbmlkKTsKIAogCW1l
bWJsb2NrX21lcmdlX3JlZ2lvbnModHlwZSk7CisjZW5kaWYKIAlyZXR1cm4gMDsKIH0KLSNlbmRp
ZiAvKiBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUCAqLworCiAjaWZkZWYgQ09ORklHX0RF
RkVSUkVEX1NUUlVDVF9QQUdFX0lOSVQKIC8qKgogICogX19uZXh0X21lbV9wZm5fcmFuZ2VfaW5f
em9uZSAtIGl0ZXJhdG9yIGZvciBmb3JfZWFjaF8qX3JhbmdlX2luX3pvbmUoKQpAQCAtMTc5OSw3
ICsxODAwLDYgQEAgYm9vbCBfX2luaXRfbWVtYmxvY2sgbWVtYmxvY2tfaXNfbWFwX21lbW9yeShw
aHlzX2FkZHJfdCBhZGRyKQogCXJldHVybiAhbWVtYmxvY2tfaXNfbm9tYXAoJm1lbWJsb2NrLm1l
bW9yeS5yZWdpb25zW2ldKTsKIH0KIAotI2lmZGVmIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVf
TUFQCiBpbnQgX19pbml0X21lbWJsb2NrIG1lbWJsb2NrX3NlYXJjaF9wZm5fbmlkKHVuc2lnbmVk
IGxvbmcgcGZuLAogCQkJIHVuc2lnbmVkIGxvbmcgKnN0YXJ0X3BmbiwgdW5zaWduZWQgbG9uZyAq
ZW5kX3BmbikKIHsKQEAgLTE4MTQsNyArMTgxNCw2IEBAIGludCBfX2luaXRfbWVtYmxvY2sgbWVt
YmxvY2tfc2VhcmNoX3Bmbl9uaWQodW5zaWduZWQgbG9uZyBwZm4sCiAKIAlyZXR1cm4gbWVtYmxv
Y2tfZ2V0X3JlZ2lvbl9ub2RlKCZ0eXBlLT5yZWdpb25zW21pZF0pOwogfQotI2VuZGlmCiAKIC8q
KgogICogbWVtYmxvY2tfaXNfcmVnaW9uX21lbW9yeSAtIGNoZWNrIGlmIGEgcmVnaW9uIGlzIGEg
c3Vic2V0IG9mIG1lbW9yeQpAQCAtMTkwNSw3ICsxOTA0LDcgQEAgc3RhdGljIHZvaWQgX19pbml0
X21lbWJsb2NrIG1lbWJsb2NrX2R1bXAoc3RydWN0IG1lbWJsb2NrX3R5cGUgKnR5cGUpCiAJCXNp
emUgPSByZ24tPnNpemU7CiAJCWVuZCA9IGJhc2UgKyBzaXplIC0gMTsKIAkJZmxhZ3MgPSByZ24t
PmZsYWdzOwotI2lmZGVmIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQCisjaWZkZWYgQ09O
RklHX05FRURfTVVMVElQTEVfTk9ERVMKIAkJaWYgKG1lbWJsb2NrX2dldF9yZWdpb25fbm9kZShy
Z24pICE9IE1BWF9OVU1OT0RFUykKIAkJCXNucHJpbnRmKG5pZF9idWYsIHNpemVvZihuaWRfYnVm
KSwgIiBvbiBub2RlICVkIiwKIAkJCQkgbWVtYmxvY2tfZ2V0X3JlZ2lvbl9ub2RlKHJnbikpOwpk
aWZmIC0tZ2l0IGEvbW0vbWVtb3J5X2hvdHBsdWcuYyBiL21tL21lbW9yeV9ob3RwbHVnLmMKaW5k
ZXggZmMwYWFkMGJjMWY1Li5lNjdkYzUwMTU3NmEgMTAwNjQ0Ci0tLSBhL21tL21lbW9yeV9ob3Rw
bHVnLmMKKysrIGIvbW0vbWVtb3J5X2hvdHBsdWcuYwpAQCAtMTM3MiwxMSArMTM3Miw3IEBAIGNo
ZWNrX3BhZ2VzX2lzb2xhdGVkX2NiKHVuc2lnbmVkIGxvbmcgc3RhcnRfcGZuLCB1bnNpZ25lZCBs
b25nIG5yX3BhZ2VzLAogCiBzdGF0aWMgaW50IF9faW5pdCBjbWRsaW5lX3BhcnNlX21vdmFibGVf
bm9kZShjaGFyICpwKQogewotI2lmZGVmIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQCiAJ
bW92YWJsZV9ub2RlX2VuYWJsZWQgPSB0cnVlOwotI2Vsc2UKLQlwcl93YXJuKCJtb3ZhYmxlX25v
ZGUgcGFyYW1ldGVyIGRlcGVuZHMgb24gQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAgdG8g
d29yayBwcm9wZXJseVxuIik7Ci0jZW5kaWYKIAlyZXR1cm4gMDsKIH0KIGVhcmx5X3BhcmFtKCJt
b3ZhYmxlX25vZGUiLCBjbWRsaW5lX3BhcnNlX21vdmFibGVfbm9kZSk7CmRpZmYgLS1naXQgYS9t
bS9wYWdlX2FsbG9jLmMgYi9tbS9wYWdlX2FsbG9jLmMKaW5kZXggMWFjNzc1YmZjOWNmLi40NTMw
ZTljZmQ5ZjcgMTAwNjQ0Ci0tLSBhL21tL3BhZ2VfYWxsb2MuYworKysgYi9tbS9wYWdlX2FsbG9j
LmMKQEAgLTMzNSw3ICszMzUsNiBAQCBzdGF0aWMgdW5zaWduZWQgbG9uZyBucl9rZXJuZWxfcGFn
ZXMgX19pbml0ZGF0YTsKIHN0YXRpYyB1bnNpZ25lZCBsb25nIG5yX2FsbF9wYWdlcyBfX2luaXRk
YXRhOwogc3RhdGljIHVuc2lnbmVkIGxvbmcgZG1hX3Jlc2VydmUgX19pbml0ZGF0YTsKIAotI2lm
ZGVmIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQCiBzdGF0aWMgdW5zaWduZWQgbG9uZyBh
cmNoX3pvbmVfbG93ZXN0X3Bvc3NpYmxlX3BmbltNQVhfTlJfWk9ORVNdIF9faW5pdGRhdGE7CiBz
dGF0aWMgdW5zaWduZWQgbG9uZyBhcmNoX3pvbmVfaGlnaGVzdF9wb3NzaWJsZV9wZm5bTUFYX05S
X1pPTkVTXSBfX2luaXRkYXRhOwogc3RhdGljIHVuc2lnbmVkIGxvbmcgcmVxdWlyZWRfa2VybmVs
Y29yZSBfX2luaXRkYXRhOwpAQCAtMzQ4LDcgKzM0Nyw2IEBAIHN0YXRpYyBib29sIG1pcnJvcmVk
X2tlcm5lbGNvcmUgX19tZW1pbml0ZGF0YTsKIC8qIG1vdmFibGVfem9uZSBpcyB0aGUgInJlYWwi
IHpvbmUgcGFnZXMgaW4gWk9ORV9NT1ZBQkxFIGFyZSB0YWtlbiBmcm9tICovCiBpbnQgbW92YWJs
ZV96b25lOwogRVhQT1JUX1NZTUJPTChtb3ZhYmxlX3pvbmUpOwotI2VuZGlmIC8qIENPTkZJR19I
QVZFX01FTUJMT0NLX05PREVfTUFQICovCiAKICNpZiBNQVhfTlVNTk9ERVMgPiAxCiB1bnNpZ25l
ZCBpbnQgbnJfbm9kZV9pZHMgX19yZWFkX21vc3RseSA9IE1BWF9OVU1OT0RFUzsKQEAgLTE0OTks
OCArMTQ5Nyw3IEBAIHZvaWQgX19mcmVlX3BhZ2VzX2NvcmUoc3RydWN0IHBhZ2UgKnBhZ2UsIHVu
c2lnbmVkIGludCBvcmRlcikKIAlfX2ZyZWVfcGFnZXMocGFnZSwgb3JkZXIpOwogfQogCi0jaWYg
ZGVmaW5lZChDT05GSUdfSEFWRV9BUkNIX0VBUkxZX1BGTl9UT19OSUQpIHx8IFwKLQlkZWZpbmVk
KENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQKQorI2lmZGVmIENPTkZJR19ORUVEX01VTFRJ
UExFX05PREVTCiAKIHN0YXRpYyBzdHJ1Y3QgbW1pbml0X3Bmbm5pZF9jYWNoZSBlYXJseV9wZm5u
aWRfY2FjaGUgX19tZW1pbml0ZGF0YTsKIApAQCAtMTU0Miw3ICsxNTM5LDcgQEAgaW50IF9fbWVt
aW5pdCBlYXJseV9wZm5fdG9fbmlkKHVuc2lnbmVkIGxvbmcgcGZuKQogCiAJcmV0dXJuIG5pZDsK
IH0KLSNlbmRpZgorI2VuZGlmIC8qIENPTkZJR19ORUVEX01VTFRJUExFX05PREVTICovCiAKICNp
ZmRlZiBDT05GSUdfTk9ERVNfU1BBTl9PVEhFUl9OT0RFUwogLyogT25seSBzYWZlIHRvIHVzZSBl
YXJseSBpbiBib290IHdoZW4gaW5pdGlhbGlzYXRpb24gaXMgc2luZ2xlLXRocmVhZGVkICovCkBA
IC01OTI0LDcgKzU5MjEsNiBAQCB2b2lkIF9fcmVmIGJ1aWxkX2FsbF96b25lbGlzdHMocGdfZGF0
YV90ICpwZ2RhdCkKIHN0YXRpYyBib29sIF9fbWVtaW5pdAogb3ZlcmxhcF9tZW1tYXBfaW5pdCh1
bnNpZ25lZCBsb25nIHpvbmUsIHVuc2lnbmVkIGxvbmcgKnBmbikKIHsKLSNpZmRlZiBDT05GSUdf
SEFWRV9NRU1CTE9DS19OT0RFX01BUAogCXN0YXRpYyBzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpy
OwogCiAJaWYgKG1pcnJvcmVkX2tlcm5lbGNvcmUgJiYgem9uZSA9PSBaT05FX01PVkFCTEUpIHsK
QEAgLTU5NDAsNyArNTkzNiw2IEBAIG92ZXJsYXBfbWVtbWFwX2luaXQodW5zaWduZWQgbG9uZyB6
b25lLCB1bnNpZ25lZCBsb25nICpwZm4pCiAJCQlyZXR1cm4gdHJ1ZTsKIAkJfQogCX0KLSNlbmRp
ZgogCXJldHVybiBmYWxzZTsKIH0KIApAQCAtNjU3Myw4ICs2NTY4LDcgQEAgc3RhdGljIHVuc2ln
bmVkIGxvbmcgX19pbml0IHpvbmVfYWJzZW50X3BhZ2VzX2luX25vZGUoaW50IG5pZCwKIAlyZXR1
cm4gbnJfYWJzZW50OwogfQogCi0jZWxzZSAvKiBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01B
UCAqLwotc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIF9faW5pdCB6b25lX3NwYW5uZWRfcGFn
ZXNfaW5fbm9kZShpbnQgbmlkLAorc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIF9faW5pdCBj
b21wYXRfem9uZV9zcGFubmVkX3BhZ2VzX2luX25vZGUoaW50IG5pZCwKIAkJCQkJdW5zaWduZWQg
bG9uZyB6b25lX3R5cGUsCiAJCQkJCXVuc2lnbmVkIGxvbmcgbm9kZV9zdGFydF9wZm4sCiAJCQkJ
CXVuc2lnbmVkIGxvbmcgbm9kZV9lbmRfcGZuLApAQCAtNjU5Myw3ICs2NTg3LDcgQEAgc3RhdGlj
IGlubGluZSB1bnNpZ25lZCBsb25nIF9faW5pdCB6b25lX3NwYW5uZWRfcGFnZXNfaW5fbm9kZShp
bnQgbmlkLAogCXJldHVybiB6b25lc19zaXplW3pvbmVfdHlwZV07CiB9CiAKLXN0YXRpYyBpbmxp
bmUgdW5zaWduZWQgbG9uZyBfX2luaXQgem9uZV9hYnNlbnRfcGFnZXNfaW5fbm9kZShpbnQgbmlk
LAorc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIF9faW5pdCBjb21wYXRfem9uZV9hYnNlbnRf
cGFnZXNfaW5fbm9kZShpbnQgbmlkLAogCQkJCQkJdW5zaWduZWQgbG9uZyB6b25lX3R5cGUsCiAJ
CQkJCQl1bnNpZ25lZCBsb25nIG5vZGVfc3RhcnRfcGZuLAogCQkJCQkJdW5zaWduZWQgbG9uZyBu
b2RlX2VuZF9wZm4sCkBAIC02NjA1LDEzICs2NTk5LDEyIEBAIHN0YXRpYyBpbmxpbmUgdW5zaWdu
ZWQgbG9uZyBfX2luaXQgem9uZV9hYnNlbnRfcGFnZXNfaW5fbm9kZShpbnQgbmlkLAogCXJldHVy
biB6aG9sZXNfc2l6ZVt6b25lX3R5cGVdOwogfQogCi0jZW5kaWYgLyogQ09ORklHX0hBVkVfTUVN
QkxPQ0tfTk9ERV9NQVAgKi8KLQogc3RhdGljIHZvaWQgX19pbml0IGNhbGN1bGF0ZV9ub2RlX3Rv
dGFscGFnZXMoc3RydWN0IHBnbGlzdF9kYXRhICpwZ2RhdCwKIAkJCQkJCXVuc2lnbmVkIGxvbmcg
bm9kZV9zdGFydF9wZm4sCiAJCQkJCQl1bnNpZ25lZCBsb25nIG5vZGVfZW5kX3BmbiwKIAkJCQkJ
CXVuc2lnbmVkIGxvbmcgKnpvbmVzX3NpemUsCi0JCQkJCQl1bnNpZ25lZCBsb25nICp6aG9sZXNf
c2l6ZSkKKwkJCQkJCXVuc2lnbmVkIGxvbmcgKnpob2xlc19zaXplLAorCQkJCQkJYm9vbCBjb21w
YXQpCiB7CiAJdW5zaWduZWQgbG9uZyByZWFsdG90YWxwYWdlcyA9IDAsIHRvdGFscGFnZXMgPSAw
OwogCWVudW0gem9uZV90eXBlIGk7CkBAIC02NjE5LDE3ICs2NjEyLDM4IEBAIHN0YXRpYyB2b2lk
IF9faW5pdCBjYWxjdWxhdGVfbm9kZV90b3RhbHBhZ2VzKHN0cnVjdCBwZ2xpc3RfZGF0YSAqcGdk
YXQsCiAJZm9yIChpID0gMDsgaSA8IE1BWF9OUl9aT05FUzsgaSsrKSB7CiAJCXN0cnVjdCB6b25l
ICp6b25lID0gcGdkYXQtPm5vZGVfem9uZXMgKyBpOwogCQl1bnNpZ25lZCBsb25nIHpvbmVfc3Rh
cnRfcGZuLCB6b25lX2VuZF9wZm47CisJCXVuc2lnbmVkIGxvbmcgc3Bhbm5lZCwgYWJzZW50Owog
CQl1bnNpZ25lZCBsb25nIHNpemUsIHJlYWxfc2l6ZTsKIAotCQlzaXplID0gem9uZV9zcGFubmVk
X3BhZ2VzX2luX25vZGUocGdkYXQtPm5vZGVfaWQsIGksCi0JCQkJCQkgIG5vZGVfc3RhcnRfcGZu
LAotCQkJCQkJICBub2RlX2VuZF9wZm4sCi0JCQkJCQkgICZ6b25lX3N0YXJ0X3BmbiwKLQkJCQkJ
CSAgJnpvbmVfZW5kX3BmbiwKLQkJCQkJCSAgem9uZXNfc2l6ZSk7Ci0JCXJlYWxfc2l6ZSA9IHNp
emUgLSB6b25lX2Fic2VudF9wYWdlc19pbl9ub2RlKHBnZGF0LT5ub2RlX2lkLCBpLAotCQkJCQkJ
ICBub2RlX3N0YXJ0X3Bmbiwgbm9kZV9lbmRfcGZuLAotCQkJCQkJICB6aG9sZXNfc2l6ZSk7CisJ
CWlmIChjb21wYXQpIHsKKwkJCXNwYW5uZWQgPSBjb21wYXRfem9uZV9zcGFubmVkX3BhZ2VzX2lu
X25vZGUoCisJCQkJCQlwZ2RhdC0+bm9kZV9pZCwgaSwKKwkJCQkJCW5vZGVfc3RhcnRfcGZuLAor
CQkJCQkJbm9kZV9lbmRfcGZuLAorCQkJCQkJJnpvbmVfc3RhcnRfcGZuLAorCQkJCQkJJnpvbmVf
ZW5kX3BmbiwKKwkJCQkJCXpvbmVzX3NpemUpOworCQkJYWJzZW50ID0gY29tcGF0X3pvbmVfYWJz
ZW50X3BhZ2VzX2luX25vZGUoCisJCQkJCQlwZ2RhdC0+bm9kZV9pZCwgaSwKKwkJCQkJCW5vZGVf
c3RhcnRfcGZuLAorCQkJCQkJbm9kZV9lbmRfcGZuLAorCQkJCQkJemhvbGVzX3NpemUpOworCQl9
IGVsc2UgeworCQkJc3Bhbm5lZCA9IHpvbmVfc3Bhbm5lZF9wYWdlc19pbl9ub2RlKHBnZGF0LT5u
b2RlX2lkLCBpLAorCQkJCQkJbm9kZV9zdGFydF9wZm4sCisJCQkJCQlub2RlX2VuZF9wZm4sCisJ
CQkJCQkmem9uZV9zdGFydF9wZm4sCisJCQkJCQkmem9uZV9lbmRfcGZuLAorCQkJCQkJem9uZXNf
c2l6ZSk7CisJCQlhYnNlbnQgPSB6b25lX2Fic2VudF9wYWdlc19pbl9ub2RlKHBnZGF0LT5ub2Rl
X2lkLCBpLAorCQkJCQkJbm9kZV9zdGFydF9wZm4sCisJCQkJCQlub2RlX2VuZF9wZm4sCisJCQkJ
CQl6aG9sZXNfc2l6ZSk7CisJCX0KKworCQlzaXplID0gc3Bhbm5lZDsKKwkJcmVhbF9zaXplID0g
c2l6ZSAtIGFic2VudDsKKwogCQlpZiAoc2l6ZSkKIAkJCXpvbmUtPnpvbmVfc3RhcnRfcGZuID0g
em9uZV9zdGFydF9wZm47CiAJCWVsc2UKQEAgLTY5MjksMTAgKzY5NDMsOCBAQCBzdGF0aWMgdm9p
ZCBfX3JlZiBhbGxvY19ub2RlX21lbV9tYXAoc3RydWN0IHBnbGlzdF9kYXRhICpwZ2RhdCkKIAkg
Ki8KIAlpZiAocGdkYXQgPT0gTk9ERV9EQVRBKDApKSB7CiAJCW1lbV9tYXAgPSBOT0RFX0RBVEEo
MCktPm5vZGVfbWVtX21hcDsKLSNpZiBkZWZpbmVkKENPTkZJR19IQVZFX01FTUJMT0NLX05PREVf
TUFQKSB8fCBkZWZpbmVkKENPTkZJR19GTEFUTUVNKQogCQlpZiAocGFnZV90b19wZm4obWVtX21h
cCkgIT0gcGdkYXQtPm5vZGVfc3RhcnRfcGZuKQogCQkJbWVtX21hcCAtPSBvZmZzZXQ7Ci0jZW5k
aWYgLyogQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAgKi8KIAl9CiAjZW5kaWYKIH0KQEAg
LTY5NDksOSArNjk2MSwxMCBAQCBzdGF0aWMgaW5saW5lIHZvaWQgcGdkYXRfc2V0X2RlZmVycmVk
X3JhbmdlKHBnX2RhdGFfdCAqcGdkYXQpCiBzdGF0aWMgaW5saW5lIHZvaWQgcGdkYXRfc2V0X2Rl
ZmVycmVkX3JhbmdlKHBnX2RhdGFfdCAqcGdkYXQpIHt9CiAjZW5kaWYKIAotdm9pZCBfX2luaXQg
ZnJlZV9hcmVhX2luaXRfbm9kZShpbnQgbmlkLCB1bnNpZ25lZCBsb25nICp6b25lc19zaXplLAot
CQkJCSAgIHVuc2lnbmVkIGxvbmcgbm9kZV9zdGFydF9wZm4sCi0JCQkJICAgdW5zaWduZWQgbG9u
ZyAqemhvbGVzX3NpemUpCitzdGF0aWMgdm9pZCBfX2luaXQgX19mcmVlX2FyZWFfaW5pdF9ub2Rl
KGludCBuaWQsIHVuc2lnbmVkIGxvbmcgKnpvbmVzX3NpemUsCisJCQkJCSB1bnNpZ25lZCBsb25n
IG5vZGVfc3RhcnRfcGZuLAorCQkJCQkgdW5zaWduZWQgbG9uZyAqemhvbGVzX3NpemUsCisJCQkJ
CSBib29sIGNvbXBhdCkKIHsKIAlwZ19kYXRhX3QgKnBnZGF0ID0gTk9ERV9EQVRBKG5pZCk7CiAJ
dW5zaWduZWQgbG9uZyBzdGFydF9wZm4gPSAwOwpAQCAtNjk2MywxNiArNjk3NiwxNiBAQCB2b2lk
IF9faW5pdCBmcmVlX2FyZWFfaW5pdF9ub2RlKGludCBuaWQsIHVuc2lnbmVkIGxvbmcgKnpvbmVz
X3NpemUsCiAJcGdkYXQtPm5vZGVfaWQgPSBuaWQ7CiAJcGdkYXQtPm5vZGVfc3RhcnRfcGZuID0g
bm9kZV9zdGFydF9wZm47CiAJcGdkYXQtPnBlcl9jcHVfbm9kZXN0YXRzID0gTlVMTDsKLSNpZmRl
ZiBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUAotCWdldF9wZm5fcmFuZ2VfZm9yX25pZChu
aWQsICZzdGFydF9wZm4sICZlbmRfcGZuKTsKLQlwcl9pbmZvKCJJbml0bWVtIHNldHVwIG5vZGUg
JWQgW21lbSAlIzAxOEx4LSUjMDE4THhdXG4iLCBuaWQsCi0JCSh1NjQpc3RhcnRfcGZuIDw8IFBB
R0VfU0hJRlQsCi0JCWVuZF9wZm4gPyAoKHU2NCllbmRfcGZuIDw8IFBBR0VfU0hJRlQpIC0gMSA6
IDApOwotI2Vsc2UKLQlzdGFydF9wZm4gPSBub2RlX3N0YXJ0X3BmbjsKLSNlbmRpZgorCWlmICgh
Y29tcGF0KSB7CisJCWdldF9wZm5fcmFuZ2VfZm9yX25pZChuaWQsICZzdGFydF9wZm4sICZlbmRf
cGZuKTsKKwkJcHJfaW5mbygiSW5pdG1lbSBzZXR1cCBub2RlICVkIFttZW0gJSMwMThMeC0lIzAx
OEx4XVxuIiwgbmlkLAorCQkJKHU2NClzdGFydF9wZm4gPDwgUEFHRV9TSElGVCwKKwkJCWVuZF9w
Zm4gPyAoKHU2NCllbmRfcGZuIDw8IFBBR0VfU0hJRlQpIC0gMSA6IDApOworCX0gZWxzZSB7CisJ
CXN0YXJ0X3BmbiA9IG5vZGVfc3RhcnRfcGZuOworCX0KIAljYWxjdWxhdGVfbm9kZV90b3RhbHBh
Z2VzKHBnZGF0LCBzdGFydF9wZm4sIGVuZF9wZm4sCi0JCQkJICB6b25lc19zaXplLCB6aG9sZXNf
c2l6ZSk7CisJCQkJICB6b25lc19zaXplLCB6aG9sZXNfc2l6ZSwgY29tcGF0KTsKIAogCWFsbG9j
X25vZGVfbWVtX21hcChwZ2RhdCk7CiAJcGdkYXRfc2V0X2RlZmVycmVkX3JhbmdlKHBnZGF0KTsK
QEAgLTY5ODAsNiArNjk5MywxNCBAQCB2b2lkIF9faW5pdCBmcmVlX2FyZWFfaW5pdF9ub2RlKGlu
dCBuaWQsIHVuc2lnbmVkIGxvbmcgKnpvbmVzX3NpemUsCiAJZnJlZV9hcmVhX2luaXRfY29yZShw
Z2RhdCk7CiB9CiAKK3ZvaWQgX19pbml0IGZyZWVfYXJlYV9pbml0X25vZGUoaW50IG5pZCwgdW5z
aWduZWQgbG9uZyAqem9uZXNfc2l6ZSwKKwkJCQl1bnNpZ25lZCBsb25nIG5vZGVfc3RhcnRfcGZu
LAorCQkJCXVuc2lnbmVkIGxvbmcgKnpob2xlc19zaXplKQoreworCV9fZnJlZV9hcmVhX2luaXRf
bm9kZShuaWQsIHpvbmVzX3NpemUsIG5vZGVfc3RhcnRfcGZuLCB6aG9sZXNfc2l6ZSwKKwkJCSAg
ICAgIHRydWUpOworfQorCiAjaWYgIWRlZmluZWQoQ09ORklHX0ZMQVRfTk9ERV9NRU1fTUFQKQog
LyoKICAqIEluaXRpYWxpemUgYWxsIHZhbGlkIHN0cnVjdCBwYWdlcyBpbiB0aGUgcmFuZ2UgW3Nw
Zm4sIGVwZm4pIGFuZCBtYXJrIHRoZW0KQEAgLTcwNjMsOCArNzA4NCw2IEBAIHN0YXRpYyBpbmxp
bmUgdm9pZCBfX2luaXQgaW5pdF91bmF2YWlsYWJsZV9tZW0odm9pZCkKIH0KICNlbmRpZiAvKiAh
Q09ORklHX0ZMQVRfTk9ERV9NRU1fTUFQICovCiAKLSNpZmRlZiBDT05GSUdfSEFWRV9NRU1CTE9D
S19OT0RFX01BUAotCiAjaWYgTUFYX05VTU5PREVTID4gMQogLyoKICAqIEZpZ3VyZSBvdXQgdGhl
IG51bWJlciBvZiBwb3NzaWJsZSBub2RlIGlkcy4KQEAgLTc0OTMsOCArNzUxMiw4IEBAIHZvaWQg
X19pbml0IGZyZWVfYXJlYV9pbml0X25vZGVzKHVuc2lnbmVkIGxvbmcgKm1heF96b25lX3BmbikK
IAlpbml0X3VuYXZhaWxhYmxlX21lbSgpOwogCWZvcl9lYWNoX29ubGluZV9ub2RlKG5pZCkgewog
CQlwZ19kYXRhX3QgKnBnZGF0ID0gTk9ERV9EQVRBKG5pZCk7Ci0JCWZyZWVfYXJlYV9pbml0X25v
ZGUobmlkLCBOVUxMLAotCQkJCWZpbmRfbWluX3Bmbl9mb3Jfbm9kZShuaWQpLCBOVUxMKTsKKwkJ
X19mcmVlX2FyZWFfaW5pdF9ub2RlKG5pZCwgTlVMTCwKKwkJCQkgICAgICBmaW5kX21pbl9wZm5f
Zm9yX25vZGUobmlkKSwgTlVMTCwgZmFsc2UpOwogCiAJCS8qIEFueSBtZW1vcnkgb24gdGhhdCBu
b2RlICovCiAJCWlmIChwZ2RhdC0+bm9kZV9wcmVzZW50X3BhZ2VzKQpAQCAtNzU1OSw4ICs3NTc4
LDYgQEAgc3RhdGljIGludCBfX2luaXQgY21kbGluZV9wYXJzZV9tb3ZhYmxlY29yZShjaGFyICpw
KQogZWFybHlfcGFyYW0oImtlcm5lbGNvcmUiLCBjbWRsaW5lX3BhcnNlX2tlcm5lbGNvcmUpOwog
ZWFybHlfcGFyYW0oIm1vdmFibGVjb3JlIiwgY21kbGluZV9wYXJzZV9tb3ZhYmxlY29yZSk7CiAK
LSNlbmRpZiAvKiBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUCAqLwotCiB2b2lkIGFkanVz
dF9tYW5hZ2VkX3BhZ2VfY291bnQoc3RydWN0IHBhZ2UgKnBhZ2UsIGxvbmcgY291bnQpCiB7CiAJ
YXRvbWljX2xvbmdfYWRkKGNvdW50LCAmcGFnZV96b25lKHBhZ2UpLT5tYW5hZ2VkX3BhZ2VzKTsK
LS0gCjIuMjUuMQoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X18KT3BlblJJU0MgbWFpbGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMub3JnCmh0
dHBzOi8vbGlzdHMubGlicmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJpc2MK
