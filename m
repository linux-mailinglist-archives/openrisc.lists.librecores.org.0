Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 7B1024C6763
	for <lists+openrisc@lfdr.de>; Mon, 28 Feb 2022 11:48:54 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 54E4824833;
	Mon, 28 Feb 2022 11:48:54 +0100 (CET)
Received: from foss.arm.com (foss.arm.com [217.140.110.172])
 by mail.librecores.org (Postfix) with ESMTP id E6BFB2431F
 for <openrisc@lists.librecores.org>; Mon, 28 Feb 2022 11:48:52 +0100 (CET)
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.121.207.14])
 by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 3BA101063;
 Mon, 28 Feb 2022 02:48:52 -0800 (PST)
Received: from p8cg001049571a15.arm.com (unknown [10.163.47.185])
 by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id 84F313F73D;
 Mon, 28 Feb 2022 02:48:44 -0800 (PST)
From: Anshuman Khandual <anshuman.khandual@arm.com>
To: linux-mm@kvack.org,
	akpm@linux-foundation.org
Date: Mon, 28 Feb 2022 16:17:24 +0530
Message-Id: <1646045273-9343-2-git-send-email-anshuman.khandual@arm.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1646045273-9343-1-git-send-email-anshuman.khandual@arm.com>
References: <1646045273-9343-1-git-send-email-anshuman.khandual@arm.com>
Subject: [OpenRISC] [PATCH V3 01/30] mm/debug_vm_pgtable: Drop
 protection_map[] usage
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: linux-ia64@vger.kernel.org, linux-sh@vger.kernel.org,
 linux-mips@vger.kernel.org, sparclinux@vger.kernel.org,
 linux-riscv@lists.infradead.org, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-hexagon@vger.kernel.org,
 linux-csky@vger.kernel.org, Christoph Hellwig <hch@infradead.org>,
 linux-snps-arc@lists.infradead.org, linux-xtensa@linux-xtensa.org,
 Anshuman Khandual <anshuman.khandual@arm.com>, linux-um@lists.infradead.org,
 linux-m68k@lists.linux-m68k.org, openrisc@lists.librecores.org,
 linux-arm-kernel@lists.infradead.org, linux-parisc@vger.kernel.org,
 linux-kernel@vger.kernel.org, linux-alpha@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

QWx0aG91Z2ggcHJvdGVjdGlvbl9tYXBbXSBjb250YWlucyB0aGUgcGxhdGZvcm0gZGVmaW5lZCBw
YWdlIHByb3RlY3Rpb24gbWFwCmZvciBhIGdpdmVuIHZtX2ZsYWdzIGNvbWJpbmF0aW9uLCB2bV9n
ZXRfcGFnZV9wcm90KCkgaXMgdGhlIHJpZ2h0IGludGVyZmFjZQp0byB1c2UuIFRoaXMgd2lsbCBh
bHNvIHJlZHVjZSBkZXBlbmRlbmN5IG9uIHByb3RlY3Rpb25fbWFwW10gd2hpY2ggaXMgZ29pbmcK
dG8gYmUgZHJvcHBlZCBvZmYgY29tcGxldGVseSBsYXRlciBvbi4KCkNjOiBBbmRyZXcgTW9ydG9u
IDxha3BtQGxpbnV4LWZvdW5kYXRpb24ub3JnPgpDYzogbGludXgtbW1Aa3ZhY2sub3JnCkNjOiBs
aW51eC1rZXJuZWxAdmdlci5rZXJuZWwub3JnClNpZ25lZC1vZmYtYnk6IEFuc2h1bWFuIEtoYW5k
dWFsIDxhbnNodW1hbi5raGFuZHVhbEBhcm0uY29tPgotLS0KIG1tL2RlYnVnX3ZtX3BndGFibGUu
YyB8IDMxICsrKysrKysrKysrKysrKysrKystLS0tLS0tLS0tLS0KIDEgZmlsZSBjaGFuZ2VkLCAx
OSBpbnNlcnRpb25zKCspLCAxMiBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9tbS9kZWJ1Z192
bV9wZ3RhYmxlLmMgYi9tbS9kZWJ1Z192bV9wZ3RhYmxlLmMKaW5kZXggZGIyYWJkOWU0MTViLi4z
MGZkMTFhMmVkMzIgMTAwNjQ0Ci0tLSBhL21tL2RlYnVnX3ZtX3BndGFibGUuYworKysgYi9tbS9k
ZWJ1Z192bV9wZ3RhYmxlLmMKQEAgLTkzLDcgKzkzLDcgQEAgc3RydWN0IHBndGFibGVfZGVidWdf
YXJncyB7CiAKIHN0YXRpYyB2b2lkIF9faW5pdCBwdGVfYmFzaWNfdGVzdHMoc3RydWN0IHBndGFi
bGVfZGVidWdfYXJncyAqYXJncywgaW50IGlkeCkKIHsKLQlwZ3Byb3RfdCBwcm90ID0gcHJvdGVj
dGlvbl9tYXBbaWR4XTsKKwlwZ3Byb3RfdCBwcm90ID0gdm1fZ2V0X3BhZ2VfcHJvdChpZHgpOwog
CXB0ZV90IHB0ZSA9IHBmbl9wdGUoYXJncy0+Zml4ZWRfcHRlX3BmbiwgcHJvdCk7CiAJdW5zaWdu
ZWQgbG9uZyB2YWwgPSBpZHgsICpwdHIgPSAmdmFsOwogCkBAIC0xMDEsNyArMTAxLDcgQEAgc3Rh
dGljIHZvaWQgX19pbml0IHB0ZV9iYXNpY190ZXN0cyhzdHJ1Y3QgcGd0YWJsZV9kZWJ1Z19hcmdz
ICphcmdzLCBpbnQgaWR4KQogCiAJLyoKIAkgKiBUaGlzIHRlc3QgbmVlZHMgdG8gYmUgZXhlY3V0
ZWQgYWZ0ZXIgdGhlIGdpdmVuIHBhZ2UgdGFibGUgZW50cnkKLQkgKiBpcyBjcmVhdGVkIHdpdGgg
cGZuX3B0ZSgpIHRvIG1ha2Ugc3VyZSB0aGF0IHByb3RlY3Rpb25fbWFwW2lkeF0KKwkgKiBpcyBj
cmVhdGVkIHdpdGggcGZuX3B0ZSgpIHRvIG1ha2Ugc3VyZSB0aGF0IHZtX2dldF9wYWdlX3Byb3Qo
aWR4KQogCSAqIGRvZXMgbm90IGhhdmUgdGhlIGRpcnR5IGJpdCBlbmFibGVkIGZyb20gdGhlIGJl
Z2lubmluZy4gVGhpcyBpcwogCSAqIGltcG9ydGFudCBmb3IgcGxhdGZvcm1zIGxpa2UgYXJtNjQg
d2hlcmUgKCFQVEVfUkRPTkxZKSBpbmRpY2F0ZQogCSAqIGRpcnR5IGJpdCBiZWluZyBzZXQuCkBA
IC0xOTAsNyArMTkwLDcgQEAgc3RhdGljIHZvaWQgX19pbml0IHB0ZV9zYXZlZHdyaXRlX3Rlc3Rz
KHN0cnVjdCBwZ3RhYmxlX2RlYnVnX2FyZ3MgKmFyZ3MpCiAjaWZkZWYgQ09ORklHX1RSQU5TUEFS
RU5UX0hVR0VQQUdFCiBzdGF0aWMgdm9pZCBfX2luaXQgcG1kX2Jhc2ljX3Rlc3RzKHN0cnVjdCBw
Z3RhYmxlX2RlYnVnX2FyZ3MgKmFyZ3MsIGludCBpZHgpCiB7Ci0JcGdwcm90X3QgcHJvdCA9IHBy
b3RlY3Rpb25fbWFwW2lkeF07CisJcGdwcm90X3QgcHJvdCA9IHZtX2dldF9wYWdlX3Byb3QoaWR4
KTsKIAl1bnNpZ25lZCBsb25nIHZhbCA9IGlkeCwgKnB0ciA9ICZ2YWw7CiAJcG1kX3QgcG1kOwog
CkBAIC0yMDIsNyArMjAyLDcgQEAgc3RhdGljIHZvaWQgX19pbml0IHBtZF9iYXNpY190ZXN0cyhz
dHJ1Y3QgcGd0YWJsZV9kZWJ1Z19hcmdzICphcmdzLCBpbnQgaWR4KQogCiAJLyoKIAkgKiBUaGlz
IHRlc3QgbmVlZHMgdG8gYmUgZXhlY3V0ZWQgYWZ0ZXIgdGhlIGdpdmVuIHBhZ2UgdGFibGUgZW50
cnkKLQkgKiBpcyBjcmVhdGVkIHdpdGggcGZuX3BtZCgpIHRvIG1ha2Ugc3VyZSB0aGF0IHByb3Rl
Y3Rpb25fbWFwW2lkeF0KKwkgKiBpcyBjcmVhdGVkIHdpdGggcGZuX3BtZCgpIHRvIG1ha2Ugc3Vy
ZSB0aGF0IHZtX2dldF9wYWdlX3Byb3QoaWR4KQogCSAqIGRvZXMgbm90IGhhdmUgdGhlIGRpcnR5
IGJpdCBlbmFibGVkIGZyb20gdGhlIGJlZ2lubmluZy4gVGhpcyBpcwogCSAqIGltcG9ydGFudCBm
b3IgcGxhdGZvcm1zIGxpa2UgYXJtNjQgd2hlcmUgKCFQVEVfUkRPTkxZKSBpbmRpY2F0ZQogCSAq
IGRpcnR5IGJpdCBiZWluZyBzZXQuCkBAIC0zMjUsNyArMzI1LDcgQEAgc3RhdGljIHZvaWQgX19p
bml0IHBtZF9zYXZlZHdyaXRlX3Rlc3RzKHN0cnVjdCBwZ3RhYmxlX2RlYnVnX2FyZ3MgKmFyZ3Mp
CiAjaWZkZWYgQ09ORklHX0hBVkVfQVJDSF9UUkFOU1BBUkVOVF9IVUdFUEFHRV9QVUQKIHN0YXRp
YyB2b2lkIF9faW5pdCBwdWRfYmFzaWNfdGVzdHMoc3RydWN0IHBndGFibGVfZGVidWdfYXJncyAq
YXJncywgaW50IGlkeCkKIHsKLQlwZ3Byb3RfdCBwcm90ID0gcHJvdGVjdGlvbl9tYXBbaWR4XTsK
KwlwZ3Byb3RfdCBwcm90ID0gdm1fZ2V0X3BhZ2VfcHJvdChpZHgpOwogCXVuc2lnbmVkIGxvbmcg
dmFsID0gaWR4LCAqcHRyID0gJnZhbDsKIAlwdWRfdCBwdWQ7CiAKQEAgLTMzNyw3ICszMzcsNyBA
QCBzdGF0aWMgdm9pZCBfX2luaXQgcHVkX2Jhc2ljX3Rlc3RzKHN0cnVjdCBwZ3RhYmxlX2RlYnVn
X2FyZ3MgKmFyZ3MsIGludCBpZHgpCiAKIAkvKgogCSAqIFRoaXMgdGVzdCBuZWVkcyB0byBiZSBl
eGVjdXRlZCBhZnRlciB0aGUgZ2l2ZW4gcGFnZSB0YWJsZSBlbnRyeQotCSAqIGlzIGNyZWF0ZWQg
d2l0aCBwZm5fcHVkKCkgdG8gbWFrZSBzdXJlIHRoYXQgcHJvdGVjdGlvbl9tYXBbaWR4XQorCSAq
IGlzIGNyZWF0ZWQgd2l0aCBwZm5fcHVkKCkgdG8gbWFrZSBzdXJlIHRoYXQgdm1fZ2V0X3BhZ2Vf
cHJvdChpZHgpCiAJICogZG9lcyBub3QgaGF2ZSB0aGUgZGlydHkgYml0IGVuYWJsZWQgZnJvbSB0
aGUgYmVnaW5uaW5nLiBUaGlzIGlzCiAJICogaW1wb3J0YW50IGZvciBwbGF0Zm9ybXMgbGlrZSBh
cm02NCB3aGVyZSAoIVBURV9SRE9OTFkpIGluZGljYXRlCiAJICogZGlydHkgYml0IGJlaW5nIHNl
dC4KQEAgLTExMDYsMTQgKzExMDYsMTQgQEAgc3RhdGljIGludCBfX2luaXQgaW5pdF9hcmdzKHN0
cnVjdCBwZ3RhYmxlX2RlYnVnX2FyZ3MgKmFyZ3MpCiAJLyoKIAkgKiBJbml0aWFsaXplIHRoZSBk
ZWJ1Z2dpbmcgZGF0YS4KIAkgKgotCSAqIHByb3RlY3Rpb25fbWFwWzBdIChvciBldmVuIHByb3Rl
Y3Rpb25fbWFwWzhdKSB3aWxsIGhlbHAgY3JlYXRlCi0JICogcGFnZSB0YWJsZSBlbnRyaWVzIHdp
dGggUFJPVF9OT05FIHBlcm1pc3Npb24gYXMgcmVxdWlyZWQgZm9yCi0JICogcHh4X3Byb3Rub25l
X3Rlc3RzKCkuCisJICogdm1fZ2V0X3BhZ2VfcHJvdChWTV9OT05FKSBvciB2bV9nZXRfcGFnZV9w
cm90KFZNX1NIQVJFRHxWTV9OT05FKQorCSAqIHdpbGwgaGVscCBjcmVhdGUgcGFnZSB0YWJsZSBl
bnRyaWVzIHdpdGggUFJPVF9OT05FIHBlcm1pc3Npb24gYXMKKwkgKiByZXF1aXJlZCBmb3IgcHh4
X3Byb3Rub25lX3Rlc3RzKCkuCiAJICovCiAJbWVtc2V0KGFyZ3MsIDAsIHNpemVvZigqYXJncykp
OwogCWFyZ3MtPnZhZGRyICAgICAgICAgICAgICA9IGdldF9yYW5kb21fdmFkZHIoKTsKIAlhcmdz
LT5wYWdlX3Byb3QgICAgICAgICAgPSB2bV9nZXRfcGFnZV9wcm90KFZNRkxBR1MpOwotCWFyZ3Mt
PnBhZ2VfcHJvdF9ub25lICAgICA9IHByb3RlY3Rpb25fbWFwWzBdOworCWFyZ3MtPnBhZ2VfcHJv
dF9ub25lICAgICA9IHZtX2dldF9wYWdlX3Byb3QoVk1fTk9ORSk7CiAJYXJncy0+aXNfY29udGln
dW91c19wYWdlID0gZmFsc2U7CiAJYXJncy0+cHVkX3BmbiAgICAgICAgICAgID0gVUxPTkdfTUFY
OwogCWFyZ3MtPnBtZF9wZm4gICAgICAgICAgICA9IFVMT05HX01BWDsKQEAgLTEyNDgsMTIgKzEy
NDgsMTkgQEAgc3RhdGljIGludCBfX2luaXQgZGVidWdfdm1fcGd0YWJsZSh2b2lkKQogCQlyZXR1
cm4gcmV0OwogCiAJLyoKLQkgKiBJdGVyYXRlIG92ZXIgdGhlIHByb3RlY3Rpb25fbWFwW10gdG8g
bWFrZSBzdXJlIHRoYXQgYWxsCisJICogSXRlcmF0ZSBvdmVyIGVhY2ggcG9zc2libGUgdm1fZmxh
Z3MgdG8gbWFrZSBzdXJlIHRoYXQgYWxsCiAJICogdGhlIGJhc2ljIHBhZ2UgdGFibGUgdHJhbnNm
b3JtYXRpb24gdmFsaWRhdGlvbnMganVzdCBob2xkCiAJICogdHJ1ZSBpcnJlc3BlY3RpdmUgb2Yg
dGhlIHN0YXJ0aW5nIHByb3RlY3Rpb24gdmFsdWUgZm9yIGEKIAkgKiBnaXZlbiBwYWdlIHRhYmxl
IGVudHJ5LgorCSAqCisJICogUHJvdGVjdGlvbiBiYXNlZCB2bV9mbGFncyBjb21iaW5hdGlucyBh
cmUgYWx3YXlzIGxpbmVhcgorCSAqIGFuZCBpbmNyZWFzaW5nIGkuZSBzdGFydGluZyBmcm9tIFZN
X05PTkUgYW5kIGdvaW5nIHVwdG8KKwkgKiAoVk1fU0hBUkVEIHwgUkVBRCB8IFdSSVRFIHwgRVhF
QykuCiAJICovCi0JZm9yIChpZHggPSAwOyBpZHggPCBBUlJBWV9TSVpFKHByb3RlY3Rpb25fbWFw
KTsgaWR4KyspIHsKKyNkZWZpbmUgVk1fRkxBR1NfU1RBUlQJKFZNX05PTkUpCisjZGVmaW5lIFZN
X0ZMQUdTX0VORAkoVk1fU0hBUkVEIHwgVk1fRVhFQyB8IFZNX1dSSVRFIHwgVk1fUkVBRCkKKwor
CWZvciAoaWR4ID0gVk1fRkxBR1NfU1RBUlQ7IGlkeCA8PSBWTV9GTEFHU19FTkQ7IGlkeCsrKSB7
CiAJCXB0ZV9iYXNpY190ZXN0cygmYXJncywgaWR4KTsKIAkJcG1kX2Jhc2ljX3Rlc3RzKCZhcmdz
LCBpZHgpOwogCQlwdWRfYmFzaWNfdGVzdHMoJmFyZ3MsIGlkeCk7Ci0tIAoyLjI1LjEKCl9fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxp
bmcgbGlzdApPcGVuUklTQ0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJl
Y29yZXMub3JnL2xpc3RpbmZvL29wZW5yaXNjCg==
