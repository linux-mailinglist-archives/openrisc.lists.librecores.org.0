Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 8593E2460BB
	for <lists+openrisc@lfdr.de>; Mon, 17 Aug 2020 10:46:21 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id C20ED20D8C;
	Mon, 17 Aug 2020 10:46:20 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 53AC320CB2
 for <openrisc@lists.librecores.org>; Tue, 28 Jul 2020 07:14:23 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 8796F22B3F;
 Tue, 28 Jul 2020 05:14:12 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1595913262;
 bh=D4P0wqEsdVBURYchiPCdv6Fiv5mA0ZEorCZjebFBpYQ=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=yOsDqcPuNK3mnXwpGV5V0qIpFuh0fVSpNw3+P9hxm3S9EBAmK4IxqpxsKr+1515y1
 peXnq3SpXhNXj7ACarWm4n6U7SXiORCtMjzxNjguXAHdGDG+94MkaPGXpGzUFSTqUb
 AdJdwdhJ/pXfP/qHGBqWe58VXmreLh5Bz8wLkz6s=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Tue, 28 Jul 2020 08:11:51 +0300
Message-Id: <20200728051153.1590-14-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200728051153.1590-1-rppt@kernel.org>
References: <20200728051153.1590-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Mon, 17 Aug 2020 10:45:37 +0200
Subject: [OpenRISC] [PATCH 13/15] arch,
 drivers: replace for_each_membock() with for_each_mem_range()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: linux-sh@vger.kernel.org, Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Marek Szyprowski <m.szyprowski@samsung.com>,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Yoshinori Sato <ysato@users.sourceforge.jp>,
 Michael Ellerman <mpe@ellerman.id.au>, x86@kernel.org,
 Russell King <linux@armlinux.org.uk>, Mike Rapoport <rppt@linux.ibm.com>,
 clang-built-linux@googlegroups.com, Ingo Molnar <mingo@redhat.com>,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Thomas Gleixner <tglx@linutronix.de>, linux-arm-kernel@lists.infradead.org,
 Michal Simek <monstr@monstr.eu>, linux-mm@kvack.org,
 linuxppc-dev@lists.ozlabs.org, linux-kernel@vger.kernel.org,
 iommu@lists.linux-foundation.org, Palmer Dabbelt <palmer@dabbelt.com>,
 Christoph Hellwig <hch@lst.de>, Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlcmUgYXJlIHNldmVy
YWwgb2NjdXJyZW5jZXMgb2YgdGhlIGZvbGxvd2luZyBwYXR0ZXJuOgoKCWZvcl9lYWNoX21lbWJs
b2NrKG1lbW9yeSwgcmVnKSB7CgkJc3RhcnQgPSBfX3Bmbl90b19waHlzKG1lbWJsb2NrX3JlZ2lv
bl9tZW1vcnlfYmFzZV9wZm4ocmVnKTsKCQllbmQgPSBfX3Bmbl90b19waHlzKG1lbWJsb2NrX3Jl
Z2lvbl9tZW1vcnlfZW5kX3BmbihyZWcpKTsKCgkJLyogZG8gc29tZXRoaW5nIHdpdGggc3RhcnQg
YW5kIGVuZCAqLwoJfQoKVXNpbmcgZm9yX2VhY2hfbWVtX3JhbmdlKCkgaXRlcmF0b3IgaXMgbW9y
ZSBhcHByb3ByaWF0ZSBpbiBzdWNoIGNhc2VzIGFuZAphbGxvd3Mgc2ltcGxlciBhbmQgY2xlYW5l
ciBjb2RlLgoKU2lnbmVkLW9mZi1ieTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29t
PgotLS0KIGFyY2gvYXJtL2tlcm5lbC9zZXR1cC5jICAgICAgICAgICAgICAgICAgfCAxOCArKysr
KysrLS0tLQogYXJjaC9hcm0vbW0vbW11LmMgICAgICAgICAgICAgICAgICAgICAgICB8IDM5ICsr
KysrKysrLS0tLS0tLS0tLS0tLS0tLQogYXJjaC9hcm0vbW0vcG1zYS12Ny5jICAgICAgICAgICAg
ICAgICAgICB8IDIwICsrKysrKy0tLS0tLQogYXJjaC9hcm0vbW0vcG1zYS12OC5jICAgICAgICAg
ICAgICAgICAgICB8IDE3ICsrKysrLS0tLS0tCiBhcmNoL2FybS94ZW4vbW0uYyAgICAgICAgICAg
ICAgICAgICAgICAgIHwgIDcgKysrLS0KIGFyY2gvYXJtNjQvbW0va2FzYW5faW5pdC5jICAgICAg
ICAgICAgICAgfCAgOCArKy0tLQogYXJjaC9hcm02NC9tbS9tbXUuYyAgICAgICAgICAgICAgICAg
ICAgICB8IDExICsrLS0tLS0KIGFyY2gvYzZ4L2tlcm5lbC9zZXR1cC5jICAgICAgICAgICAgICAg
ICAgfCAgOSArKystLS0KIGFyY2gvbWljcm9ibGF6ZS9tbS9pbml0LmMgICAgICAgICAgICAgICAg
fCAgOSArKystLS0KIGFyY2gvbWlwcy9jYXZpdW0tb2N0ZW9uL2RtYS1vY3Rlb24uYyAgICAgfCAx
MiArKysrLS0tLQogYXJjaC9taXBzL2tlcm5lbC9zZXR1cC5jICAgICAgICAgICAgICAgICB8IDMx
ICsrKysrKysrKy0tLS0tLS0tLS0KIGFyY2gvb3BlbnJpc2MvbW0vaW5pdC5jICAgICAgICAgICAg
ICAgICAgfCAgOCArKystLQogYXJjaC9wb3dlcnBjL2tlcm5lbC9mYWR1bXAuYyAgICAgICAgICAg
ICB8IDI3ICsrKysrKystLS0tLS0tLS0KIGFyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9oYXNoX3V0
aWxzLmMgICAgfCAxNiArKysrKy0tLS0tCiBhcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhf
cGd0YWJsZS5jIHwgMTEgKysrLS0tLQogYXJjaC9wb3dlcnBjL21tL2thc2FuL2thc2FuX2luaXRf
MzIuYyAgICB8ICA4ICsrLS0tCiBhcmNoL3Bvd2VycGMvbW0vbWVtLmMgICAgICAgICAgICAgICAg
ICAgIHwgMTYgKysrKysrLS0tLQogYXJjaC9wb3dlcnBjL21tL3BndGFibGVfMzIuYyAgICAgICAg
ICAgICB8ICA4ICsrLS0tCiBhcmNoL3Jpc2N2L21tL2luaXQuYyAgICAgICAgICAgICAgICAgICAg
IHwgMjQgKysrKysrLS0tLS0tLS0tCiBhcmNoL3Jpc2N2L21tL2thc2FuX2luaXQuYyAgICAgICAg
ICAgICAgIHwgMTAgKysrLS0tCiBhcmNoL3MzOTAva2VybmVsL3NldHVwLmMgICAgICAgICAgICAg
ICAgIHwgMjcgKysrKysrKysrKy0tLS0tLQogYXJjaC9zMzkwL21tL3ZtZW0uYyAgICAgICAgICAg
ICAgICAgICAgICB8IDE2ICsrKysrLS0tLS0KIGFyY2gvc3BhcmMvbW0vaW5pdF82NC5jICAgICAg
ICAgICAgICAgICAgfCAxMiArKystLS0tLQogZHJpdmVycy9idXMvbXZlYnUtbWJ1cy5jICAgICAg
ICAgICAgICAgICB8IDEyICsrKystLS0tCiBkcml2ZXJzL3MzOTAvY2hhci96Y29yZS5jICAgICAg
ICAgICAgICAgIHwgIDkgKysrLS0tCiAyNSBmaWxlcyBjaGFuZ2VkLCAxODcgaW5zZXJ0aW9ucygr
KSwgMTk4IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2FyY2gvYXJtL2tlcm5lbC9zZXR1cC5j
IGIvYXJjaC9hcm0va2VybmVsL3NldHVwLmMKaW5kZXggZDhlMThjZGQ5NmQzLi4zZjY1ZDBhYzlm
NjMgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL2tlcm5lbC9zZXR1cC5jCisrKyBiL2FyY2gvYXJtL2tl
cm5lbC9zZXR1cC5jCkBAIC04NDMsMTkgKzg0MywyNSBAQCBlYXJseV9wYXJhbSgibWVtIiwgZWFy
bHlfbWVtKTsKIAogc3RhdGljIHZvaWQgX19pbml0IHJlcXVlc3Rfc3RhbmRhcmRfcmVzb3VyY2Vz
KGNvbnN0IHN0cnVjdCBtYWNoaW5lX2Rlc2MgKm1kZXNjKQogewotCXN0cnVjdCBtZW1ibG9ja19y
ZWdpb24gKnJlZ2lvbjsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5kLCByZXNfZW5kOwogCXN0cnVj
dCByZXNvdXJjZSAqcmVzOworCXU2NCBpOwogCiAJa2VybmVsX2NvZGUuc3RhcnQgICA9IHZpcnRf
dG9fcGh5cyhfdGV4dCk7CiAJa2VybmVsX2NvZGUuZW5kICAgICA9IHZpcnRfdG9fcGh5cyhfX2lu
aXRfYmVnaW4gLSAxKTsKIAlrZXJuZWxfZGF0YS5zdGFydCAgID0gdmlydF90b19waHlzKF9zZGF0
YSk7CiAJa2VybmVsX2RhdGEuZW5kICAgICA9IHZpcnRfdG9fcGh5cyhfZW5kIC0gMSk7CiAKLQlm
b3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZ2lvbikgewotCQlwaHlzX2FkZHJfdCBzdGFydCA9
IF9fcGZuX3RvX3BoeXMobWVtYmxvY2tfcmVnaW9uX21lbW9yeV9iYXNlX3BmbihyZWdpb24pKTsK
LQkJcGh5c19hZGRyX3QgZW5kID0gX19wZm5fdG9fcGh5cyhtZW1ibG9ja19yZWdpb25fbWVtb3J5
X2VuZF9wZm4ocmVnaW9uKSkgLSAxOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZl
bmQpIHsKIAkJdW5zaWduZWQgbG9uZyBib290X2FsaWFzX3N0YXJ0OwogCisJCS8qCisJCSAqIElu
IG1lbWJsb2NrLCBlbmQgcG9pbnRzIHRvIHRoZSBmaXJzdCBieXRlIGFmdGVyIHRoZQorCQkgKiBy
YW5nZSB3aGlsZSBpbiByZXNvdXJzZXMsIGVuZCBwb2ludHMgdG8gdGhlIGxhc3QgYnl0ZSBpbgor
CQkgKiB0aGUgcmFuZ2UuCisJCSAqLworCQlyZXNfZW5kID0gZW5kIC0gMTsKKwogCQkvKgogCQkg
KiBTb21lIHN5c3RlbXMgaGF2ZSBhIHNwZWNpYWwgbWVtb3J5IGFsaWFzIHdoaWNoIGlzIG9ubHkK
IAkJICogdXNlZCBmb3IgYm9vdGluZy4gIFdlIG5lZWQgdG8gYWR2ZXJ0aXNlIHRoaXMgcmVnaW9u
IHRvCkBAIC04NjksNyArODc1LDcgQEAgc3RhdGljIHZvaWQgX19pbml0IHJlcXVlc3Rfc3RhbmRh
cmRfcmVzb3VyY2VzKGNvbnN0IHN0cnVjdCBtYWNoaW5lX2Rlc2MgKm1kZXNjKQogCQkJCSAgICAg
IF9fZnVuY19fLCBzaXplb2YoKnJlcykpOwogCQkJcmVzLT5uYW1lID0gIlN5c3RlbSBSQU0gKGJv
b3QgYWxpYXMpIjsKIAkJCXJlcy0+c3RhcnQgPSBib290X2FsaWFzX3N0YXJ0OwotCQkJcmVzLT5l
bmQgPSBwaHlzX3RvX2lkbWFwKGVuZCk7CisJCQlyZXMtPmVuZCA9IHBoeXNfdG9faWRtYXAocmVz
X2VuZCk7CiAJCQlyZXMtPmZsYWdzID0gSU9SRVNPVVJDRV9NRU0gfCBJT1JFU09VUkNFX0JVU1k7
CiAJCQlyZXF1ZXN0X3Jlc291cmNlKCZpb21lbV9yZXNvdXJjZSwgcmVzKTsKIAkJfQpAQCAtODgw
LDcgKzg4Niw3IEBAIHN0YXRpYyB2b2lkIF9faW5pdCByZXF1ZXN0X3N0YW5kYXJkX3Jlc291cmNl
cyhjb25zdCBzdHJ1Y3QgbWFjaGluZV9kZXNjICptZGVzYykKIAkJCSAgICAgIHNpemVvZigqcmVz
KSk7CiAJCXJlcy0+bmFtZSAgPSAiU3lzdGVtIFJBTSI7CiAJCXJlcy0+c3RhcnQgPSBzdGFydDsK
LQkJcmVzLT5lbmQgPSBlbmQ7CisJCXJlcy0+ZW5kID0gcmVzX2VuZDsKIAkJcmVzLT5mbGFncyA9
IElPUkVTT1VSQ0VfU1lTVEVNX1JBTSB8IElPUkVTT1VSQ0VfQlVTWTsKIAogCQlyZXF1ZXN0X3Jl
c291cmNlKCZpb21lbV9yZXNvdXJjZSwgcmVzKTsKZGlmZiAtLWdpdCBhL2FyY2gvYXJtL21tL21t
dS5jIGIvYXJjaC9hcm0vbW0vbW11LmMKaW5kZXggNjI4MDI4YmZiYjkyLi5hMTQ5ZDljYjRmZGIg
MTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL21tL21tdS5jCisrKyBiL2FyY2gvYXJtL21tL21tdS5jCkBA
IC0xMTU1LDkgKzExNTUsOCBAQCBwaHlzX2FkZHJfdCBhcm1fbG93bWVtX2xpbWl0IF9faW5pdGRh
dGEgPSAwOwogCiB2b2lkIF9faW5pdCBhZGp1c3RfbG93bWVtX2JvdW5kcyh2b2lkKQogewotCXBo
eXNfYWRkcl90IG1lbWJsb2NrX2xpbWl0ID0gMDsKLQl1NjQgdm1hbGxvY19saW1pdDsKLQlzdHJ1
Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3QgYmxvY2tfc3RhcnQsIGJsb2Nr
X2VuZCwgbWVtYmxvY2tfbGltaXQgPSAwOworCXU2NCB2bWFsbG9jX2xpbWl0LCBpOwogCXBoeXNf
YWRkcl90IGxvd21lbV9saW1pdCA9IDA7CiAKIAkvKgpAQCAtMTE3MywyNiArMTE3MiwxOCBAQCB2
b2lkIF9faW5pdCBhZGp1c3RfbG93bWVtX2JvdW5kcyh2b2lkKQogCSAqIFRoZSBmaXJzdCB1c2Fi
bGUgcmVnaW9uIG11c3QgYmUgUE1EIGFsaWduZWQuIE1hcmsgaXRzIHN0YXJ0CiAJICogYXMgTUVN
QkxPQ0tfTk9NQVAgaWYgaXQgaXNuJ3QKIAkgKi8KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnks
IHJlZykgewotCQlpZiAoIW1lbWJsb2NrX2lzX25vbWFwKHJlZykpIHsKLQkJCWlmICghSVNfQUxJ
R05FRChyZWctPmJhc2UsIFBNRF9TSVpFKSkgewotCQkJCXBoeXNfYWRkcl90IGxlbjsKKwlmb3Jf
ZWFjaF9tZW1fcmFuZ2UoaSwgJmJsb2NrX3N0YXJ0LCAmYmxvY2tfZW5kKSB7CisJCWlmICghSVNf
QUxJR05FRChibG9ja19zdGFydCwgUE1EX1NJWkUpKSB7CisJCQlwaHlzX2FkZHJfdCBsZW47CiAK
LQkJCQlsZW4gPSByb3VuZF91cChyZWctPmJhc2UsIFBNRF9TSVpFKSAtIHJlZy0+YmFzZTsKLQkJ
CQltZW1ibG9ja19tYXJrX25vbWFwKHJlZy0+YmFzZSwgbGVuKTsKLQkJCX0KLQkJCWJyZWFrOwor
CQkJbGVuID0gcm91bmRfdXAoYmxvY2tfc3RhcnQsIFBNRF9TSVpFKSAtIGJsb2NrX3N0YXJ0Owor
CQkJbWVtYmxvY2tfbWFya19ub21hcChibG9ja19zdGFydCwgbGVuKTsKIAkJfQorCQlicmVhazsK
IAl9CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewotCQlwaHlzX2FkZHJfdCBi
bG9ja19zdGFydCA9IHJlZy0+YmFzZTsKLQkJcGh5c19hZGRyX3QgYmxvY2tfZW5kID0gcmVnLT5i
YXNlICsgcmVnLT5zaXplOwotCi0JCWlmIChtZW1ibG9ja19pc19ub21hcChyZWcpKQotCQkJY29u
dGludWU7Ci0KLQkJaWYgKHJlZy0+YmFzZSA8IHZtYWxsb2NfbGltaXQpIHsKKwlmb3JfZWFjaF9t
ZW1fcmFuZ2UoaSwgJmJsb2NrX3N0YXJ0LCAmYmxvY2tfZW5kKSB7CisJCWlmIChibG9ja19zdGFy
dCA8IHZtYWxsb2NfbGltaXQpIHsKIAkJCWlmIChibG9ja19lbmQgPiBsb3dtZW1fbGltaXQpCiAJ
CQkJLyoKIAkJCQkgKiBDb21wYXJlIGFzIHU2NCB0byBlbnN1cmUgdm1hbGxvY19saW1pdCBkb2Vz
CkBAIC0xNDQxLDE5ICsxNDMyLDE1IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBrbWFwX2luaXQodm9p
ZCkKIAogc3RhdGljIHZvaWQgX19pbml0IG1hcF9sb3dtZW0odm9pZCkKIHsKLQlzdHJ1Y3QgbWVt
YmxvY2tfcmVnaW9uICpyZWc7CiAJcGh5c19hZGRyX3Qga2VybmVsX3hfc3RhcnQgPSByb3VuZF9k
b3duKF9fcGEoS0VSTkVMX1NUQVJUKSwgU0VDVElPTl9TSVpFKTsKIAlwaHlzX2FkZHJfdCBrZXJu
ZWxfeF9lbmQgPSByb3VuZF91cChfX3BhKF9faW5pdF9lbmQpLCBTRUNUSU9OX1NJWkUpOworCXBo
eXNfYWRkcl90IHN0YXJ0LCBlbmQ7CisJdTY0IGk7CiAKIAkvKiBNYXAgYWxsIHRoZSBsb3dtZW0g
bWVtb3J5IGJhbmtzLiAqLwotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXBo
eXNfYWRkcl90IHN0YXJ0ID0gcmVnLT5iYXNlOwotCQlwaHlzX2FkZHJfdCBlbmQgPSBzdGFydCAr
IHJlZy0+c2l6ZTsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKSB7CiAJCXN0
cnVjdCBtYXBfZGVzYyBtYXA7CiAKLQkJaWYgKG1lbWJsb2NrX2lzX25vbWFwKHJlZykpCi0JCQlj
b250aW51ZTsKLQogCQlpZiAoZW5kID4gYXJtX2xvd21lbV9saW1pdCkKIAkJCWVuZCA9IGFybV9s
b3dtZW1fbGltaXQ7CiAJCWlmIChzdGFydCA+PSBlbmQpCmRpZmYgLS1naXQgYS9hcmNoL2FybS9t
bS9wbXNhLXY3LmMgYi9hcmNoL2FybS9tbS9wbXNhLXY3LmMKaW5kZXggNjk5ZmEyZTg4NzI1Li40
NGI3NjQ0YTQyMzcgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL21tL3Btc2EtdjcuYworKysgYi9hcmNo
L2FybS9tbS9wbXNhLXY3LmMKQEAgLTIzMSwxMCArMjMxLDkgQEAgc3RhdGljIGludCBfX2luaXQg
YWxsb2NhdGVfcmVnaW9uKHBoeXNfYWRkcl90IGJhc2UsIHBoeXNfYWRkcl90IHNpemUsCiB2b2lk
IF9faW5pdCBwbXNhdjdfYWRqdXN0X2xvd21lbV9ib3VuZHModm9pZCkKIHsKIAlwaHlzX2FkZHJf
dCAgc3BlY2lmaWVkX21lbV9zaXplID0gMCwgdG90YWxfbWVtX3NpemUgPSAwOwotCXN0cnVjdCBt
ZW1ibG9ja19yZWdpb24gKnJlZzsKLQlib29sIGZpcnN0ID0gdHJ1ZTsKIAlwaHlzX2FkZHJfdCBt
ZW1fc3RhcnQ7CiAJcGh5c19hZGRyX3QgbWVtX2VuZDsKKwlwaHlzX2FkZHJfdCByZWdfc3RhcnQs
IHJlZ19lbmQ7CiAJdW5zaWduZWQgaW50IG1lbV9tYXhfcmVnaW9uczsKIAlpbnQgbnVtLCBpOwog
CkBAIC0yNjIsMjAgKzI2MSwxOSBAQCB2b2lkIF9faW5pdCBwbXNhdjdfYWRqdXN0X2xvd21lbV9i
b3VuZHModm9pZCkKIAltZW1fbWF4X3JlZ2lvbnMgLT0gbnVtOwogI2VuZGlmCiAKLQlmb3JfZWFj
aF9tZW1ibG9jayhtZW1vcnksIHJlZykgewotCQlpZiAoZmlyc3QpIHsKKwlmb3JfZWFjaF9tZW1f
cmFuZ2UoaSwgJnJlZ19zdGFydCwgJnJlZ19lbmQpIHsKKwkJaWYgKGkgPT0gMCkgewogCQkJcGh5
c19hZGRyX3QgcGh5c19vZmZzZXQgPSBQSFlTX09GRlNFVDsKIAogCQkJLyoKIAkJCSAqIEluaXRp
YWxseSBvbmx5IHVzZSBtZW1vcnkgY29udGludW91cyBmcm9tCiAJCQkgKiBQSFlTX09GRlNFVCAq
LwotCQkJaWYgKHJlZy0+YmFzZSAhPSBwaHlzX29mZnNldCkKKwkJCWlmIChyZWdfc3RhcnQgIT0g
cGh5c19vZmZzZXQpCiAJCQkJcGFuaWMoIkZpcnN0IG1lbW9yeSBiYW5rIG11c3QgYmUgY29udGln
dW91cyBmcm9tIFBIWVNfT0ZGU0VUIik7CiAKLQkJCW1lbV9zdGFydCA9IHJlZy0+YmFzZTsKLQkJ
CW1lbV9lbmQgPSByZWctPmJhc2UgKyByZWctPnNpemU7Ci0JCQlzcGVjaWZpZWRfbWVtX3NpemUg
PSByZWctPnNpemU7Ci0JCQlmaXJzdCA9IGZhbHNlOworCQkJbWVtX3N0YXJ0ID0gcmVnX3N0YXJ0
OworCQkJbWVtX2VuZCA9IHJlZ19lbmQKKwkJCXNwZWNpZmllZF9tZW1fc2l6ZSA9IG1lbV9lbmQg
LSBtZW1fc3RhcnQ7CiAJCX0gZWxzZSB7CiAJCQkvKgogCQkJICogbWVtYmxvY2sgYXV0byBtZXJn
ZXMgY29udGlndW91cyBibG9ja3MsIHJlbW92ZQpAQCAtMjgzLDggKzI4MSw4IEBAIHZvaWQgX19p
bml0IHBtc2F2N19hZGp1c3RfbG93bWVtX2JvdW5kcyh2b2lkKQogCQkJICogYmxvY2tzIHNlcGFy
YXRlbHkgd2hpbGUgaXRlcmF0aW5nKQogCQkJICovCiAJCQlwcl9ub3RpY2UoIklnbm9yaW5nIFJB
TSBhZnRlciAlcGEsIG1lbW9yeSBhdCAlcGEgaWdub3JlZFxuIiwKLQkJCQkgICZtZW1fZW5kLCAm
cmVnLT5iYXNlKTsKLQkJCW1lbWJsb2NrX3JlbW92ZShyZWctPmJhc2UsIDAgLSByZWctPmJhc2Up
OworCQkJCSAgJm1lbV9lbmQsICZyZWdfc3RhcnQpOworCQkJbWVtYmxvY2tfcmVtb3ZlKHJlZ19z
dGFydCwgMCAtIHJlZ19zdGFydCk7CiAJCQlicmVhazsKIAkJfQogCX0KZGlmZiAtLWdpdCBhL2Fy
Y2gvYXJtL21tL3Btc2EtdjguYyBiL2FyY2gvYXJtL21tL3Btc2EtdjguYwppbmRleCAwZDdkNWZi
NTkyNDcuLmIzOWU3NGI0ODQzNyAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vcG1zYS12OC5jCisr
KyBiL2FyY2gvYXJtL21tL3Btc2EtdjguYwpAQCAtOTQsMjAgKzk0LDE5IEBAIHN0YXRpYyBfX2lu
aXQgYm9vbCBpc19yZWdpb25fZml4ZWQoaW50IG51bWJlcikKIHZvaWQgX19pbml0IHBtc2F2OF9h
ZGp1c3RfbG93bWVtX2JvdW5kcyh2b2lkKQogewogCXBoeXNfYWRkcl90IG1lbV9lbmQ7Ci0Jc3Ry
dWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOwotCWJvb2wgZmlyc3QgPSB0cnVlOworCXBoeXNfYWRk
cl90IHJlZ19zdGFydCwgcmVnX2VuZDsKKwlpbnQgaTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1l
bW9yeSwgcmVnKSB7Ci0JCWlmIChmaXJzdCkgeworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmcmVn
X3N0YXJ0LCAmcmVnX2VuZCkgeworCQlpZiAoaSA9PSAwKSB7CiAJCQlwaHlzX2FkZHJfdCBwaHlz
X29mZnNldCA9IFBIWVNfT0ZGU0VUOwogCiAJCQkvKgogCQkJICogSW5pdGlhbGx5IG9ubHkgdXNl
IG1lbW9yeSBjb250aW51b3VzIGZyb20KIAkJCSAqIFBIWVNfT0ZGU0VUICovCi0JCQlpZiAocmVn
LT5iYXNlICE9IHBoeXNfb2Zmc2V0KQorCQkJaWYgKHJlZ19zdGFydCAhPSBwaHlzX29mZnNldCkK
IAkJCQlwYW5pYygiRmlyc3QgbWVtb3J5IGJhbmsgbXVzdCBiZSBjb250aWd1b3VzIGZyb20gUEhZ
U19PRkZTRVQiKTsKLQkJCW1lbV9lbmQgPSByZWctPmJhc2UgKyByZWctPnNpemU7Ci0JCQlmaXJz
dCA9IGZhbHNlOworCQkJbWVtX2VuZCA9IHJlZ19lbmQ7CiAJCX0gZWxzZSB7CiAJCQkvKgogCQkJ
ICogbWVtYmxvY2sgYXV0byBtZXJnZXMgY29udGlndW91cyBibG9ja3MsIHJlbW92ZQpAQCAtMTE1
LDggKzExNCw4IEBAIHZvaWQgX19pbml0IHBtc2F2OF9hZGp1c3RfbG93bWVtX2JvdW5kcyh2b2lk
KQogCQkJICogYmxvY2tzIHNlcGFyYXRlbHkgd2hpbGUgaXRlcmF0aW5nKQogCQkJICovCiAJCQlw
cl9ub3RpY2UoIklnbm9yaW5nIFJBTSBhZnRlciAlcGEsIG1lbW9yeSBhdCAlcGEgaWdub3JlZFxu
IiwKLQkJCQkgICZtZW1fZW5kLCAmcmVnLT5iYXNlKTsKLQkJCW1lbWJsb2NrX3JlbW92ZShyZWct
PmJhc2UsIDAgLSByZWctPmJhc2UpOworCQkJCSAgJm1lbV9lbmQsICZyZWdfc3RhcnQpOworCQkJ
bWVtYmxvY2tfcmVtb3ZlKHJlZ19zdGFydCwgMCAtIHJlZ19zdGFydCk7CiAJCQlicmVhazsKIAkJ
fQogCX0KZGlmZiAtLWdpdCBhL2FyY2gvYXJtL3hlbi9tbS5jIGIvYXJjaC9hcm0veGVuL21tLmMK
aW5kZXggZDQwZTllNWZjNTJiLi4wNWYyNGZmNDFlMzYgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL3hl
bi9tbS5jCisrKyBiL2FyY2gvYXJtL3hlbi9tbS5jCkBAIC0yNCwxMSArMjQsMTIgQEAKIAogdW5z
aWduZWQgbG9uZyB4ZW5fZ2V0X3N3aW90bGJfZnJlZV9wYWdlcyh1bnNpZ25lZCBpbnQgb3JkZXIp
CiB7Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOworCXBoeXNfYWRkcl90IGJhc2U7CiAJ
Z2ZwX3QgZmxhZ3MgPSBfX0dGUF9OT1dBUk58X19HRlBfS1NXQVBEX1JFQ0xBSU07CisJdTY0IGk7
CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewotCQlpZiAocmVnLT5iYXNlIDwg
KHBoeXNfYWRkcl90KTB4ZmZmZmZmZmYpIHsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJmJhc2Us
IE5VTEwpIHsKKwkJaWYgKGJhc2UgPCAocGh5c19hZGRyX3QpMHhmZmZmZmZmZikgewogCQkJaWYg
KElTX0VOQUJMRUQoQ09ORklHX1pPTkVfRE1BMzIpKQogCQkJCWZsYWdzIHw9IF9fR0ZQX0RNQTMy
OwogCQkJZWxzZQpkaWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9tbS9rYXNhbl9pbml0LmMgYi9hcmNo
L2FybTY0L21tL2thc2FuX2luaXQuYwppbmRleCA3MjkxYjI2Y2U3ODguLjFmYWEwODZmOTE5MyAx
MDA2NDQKLS0tIGEvYXJjaC9hcm02NC9tbS9rYXNhbl9pbml0LmMKKysrIGIvYXJjaC9hcm02NC9t
bS9rYXNhbl9pbml0LmMKQEAgLTIxMiw3ICsyMTIsNyBAQCB2b2lkIF9faW5pdCBrYXNhbl9pbml0
KHZvaWQpCiB7CiAJdTY0IGtpbWdfc2hhZG93X3N0YXJ0LCBraW1nX3NoYWRvd19lbmQ7CiAJdTY0
IG1vZF9zaGFkb3dfc3RhcnQsIG1vZF9zaGFkb3dfZW5kOwotCXN0cnVjdCBtZW1ibG9ja19yZWdp
b24gKnJlZzsKKwlwaHlzX2FkZHJfdCBfc3RhcnQsIF9lbmQ7CiAJaW50IGk7CiAKIAlraW1nX3No
YWRvd19zdGFydCA9ICh1NjQpa2FzYW5fbWVtX3RvX3NoYWRvdyhfdGV4dCkgJiBQQUdFX01BU0s7
CkBAIC0yNDYsOSArMjQ2LDkgQEAgdm9pZCBfX2luaXQga2FzYW5faW5pdCh2b2lkKQogCQlrYXNh
bl9wb3B1bGF0ZV9lYXJseV9zaGFkb3coKHZvaWQgKiltb2Rfc2hhZG93X2VuZCwKIAkJCQkJICAg
ICh2b2lkICopa2ltZ19zaGFkb3dfc3RhcnQpOwogCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5
LCByZWcpIHsKLQkJdm9pZCAqc3RhcnQgPSAodm9pZCAqKV9fcGh5c190b192aXJ0KHJlZy0+YmFz
ZSk7Ci0JCXZvaWQgKmVuZCA9ICh2b2lkICopX19waHlzX3RvX3ZpcnQocmVnLT5iYXNlICsgcmVn
LT5zaXplKTsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKSB7CisJCXZvaWQg
Kl9zdGFydCA9ICh2b2lkICopX19waHlzX3RvX3ZpcnQoX3N0YXJ0KTsKKwkJdm9pZCAqZW5kID0g
KHZvaWQgKilfX3BoeXNfdG9fdmlydChfZW5kKTsKIAogCQlpZiAoc3RhcnQgPj0gZW5kKQogCQkJ
YnJlYWs7CmRpZmYgLS1naXQgYS9hcmNoL2FybTY0L21tL21tdS5jIGIvYXJjaC9hcm02NC9tbS9t
bXUuYwppbmRleCAxZGYyNWYyNjU3MWQuLjMyNzI2NGZiODNmYiAxMDA2NDQKLS0tIGEvYXJjaC9h
cm02NC9tbS9tbXUuYworKysgYi9hcmNoL2FybTY0L21tL21tdS5jCkBAIC00NjEsOCArNDYxLDkg
QEAgc3RhdGljIHZvaWQgX19pbml0IG1hcF9tZW0ocGdkX3QgKnBnZHApCiB7CiAJcGh5c19hZGRy
X3Qga2VybmVsX3N0YXJ0ID0gX19wYV9zeW1ib2woX3RleHQpOwogCXBoeXNfYWRkcl90IGtlcm5l
bF9lbmQgPSBfX3BhX3N5bWJvbChfX2luaXRfYmVnaW4pOwotCXN0cnVjdCBtZW1ibG9ja19yZWdp
b24gKnJlZzsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5kOwogCWludCBmbGFncyA9IDA7CisJdTY0
IGk7CiAKIAlpZiAocm9kYXRhX2Z1bGwgfHwgZGVidWdfcGFnZWFsbG9jX2VuYWJsZWQoKSkKIAkJ
ZmxhZ3MgPSBOT19CTE9DS19NQVBQSU5HUyB8IE5PX0NPTlRfTUFQUElOR1M7CkBAIC00ODEsMTUg
KzQ4Miw5IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBtYXBfbWVtKHBnZF90ICpwZ2RwKQogI2VuZGlm
CiAKIAkvKiBtYXAgYWxsIHRoZSBtZW1vcnkgYmFua3MgKi8KLQlmb3JfZWFjaF9tZW1ibG9jayht
ZW1vcnksIHJlZykgewotCQlwaHlzX2FkZHJfdCBzdGFydCA9IHJlZy0+YmFzZTsKLQkJcGh5c19h
ZGRyX3QgZW5kID0gc3RhcnQgKyByZWctPnNpemU7Ci0KKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwg
JnN0YXJ0LCAmZW5kKSB7CiAJCWlmIChzdGFydCA+PSBlbmQpCiAJCQlicmVhazsKLQkJaWYgKG1l
bWJsb2NrX2lzX25vbWFwKHJlZykpCi0JCQljb250aW51ZTsKLQogCQlfX21hcF9tZW1ibG9jayhw
Z2RwLCBzdGFydCwgZW5kLCBQQUdFX0tFUk5FTCwgZmxhZ3MpOwogCX0KIApkaWZmIC0tZ2l0IGEv
YXJjaC9jNngva2VybmVsL3NldHVwLmMgYi9hcmNoL2M2eC9rZXJuZWwvc2V0dXAuYwppbmRleCA4
ZWYzNTEzMWY5OTkuLjkyNTRjM2I3OTRhNSAxMDA2NDQKLS0tIGEvYXJjaC9jNngva2VybmVsL3Nl
dHVwLmMKKysrIGIvYXJjaC9jNngva2VybmVsL3NldHVwLmMKQEAgLTI4Nyw3ICsyODcsOCBAQCBu
b3RyYWNlIHZvaWQgX19pbml0IG1hY2hpbmVfaW5pdCh1bnNpZ25lZCBsb25nIGR0X3B0cikKIAog
dm9pZCBfX2luaXQgc2V0dXBfYXJjaChjaGFyICoqY21kbGluZV9wKQogewotCXN0cnVjdCBtZW1i
bG9ja19yZWdpb24gKnJlZzsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5kOworCXU2NCBpOwogCiAJ
cHJpbnRrKEtFUk5fSU5GTyAiSW5pdGlhbGl6aW5nIGtlcm5lbFxuIik7CiAKQEAgLTM1MSw5ICsz
NTIsOSBAQCB2b2lkIF9faW5pdCBzZXR1cF9hcmNoKGNoYXIgKipjbWRsaW5lX3ApCiAJZGlzYWJs
ZV9jYWNoaW5nKHJhbV9zdGFydCwgcmFtX2VuZCAtIDEpOwogCiAJLyogU2V0IGNhY2hpbmcgb2Yg
ZXh0ZXJuYWwgUkFNIHVzZWQgYnkgTGludXggKi8KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnks
IHJlZykKLQkJZW5hYmxlX2NhY2hpbmcoQ0FDSEVfUkVHSU9OX1NUQVJUKHJlZy0+YmFzZSksCi0J
CQkgICAgICAgQ0FDSEVfUkVHSU9OX1NUQVJUKHJlZy0+YmFzZSArIHJlZy0+c2l6ZSAtIDEpKTsK
Kwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKQorCQllbmFibGVfY2FjaGluZyhD
QUNIRV9SRUdJT05fU1RBUlQoc3RhcnQpLAorCQkJICAgICAgIENBQ0hFX1JFR0lPTl9TVEFSVChl
bmQgLSAxKSk7CiAKICNpZmRlZiBDT05GSUdfQkxLX0RFVl9JTklUUkQKIAkvKgpkaWZmIC0tZ2l0
IGEvYXJjaC9taWNyb2JsYXplL21tL2luaXQuYyBiL2FyY2gvbWljcm9ibGF6ZS9tbS9pbml0LmMK
aW5kZXggNDllMGMyNDFmOWIxLi4xNTQwM2I1YWRmY2YgMTAwNjQ0Ci0tLSBhL2FyY2gvbWljcm9i
bGF6ZS9tbS9pbml0LmMKKysrIGIvYXJjaC9taWNyb2JsYXplL21tL2luaXQuYwpAQCAtMTA2LDEz
ICsxMDYsMTQgQEAgc3RhdGljIHZvaWQgX19pbml0IHBhZ2luZ19pbml0KHZvaWQpCiB2b2lkIF9f
aW5pdCBzZXR1cF9tZW1vcnkodm9pZCkKIHsKICNpZm5kZWYgQ09ORklHX01NVQotCXN0cnVjdCBt
ZW1ibG9ja19yZWdpb24gKnJlZzsKIAl1MzIga2VybmVsX2FsaWduX3N0YXJ0LCBrZXJuZWxfYWxp
Z25fc2l6ZTsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5kOworCXU2NCBpOwogCiAJLyogRmluZCBt
YWluIG1lbW9yeSB3aGVyZSBpcyB0aGUga2VybmVsICovCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVt
b3J5LCByZWcpIHsKLQkJbWVtb3J5X3N0YXJ0ID0gKHUzMilyZWctPmJhc2U7Ci0JCWxvd21lbV9z
aXplID0gcmVnLT5zaXplOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQpIHsK
KwkJbWVtb3J5X3N0YXJ0ID0gc3RhcnQ7CisJCWxvd21lbV9zaXplID0gZW5kIC0gc3RhcnQ7CiAJ
CWlmICgobWVtb3J5X3N0YXJ0IDw9ICh1MzIpX3RleHQpICYmCiAJCQkoKHUzMilfdGV4dCA8PSAo
bWVtb3J5X3N0YXJ0ICsgbG93bWVtX3NpemUgLSAxKSkpIHsKIAkJCW1lbW9yeV9zaXplID0gbG93
bWVtX3NpemU7CmRpZmYgLS1naXQgYS9hcmNoL21pcHMvY2F2aXVtLW9jdGVvbi9kbWEtb2N0ZW9u
LmMgYi9hcmNoL21pcHMvY2F2aXVtLW9jdGVvbi9kbWEtb2N0ZW9uLmMKaW5kZXggMTRlYTY4MGQx
ODBlLi5kOTM4YzFmN2MxZTEgMTAwNjQ0Ci0tLSBhL2FyY2gvbWlwcy9jYXZpdW0tb2N0ZW9uL2Rt
YS1vY3Rlb24uYworKysgYi9hcmNoL21pcHMvY2F2aXVtLW9jdGVvbi9kbWEtb2N0ZW9uLmMKQEAg
LTE5MCwyNSArMTkwLDI1IEBAIGNoYXIgKm9jdGVvbl9zd2lvdGxiOwogCiB2b2lkIF9faW5pdCBw
bGF0X3N3aW90bGJfc2V0dXAodm9pZCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICptZW07
CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKIAlwaHlzX2FkZHJfdCBtYXhfYWRkcjsKIAlwaHlz
X2FkZHJfdCBhZGRyX3NpemU7CiAJc2l6ZV90IHN3aW90bGJzaXplOwogCXVuc2lnbmVkIGxvbmcg
c3dpb3RsYl9uc2xhYnM7CisJdTY0IGk7CiAKIAltYXhfYWRkciA9IDA7CiAJYWRkcl9zaXplID0g
MDsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgbWVtKSB7CisJZm9yX2VhY2hfbWVtX3Jh
bmdlKGksICZzdGFydCwgJmVuZCkgewogCQkvKiBUaGVzZSBhZGRyZXNzZXMgbWFwIGxvdyBmb3Ig
UENJLiAqLwogCQlpZiAobWVtLT5iYXNlID4gMHg0MTAwMDAwMDB1bGwgJiYgIU9DVEVPTl9JU19P
Q1RFT04yKCkpCiAJCQljb250aW51ZTsKIAotCQlhZGRyX3NpemUgKz0gbWVtLT5zaXplOwotCi0J
CWlmIChtYXhfYWRkciA8IG1lbS0+YmFzZSArIG1lbS0+c2l6ZSkKLQkJCW1heF9hZGRyID0gbWVt
LT5iYXNlICsgbWVtLT5zaXplOworCQlhZGRyX3NpemUgKz0gKGVuZCAtIHN0YXJ0KTsKIAorCQlp
ZiAobWF4X2FkZHIgPCBlbmQpCisJCQltYXhfYWRkciA9IGVuZDsKIAl9CiAKIAlzd2lvdGxic2l6
ZSA9IFBBR0VfU0laRTsKZGlmZiAtLWdpdCBhL2FyY2gvbWlwcy9rZXJuZWwvc2V0dXAuYyBiL2Fy
Y2gvbWlwcy9rZXJuZWwvc2V0dXAuYwppbmRleCA3YjUzN2ZhMjAzNWQuLmVhYWMxYjY2MDI2ZCAx
MDA2NDQKLS0tIGEvYXJjaC9taXBzL2tlcm5lbC9zZXR1cC5jCisrKyBiL2FyY2gvbWlwcy9rZXJu
ZWwvc2V0dXAuYwpAQCAtMzAwLDggKzMwMCw5IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBib290bWVt
X2luaXQodm9pZCkKIAogc3RhdGljIHZvaWQgX19pbml0IGJvb3RtZW1faW5pdCh2b2lkKQogewot
CXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKm1lbTsKIAlwaHlzX2FkZHJfdCByYW1zdGFydCwgcmFt
ZW5kOworCXBoeXNfYWRkcl90IHN0YXJ0LCBlbmQ7CisJdTY0IGk7CiAKIAlyYW1zdGFydCA9IG1l
bWJsb2NrX3N0YXJ0X29mX0RSQU0oKTsKIAlyYW1lbmQgPSBtZW1ibG9ja19lbmRfb2ZfRFJBTSgp
OwpAQCAtMzM4LDE4ICszMzksMTMgQEAgc3RhdGljIHZvaWQgX19pbml0IGJvb3RtZW1faW5pdCh2
b2lkKQogCiAJbWluX2xvd19wZm4gPSBBUkNIX1BGTl9PRkZTRVQ7CiAJbWF4X3BmbiA9IFBGTl9E
T1dOKHJhbWVuZCk7Ci0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCBtZW0pIHsKLQkJdW5zaWdu
ZWQgbG9uZyBzdGFydCA9IG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfYmFzZV9wZm4obWVtKTsKLQkJ
dW5zaWduZWQgbG9uZyBlbmQgPSBtZW1ibG9ja19yZWdpb25fbWVtb3J5X2VuZF9wZm4obWVtKTsK
LQorCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQpIHsKIAkJLyoKIAkJICogU2tp
cCBoaWdobWVtIGhlcmUgc28gd2UgZ2V0IGFuIGFjY3VyYXRlIG1heF9sb3dfcGZuIGlmIGxvdwog
CQkgKiBtZW1vcnkgc3RvcHMgc2hvcnQgb2YgaGlnaCBtZW1vcnkuCiAJCSAqIElmIHRoZSByZWdp
b24gb3ZlcmxhcHMgSElHSE1FTV9TVEFSVCwgZW5kIGlzIGNsaXBwZWQgc28KIAkJICogbWF4X3Bm
biBleGNsdWRlcyB0aGUgaGlnaG1lbSBwb3J0aW9uLgogCQkgKi8KLQkJaWYgKG1lbWJsb2NrX2lz
X25vbWFwKG1lbSkpCi0JCQljb250aW51ZTsKIAkJaWYgKHN0YXJ0ID49IFBGTl9ET1dOKEhJR0hN
RU1fU1RBUlQpKQogCQkJY29udGludWU7CiAJCWlmIChlbmQgPiBQRk5fRE9XTihISUdITUVNX1NU
QVJUKSkKQEAgLTQ1OCwxMyArNDU0LDEyIEBAIGVhcmx5X3BhcmFtKCJtZW1tYXAiLCBlYXJseV9w
YXJzZV9tZW1tYXApOwogdW5zaWduZWQgbG9uZyBzZXR1cF9lbGZjb3JlaGRyLCBzZXR1cF9lbGZj
b3JlaGRyX3NpemU7CiBzdGF0aWMgaW50IF9faW5pdCBlYXJseV9wYXJzZV9lbGZjb3JlaGRyKGNo
YXIgKnApCiB7Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqbWVtOworCXBoeXNfYWRkcl90IHN0
YXJ0LCBlbmQ7CisJdTY0IGk7CiAKIAlzZXR1cF9lbGZjb3JlaGRyID0gbWVtcGFyc2UocCwgJnAp
OwogCi0JIGZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgbWVtKSB7Ci0JCXVuc2lnbmVkIGxvbmcg
c3RhcnQgPSBtZW0tPmJhc2U7Ci0JCXVuc2lnbmVkIGxvbmcgZW5kID0gc3RhcnQgKyBtZW0tPnNp
emU7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgewogCQlpZiAoc2V0dXBf
ZWxmY29yZWhkciA+PSBzdGFydCAmJiBzZXR1cF9lbGZjb3JlaGRyIDwgZW5kKSB7CiAJCQkvKgog
CQkJICogUmVzZXJ2ZSBmcm9tIHRoZSBlbGYgY29yZSBoZWFkZXIgdG8gdGhlIGVuZCBvZgpAQCAt
NzI4LDcgKzcyMyw4IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBhcmNoX21lbV9pbml0KGNoYXIgKipj
bWRsaW5lX3ApCiAKIHN0YXRpYyB2b2lkIF9faW5pdCByZXNvdXJjZV9pbml0KHZvaWQpCiB7Ci0J
c3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnaW9uOworCXBoeXNfYWRkcl90IHN0YXJ0LCBlbmQ7
CisJdTY0IGk7CiAKIAlpZiAoVU5DQUNfQkFTRSAhPSBJT19CQVNFKQogCQlyZXR1cm47CkBAIC03
NDAsOSArNzM2LDcgQEAgc3RhdGljIHZvaWQgX19pbml0IHJlc291cmNlX2luaXQodm9pZCkKIAli
c3NfcmVzb3VyY2Uuc3RhcnQgPSBfX3BhX3N5bWJvbCgmX19ic3Nfc3RhcnQpOwogCWJzc19yZXNv
dXJjZS5lbmQgPSBfX3BhX3N5bWJvbCgmX19ic3Nfc3RvcCkgLSAxOwogCi0JZm9yX2VhY2hfbWVt
YmxvY2sobWVtb3J5LCByZWdpb24pIHsKLQkJcGh5c19hZGRyX3Qgc3RhcnQgPSBQRk5fUEhZUyht
ZW1ibG9ja19yZWdpb25fbWVtb3J5X2Jhc2VfcGZuKHJlZ2lvbikpOwotCQlwaHlzX2FkZHJfdCBl
bmQgPSBQRk5fUEhZUyhtZW1ibG9ja19yZWdpb25fbWVtb3J5X2VuZF9wZm4ocmVnaW9uKSkgLSAx
OworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQpIHsKIAkJc3RydWN0IHJlc291
cmNlICpyZXM7CiAKIAkJcmVzID0gbWVtYmxvY2tfYWxsb2Moc2l6ZW9mKHN0cnVjdCByZXNvdXJj
ZSksIFNNUF9DQUNIRV9CWVRFUyk7CkBAIC03NTEsNyArNzQ1LDEyIEBAIHN0YXRpYyB2b2lkIF9f
aW5pdCByZXNvdXJjZV9pbml0KHZvaWQpCiAJCQkgICAgICBzaXplb2Yoc3RydWN0IHJlc291cmNl
KSk7CiAKIAkJcmVzLT5zdGFydCA9IHN0YXJ0OwotCQlyZXMtPmVuZCA9IGVuZDsKKwkJLyoKKwkJ
ICogSW4gbWVtYmxvY2ssIGVuZCBwb2ludHMgdG8gdGhlIGZpcnN0IGJ5dGUgYWZ0ZXIgdGhlCisJ
CSAqIHJhbmdlIHdoaWxlIGluIHJlc291cnNlcywgZW5kIHBvaW50cyB0byB0aGUgbGFzdCBieXRl
IGluCisJCSAqIHRoZSByYW5nZS4KKwkJICovCisJCXJlcy0+ZW5kID0gZW5kIC0gMTsKIAkJcmVz
LT5mbGFncyA9IElPUkVTT1VSQ0VfU1lTVEVNX1JBTSB8IElPUkVTT1VSQ0VfQlVTWTsKIAkJcmVz
LT5uYW1lID0gIlN5c3RlbSBSQU0iOwogCmRpZmYgLS1naXQgYS9hcmNoL29wZW5yaXNjL21tL2lu
aXQuYyBiL2FyY2gvb3BlbnJpc2MvbW0vaW5pdC5jCmluZGV4IDNkN2M3OWM3NzQ1ZC4uODM0OGZl
YWFmNDZlIDEwMDY0NAotLS0gYS9hcmNoL29wZW5yaXNjL21tL2luaXQuYworKysgYi9hcmNoL29w
ZW5yaXNjL21tL2luaXQuYwpAQCAtNjQsNiArNjQsNyBAQCBleHRlcm4gY29uc3QgY2hhciBfc19r
ZXJuZWxfcm9bXSwgX2Vfa2VybmVsX3JvW107CiAgKi8KIHN0YXRpYyB2b2lkIF9faW5pdCBtYXBf
cmFtKHZvaWQpCiB7CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKIAl1bnNpZ25lZCBsb25nIHYs
IHAsIGU7CiAJcGdwcm90X3QgcHJvdDsKIAlwZ2RfdCAqcGdlOwpAQCAtNzEsNiArNzIsNyBAQCBz
dGF0aWMgdm9pZCBfX2luaXQgbWFwX3JhbSh2b2lkKQogCXB1ZF90ICpwdWU7CiAJcG1kX3QgKnBt
ZTsKIAlwdGVfdCAqcHRlOworCXU2NCBpOwogCS8qIFRoZXNlIG1hcmsgZXh0ZW50cyBvZiByZWFk
LW9ubHkga2VybmVsIHBhZ2VzLi4uCiAJICogLi4uZnJvbSB2bWxpbnV4Lmxkcy5TCiAJICovCkBA
IC03OCw5ICs4MCw5IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBtYXBfcmFtKHZvaWQpCiAKIAl2ID0g
UEFHRV9PRkZTRVQ7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZ2lvbikgewotCQlw
ID0gKHUzMikgcmVnaW9uLT5iYXNlICYgUEFHRV9NQVNLOwotCQllID0gcCArICh1MzIpIHJlZ2lv
bi0+c2l6ZTsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKSB7CisJCXAgPSAo
dTMyKSBzdGFydCAmIFBBR0VfTUFTSzsKKwkJZSA9ICh1MzIpIGVuZDsKIAogCQl2ID0gKHUzMikg
X192YShwKTsKIAkJcGdlID0gcGdkX29mZnNldF9rKHYpOwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dl
cnBjL2tlcm5lbC9mYWR1bXAuYyBiL2FyY2gvcG93ZXJwYy9rZXJuZWwvZmFkdW1wLmMKaW5kZXgg
ZmRiYWZlNDE3MTM5Li40MzViOThkMDY5ZWIgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9rZXJu
ZWwvZmFkdW1wLmMKKysrIGIvYXJjaC9wb3dlcnBjL2tlcm5lbC9mYWR1bXAuYwpAQCAtMTgwLDEz
ICsxODAsMTMgQEAgaW50IGlzX2ZhZHVtcF9hY3RpdmUodm9pZCkKICAqLwogc3RhdGljIGJvb2wg
aXNfZmFkdW1wX21lbV9hcmVhX2NvbnRpZ3VvdXModTY0IGRfc3RhcnQsIHU2NCBkX2VuZCkKIHsK
LQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3QgcmVnX3N0YXJ0LCBy
ZWdfZW5kOwogCWJvb2wgcmV0ID0gZmFsc2U7Ci0JdTY0IHN0YXJ0LCBlbmQ7CisJdTY0IGksIHN0
YXJ0LCBlbmQ7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewotCQlzdGFydCA9
IG1heF90KHU2NCwgZF9zdGFydCwgcmVnLT5iYXNlKTsKLQkJZW5kID0gbWluX3QodTY0LCBkX2Vu
ZCwgKHJlZy0+YmFzZSArIHJlZy0+c2l6ZSkpOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmcmVn
X3N0YXJ0LCAmcmVnX2VuZCkgeworCQlzdGFydCA9IG1heF90KHU2NCwgZF9zdGFydCwgcmVnX3N0
YXJ0KTsKKwkJZW5kID0gbWluX3QodTY0LCBkX2VuZCwgcmVnX2VuZCkpOwogCQlpZiAoZF9zdGFy
dCA8IGVuZCkgewogCQkJLyogTWVtb3J5IGhvbGUgZnJvbSBkX3N0YXJ0IHRvIHN0YXJ0ICovCiAJ
CQlpZiAoc3RhcnQgPiBkX3N0YXJ0KQpAQCAtNDEzLDcgKzQxMyw3IEBAIHN0YXRpYyBpbnQgX19p
bml0IGZhZHVtcF9nZXRfYm9vdF9tZW1fcmVnaW9ucyh2b2lkKQogewogCXVuc2lnbmVkIGxvbmcg
YmFzZSwgc2l6ZSwgY3VyX3NpemUsIGhvbGVfc2l6ZSwgbGFzdF9lbmQ7CiAJdW5zaWduZWQgbG9u
ZyBtZW1fc2l6ZSA9IGZ3X2R1bXAuYm9vdF9tZW1vcnlfc2l6ZTsKLQlzdHJ1Y3QgbWVtYmxvY2tf
cmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3QgcmVnX3N0YXJ0LCByZWdfZW5kOwogCWludCByZXQg
PSAxOwogCiAJZndfZHVtcC5ib290X21lbV9yZWdzX2NudCA9IDA7CkBAIC00MjEsOSArNDIxLDgg
QEAgc3RhdGljIGludCBfX2luaXQgZmFkdW1wX2dldF9ib290X21lbV9yZWdpb25zKHZvaWQpCiAJ
bGFzdF9lbmQgPSAwOwogCWhvbGVfc2l6ZSA9IDA7CiAJY3VyX3NpemUgPSAwOwotCWZvcl9lYWNo
X21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCWJhc2UgPSByZWctPmJhc2U7Ci0JCXNpemUgPSBy
ZWctPnNpemU7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZyZWdfc3RhcnQsICZyZWdfZW5kKSB7
CisJCXNpemUgPSByZWdfZW5kIC0gcmVnX3N0YXJ0OwogCQlob2xlX3NpemUgKz0gKGJhc2UgLSBs
YXN0X2VuZCk7CiAKIAkJaWYgKChjdXJfc2l6ZSArIHNpemUpID49IG1lbV9zaXplKSB7CkBAIC05
NTksOSArOTU4LDggQEAgc3RhdGljIGludCBmYWR1bXBfaW5pdF9lbGZjb3JlX2hlYWRlcihjaGFy
ICpidWZwKQogICovCiBzdGF0aWMgaW50IGZhZHVtcF9zZXR1cF9jcmFzaF9tZW1vcnlfcmFuZ2Vz
KHZvaWQpCiB7Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOwotCXU2NCBzdGFydCwgZW5k
OwotCWludCBpLCByZXQ7CisJdTY0IGksIHN0YXJ0LCBlbmQ7CisJaW50IHJldDsKIAogCXByX2Rl
YnVnKCJTZXR1cCBjcmFzaCBtZW1vcnkgcmFuZ2VzLlxuIik7CiAJY3Jhc2hfbXJhbmdlX2luZm8u
bWVtX3JhbmdlX2NudCA9IDA7CkBAIC05NzksMTAgKzk3Nyw3IEBAIHN0YXRpYyBpbnQgZmFkdW1w
X3NldHVwX2NyYXNoX21lbW9yeV9yYW5nZXModm9pZCkKIAkJCXJldHVybiByZXQ7CiAJfQogCi0J
Zm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJc3RhcnQgPSAodTY0KXJlZy0+YmFz
ZTsKLQkJZW5kID0gc3RhcnQgKyAodTY0KXJlZy0+c2l6ZTsKLQorCWZvcl9lYWNoX21lbV9yYW5n
ZShpLCAmc3RhcnQsIGVuZCkgewogCQkvKgogCQkgKiBza2lwIHRoZSBtZW1vcnkgY2h1bmsgdGhh
dCBpcyBhbHJlYWR5IGFkZGVkCiAJCSAqICgwIHRocm91Z2ggYm9vdF9tZW1vcnlfdG9wKS4KZGlm
ZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9oYXNoX3V0aWxzLmMgYi9hcmNoL3Bv
d2VycGMvbW0vYm9vazNzNjQvaGFzaF91dGlscy5jCmluZGV4IDQ2ODE2OWUzM2M4Ni4uOWJhNzZi
MDc1YjExIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvaGFzaF91dGlscy5j
CisrKyBiL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9oYXNoX3V0aWxzLmMKQEAgLTcsNyArNyw3
IEBACiAgKgogICogU01QIHNjYWxhYmlsaXR5IHdvcms6CiAgKiAgICBDb3B5cmlnaHQgKEMpIDIw
MDEgQW50b24gQmxhbmNoYXJkIDxhbnRvbkBhdS5pYm0uY29tPiwgSUJNCi0gKiAKKyAqCiAgKiAg
ICBNb2R1bGUgbmFtZTogaHRhYi5jCiAgKgogICogICAgRGVzY3JpcHRpb246CkBAIC04NjIsOCAr
ODYyLDggQEAgc3RhdGljIHZvaWQgX19pbml0IGh0YWJfaW5pdGlhbGl6ZSh2b2lkKQogCXVuc2ln
bmVkIGxvbmcgdGFibGU7CiAJdW5zaWduZWQgbG9uZyBwdGVnX2NvdW50OwogCXVuc2lnbmVkIGxv
bmcgcHJvdDsKLQl1bnNpZ25lZCBsb25nIGJhc2UgPSAwLCBzaXplID0gMDsKLQlzdHJ1Y3QgbWVt
YmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3QgYmFzZSA9IDAsIHNpemUgPSAwLCBlbmQ7
CisJdTY0IGk7CiAKIAlEQkcoIiAtPiBodGFiX2luaXRpYWxpemUoKVxuIik7CiAKQEAgLTg3OSw3
ICs4NzksNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgaHRhYl9pbml0aWFsaXplKHZvaWQpCiAJLyoK
IAkgKiBDYWxjdWxhdGUgdGhlIHJlcXVpcmVkIHNpemUgb2YgdGhlIGh0YWIuICBXZSB3YW50IHRo
ZSBudW1iZXIgb2YKIAkgKiBQVEVHcyB0byBlcXVhbCBvbmUgaGFsZiB0aGUgbnVtYmVyIG9mIHJl
YWwgcGFnZXMuCi0JICovIAorCSAqLwogCWh0YWJfc2l6ZV9ieXRlcyA9IGh0YWJfZ2V0X3RhYmxl
X3NpemUoKTsKIAlwdGVnX2NvdW50ID0gaHRhYl9zaXplX2J5dGVzID4+IDc7CiAKQEAgLTg4OSw3
ICs4ODksNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgaHRhYl9pbml0aWFsaXplKHZvaWQpCiAJICAg
IGZpcm13YXJlX2hhc19mZWF0dXJlKEZXX0ZFQVRVUkVfUFMzX0xWMSkpIHsKIAkJLyogVXNpbmcg
YSBoeXBlcnZpc29yIHdoaWNoIG93bnMgdGhlIGh0YWIgKi8KIAkJaHRhYl9hZGRyZXNzID0gTlVM
TDsKLQkJX1NEUjEgPSAwOyAKKwkJX1NEUjEgPSAwOwogI2lmZGVmIENPTkZJR19GQV9EVU1QCiAJ
CS8qCiAJCSAqIElmIGZpcm13YXJlIGFzc2lzdGVkIGR1bXAgaXMgYWN0aXZlIGZpcm13YXJlIHBy
ZXNlcnZlcwpAQCAtOTU1LDkgKzk1NSw5IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBodGFiX2luaXRp
YWxpemUodm9pZCkKICNlbmRpZiAvKiBDT05GSUdfREVCVUdfUEFHRUFMTE9DICovCiAKIAkvKiBj
cmVhdGUgYm9sdGVkIHRoZSBsaW5lYXIgbWFwcGluZyBpbiB0aGUgaGFzaCB0YWJsZSAqLwotCWZv
cl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCWJhc2UgPSAodW5zaWduZWQgbG9uZylf
X3ZhKHJlZy0+YmFzZSk7Ci0JCXNpemUgPSByZWctPnNpemU7CisJZm9yX2VhY2hfbWVtX3Jhbmdl
KGksICZiYXNlLCAmZW5kKSB7CisJCXNpemUgPSBlbmQgLSBiYXNlOworCQliYXNlID0gKHVuc2ln
bmVkIGxvbmcpX192YShiYXNlKTsKIAogCQlEQkcoImNyZWF0aW5nIG1hcHBpbmcgZm9yIHJlZ2lv
bjogJWx4Li4lbHggKHByb3Q6ICVseClcbiIsCiAJCSAgICBiYXNlLCBzaXplLCBwcm90KTsKZGlm
ZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9yYWRpeF9wZ3RhYmxlLmMgYi9hcmNo
L3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhfcGd0YWJsZS5jCmluZGV4IGJiMDBlMGNiYTExOS4u
NjU2NTdiOTIwODQ3IDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhf
cGd0YWJsZS5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9yYWRpeF9wZ3RhYmxlLmMK
QEAgLTMxOCwyOCArMzE4LDI3IEBAIHN0YXRpYyBpbnQgX19tZW1pbml0IGNyZWF0ZV9waHlzaWNh
bF9tYXBwaW5nKHVuc2lnbmVkIGxvbmcgc3RhcnQsCiBzdGF0aWMgdm9pZCBfX2luaXQgcmFkaXhf
aW5pdF9wZ3RhYmxlKHZvaWQpCiB7CiAJdW5zaWduZWQgbG9uZyBydHNfZmllbGQ7Ci0Jc3RydWN0
IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOworCXBoeXNfYWRkcl90IHN0YXJ0LCBlbmQ7CisJdTY0IGk7
CiAKIAkvKiBXZSBkb24ndCBzdXBwb3J0IHNsYiBmb3IgcmFkaXggKi8KIAltbXVfc2xiX3NpemUg
PSAwOwogCS8qCiAJICogQ3JlYXRlIHRoZSBsaW5lYXIgbWFwcGluZywgdXNpbmcgc3RhbmRhcmQg
cGFnZSBzaXplIGZvciBub3cKIAkgKi8KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykg
eworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQpIHsKIAkJLyoKIAkJICogVGhl
IG1lbWJsb2NrIGFsbG9jYXRvciAgaXMgdXAgYXQgdGhpcyBwb2ludCwgc28gdGhlCiAJCSAqIHBh
Z2UgdGFibGVzIHdpbGwgYmUgYWxsb2NhdGVkIHdpdGhpbiB0aGUgcmFuZ2UuIE5vCiAJCSAqIG5l
ZWQgb3IgYSBub2RlICh3aGljaCB3ZSBkb24ndCBoYXZlIHlldCkuCiAJCSAqLwogCi0JCWlmICgo
cmVnLT5iYXNlICsgcmVnLT5zaXplKSA+PSBSQURJWF9WTUFMTE9DX1NUQVJUKSB7CisJCWlmIChl
bmQgPj0gUkFESVhfVk1BTExPQ19TVEFSVCkgewogCQkJcHJfd2FybigiT3V0c2lkZSB0aGUgc3Vw
cG9ydGVkIHJhbmdlXG4iKTsKIAkJCWNvbnRpbnVlOwogCQl9CiAKLQkJV0FSTl9PTihjcmVhdGVf
cGh5c2ljYWxfbWFwcGluZyhyZWctPmJhc2UsCi0JCQkJCQlyZWctPmJhc2UgKyByZWctPnNpemUs
Ci0JCQkJCQktMSwgUEFHRV9LRVJORUwpKTsKKwkJV0FSTl9PTihjcmVhdGVfcGh5c2ljYWxfbWFw
cGluZyhzdGFydCwgZW5kLCAtMSwgUEFHRV9LRVJORUwpKTsKIAl9CiAKIAkvKiBGaW5kIG91dCBo
b3cgbWFueSBQSUQgYml0cyBhcmUgc3VwcG9ydGVkICovCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2Vy
cGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5jIGIvYXJjaC9wb3dlcnBjL21tL2thc2FuL2thc2Fu
X2luaXRfMzIuYwppbmRleCAwNzYwZTFlNzU0ZTQuLjZlNzM0MzRlNGU0MSAxMDA2NDQKLS0tIGEv
YXJjaC9wb3dlcnBjL21tL2thc2FuL2thc2FuX2luaXRfMzIuYworKysgYi9hcmNoL3Bvd2VycGMv
bW0va2FzYW4va2FzYW5faW5pdF8zMi5jCkBAIC0xMjAsMTEgKzEyMCwxMSBAQCBzdGF0aWMgdm9p
ZCBfX2luaXQga2FzYW5fdW5tYXBfZWFybHlfc2hhZG93X3ZtYWxsb2Modm9pZCkKIHN0YXRpYyB2
b2lkIF9faW5pdCBrYXNhbl9tbXVfaW5pdCh2b2lkKQogewogCWludCByZXQ7Ci0Jc3RydWN0IG1l
bWJsb2NrX3JlZ2lvbiAqcmVnOworCXBoeXNfYWRkcl90IGJhc2UsIGVuZDsKKwl1NjQgaTsKIAot
CWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXBoeXNfYWRkcl90IGJhc2UgPSBy
ZWctPmJhc2U7Ci0JCXBoeXNfYWRkcl90IHRvcCA9IG1pbihiYXNlICsgcmVnLT5zaXplLCB0b3Rh
bF9sb3dtZW0pOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmYmFzZSwgJmVuZCkgeworCQlwaHlz
X2FkZHJfdCB0b3AgPSBtaW4oZW5kLCB0b3RhbF9sb3dtZW0pOwogCiAJCWlmIChiYXNlID49IHRv
cCkKIAkJCWNvbnRpbnVlOwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL21lbS5jIGIvYXJj
aC9wb3dlcnBjL21tL21lbS5jCmluZGV4IDM4ZDFhY2Q3YzhlZi4uMDI0OGI2ZDU4ZmNkIDEwMDY0
NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vbWVtLmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL21lbS5j
CkBAIC01OTMsMjAgKzU5MywyNCBAQCB2b2lkIGZsdXNoX2ljYWNoZV91c2VyX3BhZ2Uoc3RydWN0
IHZtX2FyZWFfc3RydWN0ICp2bWEsIHN0cnVjdCBwYWdlICpwYWdlLAogICovCiBzdGF0aWMgaW50
IF9faW5pdCBhZGRfc3lzdGVtX3JhbV9yZXNvdXJjZXModm9pZCkKIHsKLQlzdHJ1Y3QgbWVtYmxv
Y2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsKIAotCWZv
cl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZz
dGFydCwgJmVuZCkgewogCQlzdHJ1Y3QgcmVzb3VyY2UgKnJlczsKLQkJdW5zaWduZWQgbG9uZyBi
YXNlID0gcmVnLT5iYXNlOwotCQl1bnNpZ25lZCBsb25nIHNpemUgPSByZWctPnNpemU7CiAKIAkJ
cmVzID0ga3phbGxvYyhzaXplb2Yoc3RydWN0IHJlc291cmNlKSwgR0ZQX0tFUk5FTCk7CiAJCVdB
Uk5fT04oIXJlcyk7CiAKIAkJaWYgKHJlcykgewogCQkJcmVzLT5uYW1lID0gIlN5c3RlbSBSQU0i
OwotCQkJcmVzLT5zdGFydCA9IGJhc2U7Ci0JCQlyZXMtPmVuZCA9IGJhc2UgKyBzaXplIC0gMTsK
KwkJCXJlcy0+c3RhcnQgPSBzdGFydDsKKwkJCS8qCisJCQkgKiBJbiBtZW1ibG9jaywgZW5kIHBv
aW50cyB0byB0aGUgZmlyc3QgYnl0ZSBhZnRlcgorCQkJICogdGhlIHJhbmdlIHdoaWxlIGluIHJl
c291cnNlcywgZW5kIHBvaW50cyB0byB0aGUKKwkJCSAqIGxhc3QgYnl0ZSBpbiB0aGUgcmFuZ2Uu
CisJCQkgKi8KKwkJCXJlcy0+ZW5kID0gZW5kIC0gMTsKIAkJCXJlcy0+ZmxhZ3MgPSBJT1JFU09V
UkNFX1NZU1RFTV9SQU0gfCBJT1JFU09VUkNFX0JVU1k7CiAJCQlXQVJOX09OKHJlcXVlc3RfcmVz
b3VyY2UoJmlvbWVtX3Jlc291cmNlLCByZXMpIDwgMCk7CiAJCX0KZGlmZiAtLWdpdCBhL2FyY2gv
cG93ZXJwYy9tbS9wZ3RhYmxlXzMyLmMgYi9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZV8zMi5jCmlu
ZGV4IDZlYjRlYWI3OTM4NS4uMDc5MTU5ZTk3YmNhIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMv
bW0vcGd0YWJsZV8zMi5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlXzMyLmMKQEAgLTEy
MywxMSArMTIzLDExIEBAIHN0YXRpYyB2b2lkIF9faW5pdCBfX21hcGluX3JhbV9jaHVuayh1bnNp
Z25lZCBsb25nIG9mZnNldCwgdW5zaWduZWQgbG9uZyB0b3ApCiAKIHZvaWQgX19pbml0IG1hcGlu
X3JhbSh2b2lkKQogewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKKwlwaHlzX2FkZHJf
dCBiYXNlLCBlbmQ7CisJdTY0IGk7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykg
ewotCQlwaHlzX2FkZHJfdCBiYXNlID0gcmVnLT5iYXNlOwotCQlwaHlzX2FkZHJfdCB0b3AgPSBt
aW4oYmFzZSArIHJlZy0+c2l6ZSwgdG90YWxfbG93bWVtKTsKKwlmb3JfZWFjaF9tZW1fcmFuZ2Uo
aSwgJmJhc2UsICZlbmQpIHsKKwkJcGh5c19hZGRyX3QgdG9wID0gbWluKGVuZCwgdG90YWxfbG93
bWVtKTsKIAogCQlpZiAoYmFzZSA+PSB0b3ApCiAJCQljb250aW51ZTsKZGlmZiAtLWdpdCBhL2Fy
Y2gvcmlzY3YvbW0vaW5pdC5jIGIvYXJjaC9yaXNjdi9tbS9pbml0LmMKaW5kZXggNzQ0MGJhMmNk
YWFhLi4yYWJlMTE2NWZlNTYgMTAwNjQ0Ci0tLSBhL2FyY2gvcmlzY3YvbW0vaW5pdC5jCisrKyBi
L2FyY2gvcmlzY3YvbW0vaW5pdC5jCkBAIC0xNDUsMjEgKzE0NSwyMiBAQCBzdGF0aWMgcGh5c19h
ZGRyX3QgZHRiX2Vhcmx5X3BhIF9faW5pdGRhdGE7CiAKIHZvaWQgX19pbml0IHNldHVwX2Jvb3Rt
ZW0odm9pZCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3Qg
c3RhcnQsIGVuZDsKIAlwaHlzX2FkZHJfdCBtZW1fc2l6ZSA9IDA7CiAJcGh5c19hZGRyX3QgdG90
YWxfbWVtID0gMDsKIAlwaHlzX2FkZHJfdCBtZW1fc3RhcnQsIGVuZCA9IDA7CiAJcGh5c19hZGRy
X3Qgdm1saW51eF9lbmQgPSBfX3BhX3N5bWJvbCgmX2VuZCk7CiAJcGh5c19hZGRyX3Qgdm1saW51
eF9zdGFydCA9IF9fcGFfc3ltYm9sKCZfc3RhcnQpOworCXU2NCBpOwogCiAJLyogRmluZCB0aGUg
bWVtb3J5IHJlZ2lvbiBjb250YWluaW5nIHRoZSBrZXJuZWwgKi8KLQlmb3JfZWFjaF9tZW1ibG9j
ayhtZW1vcnksIHJlZykgewotCQllbmQgPSByZWctPmJhc2UgKyByZWctPnNpemU7CisJZm9yX2Vh
Y2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgeworCQlwaHlzX2FkZHJfdCBzaXplID0gZW5k
IC0gc3RhcnQ7CiAJCWlmICghdG90YWxfbWVtKQotCQkJbWVtX3N0YXJ0ID0gcmVnLT5iYXNlOwot
CQlpZiAocmVnLT5iYXNlIDw9IHZtbGludXhfc3RhcnQgJiYgdm1saW51eF9lbmQgPD0gZW5kKQot
CQkJQlVHX09OKHJlZy0+c2l6ZSA9PSAwKTsKLQkJdG90YWxfbWVtID0gdG90YWxfbWVtICsgcmVn
LT5zaXplOworCQkJbWVtX3N0YXJ0ID0gc3RhcnQ7CisJCWlmIChzdGFydCA8PSB2bWxpbnV4X3N0
YXJ0ICYmIHZtbGludXhfZW5kIDw9IGVuZCkKKwkJCUJVR19PTihzaXplID09IDApOworCQl0b3Rh
bF9tZW0gPSB0b3RhbF9tZW0gKyBzaXplOwogCX0KIAogCS8qCkBAIC00NTYsNyArNDU3LDcgQEAg
c3RhdGljIHZvaWQgX19pbml0IHNldHVwX3ZtX2ZpbmFsKHZvaWQpCiB7CiAJdWludHB0cl90IHZh
LCBtYXBfc2l6ZTsKIAlwaHlzX2FkZHJfdCBwYSwgc3RhcnQsIGVuZDsKLQlzdHJ1Y3QgbWVtYmxv
Y2tfcmVnaW9uICpyZWc7CisJdTY0IGk7CiAKIAkvKiBTZXQgbW11X2VuYWJsZWQgZmxhZyAqLwog
CW1tdV9lbmFibGVkID0gdHJ1ZTsKQEAgLTQ2NywxNCArNDY4LDkgQEAgc3RhdGljIHZvaWQgX19p
bml0IHNldHVwX3ZtX2ZpbmFsKHZvaWQpCiAJCQkgICBQR0RJUl9TSVpFLCBQQUdFX1RBQkxFKTsK
IAogCS8qIE1hcCBhbGwgbWVtb3J5IGJhbmtzICovCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5
LCByZWcpIHsKLQkJc3RhcnQgPSByZWctPmJhc2U7Ci0JCWVuZCA9IHN0YXJ0ICsgcmVnLT5zaXpl
OwotCisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgewogCQlpZiAoc3RhcnQg
Pj0gZW5kKQogCQkJYnJlYWs7Ci0JCWlmIChtZW1ibG9ja19pc19ub21hcChyZWcpKQotCQkJY29u
dGludWU7CiAJCWlmIChzdGFydCA8PSBfX3BhKFBBR0VfT0ZGU0VUKSAmJgogCQkgICAgX19wYShQ
QUdFX09GRlNFVCkgPCBlbmQpCiAJCQlzdGFydCA9IF9fcGEoUEFHRV9PRkZTRVQpOwpkaWZmIC0t
Z2l0IGEvYXJjaC9yaXNjdi9tbS9rYXNhbl9pbml0LmMgYi9hcmNoL3Jpc2N2L21tL2thc2FuX2lu
aXQuYwppbmRleCA4N2I0YWIzZDNjNzcuLjEyZGRkMWY2YmY3MCAxMDA2NDQKLS0tIGEvYXJjaC9y
aXNjdi9tbS9rYXNhbl9pbml0LmMKKysrIGIvYXJjaC9yaXNjdi9tbS9rYXNhbl9pbml0LmMKQEAg
LTg1LDE2ICs4NSwxNiBAQCBzdGF0aWMgdm9pZCBfX2luaXQgcG9wdWxhdGUodm9pZCAqc3RhcnQs
IHZvaWQgKmVuZCkKIAogdm9pZCBfX2luaXQga2FzYW5faW5pdCh2b2lkKQogewotCXN0cnVjdCBt
ZW1ibG9ja19yZWdpb24gKnJlZzsKLQl1bnNpZ25lZCBsb25nIGk7CisJcGh5c19hZGRyX3QgX3N0
YXJ0LCBfZW5kOworCXU2NCBpOwogCiAJa2FzYW5fcG9wdWxhdGVfZWFybHlfc2hhZG93KCh2b2lk
ICopS0FTQU5fU0hBRE9XX1NUQVJULAogCQkJCSAgICAodm9pZCAqKWthc2FuX21lbV90b19zaGFk
b3coKHZvaWQgKikKIAkJCQkJCQkJVk1BTExPQ19FTkQpKTsKIAotCWZvcl9lYWNoX21lbWJsb2Nr
KG1lbW9yeSwgcmVnKSB7Ci0JCXZvaWQgKnN0YXJ0ID0gKHZvaWQgKilfX3ZhKHJlZy0+YmFzZSk7
Ci0JCXZvaWQgKmVuZCA9ICh2b2lkICopX192YShyZWctPmJhc2UgKyByZWctPnNpemUpOworCWZv
cl9lYWNoX21lbV9yYW5nZShpLCAmX3N0YXJ0LCAmX2VuZCkgeworCQl2b2lkICpzdGFydCA9ICh2
b2lkICopX3N0YXJ0OworCQl2b2lkICplbmQgPSAodm9pZCAqKV9lbmQ7CiAKIAkJaWYgKHN0YXJ0
ID49IGVuZCkKIAkJCWJyZWFrOwpkaWZmIC0tZ2l0IGEvYXJjaC9zMzkwL2tlcm5lbC9zZXR1cC5j
IGIvYXJjaC9zMzkwL2tlcm5lbC9zZXR1cC5jCmluZGV4IDhiMjg0Y2Y2ZTE5OS4uYjZjNGEwYzVm
Zjg2IDEwMDY0NAotLS0gYS9hcmNoL3MzOTAva2VybmVsL3NldHVwLmMKKysrIGIvYXJjaC9zMzkw
L2tlcm5lbC9zZXR1cC5jCkBAIC0xOTgsNyArMTk4LDcgQEAgc3RhdGljIHZvaWQgX19pbml0IGNv
bm1vZGVfZGVmYXVsdCh2b2lkKQogCQljcGNtZCgiUVVFUlkgVEVSTSIsIHF1ZXJ5X2J1ZmZlciwg
MTAyNCwgTlVMTCk7CiAJCXB0ciA9IHN0cnN0cihxdWVyeV9idWZmZXIsICJDT05NT0RFIik7CiAJ
CS8qCi0JCSAqIFNldCB0aGUgY29ubW9kZSB0byAzMjE1IHNvIHRoYXQgdGhlIGRldmljZSByZWNv
Z25pdGlvbiAKKwkJICogU2V0IHRoZSBjb25tb2RlIHRvIDMyMTUgc28gdGhhdCB0aGUgZGV2aWNl
IHJlY29nbml0aW9uCiAJCSAqIHdpbGwgc2V0IHRoZSBjdV90eXBlIG9mIHRoZSBjb25zb2xlIHRv
IDMyMTUuIElmIHRoZQogCQkgKiBjb25tb2RlIGlzIDMyNzAgYW5kIHdlIGRvbid0IHNldCBpdCBi
YWNrIHRoZW4gYm90aAogCQkgKiAzMjE1IGFuZCB0aGUgMzI3MCBkcml2ZXIgd2lsbCB0cnkgdG8g
YWNjZXNzIHRoZSBjb25zb2xlCkBAIC0yNTgsNyArMjU4LDcgQEAgc3RhdGljIGlubGluZSB2b2lk
IHNldHVwX3pmY3BkdW1wKHZvaWQpIHt9CiAKICAvKgogICogUmVib290LCBoYWx0IGFuZCBwb3dl
cl9vZmYgc3R1YnMuIFRoZXkganVzdCBjYWxsIF9tYWNoaW5lX3Jlc3RhcnQsCi0gKiBfbWFjaGlu
ZV9oYWx0IG9yIF9tYWNoaW5lX3Bvd2VyX29mZi4gCisgKiBfbWFjaGluZV9oYWx0IG9yIF9tYWNo
aW5lX3Bvd2VyX29mZi4KICAqLwogCiB2b2lkIG1hY2hpbmVfcmVzdGFydChjaGFyICpjb21tYW5k
KQpAQCAtNDg0LDggKzQ4NCw5IEBAIHN0YXRpYyBzdHJ1Y3QgcmVzb3VyY2UgX19pbml0ZGF0YSAq
c3RhbmRhcmRfcmVzb3VyY2VzW10gPSB7CiBzdGF0aWMgdm9pZCBfX2luaXQgc2V0dXBfcmVzb3Vy
Y2VzKHZvaWQpCiB7CiAJc3RydWN0IHJlc291cmNlICpyZXMsICpzdGRfcmVzLCAqc3ViX3JlczsK
LQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsK
IAlpbnQgajsKKwl1NjQgaTsKIAogCWNvZGVfcmVzb3VyY2Uuc3RhcnQgPSAodW5zaWduZWQgbG9u
ZykgX3RleHQ7CiAJY29kZV9yZXNvdXJjZS5lbmQgPSAodW5zaWduZWQgbG9uZykgX2V0ZXh0IC0g
MTsKQEAgLTQ5NCw3ICs0OTUsNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgc2V0dXBfcmVzb3VyY2Vz
KHZvaWQpCiAJYnNzX3Jlc291cmNlLnN0YXJ0ID0gKHVuc2lnbmVkIGxvbmcpIF9fYnNzX3N0YXJ0
OwogCWJzc19yZXNvdXJjZS5lbmQgPSAodW5zaWduZWQgbG9uZykgX19ic3Nfc3RvcCAtIDE7CiAK
LQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgeworCWZvcl9lYWNoX21lbV9yYW5nZShp
LCAmc3RhcnQsICZlbmQpIHsKIAkJcmVzID0gbWVtYmxvY2tfYWxsb2Moc2l6ZW9mKCpyZXMpLCA4
KTsKIAkJaWYgKCFyZXMpCiAJCQlwYW5pYygiJXM6IEZhaWxlZCB0byBhbGxvY2F0ZSAlenUgYnl0
ZXMgYWxpZ249MHgleFxuIiwKQEAgLTUwMiw4ICs1MDMsMTMgQEAgc3RhdGljIHZvaWQgX19pbml0
IHNldHVwX3Jlc291cmNlcyh2b2lkKQogCQlyZXMtPmZsYWdzID0gSU9SRVNPVVJDRV9CVVNZIHwg
SU9SRVNPVVJDRV9TWVNURU1fUkFNOwogCiAJCXJlcy0+bmFtZSA9ICJTeXN0ZW0gUkFNIjsKLQkJ
cmVzLT5zdGFydCA9IHJlZy0+YmFzZTsKLQkJcmVzLT5lbmQgPSByZWctPmJhc2UgKyByZWctPnNp
emUgLSAxOworCQlyZXMtPnN0YXJ0ID0gc3RhcnQ7CisJCS8qCisJCSAqIEluIG1lbWJsb2NrLCBl
bmQgcG9pbnRzIHRvIHRoZSBmaXJzdCBieXRlIGFmdGVyIHRoZQorCQkgKiByYW5nZSB3aGlsZSBp
biByZXNvdXJzZXMsIGVuZCBwb2ludHMgdG8gdGhlIGxhc3QgYnl0ZSBpbgorCQkgKiB0aGUgcmFu
Z2UuCisJCSAqLworCQlyZXMtPmVuZCA9IGVuZCAtIDE7CiAJCXJlcXVlc3RfcmVzb3VyY2UoJmlv
bWVtX3Jlc291cmNlLCByZXMpOwogCiAJCWZvciAoaiA9IDA7IGogPCBBUlJBWV9TSVpFKHN0YW5k
YXJkX3Jlc291cmNlcyk7IGorKykgewpAQCAtODE5LDE0ICs4MjUsMTUgQEAgc3RhdGljIHZvaWQg
X19pbml0IHJlc2VydmVfa2VybmVsKHZvaWQpCiAKIHN0YXRpYyB2b2lkIF9faW5pdCBzZXR1cF9t
ZW1vcnkodm9pZCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRy
X3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsKIAogCS8qCiAJICogSW5pdCBzdG9yYWdlIGtleSBmb3Ig
cHJlc2VudCBtZW1vcnkKIAkgKi8KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewot
CQlzdG9yYWdlX2tleV9pbml0X3JhbmdlKHJlZy0+YmFzZSwgcmVnLT5iYXNlICsgcmVnLT5zaXpl
KTsKLQl9CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkKKwkJc3RvcmFnZV9r
ZXlfaW5pdF9yYW5nZShzdGFydCwgZW5kKTsKKwogCXBzd19zZXRfa2V5KFBBR0VfREVGQVVMVF9L
RVkpOwogCiAJLyogT25seSBjb3NtZXRpY3MgKi8KZGlmZiAtLWdpdCBhL2FyY2gvczM5MC9tbS92
bWVtLmMgYi9hcmNoL3MzOTAvbW0vdm1lbS5jCmluZGV4IDhiNjI4MmNmN2QxMy4uMzAwNzZlY2Mz
ZWI3IDEwMDY0NAotLS0gYS9hcmNoL3MzOTAvbW0vdm1lbS5jCisrKyBiL2FyY2gvczM5MC9tbS92
bWVtLmMKQEAgLTM5OSwxMCArMzk5LDExIEBAIGludCB2bWVtX2FkZF9tYXBwaW5nKHVuc2lnbmVk
IGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKICAqLwogdm9pZCBfX2luaXQgdm1lbV9t
YXBfaW5pdCh2b2lkKQogewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKKwlwaHlzX2Fk
ZHJfdCBzdGFydCwgZW5kOworCXU2NCBpOwogCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCBy
ZWcpCi0JCXZtZW1fYWRkX21lbShyZWctPmJhc2UsIHJlZy0+c2l6ZSk7CisJZm9yX2VhY2hfbWVt
X3JhbmdlKGksICZzdGFydCwgJmVuZCkKKwkJdm1lbV9hZGRfbWVtKHN0YXJ0LCBlbmQgLSBzdGFy
dCk7CiAJX19zZXRfbWVtb3J5KCh1bnNpZ25lZCBsb25nKV9zdGV4dCwKIAkJICAgICAodW5zaWdu
ZWQgbG9uZykoX2V0ZXh0IC0gX3N0ZXh0KSA+PiBQQUdFX1NISUZULAogCQkgICAgIFNFVF9NRU1P
UllfUk8gfCBTRVRfTUVNT1JZX1gpOwpAQCAtNDI4LDE2ICs0MjksMTcgQEAgdm9pZCBfX2luaXQg
dm1lbV9tYXBfaW5pdCh2b2lkKQogICovCiBzdGF0aWMgaW50IF9faW5pdCB2bWVtX2NvbnZlcnRf
bWVtb3J5X2NodW5rKHZvaWQpCiB7Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOworCXBo
eXNfYWRkcl90IHN0YXJ0LCBlbmQ7CiAJc3RydWN0IG1lbW9yeV9zZWdtZW50ICpzZWc7CisJdTY0
IGk7CiAKIAltdXRleF9sb2NrKCZ2bWVtX211dGV4KTsKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1v
cnksIHJlZykgeworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQpIHsKIAkJc2Vn
ID0ga3phbGxvYyhzaXplb2YoKnNlZyksIEdGUF9LRVJORUwpOwogCQlpZiAoIXNlZykKIAkJCXBh
bmljKCJPdXQgb2YgbWVtb3J5Li4uXG4iKTsKLQkJc2VnLT5zdGFydCA9IHJlZy0+YmFzZTsKLQkJ
c2VnLT5zaXplID0gcmVnLT5zaXplOworCQlzZWctPnN0YXJ0ID0gc3RhcnQ7CisJCXNlZy0+c2l6
ZSA9IGVuZCAtIHN0YXJ0OwogCQlpbnNlcnRfbWVtb3J5X3NlZ21lbnQoc2VnKTsKIAl9CiAJbXV0
ZXhfdW5sb2NrKCZ2bWVtX211dGV4KTsKZGlmZiAtLWdpdCBhL2FyY2gvc3BhcmMvbW0vaW5pdF82
NC5jIGIvYXJjaC9zcGFyYy9tbS9pbml0XzY0LmMKaW5kZXggMDJlNmU1ZTBmMTA2Li5kZTYzYzAw
MjYzOGUgMTAwNjQ0Ci0tLSBhL2FyY2gvc3BhcmMvbW0vaW5pdF82NC5jCisrKyBiL2FyY2gvc3Bh
cmMvbW0vaW5pdF82NC5jCkBAIC0xMTkyLDE4ICsxMTkyLDE0IEBAIGludCBvZl9ub2RlX3RvX25p
ZChzdHJ1Y3QgZGV2aWNlX25vZGUgKmRwKQogCiBzdGF0aWMgdm9pZCBfX2luaXQgYWRkX25vZGVf
cmFuZ2VzKHZvaWQpCiB7Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOworCXBoeXNfYWRk
cl90IHN0YXJ0LCBlbmQ7CiAJdW5zaWduZWQgbG9uZyBwcmV2X21heDsKKwl1NjQgaTsKIAogbWVt
YmxvY2tfcmVzaXplZDoKIAlwcmV2X21heCA9IG1lbWJsb2NrLm1lbW9yeS5tYXg7CiAKLQlmb3Jf
ZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewotCQl1bnNpZ25lZCBsb25nIHNpemUgPSByZWct
PnNpemU7Ci0JCXVuc2lnbmVkIGxvbmcgc3RhcnQsIGVuZDsKLQotCQlzdGFydCA9IHJlZy0+YmFz
ZTsKLQkJZW5kID0gc3RhcnQgKyBzaXplOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQs
ICZlbmQpIHsKIAkJd2hpbGUgKHN0YXJ0IDwgZW5kKSB7CiAJCQl1bnNpZ25lZCBsb25nIHRoaXNf
ZW5kOwogCQkJaW50IG5pZDsKQEAgLTEyMTEsNyArMTIwNyw3IEBAIHN0YXRpYyB2b2lkIF9faW5p
dCBhZGRfbm9kZV9yYW5nZXModm9pZCkKIAkJCXRoaXNfZW5kID0gbWVtYmxvY2tfbmlkX3Jhbmdl
KHN0YXJ0LCBlbmQsICZuaWQpOwogCiAJCQludW1hZGJnKCJTZXR0aW5nIG1lbWJsb2NrIE5VTUEg
bm9kZSBuaWRbJWRdICIKLQkJCQkic3RhcnRbJWx4XSBlbmRbJWx4XVxuIiwKKwkJCQkic3RhcnRb
JWxseF0gZW5kWyVseF1cbiIsCiAJCQkJbmlkLCBzdGFydCwgdGhpc19lbmQpOwogCiAJCQltZW1i
bG9ja19zZXRfbm9kZShzdGFydCwgdGhpc19lbmQgLSBzdGFydCwKZGlmZiAtLWdpdCBhL2RyaXZl
cnMvYnVzL212ZWJ1LW1idXMuYyBiL2RyaXZlcnMvYnVzL212ZWJ1LW1idXMuYwppbmRleCA1YjJh
MTFhODg5NTEuLjI1MTljZWVkZTY0YiAxMDA2NDQKLS0tIGEvZHJpdmVycy9idXMvbXZlYnUtbWJ1
cy5jCisrKyBiL2RyaXZlcnMvYnVzL212ZWJ1LW1idXMuYwpAQCAtNjEwLDIzICs2MTAsMjMgQEAg
c3RhdGljIHVuc2lnbmVkIGludCBhcm1hZGFfeHBfbWJ1c193aW5fcmVtYXBfb2Zmc2V0KGludCB3
aW4pCiBzdGF0aWMgdm9pZCBfX2luaXQKIG12ZWJ1X21idXNfZmluZF9icmlkZ2VfaG9sZSh1aW50
NjRfdCAqc3RhcnQsIHVpbnQ2NF90ICplbmQpCiB7Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAq
cjsKLQl1aW50NjRfdCBzID0gMDsKKwlwaHlzX2FkZHJfdCByZWdfc3RhcnQsIHJlZ19lbmQ7CisJ
dWludDY0X3QgaSwgcyA9IDA7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHIpIHsKKwlm
b3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnJlZ19zdGFydCwgJnJlZ19lbmQpIHsKIAkJLyoKIAkJICog
VGhpcyBwYXJ0IG9mIHRoZSBtZW1vcnkgaXMgYWJvdmUgNCBHQiwgc28gd2UgZG9uJ3QKIAkJICog
Y2FyZSBmb3IgdGhlIE1CdXMgYnJpZGdlIGhvbGUuCiAJCSAqLwotCQlpZiAoci0+YmFzZSA+PSAw
eDEwMDAwMDAwMFVMTCkKKwkJaWYgKHJlZ19zdGFydCA+PSAweDEwMDAwMDAwMFVMTCkKIAkJCWNv
bnRpbnVlOwogCiAJCS8qCiAJCSAqIFRoZSBNQnVzIGJyaWRnZSBob2xlIGlzIGF0IHRoZSBlbmQg
b2YgdGhlIFJBTSB1bmRlcgogCQkgKiB0aGUgNCBHQiBsaW1pdC4KIAkJICovCi0JCWlmIChyLT5i
YXNlICsgci0+c2l6ZSA+IHMpCi0JCQlzID0gci0+YmFzZSArIHItPnNpemU7CisJCWlmIChyZWdf
ZW5kID4gcykKKwkJCXMgPSByZWdfZW5kOwogCX0KIAogCSpzdGFydCA9IHM7CmRpZmYgLS1naXQg
YS9kcml2ZXJzL3MzOTAvY2hhci96Y29yZS5jIGIvZHJpdmVycy9zMzkwL2NoYXIvemNvcmUuYwpp
bmRleCAwOGY4MTI0NzVmNWUuLjQ4NGIxZWM5YTFiYyAxMDA2NDQKLS0tIGEvZHJpdmVycy9zMzkw
L2NoYXIvemNvcmUuYworKysgYi9kcml2ZXJzL3MzOTAvY2hhci96Y29yZS5jCkBAIC0xNDgsMTgg
KzE0OCwxOSBAQCBzdGF0aWMgc3NpemVfdCB6Y29yZV9tZW1tYXBfcmVhZChzdHJ1Y3QgZmlsZSAq
ZmlscCwgY2hhciBfX3VzZXIgKmJ1ZiwKIAogc3RhdGljIGludCB6Y29yZV9tZW1tYXBfb3Blbihz
dHJ1Y3QgaW5vZGUgKmlub2RlLCBzdHJ1Y3QgZmlsZSAqZmlscCkKIHsKLQlzdHJ1Y3QgbWVtYmxv
Y2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKIAljaGFyICpidWY7CiAJ
aW50IGkgPSAwOworCXU2NCByOwogCiAJYnVmID0ga2NhbGxvYyhtZW1ibG9jay5tZW1vcnkuY250
LCBDSFVOS19JTkZPX1NJWkUsIEdGUF9LRVJORUwpOwogCWlmICghYnVmKSB7CiAJCXJldHVybiAt
RU5PTUVNOwogCX0KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgeworCWZvcl9lYWNo
X21lbV9yYW5nZShyLCAmc3RhcnQsICZlbmQpIHsKIAkJc3ByaW50ZihidWYgKyAoaSsrICogQ0hV
TktfSU5GT19TSVpFKSwgIiUwMTZsbHggJTAxNmxseCAiLAotCQkJKHVuc2lnbmVkIGxvbmcgbG9u
ZykgcmVnLT5iYXNlLAotCQkJKHVuc2lnbmVkIGxvbmcgbG9uZykgcmVnLT5zaXplKTsKKwkJCSh1
bnNpZ25lZCBsb25nIGxvbmcpIHN0YXJ0LAorCQkJKHVuc2lnbmVkIGxvbmcgbG9uZykgKGVuZCAt
IHN0YXJ0KSk7CiAJfQogCWZpbHAtPnByaXZhdGVfZGF0YSA9IGJ1ZjsKIAlyZXR1cm4gbm9uc2Vl
a2FibGVfb3Blbihpbm9kZSwgZmlscCk7Ci0tIAoyLjI2LjIKCl9fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcgbGlzdApPcGVuUklT
Q0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29yZXMub3JnL2xpc3Rp
bmZvL29wZW5yaXNjCg==
