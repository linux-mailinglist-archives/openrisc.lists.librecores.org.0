Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id E4FC92460D4
	for <lists+openrisc@lfdr.de>; Mon, 17 Aug 2020 10:46:41 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 87BF220D0F;
	Mon, 17 Aug 2020 10:46:41 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 83EC020D77
 for <openrisc@lists.librecores.org>; Sun,  2 Aug 2020 18:38:28 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 85F2F207BB;
 Sun,  2 Aug 2020 16:38:16 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1596386307;
 bh=WZoNNRQ0f0x1qoa7soZfeChKA3qLdfFDRNqdow9t5vc=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=Zij9EBT2f7b3nRGI23p71jYeOfkAOoZGdwL2bhkktz7eN/KIPrq+8OwAOmoK1szwr
 KJCB7puf9NfvvcJGChED9Fnql2B/aO1wL3h1u5CuPO4Jl9aeJvUtggtTTSaNxoS+TZ
 QN0hW69mLVMAKatPz5YLbLzZvn/ukuRc+Op2WoJc=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Sun,  2 Aug 2020 19:35:56 +0300
Message-Id: <20200802163601.8189-13-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200802163601.8189-1-rppt@kernel.org>
References: <20200802163601.8189-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Mon, 17 Aug 2020 10:45:38 +0200
Subject: [OpenRISC] [PATCH v2 12/17] arch,
 drivers: replace for_each_membock() with for_each_mem_range()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Thomas Gleixner <tglx@linutronix.de>,
 Emil Renner Berthing <kernel@esmil.dk>, linux-sh@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Christoph Hellwig <hch@lst.de>,
 Marek Szyprowski <m.szyprowski@samsung.com>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Michael Ellerman <mpe@ellerman.id.au>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Mike Rapoport <rppt@linux.ibm.com>, clang-built-linux@googlegroups.com,
 Ingo Molnar <mingo@redhat.com>, linux-arm-kernel@lists.infradead.org,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Hari Bathini <hbathini@linux.ibm.com>, Michal Simek <monstr@monstr.eu>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, linux-mm@kvack.org,
 linux-kernel@vger.kernel.org, iommu@lists.linux-foundation.org,
 Palmer Dabbelt <palmer@dabbelt.com>, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlcmUgYXJlIHNldmVy
YWwgb2NjdXJyZW5jZXMgb2YgdGhlIGZvbGxvd2luZyBwYXR0ZXJuOgoKCWZvcl9lYWNoX21lbWJs
b2NrKG1lbW9yeSwgcmVnKSB7CgkJc3RhcnQgPSBfX3Bmbl90b19waHlzKG1lbWJsb2NrX3JlZ2lv
bl9tZW1vcnlfYmFzZV9wZm4ocmVnKTsKCQllbmQgPSBfX3Bmbl90b19waHlzKG1lbWJsb2NrX3Jl
Z2lvbl9tZW1vcnlfZW5kX3BmbihyZWcpKTsKCgkJLyogZG8gc29tZXRoaW5nIHdpdGggc3RhcnQg
YW5kIGVuZCAqLwoJfQoKVXNpbmcgZm9yX2VhY2hfbWVtX3JhbmdlKCkgaXRlcmF0b3IgaXMgbW9y
ZSBhcHByb3ByaWF0ZSBpbiBzdWNoIGNhc2VzIGFuZAphbGxvd3Mgc2ltcGxlciBhbmQgY2xlYW5l
ciBjb2RlLgoKU2lnbmVkLW9mZi1ieTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29t
PgotLS0KIGFyY2gvYXJtL2tlcm5lbC9zZXR1cC5jICAgICAgICAgICAgICAgICAgfCAxOCArKysr
KystLS0KIGFyY2gvYXJtL21tL21tdS5jICAgICAgICAgICAgICAgICAgICAgICAgfCAzOSArKysr
KystLS0tLS0tLS0tLS0KIGFyY2gvYXJtL21tL3Btc2EtdjcuYyAgICAgICAgICAgICAgICAgICAg
fCAyMCArKysrKy0tLS0tCiBhcmNoL2FybS9tbS9wbXNhLXY4LmMgICAgICAgICAgICAgICAgICAg
IHwgMTcgKysrKy0tLS0KIGFyY2gvYXJtL3hlbi9tbS5jICAgICAgICAgICAgICAgICAgICAgICAg
fCAgNyArKy0tCiBhcmNoL2FybTY0L21tL2thc2FuX2luaXQuYyAgICAgICAgICAgICAgIHwgMTAg
KystLS0KIGFyY2gvYXJtNjQvbW0vbW11LmMgICAgICAgICAgICAgICAgICAgICAgfCAxMSArKy0t
LS0KIGFyY2gvYzZ4L2tlcm5lbC9zZXR1cC5jICAgICAgICAgICAgICAgICAgfCAgOSArKystLQog
YXJjaC9taWNyb2JsYXplL21tL2luaXQuYyAgICAgICAgICAgICAgICB8ICA5ICsrKy0tCiBhcmNo
L21pcHMvY2F2aXVtLW9jdGVvbi9kbWEtb2N0ZW9uLmMgICAgIHwgMTIgKysrLS0tCiBhcmNoL21p
cHMva2VybmVsL3NldHVwLmMgICAgICAgICAgICAgICAgIHwgMzEgKysrKysrKy0tLS0tLS0tCiBh
cmNoL29wZW5yaXNjL21tL2luaXQuYyAgICAgICAgICAgICAgICAgIHwgIDggKystLQogYXJjaC9w
b3dlcnBjL2tlcm5lbC9mYWR1bXAuYyAgICAgICAgICAgICB8IDUwICsrKysrKysrKysrLS0tLS0t
LS0tLS0tLQogYXJjaC9wb3dlcnBjL21tL2Jvb2szczY0L2hhc2hfdXRpbHMuYyAgICB8IDE2ICsr
KystLS0tCiBhcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhfcGd0YWJsZS5jIHwgMTEgKysr
LS0tCiBhcmNoL3Bvd2VycGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5jICAgIHwgIDggKystLQog
YXJjaC9wb3dlcnBjL21tL21lbS5jICAgICAgICAgICAgICAgICAgICB8IDE2ICsrKysrLS0tCiBh
cmNoL3Bvd2VycGMvbW0vcGd0YWJsZV8zMi5jICAgICAgICAgICAgIHwgIDggKystLQogYXJjaC9y
aXNjdi9tbS9pbml0LmMgICAgICAgICAgICAgICAgICAgICB8IDI1ICsrKysrLS0tLS0tLQogYXJj
aC9yaXNjdi9tbS9rYXNhbl9pbml0LmMgICAgICAgICAgICAgICB8IDEwICsrLS0tCiBhcmNoL3Mz
OTAva2VybmVsL3NldHVwLmMgICAgICAgICAgICAgICAgIHwgMjcgKysrKysrKystLS0tLQogYXJj
aC9zMzkwL21tL3ZtZW0uYyAgICAgICAgICAgICAgICAgICAgICB8IDE2ICsrKystLS0tCiBhcmNo
L3NwYXJjL21tL2luaXRfNjQuYyAgICAgICAgICAgICAgICAgIHwgMTIgKystLS0tCiBkcml2ZXJz
L2J1cy9tdmVidS1tYnVzLmMgICAgICAgICAgICAgICAgIHwgMTIgKysrLS0tCiBkcml2ZXJzL3Mz
OTAvY2hhci96Y29yZS5jICAgICAgICAgICAgICAgIHwgIDkgKysrLS0KIDI1IGZpbGVzIGNoYW5n
ZWQsIDIwMCBpbnNlcnRpb25zKCspLCAyMTEgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvYXJj
aC9hcm0va2VybmVsL3NldHVwLmMgYi9hcmNoL2FybS9rZXJuZWwvc2V0dXAuYwppbmRleCBkOGUx
OGNkZDk2ZDMuLjNmNjVkMGFjOWY2MyAxMDA2NDQKLS0tIGEvYXJjaC9hcm0va2VybmVsL3NldHVw
LmMKKysrIGIvYXJjaC9hcm0va2VybmVsL3NldHVwLmMKQEAgLTg0MywxOSArODQzLDI1IEBAIGVh
cmx5X3BhcmFtKCJtZW0iLCBlYXJseV9tZW0pOwogCiBzdGF0aWMgdm9pZCBfX2luaXQgcmVxdWVz
dF9zdGFuZGFyZF9yZXNvdXJjZXMoY29uc3Qgc3RydWN0IG1hY2hpbmVfZGVzYyAqbWRlc2MpCiB7
Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnaW9uOworCXBoeXNfYWRkcl90IHN0YXJ0LCBl
bmQsIHJlc19lbmQ7CiAJc3RydWN0IHJlc291cmNlICpyZXM7CisJdTY0IGk7CiAKIAlrZXJuZWxf
Y29kZS5zdGFydCAgID0gdmlydF90b19waHlzKF90ZXh0KTsKIAlrZXJuZWxfY29kZS5lbmQgICAg
ID0gdmlydF90b19waHlzKF9faW5pdF9iZWdpbiAtIDEpOwogCWtlcm5lbF9kYXRhLnN0YXJ0ICAg
PSB2aXJ0X3RvX3BoeXMoX3NkYXRhKTsKIAlrZXJuZWxfZGF0YS5lbmQgICAgID0gdmlydF90b19w
aHlzKF9lbmQgLSAxKTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnaW9uKSB7Ci0J
CXBoeXNfYWRkcl90IHN0YXJ0ID0gX19wZm5fdG9fcGh5cyhtZW1ibG9ja19yZWdpb25fbWVtb3J5
X2Jhc2VfcGZuKHJlZ2lvbikpOwotCQlwaHlzX2FkZHJfdCBlbmQgPSBfX3Bmbl90b19waHlzKG1l
bWJsb2NrX3JlZ2lvbl9tZW1vcnlfZW5kX3BmbihyZWdpb24pKSAtIDE7CisJZm9yX2VhY2hfbWVt
X3JhbmdlKGksICZzdGFydCwgJmVuZCkgewogCQl1bnNpZ25lZCBsb25nIGJvb3RfYWxpYXNfc3Rh
cnQ7CiAKKwkJLyoKKwkJICogSW4gbWVtYmxvY2ssIGVuZCBwb2ludHMgdG8gdGhlIGZpcnN0IGJ5
dGUgYWZ0ZXIgdGhlCisJCSAqIHJhbmdlIHdoaWxlIGluIHJlc291cnNlcywgZW5kIHBvaW50cyB0
byB0aGUgbGFzdCBieXRlIGluCisJCSAqIHRoZSByYW5nZS4KKwkJICovCisJCXJlc19lbmQgPSBl
bmQgLSAxOworCiAJCS8qCiAJCSAqIFNvbWUgc3lzdGVtcyBoYXZlIGEgc3BlY2lhbCBtZW1vcnkg
YWxpYXMgd2hpY2ggaXMgb25seQogCQkgKiB1c2VkIGZvciBib290aW5nLiAgV2UgbmVlZCB0byBh
ZHZlcnRpc2UgdGhpcyByZWdpb24gdG8KQEAgLTg2OSw3ICs4NzUsNyBAQCBzdGF0aWMgdm9pZCBf
X2luaXQgcmVxdWVzdF9zdGFuZGFyZF9yZXNvdXJjZXMoY29uc3Qgc3RydWN0IG1hY2hpbmVfZGVz
YyAqbWRlc2MpCiAJCQkJICAgICAgX19mdW5jX18sIHNpemVvZigqcmVzKSk7CiAJCQlyZXMtPm5h
bWUgPSAiU3lzdGVtIFJBTSAoYm9vdCBhbGlhcykiOwogCQkJcmVzLT5zdGFydCA9IGJvb3RfYWxp
YXNfc3RhcnQ7Ci0JCQlyZXMtPmVuZCA9IHBoeXNfdG9faWRtYXAoZW5kKTsKKwkJCXJlcy0+ZW5k
ID0gcGh5c190b19pZG1hcChyZXNfZW5kKTsKIAkJCXJlcy0+ZmxhZ3MgPSBJT1JFU09VUkNFX01F
TSB8IElPUkVTT1VSQ0VfQlVTWTsKIAkJCXJlcXVlc3RfcmVzb3VyY2UoJmlvbWVtX3Jlc291cmNl
LCByZXMpOwogCQl9CkBAIC04ODAsNyArODg2LDcgQEAgc3RhdGljIHZvaWQgX19pbml0IHJlcXVl
c3Rfc3RhbmRhcmRfcmVzb3VyY2VzKGNvbnN0IHN0cnVjdCBtYWNoaW5lX2Rlc2MgKm1kZXNjKQog
CQkJICAgICAgc2l6ZW9mKCpyZXMpKTsKIAkJcmVzLT5uYW1lICA9ICJTeXN0ZW0gUkFNIjsKIAkJ
cmVzLT5zdGFydCA9IHN0YXJ0OwotCQlyZXMtPmVuZCA9IGVuZDsKKwkJcmVzLT5lbmQgPSByZXNf
ZW5kOwogCQlyZXMtPmZsYWdzID0gSU9SRVNPVVJDRV9TWVNURU1fUkFNIHwgSU9SRVNPVVJDRV9C
VVNZOwogCiAJCXJlcXVlc3RfcmVzb3VyY2UoJmlvbWVtX3Jlc291cmNlLCByZXMpOwpkaWZmIC0t
Z2l0IGEvYXJjaC9hcm0vbW0vbW11LmMgYi9hcmNoL2FybS9tbS9tbXUuYwppbmRleCA2MjgwMjhi
ZmJiOTIuLmExNDlkOWNiNGZkYiAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vbW11LmMKKysrIGIv
YXJjaC9hcm0vbW0vbW11LmMKQEAgLTExNTUsOSArMTE1NSw4IEBAIHBoeXNfYWRkcl90IGFybV9s
b3dtZW1fbGltaXQgX19pbml0ZGF0YSA9IDA7CiAKIHZvaWQgX19pbml0IGFkanVzdF9sb3dtZW1f
Ym91bmRzKHZvaWQpCiB7Ci0JcGh5c19hZGRyX3QgbWVtYmxvY2tfbGltaXQgPSAwOwotCXU2NCB2
bWFsbG9jX2xpbWl0OwotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKKwlwaHlzX2FkZHJf
dCBibG9ja19zdGFydCwgYmxvY2tfZW5kLCBtZW1ibG9ja19saW1pdCA9IDA7CisJdTY0IHZtYWxs
b2NfbGltaXQsIGk7CiAJcGh5c19hZGRyX3QgbG93bWVtX2xpbWl0ID0gMDsKIAogCS8qCkBAIC0x
MTczLDI2ICsxMTcyLDE4IEBAIHZvaWQgX19pbml0IGFkanVzdF9sb3dtZW1fYm91bmRzKHZvaWQp
CiAJICogVGhlIGZpcnN0IHVzYWJsZSByZWdpb24gbXVzdCBiZSBQTUQgYWxpZ25lZC4gTWFyayBp
dHMgc3RhcnQKIAkgKiBhcyBNRU1CTE9DS19OT01BUCBpZiBpdCBpc24ndAogCSAqLwotCWZvcl9l
YWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCWlmICghbWVtYmxvY2tfaXNfbm9tYXAocmVn
KSkgewotCQkJaWYgKCFJU19BTElHTkVEKHJlZy0+YmFzZSwgUE1EX1NJWkUpKSB7Ci0JCQkJcGh5
c19hZGRyX3QgbGVuOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmYmxvY2tfc3RhcnQsICZibG9j
a19lbmQpIHsKKwkJaWYgKCFJU19BTElHTkVEKGJsb2NrX3N0YXJ0LCBQTURfU0laRSkpIHsKKwkJ
CXBoeXNfYWRkcl90IGxlbjsKIAotCQkJCWxlbiA9IHJvdW5kX3VwKHJlZy0+YmFzZSwgUE1EX1NJ
WkUpIC0gcmVnLT5iYXNlOwotCQkJCW1lbWJsb2NrX21hcmtfbm9tYXAocmVnLT5iYXNlLCBsZW4p
OwotCQkJfQotCQkJYnJlYWs7CisJCQlsZW4gPSByb3VuZF91cChibG9ja19zdGFydCwgUE1EX1NJ
WkUpIC0gYmxvY2tfc3RhcnQ7CisJCQltZW1ibG9ja19tYXJrX25vbWFwKGJsb2NrX3N0YXJ0LCBs
ZW4pOwogCQl9CisJCWJyZWFrOwogCX0KIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVn
KSB7Ci0JCXBoeXNfYWRkcl90IGJsb2NrX3N0YXJ0ID0gcmVnLT5iYXNlOwotCQlwaHlzX2FkZHJf
dCBibG9ja19lbmQgPSByZWctPmJhc2UgKyByZWctPnNpemU7Ci0KLQkJaWYgKG1lbWJsb2NrX2lz
X25vbWFwKHJlZykpCi0JCQljb250aW51ZTsKLQotCQlpZiAocmVnLT5iYXNlIDwgdm1hbGxvY19s
aW1pdCkgeworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmYmxvY2tfc3RhcnQsICZibG9ja19lbmQp
IHsKKwkJaWYgKGJsb2NrX3N0YXJ0IDwgdm1hbGxvY19saW1pdCkgewogCQkJaWYgKGJsb2NrX2Vu
ZCA+IGxvd21lbV9saW1pdCkKIAkJCQkvKgogCQkJCSAqIENvbXBhcmUgYXMgdTY0IHRvIGVuc3Vy
ZSB2bWFsbG9jX2xpbWl0IGRvZXMKQEAgLTE0NDEsMTkgKzE0MzIsMTUgQEAgc3RhdGljIHZvaWQg
X19pbml0IGttYXBfaW5pdCh2b2lkKQogCiBzdGF0aWMgdm9pZCBfX2luaXQgbWFwX2xvd21lbSh2
b2lkKQogewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKIAlwaHlzX2FkZHJfdCBrZXJu
ZWxfeF9zdGFydCA9IHJvdW5kX2Rvd24oX19wYShLRVJORUxfU1RBUlQpLCBTRUNUSU9OX1NJWkUp
OwogCXBoeXNfYWRkcl90IGtlcm5lbF94X2VuZCA9IHJvdW5kX3VwKF9fcGEoX19pbml0X2VuZCks
IFNFQ1RJT05fU0laRSk7CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsKIAogCS8q
IE1hcCBhbGwgdGhlIGxvd21lbSBtZW1vcnkgYmFua3MuICovCi0JZm9yX2VhY2hfbWVtYmxvY2so
bWVtb3J5LCByZWcpIHsKLQkJcGh5c19hZGRyX3Qgc3RhcnQgPSByZWctPmJhc2U7Ci0JCXBoeXNf
YWRkcl90IGVuZCA9IHN0YXJ0ICsgcmVnLT5zaXplOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAm
c3RhcnQsICZlbmQpIHsKIAkJc3RydWN0IG1hcF9kZXNjIG1hcDsKIAotCQlpZiAobWVtYmxvY2tf
aXNfbm9tYXAocmVnKSkKLQkJCWNvbnRpbnVlOwotCiAJCWlmIChlbmQgPiBhcm1fbG93bWVtX2xp
bWl0KQogCQkJZW5kID0gYXJtX2xvd21lbV9saW1pdDsKIAkJaWYgKHN0YXJ0ID49IGVuZCkKZGlm
ZiAtLWdpdCBhL2FyY2gvYXJtL21tL3Btc2EtdjcuYyBiL2FyY2gvYXJtL21tL3Btc2EtdjcuYwpp
bmRleCA2OTlmYTJlODg3MjUuLjQ0Yjc2NDRhNDIzNyAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0v
cG1zYS12Ny5jCisrKyBiL2FyY2gvYXJtL21tL3Btc2EtdjcuYwpAQCAtMjMxLDEwICsyMzEsOSBA
QCBzdGF0aWMgaW50IF9faW5pdCBhbGxvY2F0ZV9yZWdpb24ocGh5c19hZGRyX3QgYmFzZSwgcGh5
c19hZGRyX3Qgc2l6ZSwKIHZvaWQgX19pbml0IHBtc2F2N19hZGp1c3RfbG93bWVtX2JvdW5kcyh2
b2lkKQogewogCXBoeXNfYWRkcl90ICBzcGVjaWZpZWRfbWVtX3NpemUgPSAwLCB0b3RhbF9tZW1f
c2l6ZSA9IDA7Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOwotCWJvb2wgZmlyc3QgPSB0
cnVlOwogCXBoeXNfYWRkcl90IG1lbV9zdGFydDsKIAlwaHlzX2FkZHJfdCBtZW1fZW5kOworCXBo
eXNfYWRkcl90IHJlZ19zdGFydCwgcmVnX2VuZDsKIAl1bnNpZ25lZCBpbnQgbWVtX21heF9yZWdp
b25zOwogCWludCBudW0sIGk7CiAKQEAgLTI2MiwyMCArMjYxLDE5IEBAIHZvaWQgX19pbml0IHBt
c2F2N19hZGp1c3RfbG93bWVtX2JvdW5kcyh2b2lkKQogCW1lbV9tYXhfcmVnaW9ucyAtPSBudW07
CiAjZW5kaWYKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCWlmIChmaXJz
dCkgeworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmcmVnX3N0YXJ0LCAmcmVnX2VuZCkgeworCQlp
ZiAoaSA9PSAwKSB7CiAJCQlwaHlzX2FkZHJfdCBwaHlzX29mZnNldCA9IFBIWVNfT0ZGU0VUOwog
CiAJCQkvKgogCQkJICogSW5pdGlhbGx5IG9ubHkgdXNlIG1lbW9yeSBjb250aW51b3VzIGZyb20K
IAkJCSAqIFBIWVNfT0ZGU0VUICovCi0JCQlpZiAocmVnLT5iYXNlICE9IHBoeXNfb2Zmc2V0KQor
CQkJaWYgKHJlZ19zdGFydCAhPSBwaHlzX29mZnNldCkKIAkJCQlwYW5pYygiRmlyc3QgbWVtb3J5
IGJhbmsgbXVzdCBiZSBjb250aWd1b3VzIGZyb20gUEhZU19PRkZTRVQiKTsKIAotCQkJbWVtX3N0
YXJ0ID0gcmVnLT5iYXNlOwotCQkJbWVtX2VuZCA9IHJlZy0+YmFzZSArIHJlZy0+c2l6ZTsKLQkJ
CXNwZWNpZmllZF9tZW1fc2l6ZSA9IHJlZy0+c2l6ZTsKLQkJCWZpcnN0ID0gZmFsc2U7CisJCQlt
ZW1fc3RhcnQgPSByZWdfc3RhcnQ7CisJCQltZW1fZW5kID0gcmVnX2VuZAorCQkJc3BlY2lmaWVk
X21lbV9zaXplID0gbWVtX2VuZCAtIG1lbV9zdGFydDsKIAkJfSBlbHNlIHsKIAkJCS8qCiAJCQkg
KiBtZW1ibG9jayBhdXRvIG1lcmdlcyBjb250aWd1b3VzIGJsb2NrcywgcmVtb3ZlCkBAIC0yODMs
OCArMjgxLDggQEAgdm9pZCBfX2luaXQgcG1zYXY3X2FkanVzdF9sb3dtZW1fYm91bmRzKHZvaWQp
CiAJCQkgKiBibG9ja3Mgc2VwYXJhdGVseSB3aGlsZSBpdGVyYXRpbmcpCiAJCQkgKi8KIAkJCXBy
X25vdGljZSgiSWdub3JpbmcgUkFNIGFmdGVyICVwYSwgbWVtb3J5IGF0ICVwYSBpZ25vcmVkXG4i
LAotCQkJCSAgJm1lbV9lbmQsICZyZWctPmJhc2UpOwotCQkJbWVtYmxvY2tfcmVtb3ZlKHJlZy0+
YmFzZSwgMCAtIHJlZy0+YmFzZSk7CisJCQkJICAmbWVtX2VuZCwgJnJlZ19zdGFydCk7CisJCQlt
ZW1ibG9ja19yZW1vdmUocmVnX3N0YXJ0LCAwIC0gcmVnX3N0YXJ0KTsKIAkJCWJyZWFrOwogCQl9
CiAJfQpkaWZmIC0tZ2l0IGEvYXJjaC9hcm0vbW0vcG1zYS12OC5jIGIvYXJjaC9hcm0vbW0vcG1z
YS12OC5jCmluZGV4IDBkN2Q1ZmI1OTI0Ny4uYjM5ZTc0YjQ4NDM3IDEwMDY0NAotLS0gYS9hcmNo
L2FybS9tbS9wbXNhLXY4LmMKKysrIGIvYXJjaC9hcm0vbW0vcG1zYS12OC5jCkBAIC05NCwyMCAr
OTQsMTkgQEAgc3RhdGljIF9faW5pdCBib29sIGlzX3JlZ2lvbl9maXhlZChpbnQgbnVtYmVyKQog
dm9pZCBfX2luaXQgcG1zYXY4X2FkanVzdF9sb3dtZW1fYm91bmRzKHZvaWQpCiB7CiAJcGh5c19h
ZGRyX3QgbWVtX2VuZDsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7Ci0JYm9vbCBmaXJz
dCA9IHRydWU7CisJcGh5c19hZGRyX3QgcmVnX3N0YXJ0LCByZWdfZW5kOworCWludCBpOwogCi0J
Zm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJaWYgKGZpcnN0KSB7CisJZm9yX2Vh
Y2hfbWVtX3JhbmdlKGksICZyZWdfc3RhcnQsICZyZWdfZW5kKSB7CisJCWlmIChpID09IDApIHsK
IAkJCXBoeXNfYWRkcl90IHBoeXNfb2Zmc2V0ID0gUEhZU19PRkZTRVQ7CiAKIAkJCS8qCiAJCQkg
KiBJbml0aWFsbHkgb25seSB1c2UgbWVtb3J5IGNvbnRpbnVvdXMgZnJvbQogCQkJICogUEhZU19P
RkZTRVQgKi8KLQkJCWlmIChyZWctPmJhc2UgIT0gcGh5c19vZmZzZXQpCisJCQlpZiAocmVnX3N0
YXJ0ICE9IHBoeXNfb2Zmc2V0KQogCQkJCXBhbmljKCJGaXJzdCBtZW1vcnkgYmFuayBtdXN0IGJl
IGNvbnRpZ3VvdXMgZnJvbSBQSFlTX09GRlNFVCIpOwotCQkJbWVtX2VuZCA9IHJlZy0+YmFzZSAr
IHJlZy0+c2l6ZTsKLQkJCWZpcnN0ID0gZmFsc2U7CisJCQltZW1fZW5kID0gcmVnX2VuZDsKIAkJ
fSBlbHNlIHsKIAkJCS8qCiAJCQkgKiBtZW1ibG9jayBhdXRvIG1lcmdlcyBjb250aWd1b3VzIGJs
b2NrcywgcmVtb3ZlCkBAIC0xMTUsOCArMTE0LDggQEAgdm9pZCBfX2luaXQgcG1zYXY4X2FkanVz
dF9sb3dtZW1fYm91bmRzKHZvaWQpCiAJCQkgKiBibG9ja3Mgc2VwYXJhdGVseSB3aGlsZSBpdGVy
YXRpbmcpCiAJCQkgKi8KIAkJCXByX25vdGljZSgiSWdub3JpbmcgUkFNIGFmdGVyICVwYSwgbWVt
b3J5IGF0ICVwYSBpZ25vcmVkXG4iLAotCQkJCSAgJm1lbV9lbmQsICZyZWctPmJhc2UpOwotCQkJ
bWVtYmxvY2tfcmVtb3ZlKHJlZy0+YmFzZSwgMCAtIHJlZy0+YmFzZSk7CisJCQkJICAmbWVtX2Vu
ZCwgJnJlZ19zdGFydCk7CisJCQltZW1ibG9ja19yZW1vdmUocmVnX3N0YXJ0LCAwIC0gcmVnX3N0
YXJ0KTsKIAkJCWJyZWFrOwogCQl9CiAJfQpkaWZmIC0tZ2l0IGEvYXJjaC9hcm0veGVuL21tLmMg
Yi9hcmNoL2FybS94ZW4vbW0uYwppbmRleCBkNDBlOWU1ZmM1MmIuLjA1ZjI0ZmY0MWUzNiAxMDA2
NDQKLS0tIGEvYXJjaC9hcm0veGVuL21tLmMKKysrIGIvYXJjaC9hcm0veGVuL21tLmMKQEAgLTI0
LDExICsyNCwxMiBAQAogCiB1bnNpZ25lZCBsb25nIHhlbl9nZXRfc3dpb3RsYl9mcmVlX3BhZ2Vz
KHVuc2lnbmVkIGludCBvcmRlcikKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJ
cGh5c19hZGRyX3QgYmFzZTsKIAlnZnBfdCBmbGFncyA9IF9fR0ZQX05PV0FSTnxfX0dGUF9LU1dB
UERfUkVDTEFJTTsKKwl1NjQgaTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7
Ci0JCWlmIChyZWctPmJhc2UgPCAocGh5c19hZGRyX3QpMHhmZmZmZmZmZikgeworCWZvcl9lYWNo
X21lbV9yYW5nZShpLCAmYmFzZSwgTlVMTCkgeworCQlpZiAoYmFzZSA8IChwaHlzX2FkZHJfdCkw
eGZmZmZmZmZmKSB7CiAJCQlpZiAoSVNfRU5BQkxFRChDT05GSUdfWk9ORV9ETUEzMikpCiAJCQkJ
ZmxhZ3MgfD0gX19HRlBfRE1BMzI7CiAJCQllbHNlCmRpZmYgLS1naXQgYS9hcmNoL2FybTY0L21t
L2thc2FuX2luaXQuYyBiL2FyY2gvYXJtNjQvbW0va2FzYW5faW5pdC5jCmluZGV4IDcyOTFiMjZj
ZTc4OC4uYjI0ZTQzZDIwNjY3IDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L21tL2thc2FuX2luaXQu
YworKysgYi9hcmNoL2FybTY0L21tL2thc2FuX2luaXQuYwpAQCAtMjEyLDggKzIxMiw4IEBAIHZv
aWQgX19pbml0IGthc2FuX2luaXQodm9pZCkKIHsKIAl1NjQga2ltZ19zaGFkb3dfc3RhcnQsIGtp
bWdfc2hhZG93X2VuZDsKIAl1NjQgbW9kX3NoYWRvd19zdGFydCwgbW9kX3NoYWRvd19lbmQ7Ci0J
c3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOwotCWludCBpOworCXBoeXNfYWRkcl90IHBhX3N0
YXJ0LCBwYV9lbmQ7CisJdTY0IGk7CiAKIAlraW1nX3NoYWRvd19zdGFydCA9ICh1NjQpa2FzYW5f
bWVtX3RvX3NoYWRvdyhfdGV4dCkgJiBQQUdFX01BU0s7CiAJa2ltZ19zaGFkb3dfZW5kID0gUEFH
RV9BTElHTigodTY0KWthc2FuX21lbV90b19zaGFkb3coX2VuZCkpOwpAQCAtMjQ2LDkgKzI0Niw5
IEBAIHZvaWQgX19pbml0IGthc2FuX2luaXQodm9pZCkKIAkJa2FzYW5fcG9wdWxhdGVfZWFybHlf
c2hhZG93KCh2b2lkICopbW9kX3NoYWRvd19lbmQsCiAJCQkJCSAgICAodm9pZCAqKWtpbWdfc2hh
ZG93X3N0YXJ0KTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXZvaWQg
KnN0YXJ0ID0gKHZvaWQgKilfX3BoeXNfdG9fdmlydChyZWctPmJhc2UpOwotCQl2b2lkICplbmQg
PSAodm9pZCAqKV9fcGh5c190b192aXJ0KHJlZy0+YmFzZSArIHJlZy0+c2l6ZSk7CisJZm9yX2Vh
Y2hfbWVtX3JhbmdlKGksICZwYV9zdGFydCwgJnBhX2VuZCkgeworCQl2b2lkICpzdGFydCA9ICh2
b2lkICopX19waHlzX3RvX3ZpcnQocGFfc3RhcnQpOworCQl2b2lkICplbmQgPSAodm9pZCAqKV9f
cGh5c190b192aXJ0KHBhX2VuZCk7CiAKIAkJaWYgKHN0YXJ0ID49IGVuZCkKIAkJCWJyZWFrOwpk
aWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9tbS9tbXUuYyBiL2FyY2gvYXJtNjQvbW0vbW11LmMKaW5k
ZXggMWRmMjVmMjY1NzFkLi4zMjcyNjRmYjgzZmIgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtNjQvbW0v
bW11LmMKKysrIGIvYXJjaC9hcm02NC9tbS9tbXUuYwpAQCAtNDYxLDggKzQ2MSw5IEBAIHN0YXRp
YyB2b2lkIF9faW5pdCBtYXBfbWVtKHBnZF90ICpwZ2RwKQogewogCXBoeXNfYWRkcl90IGtlcm5l
bF9zdGFydCA9IF9fcGFfc3ltYm9sKF90ZXh0KTsKIAlwaHlzX2FkZHJfdCBrZXJuZWxfZW5kID0g
X19wYV9zeW1ib2woX19pbml0X2JlZ2luKTsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7
CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKIAlpbnQgZmxhZ3MgPSAwOworCXU2NCBpOwogCiAJ
aWYgKHJvZGF0YV9mdWxsIHx8IGRlYnVnX3BhZ2VhbGxvY19lbmFibGVkKCkpCiAJCWZsYWdzID0g
Tk9fQkxPQ0tfTUFQUElOR1MgfCBOT19DT05UX01BUFBJTkdTOwpAQCAtNDgxLDE1ICs0ODIsOSBA
QCBzdGF0aWMgdm9pZCBfX2luaXQgbWFwX21lbShwZ2RfdCAqcGdkcCkKICNlbmRpZgogCiAJLyog
bWFwIGFsbCB0aGUgbWVtb3J5IGJhbmtzICovCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCBy
ZWcpIHsKLQkJcGh5c19hZGRyX3Qgc3RhcnQgPSByZWctPmJhc2U7Ci0JCXBoeXNfYWRkcl90IGVu
ZCA9IHN0YXJ0ICsgcmVnLT5zaXplOwotCisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwg
JmVuZCkgewogCQlpZiAoc3RhcnQgPj0gZW5kKQogCQkJYnJlYWs7Ci0JCWlmIChtZW1ibG9ja19p
c19ub21hcChyZWcpKQotCQkJY29udGludWU7Ci0KIAkJX19tYXBfbWVtYmxvY2socGdkcCwgc3Rh
cnQsIGVuZCwgUEFHRV9LRVJORUwsIGZsYWdzKTsKIAl9CiAKZGlmZiAtLWdpdCBhL2FyY2gvYzZ4
L2tlcm5lbC9zZXR1cC5jIGIvYXJjaC9jNngva2VybmVsL3NldHVwLmMKaW5kZXggOGVmMzUxMzFm
OTk5Li45MjU0YzNiNzk0YTUgMTAwNjQ0Ci0tLSBhL2FyY2gvYzZ4L2tlcm5lbC9zZXR1cC5jCisr
KyBiL2FyY2gvYzZ4L2tlcm5lbC9zZXR1cC5jCkBAIC0yODcsNyArMjg3LDggQEAgbm90cmFjZSB2
b2lkIF9faW5pdCBtYWNoaW5lX2luaXQodW5zaWduZWQgbG9uZyBkdF9wdHIpCiAKIHZvaWQgX19p
bml0IHNldHVwX2FyY2goY2hhciAqKmNtZGxpbmVfcCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVn
aW9uICpyZWc7CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsKIAogCXByaW50ayhL
RVJOX0lORk8gIkluaXRpYWxpemluZyBrZXJuZWxcbiIpOwogCkBAIC0zNTEsOSArMzUyLDkgQEAg
dm9pZCBfX2luaXQgc2V0dXBfYXJjaChjaGFyICoqY21kbGluZV9wKQogCWRpc2FibGVfY2FjaGlu
ZyhyYW1fc3RhcnQsIHJhbV9lbmQgLSAxKTsKIAogCS8qIFNldCBjYWNoaW5nIG9mIGV4dGVybmFs
IFJBTSB1c2VkIGJ5IExpbnV4ICovCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpCi0J
CWVuYWJsZV9jYWNoaW5nKENBQ0hFX1JFR0lPTl9TVEFSVChyZWctPmJhc2UpLAotCQkJICAgICAg
IENBQ0hFX1JFR0lPTl9TVEFSVChyZWctPmJhc2UgKyByZWctPnNpemUgLSAxKSk7CisJZm9yX2Vh
Y2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkKKwkJZW5hYmxlX2NhY2hpbmcoQ0FDSEVfUkVH
SU9OX1NUQVJUKHN0YXJ0KSwKKwkJCSAgICAgICBDQUNIRV9SRUdJT05fU1RBUlQoZW5kIC0gMSkp
OwogCiAjaWZkZWYgQ09ORklHX0JMS19ERVZfSU5JVFJECiAJLyoKZGlmZiAtLWdpdCBhL2FyY2gv
bWljcm9ibGF6ZS9tbS9pbml0LmMgYi9hcmNoL21pY3JvYmxhemUvbW0vaW5pdC5jCmluZGV4IDQ5
ZTBjMjQxZjliMS4uMTU0MDNiNWFkZmNmIDEwMDY0NAotLS0gYS9hcmNoL21pY3JvYmxhemUvbW0v
aW5pdC5jCisrKyBiL2FyY2gvbWljcm9ibGF6ZS9tbS9pbml0LmMKQEAgLTEwNiwxMyArMTA2LDE0
IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBwYWdpbmdfaW5pdCh2b2lkKQogdm9pZCBfX2luaXQgc2V0
dXBfbWVtb3J5KHZvaWQpCiB7CiAjaWZuZGVmIENPTkZJR19NTVUKLQlzdHJ1Y3QgbWVtYmxvY2tf
cmVnaW9uICpyZWc7CiAJdTMyIGtlcm5lbF9hbGlnbl9zdGFydCwga2VybmVsX2FsaWduX3NpemU7
CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsKIAogCS8qIEZpbmQgbWFpbiBtZW1v
cnkgd2hlcmUgaXMgdGhlIGtlcm5lbCAqLwotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVn
KSB7Ci0JCW1lbW9yeV9zdGFydCA9ICh1MzIpcmVnLT5iYXNlOwotCQlsb3dtZW1fc2l6ZSA9IHJl
Zy0+c2l6ZTsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKSB7CisJCW1lbW9y
eV9zdGFydCA9IHN0YXJ0OworCQlsb3dtZW1fc2l6ZSA9IGVuZCAtIHN0YXJ0OwogCQlpZiAoKG1l
bW9yeV9zdGFydCA8PSAodTMyKV90ZXh0KSAmJgogCQkJKCh1MzIpX3RleHQgPD0gKG1lbW9yeV9z
dGFydCArIGxvd21lbV9zaXplIC0gMSkpKSB7CiAJCQltZW1vcnlfc2l6ZSA9IGxvd21lbV9zaXpl
OwpkaWZmIC0tZ2l0IGEvYXJjaC9taXBzL2Nhdml1bS1vY3Rlb24vZG1hLW9jdGVvbi5jIGIvYXJj
aC9taXBzL2Nhdml1bS1vY3Rlb24vZG1hLW9jdGVvbi5jCmluZGV4IDE0ZWE2ODBkMTgwZS4uZDkz
OGMxZjdjMWUxIDEwMDY0NAotLS0gYS9hcmNoL21pcHMvY2F2aXVtLW9jdGVvbi9kbWEtb2N0ZW9u
LmMKKysrIGIvYXJjaC9taXBzL2Nhdml1bS1vY3Rlb24vZG1hLW9jdGVvbi5jCkBAIC0xOTAsMjUg
KzE5MCwyNSBAQCBjaGFyICpvY3Rlb25fc3dpb3RsYjsKIAogdm9pZCBfX2luaXQgcGxhdF9zd2lv
dGxiX3NldHVwKHZvaWQpCiB7Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqbWVtOworCXBoeXNf
YWRkcl90IHN0YXJ0LCBlbmQ7CiAJcGh5c19hZGRyX3QgbWF4X2FkZHI7CiAJcGh5c19hZGRyX3Qg
YWRkcl9zaXplOwogCXNpemVfdCBzd2lvdGxic2l6ZTsKIAl1bnNpZ25lZCBsb25nIHN3aW90bGJf
bnNsYWJzOworCXU2NCBpOwogCiAJbWF4X2FkZHIgPSAwOwogCWFkZHJfc2l6ZSA9IDA7CiAKLQlm
b3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIG1lbSkgeworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAm
c3RhcnQsICZlbmQpIHsKIAkJLyogVGhlc2UgYWRkcmVzc2VzIG1hcCBsb3cgZm9yIFBDSS4gKi8K
IAkJaWYgKG1lbS0+YmFzZSA+IDB4NDEwMDAwMDAwdWxsICYmICFPQ1RFT05fSVNfT0NURU9OMigp
KQogCQkJY29udGludWU7CiAKLQkJYWRkcl9zaXplICs9IG1lbS0+c2l6ZTsKLQotCQlpZiAobWF4
X2FkZHIgPCBtZW0tPmJhc2UgKyBtZW0tPnNpemUpCi0JCQltYXhfYWRkciA9IG1lbS0+YmFzZSAr
IG1lbS0+c2l6ZTsKKwkJYWRkcl9zaXplICs9IChlbmQgLSBzdGFydCk7CiAKKwkJaWYgKG1heF9h
ZGRyIDwgZW5kKQorCQkJbWF4X2FkZHIgPSBlbmQ7CiAJfQogCiAJc3dpb3RsYnNpemUgPSBQQUdF
X1NJWkU7CmRpZmYgLS1naXQgYS9hcmNoL21pcHMva2VybmVsL3NldHVwLmMgYi9hcmNoL21pcHMv
a2VybmVsL3NldHVwLmMKaW5kZXggN2I1MzdmYTIwMzVkLi5lYWFjMWI2NjAyNmQgMTAwNjQ0Ci0t
LSBhL2FyY2gvbWlwcy9rZXJuZWwvc2V0dXAuYworKysgYi9hcmNoL21pcHMva2VybmVsL3NldHVw
LmMKQEAgLTMwMCw4ICszMDAsOSBAQCBzdGF0aWMgdm9pZCBfX2luaXQgYm9vdG1lbV9pbml0KHZv
aWQpCiAKIHN0YXRpYyB2b2lkIF9faW5pdCBib290bWVtX2luaXQodm9pZCkKIHsKLQlzdHJ1Y3Qg
bWVtYmxvY2tfcmVnaW9uICptZW07CiAJcGh5c19hZGRyX3QgcmFtc3RhcnQsIHJhbWVuZDsKKwlw
aHlzX2FkZHJfdCBzdGFydCwgZW5kOworCXU2NCBpOwogCiAJcmFtc3RhcnQgPSBtZW1ibG9ja19z
dGFydF9vZl9EUkFNKCk7CiAJcmFtZW5kID0gbWVtYmxvY2tfZW5kX29mX0RSQU0oKTsKQEAgLTMz
OCwxOCArMzM5LDEzIEBAIHN0YXRpYyB2b2lkIF9faW5pdCBib290bWVtX2luaXQodm9pZCkKIAog
CW1pbl9sb3dfcGZuID0gQVJDSF9QRk5fT0ZGU0VUOwogCW1heF9wZm4gPSBQRk5fRE9XTihyYW1l
bmQpOwotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgbWVtKSB7Ci0JCXVuc2lnbmVkIGxvbmcg
c3RhcnQgPSBtZW1ibG9ja19yZWdpb25fbWVtb3J5X2Jhc2VfcGZuKG1lbSk7Ci0JCXVuc2lnbmVk
IGxvbmcgZW5kID0gbWVtYmxvY2tfcmVnaW9uX21lbW9yeV9lbmRfcGZuKG1lbSk7Ci0KKwlmb3Jf
ZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKSB7CiAJCS8qCiAJCSAqIFNraXAgaGlnaG1l
bSBoZXJlIHNvIHdlIGdldCBhbiBhY2N1cmF0ZSBtYXhfbG93X3BmbiBpZiBsb3cKIAkJICogbWVt
b3J5IHN0b3BzIHNob3J0IG9mIGhpZ2ggbWVtb3J5LgogCQkgKiBJZiB0aGUgcmVnaW9uIG92ZXJs
YXBzIEhJR0hNRU1fU1RBUlQsIGVuZCBpcyBjbGlwcGVkIHNvCiAJCSAqIG1heF9wZm4gZXhjbHVk
ZXMgdGhlIGhpZ2htZW0gcG9ydGlvbi4KIAkJICovCi0JCWlmIChtZW1ibG9ja19pc19ub21hcCht
ZW0pKQotCQkJY29udGludWU7CiAJCWlmIChzdGFydCA+PSBQRk5fRE9XTihISUdITUVNX1NUQVJU
KSkKIAkJCWNvbnRpbnVlOwogCQlpZiAoZW5kID4gUEZOX0RPV04oSElHSE1FTV9TVEFSVCkpCkBA
IC00NTgsMTMgKzQ1NCwxMiBAQCBlYXJseV9wYXJhbSgibWVtbWFwIiwgZWFybHlfcGFyc2VfbWVt
bWFwKTsKIHVuc2lnbmVkIGxvbmcgc2V0dXBfZWxmY29yZWhkciwgc2V0dXBfZWxmY29yZWhkcl9z
aXplOwogc3RhdGljIGludCBfX2luaXQgZWFybHlfcGFyc2VfZWxmY29yZWhkcihjaGFyICpwKQog
ewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKm1lbTsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5k
OworCXU2NCBpOwogCiAJc2V0dXBfZWxmY29yZWhkciA9IG1lbXBhcnNlKHAsICZwKTsKIAotCSBm
b3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIG1lbSkgewotCQl1bnNpZ25lZCBsb25nIHN0YXJ0ID0g
bWVtLT5iYXNlOwotCQl1bnNpZ25lZCBsb25nIGVuZCA9IHN0YXJ0ICsgbWVtLT5zaXplOworCWZv
cl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQpIHsKIAkJaWYgKHNldHVwX2VsZmNvcmVo
ZHIgPj0gc3RhcnQgJiYgc2V0dXBfZWxmY29yZWhkciA8IGVuZCkgewogCQkJLyoKIAkJCSAqIFJl
c2VydmUgZnJvbSB0aGUgZWxmIGNvcmUgaGVhZGVyIHRvIHRoZSBlbmQgb2YKQEAgLTcyOCw3ICs3
MjMsOCBAQCBzdGF0aWMgdm9pZCBfX2luaXQgYXJjaF9tZW1faW5pdChjaGFyICoqY21kbGluZV9w
KQogCiBzdGF0aWMgdm9pZCBfX2luaXQgcmVzb3VyY2VfaW5pdCh2b2lkKQogewotCXN0cnVjdCBt
ZW1ibG9ja19yZWdpb24gKnJlZ2lvbjsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5kOworCXU2NCBp
OwogCiAJaWYgKFVOQ0FDX0JBU0UgIT0gSU9fQkFTRSkKIAkJcmV0dXJuOwpAQCAtNzQwLDkgKzcz
Niw3IEBAIHN0YXRpYyB2b2lkIF9faW5pdCByZXNvdXJjZV9pbml0KHZvaWQpCiAJYnNzX3Jlc291
cmNlLnN0YXJ0ID0gX19wYV9zeW1ib2woJl9fYnNzX3N0YXJ0KTsKIAlic3NfcmVzb3VyY2UuZW5k
ID0gX19wYV9zeW1ib2woJl9fYnNzX3N0b3ApIC0gMTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1l
bW9yeSwgcmVnaW9uKSB7Ci0JCXBoeXNfYWRkcl90IHN0YXJ0ID0gUEZOX1BIWVMobWVtYmxvY2tf
cmVnaW9uX21lbW9yeV9iYXNlX3BmbihyZWdpb24pKTsKLQkJcGh5c19hZGRyX3QgZW5kID0gUEZO
X1BIWVMobWVtYmxvY2tfcmVnaW9uX21lbW9yeV9lbmRfcGZuKHJlZ2lvbikpIC0gMTsKKwlmb3Jf
ZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKSB7CiAJCXN0cnVjdCByZXNvdXJjZSAqcmVz
OwogCiAJCXJlcyA9IG1lbWJsb2NrX2FsbG9jKHNpemVvZihzdHJ1Y3QgcmVzb3VyY2UpLCBTTVBf
Q0FDSEVfQllURVMpOwpAQCAtNzUxLDcgKzc0NSwxMiBAQCBzdGF0aWMgdm9pZCBfX2luaXQgcmVz
b3VyY2VfaW5pdCh2b2lkKQogCQkJICAgICAgc2l6ZW9mKHN0cnVjdCByZXNvdXJjZSkpOwogCiAJ
CXJlcy0+c3RhcnQgPSBzdGFydDsKLQkJcmVzLT5lbmQgPSBlbmQ7CisJCS8qCisJCSAqIEluIG1l
bWJsb2NrLCBlbmQgcG9pbnRzIHRvIHRoZSBmaXJzdCBieXRlIGFmdGVyIHRoZQorCQkgKiByYW5n
ZSB3aGlsZSBpbiByZXNvdXJzZXMsIGVuZCBwb2ludHMgdG8gdGhlIGxhc3QgYnl0ZSBpbgorCQkg
KiB0aGUgcmFuZ2UuCisJCSAqLworCQlyZXMtPmVuZCA9IGVuZCAtIDE7CiAJCXJlcy0+ZmxhZ3Mg
PSBJT1JFU09VUkNFX1NZU1RFTV9SQU0gfCBJT1JFU09VUkNFX0JVU1k7CiAJCXJlcy0+bmFtZSA9
ICJTeXN0ZW0gUkFNIjsKIApkaWZmIC0tZ2l0IGEvYXJjaC9vcGVucmlzYy9tbS9pbml0LmMgYi9h
cmNoL29wZW5yaXNjL21tL2luaXQuYwppbmRleCAzZDdjNzljNzc0NWQuLjgzNDhmZWFhZjQ2ZSAx
MDA2NDQKLS0tIGEvYXJjaC9vcGVucmlzYy9tbS9pbml0LmMKKysrIGIvYXJjaC9vcGVucmlzYy9t
bS9pbml0LmMKQEAgLTY0LDYgKzY0LDcgQEAgZXh0ZXJuIGNvbnN0IGNoYXIgX3Nfa2VybmVsX3Jv
W10sIF9lX2tlcm5lbF9yb1tdOwogICovCiBzdGF0aWMgdm9pZCBfX2luaXQgbWFwX3JhbSh2b2lk
KQogeworCXBoeXNfYWRkcl90IHN0YXJ0LCBlbmQ7CiAJdW5zaWduZWQgbG9uZyB2LCBwLCBlOwog
CXBncHJvdF90IHByb3Q7CiAJcGdkX3QgKnBnZTsKQEAgLTcxLDYgKzcyLDcgQEAgc3RhdGljIHZv
aWQgX19pbml0IG1hcF9yYW0odm9pZCkKIAlwdWRfdCAqcHVlOwogCXBtZF90ICpwbWU7CiAJcHRl
X3QgKnB0ZTsKKwl1NjQgaTsKIAkvKiBUaGVzZSBtYXJrIGV4dGVudHMgb2YgcmVhZC1vbmx5IGtl
cm5lbCBwYWdlcy4uLgogCSAqIC4uLmZyb20gdm1saW51eC5sZHMuUwogCSAqLwpAQCAtNzgsOSAr
ODAsOSBAQCBzdGF0aWMgdm9pZCBfX2luaXQgbWFwX3JhbSh2b2lkKQogCiAJdiA9IFBBR0VfT0ZG
U0VUOwogCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWdpb24pIHsKLQkJcCA9ICh1MzIp
IHJlZ2lvbi0+YmFzZSAmIFBBR0VfTUFTSzsKLQkJZSA9IHAgKyAodTMyKSByZWdpb24tPnNpemU7
CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgeworCQlwID0gKHUzMikgc3Rh
cnQgJiBQQUdFX01BU0s7CisJCWUgPSAodTMyKSBlbmQ7CiAKIAkJdiA9ICh1MzIpIF9fdmEocCk7
CiAJCXBnZSA9IHBnZF9vZmZzZXRfayh2KTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9rZXJu
ZWwvZmFkdW1wLmMgYi9hcmNoL3Bvd2VycGMva2VybmVsL2ZhZHVtcC5jCmluZGV4IGZjODVjYmM2
NjgzOS4uYjBmMWRiNDQzMjUxIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMva2VybmVsL2ZhZHVt
cC5jCisrKyBiL2FyY2gvcG93ZXJwYy9rZXJuZWwvZmFkdW1wLmMKQEAgLTE4MCwxMyArMTgwLDEz
IEBAIGludCBpc19mYWR1bXBfYWN0aXZlKHZvaWQpCiAgKi8KIHN0YXRpYyBib29sIGlzX2ZhZHVt
cF9tZW1fYXJlYV9jb250aWd1b3VzKHU2NCBkX3N0YXJ0LCB1NjQgZF9lbmQpCiB7Ci0Jc3RydWN0
IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOworCXBoeXNfYWRkcl90IHJlZ19zdGFydCwgcmVnX2VuZDsK
IAlib29sIHJldCA9IGZhbHNlOwotCXU2NCBzdGFydCwgZW5kOworCXU2NCBpLCBzdGFydCwgZW5k
OwogCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJc3RhcnQgPSBtYXhfdCh1
NjQsIGRfc3RhcnQsIHJlZy0+YmFzZSk7Ci0JCWVuZCA9IG1pbl90KHU2NCwgZF9lbmQsIChyZWct
PmJhc2UgKyByZWctPnNpemUpKTsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnJlZ19zdGFydCwg
JnJlZ19lbmQpIHsKKwkJc3RhcnQgPSBtYXhfdCh1NjQsIGRfc3RhcnQsIHJlZ19zdGFydCk7CisJ
CWVuZCA9IG1pbl90KHU2NCwgZF9lbmQsIHJlZ19lbmQpOwogCQlpZiAoZF9zdGFydCA8IGVuZCkg
ewogCQkJLyogTWVtb3J5IGhvbGUgZnJvbSBkX3N0YXJ0IHRvIHN0YXJ0ICovCiAJCQlpZiAoc3Rh
cnQgPiBkX3N0YXJ0KQpAQCAtNDExLDM0ICs0MTEsMzQgQEAgc3RhdGljIGludCBfX2luaXQgYWRk
X2Jvb3RfbWVtX3JlZ2lvbnModW5zaWduZWQgbG9uZyBtc3RhcnQsCiAKIHN0YXRpYyBpbnQgX19p
bml0IGZhZHVtcF9nZXRfYm9vdF9tZW1fcmVnaW9ucyh2b2lkKQogewotCXVuc2lnbmVkIGxvbmcg
YmFzZSwgc2l6ZSwgY3VyX3NpemUsIGhvbGVfc2l6ZSwgbGFzdF9lbmQ7CisJdW5zaWduZWQgbG9u
ZyBzaXplLCBjdXJfc2l6ZSwgaG9sZV9zaXplLCBsYXN0X2VuZDsKIAl1bnNpZ25lZCBsb25nIG1l
bV9zaXplID0gZndfZHVtcC5ib290X21lbW9yeV9zaXplOwotCXN0cnVjdCBtZW1ibG9ja19yZWdp
b24gKnJlZzsKKwlwaHlzX2FkZHJfdCByZWdfc3RhcnQsIHJlZ19lbmQ7CiAJaW50IHJldCA9IDE7
CisJdTY0IGk7CiAKIAlmd19kdW1wLmJvb3RfbWVtX3JlZ3NfY250ID0gMDsKIAogCWxhc3RfZW5k
ID0gMDsKIAlob2xlX3NpemUgPSAwOwogCWN1cl9zaXplID0gMDsKLQlmb3JfZWFjaF9tZW1ibG9j
ayhtZW1vcnksIHJlZykgewotCQliYXNlID0gcmVnLT5iYXNlOwotCQlzaXplID0gcmVnLT5zaXpl
OwotCQlob2xlX3NpemUgKz0gKGJhc2UgLSBsYXN0X2VuZCk7CisJZm9yX2VhY2hfbWVtX3Jhbmdl
KGksICZyZWdfc3RhcnQsICZyZWdfZW5kKSB7CisJCXNpemUgPSByZWdfZW5kIC0gcmVnX3N0YXJ0
OworCQlob2xlX3NpemUgKz0gKHJlZ19zdGFydCAtIGxhc3RfZW5kKTsKIAogCQlpZiAoKGN1cl9z
aXplICsgc2l6ZSkgPj0gbWVtX3NpemUpIHsKIAkJCXNpemUgPSAobWVtX3NpemUgLSBjdXJfc2l6
ZSk7Ci0JCQlyZXQgPSBhZGRfYm9vdF9tZW1fcmVnaW9ucyhiYXNlLCBzaXplKTsKKwkJCXJldCA9
IGFkZF9ib290X21lbV9yZWdpb25zKHJlZ19zdGFydCwgc2l6ZSk7CiAJCQlicmVhazsKIAkJfQog
CiAJCW1lbV9zaXplIC09IHNpemU7CiAJCWN1cl9zaXplICs9IHNpemU7Ci0JCXJldCA9IGFkZF9i
b290X21lbV9yZWdpb25zKGJhc2UsIHNpemUpOworCQlyZXQgPSBhZGRfYm9vdF9tZW1fcmVnaW9u
cyhyZWdfc3RhcnQsIHNpemUpOwogCQlpZiAoIXJldCkKIAkJCWJyZWFrOwogCi0JCWxhc3RfZW5k
ID0gYmFzZSArIHNpemU7CisJCWxhc3RfZW5kID0gcmVnX2VuZDsKIAl9CiAJZndfZHVtcC5ib290
X21lbV90b3AgPSBQQUdFX0FMSUdOKGZ3X2R1bXAuYm9vdF9tZW1vcnlfc2l6ZSArIGhvbGVfc2l6
ZSk7CiAKQEAgLTk1OSw5ICs5NTksOCBAQCBzdGF0aWMgaW50IGZhZHVtcF9pbml0X2VsZmNvcmVf
aGVhZGVyKGNoYXIgKmJ1ZnApCiAgKi8KIHN0YXRpYyBpbnQgZmFkdW1wX3NldHVwX2NyYXNoX21l
bW9yeV9yYW5nZXModm9pZCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7Ci0JdTY0
IHN0YXJ0LCBlbmQ7Ci0JaW50IGksIHJldDsKKwl1NjQgaSwgc3RhcnQsIGVuZDsKKwlpbnQgcmV0
OwogCiAJcHJfZGVidWcoIlNldHVwIGNyYXNoIG1lbW9yeSByYW5nZXMuXG4iKTsKIAljcmFzaF9t
cmFuZ2VfaW5mby5tZW1fcmFuZ2VfY250ID0gMDsKQEAgLTk3OSwxMCArOTc4LDcgQEAgc3RhdGlj
IGludCBmYWR1bXBfc2V0dXBfY3Jhc2hfbWVtb3J5X3Jhbmdlcyh2b2lkKQogCQkJcmV0dXJuIHJl
dDsKIAl9CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewotCQlzdGFydCA9ICh1
NjQpcmVnLT5iYXNlOwotCQllbmQgPSBzdGFydCArICh1NjQpcmVnLT5zaXplOwotCisJZm9yX2Vh
Y2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgewogCQkvKgogCQkgKiBza2lwIHRoZSBtZW1v
cnkgY2h1bmsgdGhhdCBpcyBhbHJlYWR5IGFkZGVkCiAJCSAqICgwIHRocm91Z2ggYm9vdF9tZW1v
cnlfdG9wKS4KQEAgLTEyMTYsNyArMTIxMiw5IEBAIHN0YXRpYyB2b2lkIGZhZHVtcF9mcmVlX3Jl
c2VydmVkX21lbW9yeSh1bnNpZ25lZCBsb25nIHN0YXJ0X3BmbiwKICAqLwogc3RhdGljIHZvaWQg
ZmFkdW1wX3JlbGVhc2VfcmVzZXJ2ZWRfYXJlYSh1NjQgc3RhcnQsIHU2NCBlbmQpCiB7Ci0JdTY0
IHRzdGFydCwgdGVuZCwgc3BmbiwgZXBmbiwgcmVnX3NwZm4sIHJlZ19lcGZuLCBpOworCXVuc2ln
bmVkIGxvbmcgcmVnX3NwZm4sIHJlZ19lcGZuOworCXU2NCB0c3RhcnQsIHRlbmQsIHNwZm4sIGVw
Zm47CisJaW50IGk7CiAKIAlzcGZuID0gUEhZU19QRk4oc3RhcnQpOwogCWVwZm4gPSBQSFlTX1BG
TihlbmQpOwpAQCAtMTY1OSwxMiArMTY1NywxMCBAQCBpbnQgX19pbml0IGZhZHVtcF9yZXNlcnZl
X21lbSh2b2lkKQogLyogUHJlc2VydmUgZXZlcnl0aGluZyBhYm92ZSB0aGUgYmFzZSBhZGRyZXNz
ICovCiBzdGF0aWMgdm9pZCBfX2luaXQgZmFkdW1wX3Jlc2VydmVfY3Jhc2hfYXJlYSh1NjQgYmFz
ZSkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7Ci0JdTY0IG1zdGFydCwgbXNpemU7
CisJdTY0IGksIG1zdGFydCwgbWVuZCwgbXNpemU7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1v
cnksIHJlZykgewotCQltc3RhcnQgPSByZWctPmJhc2U7Ci0JCW1zaXplICA9IHJlZy0+c2l6ZTsK
Kwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJm1zdGFydCwgJm1lbmQpIHsKKwkJbXNpemUgID0gbWVu
ZCAtIG1zdGFydDsKIAogCQlpZiAoKG1zdGFydCArIG1zaXplKSA8IGJhc2UpCiAJCQljb250aW51
ZTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9oYXNoX3V0aWxzLmMgYi9h
cmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvaGFzaF91dGlscy5jCmluZGV4IDQ2ODE2OWUzM2M4Ni4u
OWJhNzZiMDc1YjExIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvaGFzaF91
dGlscy5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9oYXNoX3V0aWxzLmMKQEAgLTcs
NyArNyw3IEBACiAgKgogICogU01QIHNjYWxhYmlsaXR5IHdvcms6CiAgKiAgICBDb3B5cmlnaHQg
KEMpIDIwMDEgQW50b24gQmxhbmNoYXJkIDxhbnRvbkBhdS5pYm0uY29tPiwgSUJNCi0gKiAKKyAq
CiAgKiAgICBNb2R1bGUgbmFtZTogaHRhYi5jCiAgKgogICogICAgRGVzY3JpcHRpb246CkBAIC04
NjIsOCArODYyLDggQEAgc3RhdGljIHZvaWQgX19pbml0IGh0YWJfaW5pdGlhbGl6ZSh2b2lkKQog
CXVuc2lnbmVkIGxvbmcgdGFibGU7CiAJdW5zaWduZWQgbG9uZyBwdGVnX2NvdW50OwogCXVuc2ln
bmVkIGxvbmcgcHJvdDsKLQl1bnNpZ25lZCBsb25nIGJhc2UgPSAwLCBzaXplID0gMDsKLQlzdHJ1
Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3QgYmFzZSA9IDAsIHNpemUgPSAw
LCBlbmQ7CisJdTY0IGk7CiAKIAlEQkcoIiAtPiBodGFiX2luaXRpYWxpemUoKVxuIik7CiAKQEAg
LTg3OSw3ICs4NzksNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgaHRhYl9pbml0aWFsaXplKHZvaWQp
CiAJLyoKIAkgKiBDYWxjdWxhdGUgdGhlIHJlcXVpcmVkIHNpemUgb2YgdGhlIGh0YWIuICBXZSB3
YW50IHRoZSBudW1iZXIgb2YKIAkgKiBQVEVHcyB0byBlcXVhbCBvbmUgaGFsZiB0aGUgbnVtYmVy
IG9mIHJlYWwgcGFnZXMuCi0JICovIAorCSAqLwogCWh0YWJfc2l6ZV9ieXRlcyA9IGh0YWJfZ2V0
X3RhYmxlX3NpemUoKTsKIAlwdGVnX2NvdW50ID0gaHRhYl9zaXplX2J5dGVzID4+IDc7CiAKQEAg
LTg4OSw3ICs4ODksNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgaHRhYl9pbml0aWFsaXplKHZvaWQp
CiAJICAgIGZpcm13YXJlX2hhc19mZWF0dXJlKEZXX0ZFQVRVUkVfUFMzX0xWMSkpIHsKIAkJLyog
VXNpbmcgYSBoeXBlcnZpc29yIHdoaWNoIG93bnMgdGhlIGh0YWIgKi8KIAkJaHRhYl9hZGRyZXNz
ID0gTlVMTDsKLQkJX1NEUjEgPSAwOyAKKwkJX1NEUjEgPSAwOwogI2lmZGVmIENPTkZJR19GQV9E
VU1QCiAJCS8qCiAJCSAqIElmIGZpcm13YXJlIGFzc2lzdGVkIGR1bXAgaXMgYWN0aXZlIGZpcm13
YXJlIHByZXNlcnZlcwpAQCAtOTU1LDkgKzk1NSw5IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBodGFi
X2luaXRpYWxpemUodm9pZCkKICNlbmRpZiAvKiBDT05GSUdfREVCVUdfUEFHRUFMTE9DICovCiAK
IAkvKiBjcmVhdGUgYm9sdGVkIHRoZSBsaW5lYXIgbWFwcGluZyBpbiB0aGUgaGFzaCB0YWJsZSAq
LwotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCWJhc2UgPSAodW5zaWduZWQg
bG9uZylfX3ZhKHJlZy0+YmFzZSk7Ci0JCXNpemUgPSByZWctPnNpemU7CisJZm9yX2VhY2hfbWVt
X3JhbmdlKGksICZiYXNlLCAmZW5kKSB7CisJCXNpemUgPSBlbmQgLSBiYXNlOworCQliYXNlID0g
KHVuc2lnbmVkIGxvbmcpX192YShiYXNlKTsKIAogCQlEQkcoImNyZWF0aW5nIG1hcHBpbmcgZm9y
IHJlZ2lvbjogJWx4Li4lbHggKHByb3Q6ICVseClcbiIsCiAJCSAgICBiYXNlLCBzaXplLCBwcm90
KTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9yYWRpeF9wZ3RhYmxlLmMg
Yi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhfcGd0YWJsZS5jCmluZGV4IGJiMDBlMGNi
YTExOS4uNjU2NTdiOTIwODQ3IDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQv
cmFkaXhfcGd0YWJsZS5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9yYWRpeF9wZ3Rh
YmxlLmMKQEAgLTMxOCwyOCArMzE4LDI3IEBAIHN0YXRpYyBpbnQgX19tZW1pbml0IGNyZWF0ZV9w
aHlzaWNhbF9tYXBwaW5nKHVuc2lnbmVkIGxvbmcgc3RhcnQsCiBzdGF0aWMgdm9pZCBfX2luaXQg
cmFkaXhfaW5pdF9wZ3RhYmxlKHZvaWQpCiB7CiAJdW5zaWduZWQgbG9uZyBydHNfZmllbGQ7Ci0J
c3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOworCXBoeXNfYWRkcl90IHN0YXJ0LCBlbmQ7CisJ
dTY0IGk7CiAKIAkvKiBXZSBkb24ndCBzdXBwb3J0IHNsYiBmb3IgcmFkaXggKi8KIAltbXVfc2xi
X3NpemUgPSAwOwogCS8qCiAJICogQ3JlYXRlIHRoZSBsaW5lYXIgbWFwcGluZywgdXNpbmcgc3Rh
bmRhcmQgcGFnZSBzaXplIGZvciBub3cKIAkgKi8KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnks
IHJlZykgeworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQpIHsKIAkJLyoKIAkJ
ICogVGhlIG1lbWJsb2NrIGFsbG9jYXRvciAgaXMgdXAgYXQgdGhpcyBwb2ludCwgc28gdGhlCiAJ
CSAqIHBhZ2UgdGFibGVzIHdpbGwgYmUgYWxsb2NhdGVkIHdpdGhpbiB0aGUgcmFuZ2UuIE5vCiAJ
CSAqIG5lZWQgb3IgYSBub2RlICh3aGljaCB3ZSBkb24ndCBoYXZlIHlldCkuCiAJCSAqLwogCi0J
CWlmICgocmVnLT5iYXNlICsgcmVnLT5zaXplKSA+PSBSQURJWF9WTUFMTE9DX1NUQVJUKSB7CisJ
CWlmIChlbmQgPj0gUkFESVhfVk1BTExPQ19TVEFSVCkgewogCQkJcHJfd2FybigiT3V0c2lkZSB0
aGUgc3VwcG9ydGVkIHJhbmdlXG4iKTsKIAkJCWNvbnRpbnVlOwogCQl9CiAKLQkJV0FSTl9PTihj
cmVhdGVfcGh5c2ljYWxfbWFwcGluZyhyZWctPmJhc2UsCi0JCQkJCQlyZWctPmJhc2UgKyByZWct
PnNpemUsCi0JCQkJCQktMSwgUEFHRV9LRVJORUwpKTsKKwkJV0FSTl9PTihjcmVhdGVfcGh5c2lj
YWxfbWFwcGluZyhzdGFydCwgZW5kLCAtMSwgUEFHRV9LRVJORUwpKTsKIAl9CiAKIAkvKiBGaW5k
IG91dCBob3cgbWFueSBQSUQgYml0cyBhcmUgc3VwcG9ydGVkICovCmRpZmYgLS1naXQgYS9hcmNo
L3Bvd2VycGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5jIGIvYXJjaC9wb3dlcnBjL21tL2thc2Fu
L2thc2FuX2luaXRfMzIuYwppbmRleCAwNzYwZTFlNzU0ZTQuLjZlNzM0MzRlNGU0MSAxMDA2NDQK
LS0tIGEvYXJjaC9wb3dlcnBjL21tL2thc2FuL2thc2FuX2luaXRfMzIuYworKysgYi9hcmNoL3Bv
d2VycGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5jCkBAIC0xMjAsMTEgKzEyMCwxMSBAQCBzdGF0
aWMgdm9pZCBfX2luaXQga2FzYW5fdW5tYXBfZWFybHlfc2hhZG93X3ZtYWxsb2Modm9pZCkKIHN0
YXRpYyB2b2lkIF9faW5pdCBrYXNhbl9tbXVfaW5pdCh2b2lkKQogewogCWludCByZXQ7Ci0Jc3Ry
dWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOworCXBoeXNfYWRkcl90IGJhc2UsIGVuZDsKKwl1NjQg
aTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXBoeXNfYWRkcl90IGJh
c2UgPSByZWctPmJhc2U7Ci0JCXBoeXNfYWRkcl90IHRvcCA9IG1pbihiYXNlICsgcmVnLT5zaXpl
LCB0b3RhbF9sb3dtZW0pOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmYmFzZSwgJmVuZCkgewor
CQlwaHlzX2FkZHJfdCB0b3AgPSBtaW4oZW5kLCB0b3RhbF9sb3dtZW0pOwogCiAJCWlmIChiYXNl
ID49IHRvcCkKIAkJCWNvbnRpbnVlOwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL21lbS5j
IGIvYXJjaC9wb3dlcnBjL21tL21lbS5jCmluZGV4IDEzNjRkZDUzMjEwNy4uZmQ3OGRlMDg1MDZm
IDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vbWVtLmMKKysrIGIvYXJjaC9wb3dlcnBjL21t
L21lbS5jCkBAIC01OTMsMjAgKzU5MywyNCBAQCB2b2lkIGZsdXNoX2ljYWNoZV91c2VyX3BhZ2Uo
c3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHN0cnVjdCBwYWdlICpwYWdlLAogICovCiBzdGF0
aWMgaW50IF9faW5pdCBhZGRfc3lzdGVtX3JhbV9yZXNvdXJjZXModm9pZCkKIHsKLQlzdHJ1Y3Qg
bWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsK
IAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7CisJZm9yX2VhY2hfbWVtX3Jhbmdl
KGksICZzdGFydCwgJmVuZCkgewogCQlzdHJ1Y3QgcmVzb3VyY2UgKnJlczsKLQkJdW5zaWduZWQg
bG9uZyBiYXNlID0gcmVnLT5iYXNlOwotCQl1bnNpZ25lZCBsb25nIHNpemUgPSByZWctPnNpemU7
CiAKIAkJcmVzID0ga3phbGxvYyhzaXplb2Yoc3RydWN0IHJlc291cmNlKSwgR0ZQX0tFUk5FTCk7
CiAJCVdBUk5fT04oIXJlcyk7CiAKIAkJaWYgKHJlcykgewogCQkJcmVzLT5uYW1lID0gIlN5c3Rl
bSBSQU0iOwotCQkJcmVzLT5zdGFydCA9IGJhc2U7Ci0JCQlyZXMtPmVuZCA9IGJhc2UgKyBzaXpl
IC0gMTsKKwkJCXJlcy0+c3RhcnQgPSBzdGFydDsKKwkJCS8qCisJCQkgKiBJbiBtZW1ibG9jaywg
ZW5kIHBvaW50cyB0byB0aGUgZmlyc3QgYnl0ZSBhZnRlcgorCQkJICogdGhlIHJhbmdlIHdoaWxl
IGluIHJlc291cnNlcywgZW5kIHBvaW50cyB0byB0aGUKKwkJCSAqIGxhc3QgYnl0ZSBpbiB0aGUg
cmFuZ2UuCisJCQkgKi8KKwkJCXJlcy0+ZW5kID0gZW5kIC0gMTsKIAkJCXJlcy0+ZmxhZ3MgPSBJ
T1JFU09VUkNFX1NZU1RFTV9SQU0gfCBJT1JFU09VUkNFX0JVU1k7CiAJCQlXQVJOX09OKHJlcXVl
c3RfcmVzb3VyY2UoJmlvbWVtX3Jlc291cmNlLCByZXMpIDwgMCk7CiAJCX0KZGlmZiAtLWdpdCBh
L2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlXzMyLmMgYi9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZV8z
Mi5jCmluZGV4IDZlYjRlYWI3OTM4NS4uMDc5MTU5ZTk3YmNhIDEwMDY0NAotLS0gYS9hcmNoL3Bv
d2VycGMvbW0vcGd0YWJsZV8zMi5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlXzMyLmMK
QEAgLTEyMywxMSArMTIzLDExIEBAIHN0YXRpYyB2b2lkIF9faW5pdCBfX21hcGluX3JhbV9jaHVu
ayh1bnNpZ25lZCBsb25nIG9mZnNldCwgdW5zaWduZWQgbG9uZyB0b3ApCiAKIHZvaWQgX19pbml0
IG1hcGluX3JhbSh2b2lkKQogewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKKwlwaHlz
X2FkZHJfdCBiYXNlLCBlbmQ7CisJdTY0IGk7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnks
IHJlZykgewotCQlwaHlzX2FkZHJfdCBiYXNlID0gcmVnLT5iYXNlOwotCQlwaHlzX2FkZHJfdCB0
b3AgPSBtaW4oYmFzZSArIHJlZy0+c2l6ZSwgdG90YWxfbG93bWVtKTsKKwlmb3JfZWFjaF9tZW1f
cmFuZ2UoaSwgJmJhc2UsICZlbmQpIHsKKwkJcGh5c19hZGRyX3QgdG9wID0gbWluKGVuZCwgdG90
YWxfbG93bWVtKTsKIAogCQlpZiAoYmFzZSA+PSB0b3ApCiAJCQljb250aW51ZTsKZGlmZiAtLWdp
dCBhL2FyY2gvcmlzY3YvbW0vaW5pdC5jIGIvYXJjaC9yaXNjdi9tbS9pbml0LmMKaW5kZXggNzQ0
MGJhMmNkYWFhLi44NDc5YTcwM2RjMDYgMTAwNjQ0Ci0tLSBhL2FyY2gvcmlzY3YvbW0vaW5pdC5j
CisrKyBiL2FyY2gvcmlzY3YvbW0vaW5pdC5jCkBAIC0xNDUsMjEgKzE0NSwyMSBAQCBzdGF0aWMg
cGh5c19hZGRyX3QgZHRiX2Vhcmx5X3BhIF9faW5pdGRhdGE7CiAKIHZvaWQgX19pbml0IHNldHVw
X2Jvb3RtZW0odm9pZCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CiAJcGh5c19h
ZGRyX3QgbWVtX3NpemUgPSAwOwogCXBoeXNfYWRkcl90IHRvdGFsX21lbSA9IDA7Ci0JcGh5c19h
ZGRyX3QgbWVtX3N0YXJ0LCBlbmQgPSAwOworCXBoeXNfYWRkcl90IG1lbV9zdGFydCwgc3RhcnQs
IGVuZCA9IDA7CiAJcGh5c19hZGRyX3Qgdm1saW51eF9lbmQgPSBfX3BhX3N5bWJvbCgmX2VuZCk7
CiAJcGh5c19hZGRyX3Qgdm1saW51eF9zdGFydCA9IF9fcGFfc3ltYm9sKCZfc3RhcnQpOworCXU2
NCBpOwogCiAJLyogRmluZCB0aGUgbWVtb3J5IHJlZ2lvbiBjb250YWluaW5nIHRoZSBrZXJuZWwg
Ki8KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewotCQllbmQgPSByZWctPmJhc2Ug
KyByZWctPnNpemU7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgeworCQlw
aHlzX2FkZHJfdCBzaXplID0gZW5kIC0gc3RhcnQ7CiAJCWlmICghdG90YWxfbWVtKQotCQkJbWVt
X3N0YXJ0ID0gcmVnLT5iYXNlOwotCQlpZiAocmVnLT5iYXNlIDw9IHZtbGludXhfc3RhcnQgJiYg
dm1saW51eF9lbmQgPD0gZW5kKQotCQkJQlVHX09OKHJlZy0+c2l6ZSA9PSAwKTsKLQkJdG90YWxf
bWVtID0gdG90YWxfbWVtICsgcmVnLT5zaXplOworCQkJbWVtX3N0YXJ0ID0gc3RhcnQ7CisJCWlm
IChzdGFydCA8PSB2bWxpbnV4X3N0YXJ0ICYmIHZtbGludXhfZW5kIDw9IGVuZCkKKwkJCUJVR19P
TihzaXplID09IDApOworCQl0b3RhbF9tZW0gPSB0b3RhbF9tZW0gKyBzaXplOwogCX0KIAogCS8q
CkBAIC00NTYsNyArNDU2LDcgQEAgc3RhdGljIHZvaWQgX19pbml0IHNldHVwX3ZtX2ZpbmFsKHZv
aWQpCiB7CiAJdWludHB0cl90IHZhLCBtYXBfc2l6ZTsKIAlwaHlzX2FkZHJfdCBwYSwgc3RhcnQs
IGVuZDsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJdTY0IGk7CiAKIAkvKiBTZXQg
bW11X2VuYWJsZWQgZmxhZyAqLwogCW1tdV9lbmFibGVkID0gdHJ1ZTsKQEAgLTQ2NywxNCArNDY3
LDkgQEAgc3RhdGljIHZvaWQgX19pbml0IHNldHVwX3ZtX2ZpbmFsKHZvaWQpCiAJCQkgICBQR0RJ
Ul9TSVpFLCBQQUdFX1RBQkxFKTsKIAogCS8qIE1hcCBhbGwgbWVtb3J5IGJhbmtzICovCi0JZm9y
X2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJc3RhcnQgPSByZWctPmJhc2U7Ci0JCWVu
ZCA9IHN0YXJ0ICsgcmVnLT5zaXplOwotCisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwg
JmVuZCkgewogCQlpZiAoc3RhcnQgPj0gZW5kKQogCQkJYnJlYWs7Ci0JCWlmIChtZW1ibG9ja19p
c19ub21hcChyZWcpKQotCQkJY29udGludWU7CiAJCWlmIChzdGFydCA8PSBfX3BhKFBBR0VfT0ZG
U0VUKSAmJgogCQkgICAgX19wYShQQUdFX09GRlNFVCkgPCBlbmQpCiAJCQlzdGFydCA9IF9fcGEo
UEFHRV9PRkZTRVQpOwpkaWZmIC0tZ2l0IGEvYXJjaC9yaXNjdi9tbS9rYXNhbl9pbml0LmMgYi9h
cmNoL3Jpc2N2L21tL2thc2FuX2luaXQuYwppbmRleCA4N2I0YWIzZDNjNzcuLjEyZGRkMWY2YmY3
MCAxMDA2NDQKLS0tIGEvYXJjaC9yaXNjdi9tbS9rYXNhbl9pbml0LmMKKysrIGIvYXJjaC9yaXNj
di9tbS9rYXNhbl9pbml0LmMKQEAgLTg1LDE2ICs4NSwxNiBAQCBzdGF0aWMgdm9pZCBfX2luaXQg
cG9wdWxhdGUodm9pZCAqc3RhcnQsIHZvaWQgKmVuZCkKIAogdm9pZCBfX2luaXQga2FzYW5faW5p
dCh2b2lkKQogewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKLQl1bnNpZ25lZCBsb25n
IGk7CisJcGh5c19hZGRyX3QgX3N0YXJ0LCBfZW5kOworCXU2NCBpOwogCiAJa2FzYW5fcG9wdWxh
dGVfZWFybHlfc2hhZG93KCh2b2lkICopS0FTQU5fU0hBRE9XX1NUQVJULAogCQkJCSAgICAodm9p
ZCAqKWthc2FuX21lbV90b19zaGFkb3coKHZvaWQgKikKIAkJCQkJCQkJVk1BTExPQ19FTkQpKTsK
IAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXZvaWQgKnN0YXJ0ID0gKHZv
aWQgKilfX3ZhKHJlZy0+YmFzZSk7Ci0JCXZvaWQgKmVuZCA9ICh2b2lkICopX192YShyZWctPmJh
c2UgKyByZWctPnNpemUpOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmX3N0YXJ0LCAmX2VuZCkg
eworCQl2b2lkICpzdGFydCA9ICh2b2lkICopX3N0YXJ0OworCQl2b2lkICplbmQgPSAodm9pZCAq
KV9lbmQ7CiAKIAkJaWYgKHN0YXJ0ID49IGVuZCkKIAkJCWJyZWFrOwpkaWZmIC0tZ2l0IGEvYXJj
aC9zMzkwL2tlcm5lbC9zZXR1cC5jIGIvYXJjaC9zMzkwL2tlcm5lbC9zZXR1cC5jCmluZGV4IDhi
Mjg0Y2Y2ZTE5OS4uYjZjNGEwYzVmZjg2IDEwMDY0NAotLS0gYS9hcmNoL3MzOTAva2VybmVsL3Nl
dHVwLmMKKysrIGIvYXJjaC9zMzkwL2tlcm5lbC9zZXR1cC5jCkBAIC0xOTgsNyArMTk4LDcgQEAg
c3RhdGljIHZvaWQgX19pbml0IGNvbm1vZGVfZGVmYXVsdCh2b2lkKQogCQljcGNtZCgiUVVFUlkg
VEVSTSIsIHF1ZXJ5X2J1ZmZlciwgMTAyNCwgTlVMTCk7CiAJCXB0ciA9IHN0cnN0cihxdWVyeV9i
dWZmZXIsICJDT05NT0RFIik7CiAJCS8qCi0JCSAqIFNldCB0aGUgY29ubW9kZSB0byAzMjE1IHNv
IHRoYXQgdGhlIGRldmljZSByZWNvZ25pdGlvbiAKKwkJICogU2V0IHRoZSBjb25tb2RlIHRvIDMy
MTUgc28gdGhhdCB0aGUgZGV2aWNlIHJlY29nbml0aW9uCiAJCSAqIHdpbGwgc2V0IHRoZSBjdV90
eXBlIG9mIHRoZSBjb25zb2xlIHRvIDMyMTUuIElmIHRoZQogCQkgKiBjb25tb2RlIGlzIDMyNzAg
YW5kIHdlIGRvbid0IHNldCBpdCBiYWNrIHRoZW4gYm90aAogCQkgKiAzMjE1IGFuZCB0aGUgMzI3
MCBkcml2ZXIgd2lsbCB0cnkgdG8gYWNjZXNzIHRoZSBjb25zb2xlCkBAIC0yNTgsNyArMjU4LDcg
QEAgc3RhdGljIGlubGluZSB2b2lkIHNldHVwX3pmY3BkdW1wKHZvaWQpIHt9CiAKICAvKgogICog
UmVib290LCBoYWx0IGFuZCBwb3dlcl9vZmYgc3R1YnMuIFRoZXkganVzdCBjYWxsIF9tYWNoaW5l
X3Jlc3RhcnQsCi0gKiBfbWFjaGluZV9oYWx0IG9yIF9tYWNoaW5lX3Bvd2VyX29mZi4gCisgKiBf
bWFjaGluZV9oYWx0IG9yIF9tYWNoaW5lX3Bvd2VyX29mZi4KICAqLwogCiB2b2lkIG1hY2hpbmVf
cmVzdGFydChjaGFyICpjb21tYW5kKQpAQCAtNDg0LDggKzQ4NCw5IEBAIHN0YXRpYyBzdHJ1Y3Qg
cmVzb3VyY2UgX19pbml0ZGF0YSAqc3RhbmRhcmRfcmVzb3VyY2VzW10gPSB7CiBzdGF0aWMgdm9p
ZCBfX2luaXQgc2V0dXBfcmVzb3VyY2VzKHZvaWQpCiB7CiAJc3RydWN0IHJlc291cmNlICpyZXMs
ICpzdGRfcmVzLCAqc3ViX3JlczsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5
c19hZGRyX3Qgc3RhcnQsIGVuZDsKIAlpbnQgajsKKwl1NjQgaTsKIAogCWNvZGVfcmVzb3VyY2Uu
c3RhcnQgPSAodW5zaWduZWQgbG9uZykgX3RleHQ7CiAJY29kZV9yZXNvdXJjZS5lbmQgPSAodW5z
aWduZWQgbG9uZykgX2V0ZXh0IC0gMTsKQEAgLTQ5NCw3ICs0OTUsNyBAQCBzdGF0aWMgdm9pZCBf
X2luaXQgc2V0dXBfcmVzb3VyY2VzKHZvaWQpCiAJYnNzX3Jlc291cmNlLnN0YXJ0ID0gKHVuc2ln
bmVkIGxvbmcpIF9fYnNzX3N0YXJ0OwogCWJzc19yZXNvdXJjZS5lbmQgPSAodW5zaWduZWQgbG9u
ZykgX19ic3Nfc3RvcCAtIDE7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewor
CWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQpIHsKIAkJcmVzID0gbWVtYmxvY2tf
YWxsb2Moc2l6ZW9mKCpyZXMpLCA4KTsKIAkJaWYgKCFyZXMpCiAJCQlwYW5pYygiJXM6IEZhaWxl
ZCB0byBhbGxvY2F0ZSAlenUgYnl0ZXMgYWxpZ249MHgleFxuIiwKQEAgLTUwMiw4ICs1MDMsMTMg
QEAgc3RhdGljIHZvaWQgX19pbml0IHNldHVwX3Jlc291cmNlcyh2b2lkKQogCQlyZXMtPmZsYWdz
ID0gSU9SRVNPVVJDRV9CVVNZIHwgSU9SRVNPVVJDRV9TWVNURU1fUkFNOwogCiAJCXJlcy0+bmFt
ZSA9ICJTeXN0ZW0gUkFNIjsKLQkJcmVzLT5zdGFydCA9IHJlZy0+YmFzZTsKLQkJcmVzLT5lbmQg
PSByZWctPmJhc2UgKyByZWctPnNpemUgLSAxOworCQlyZXMtPnN0YXJ0ID0gc3RhcnQ7CisJCS8q
CisJCSAqIEluIG1lbWJsb2NrLCBlbmQgcG9pbnRzIHRvIHRoZSBmaXJzdCBieXRlIGFmdGVyIHRo
ZQorCQkgKiByYW5nZSB3aGlsZSBpbiByZXNvdXJzZXMsIGVuZCBwb2ludHMgdG8gdGhlIGxhc3Qg
Ynl0ZSBpbgorCQkgKiB0aGUgcmFuZ2UuCisJCSAqLworCQlyZXMtPmVuZCA9IGVuZCAtIDE7CiAJ
CXJlcXVlc3RfcmVzb3VyY2UoJmlvbWVtX3Jlc291cmNlLCByZXMpOwogCiAJCWZvciAoaiA9IDA7
IGogPCBBUlJBWV9TSVpFKHN0YW5kYXJkX3Jlc291cmNlcyk7IGorKykgewpAQCAtODE5LDE0ICs4
MjUsMTUgQEAgc3RhdGljIHZvaWQgX19pbml0IHJlc2VydmVfa2VybmVsKHZvaWQpCiAKIHN0YXRp
YyB2b2lkIF9faW5pdCBzZXR1cF9tZW1vcnkodm9pZCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVn
aW9uICpyZWc7CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsKIAogCS8qCiAJICog
SW5pdCBzdG9yYWdlIGtleSBmb3IgcHJlc2VudCBtZW1vcnkKIAkgKi8KLQlmb3JfZWFjaF9tZW1i
bG9jayhtZW1vcnksIHJlZykgewotCQlzdG9yYWdlX2tleV9pbml0X3JhbmdlKHJlZy0+YmFzZSwg
cmVnLT5iYXNlICsgcmVnLT5zaXplKTsKLQl9CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFy
dCwgJmVuZCkKKwkJc3RvcmFnZV9rZXlfaW5pdF9yYW5nZShzdGFydCwgZW5kKTsKKwogCXBzd19z
ZXRfa2V5KFBBR0VfREVGQVVMVF9LRVkpOwogCiAJLyogT25seSBjb3NtZXRpY3MgKi8KZGlmZiAt
LWdpdCBhL2FyY2gvczM5MC9tbS92bWVtLmMgYi9hcmNoL3MzOTAvbW0vdm1lbS5jCmluZGV4IDhi
NjI4MmNmN2QxMy4uMzAwNzZlY2MzZWI3IDEwMDY0NAotLS0gYS9hcmNoL3MzOTAvbW0vdm1lbS5j
CisrKyBiL2FyY2gvczM5MC9tbS92bWVtLmMKQEAgLTM5OSwxMCArMzk5LDExIEBAIGludCB2bWVt
X2FkZF9tYXBwaW5nKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKICAq
Lwogdm9pZCBfX2luaXQgdm1lbV9tYXBfaW5pdCh2b2lkKQogewotCXN0cnVjdCBtZW1ibG9ja19y
ZWdpb24gKnJlZzsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5kOworCXU2NCBpOwogCi0JZm9yX2Vh
Y2hfbWVtYmxvY2sobWVtb3J5LCByZWcpCi0JCXZtZW1fYWRkX21lbShyZWctPmJhc2UsIHJlZy0+
c2l6ZSk7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkKKwkJdm1lbV9hZGRf
bWVtKHN0YXJ0LCBlbmQgLSBzdGFydCk7CiAJX19zZXRfbWVtb3J5KCh1bnNpZ25lZCBsb25nKV9z
dGV4dCwKIAkJICAgICAodW5zaWduZWQgbG9uZykoX2V0ZXh0IC0gX3N0ZXh0KSA+PiBQQUdFX1NI
SUZULAogCQkgICAgIFNFVF9NRU1PUllfUk8gfCBTRVRfTUVNT1JZX1gpOwpAQCAtNDI4LDE2ICs0
MjksMTcgQEAgdm9pZCBfX2luaXQgdm1lbV9tYXBfaW5pdCh2b2lkKQogICovCiBzdGF0aWMgaW50
IF9faW5pdCB2bWVtX2NvbnZlcnRfbWVtb3J5X2NodW5rKHZvaWQpCiB7Ci0Jc3RydWN0IG1lbWJs
b2NrX3JlZ2lvbiAqcmVnOworCXBoeXNfYWRkcl90IHN0YXJ0LCBlbmQ7CiAJc3RydWN0IG1lbW9y
eV9zZWdtZW50ICpzZWc7CisJdTY0IGk7CiAKIAltdXRleF9sb2NrKCZ2bWVtX211dGV4KTsKLQlm
b3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgeworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAm
c3RhcnQsICZlbmQpIHsKIAkJc2VnID0ga3phbGxvYyhzaXplb2YoKnNlZyksIEdGUF9LRVJORUwp
OwogCQlpZiAoIXNlZykKIAkJCXBhbmljKCJPdXQgb2YgbWVtb3J5Li4uXG4iKTsKLQkJc2VnLT5z
dGFydCA9IHJlZy0+YmFzZTsKLQkJc2VnLT5zaXplID0gcmVnLT5zaXplOworCQlzZWctPnN0YXJ0
ID0gc3RhcnQ7CisJCXNlZy0+c2l6ZSA9IGVuZCAtIHN0YXJ0OwogCQlpbnNlcnRfbWVtb3J5X3Nl
Z21lbnQoc2VnKTsKIAl9CiAJbXV0ZXhfdW5sb2NrKCZ2bWVtX211dGV4KTsKZGlmZiAtLWdpdCBh
L2FyY2gvc3BhcmMvbW0vaW5pdF82NC5jIGIvYXJjaC9zcGFyYy9tbS9pbml0XzY0LmMKaW5kZXgg
MDJlNmU1ZTBmMTA2Li5kZTYzYzAwMjYzOGUgMTAwNjQ0Ci0tLSBhL2FyY2gvc3BhcmMvbW0vaW5p
dF82NC5jCisrKyBiL2FyY2gvc3BhcmMvbW0vaW5pdF82NC5jCkBAIC0xMTkyLDE4ICsxMTkyLDE0
IEBAIGludCBvZl9ub2RlX3RvX25pZChzdHJ1Y3QgZGV2aWNlX25vZGUgKmRwKQogCiBzdGF0aWMg
dm9pZCBfX2luaXQgYWRkX25vZGVfcmFuZ2VzKHZvaWQpCiB7Ci0Jc3RydWN0IG1lbWJsb2NrX3Jl
Z2lvbiAqcmVnOworCXBoeXNfYWRkcl90IHN0YXJ0LCBlbmQ7CiAJdW5zaWduZWQgbG9uZyBwcmV2
X21heDsKKwl1NjQgaTsKIAogbWVtYmxvY2tfcmVzaXplZDoKIAlwcmV2X21heCA9IG1lbWJsb2Nr
Lm1lbW9yeS5tYXg7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewotCQl1bnNp
Z25lZCBsb25nIHNpemUgPSByZWctPnNpemU7Ci0JCXVuc2lnbmVkIGxvbmcgc3RhcnQsIGVuZDsK
LQotCQlzdGFydCA9IHJlZy0+YmFzZTsKLQkJZW5kID0gc3RhcnQgKyBzaXplOworCWZvcl9lYWNo
X21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQpIHsKIAkJd2hpbGUgKHN0YXJ0IDwgZW5kKSB7CiAJ
CQl1bnNpZ25lZCBsb25nIHRoaXNfZW5kOwogCQkJaW50IG5pZDsKQEAgLTEyMTEsNyArMTIwNyw3
IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBhZGRfbm9kZV9yYW5nZXModm9pZCkKIAkJCXRoaXNfZW5k
ID0gbWVtYmxvY2tfbmlkX3JhbmdlKHN0YXJ0LCBlbmQsICZuaWQpOwogCiAJCQludW1hZGJnKCJT
ZXR0aW5nIG1lbWJsb2NrIE5VTUEgbm9kZSBuaWRbJWRdICIKLQkJCQkic3RhcnRbJWx4XSBlbmRb
JWx4XVxuIiwKKwkJCQkic3RhcnRbJWxseF0gZW5kWyVseF1cbiIsCiAJCQkJbmlkLCBzdGFydCwg
dGhpc19lbmQpOwogCiAJCQltZW1ibG9ja19zZXRfbm9kZShzdGFydCwgdGhpc19lbmQgLSBzdGFy
dCwKZGlmZiAtLWdpdCBhL2RyaXZlcnMvYnVzL212ZWJ1LW1idXMuYyBiL2RyaXZlcnMvYnVzL212
ZWJ1LW1idXMuYwppbmRleCA1YjJhMTFhODg5NTEuLjI1MTljZWVkZTY0YiAxMDA2NDQKLS0tIGEv
ZHJpdmVycy9idXMvbXZlYnUtbWJ1cy5jCisrKyBiL2RyaXZlcnMvYnVzL212ZWJ1LW1idXMuYwpA
QCAtNjEwLDIzICs2MTAsMjMgQEAgc3RhdGljIHVuc2lnbmVkIGludCBhcm1hZGFfeHBfbWJ1c193
aW5fcmVtYXBfb2Zmc2V0KGludCB3aW4pCiBzdGF0aWMgdm9pZCBfX2luaXQKIG12ZWJ1X21idXNf
ZmluZF9icmlkZ2VfaG9sZSh1aW50NjRfdCAqc3RhcnQsIHVpbnQ2NF90ICplbmQpCiB7Ci0Jc3Ry
dWN0IG1lbWJsb2NrX3JlZ2lvbiAqcjsKLQl1aW50NjRfdCBzID0gMDsKKwlwaHlzX2FkZHJfdCBy
ZWdfc3RhcnQsIHJlZ19lbmQ7CisJdWludDY0X3QgaSwgcyA9IDA7CiAKLQlmb3JfZWFjaF9tZW1i
bG9jayhtZW1vcnksIHIpIHsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnJlZ19zdGFydCwgJnJl
Z19lbmQpIHsKIAkJLyoKIAkJICogVGhpcyBwYXJ0IG9mIHRoZSBtZW1vcnkgaXMgYWJvdmUgNCBH
Qiwgc28gd2UgZG9uJ3QKIAkJICogY2FyZSBmb3IgdGhlIE1CdXMgYnJpZGdlIGhvbGUuCiAJCSAq
LwotCQlpZiAoci0+YmFzZSA+PSAweDEwMDAwMDAwMFVMTCkKKwkJaWYgKHJlZ19zdGFydCA+PSAw
eDEwMDAwMDAwMFVMTCkKIAkJCWNvbnRpbnVlOwogCiAJCS8qCiAJCSAqIFRoZSBNQnVzIGJyaWRn
ZSBob2xlIGlzIGF0IHRoZSBlbmQgb2YgdGhlIFJBTSB1bmRlcgogCQkgKiB0aGUgNCBHQiBsaW1p
dC4KIAkJICovCi0JCWlmIChyLT5iYXNlICsgci0+c2l6ZSA+IHMpCi0JCQlzID0gci0+YmFzZSAr
IHItPnNpemU7CisJCWlmIChyZWdfZW5kID4gcykKKwkJCXMgPSByZWdfZW5kOwogCX0KIAogCSpz
dGFydCA9IHM7CmRpZmYgLS1naXQgYS9kcml2ZXJzL3MzOTAvY2hhci96Y29yZS5jIGIvZHJpdmVy
cy9zMzkwL2NoYXIvemNvcmUuYwppbmRleCAwOGY4MTI0NzVmNWUuLjQ4NGIxZWM5YTFiYyAxMDA2
NDQKLS0tIGEvZHJpdmVycy9zMzkwL2NoYXIvemNvcmUuYworKysgYi9kcml2ZXJzL3MzOTAvY2hh
ci96Y29yZS5jCkBAIC0xNDgsMTggKzE0OCwxOSBAQCBzdGF0aWMgc3NpemVfdCB6Y29yZV9tZW1t
YXBfcmVhZChzdHJ1Y3QgZmlsZSAqZmlscCwgY2hhciBfX3VzZXIgKmJ1ZiwKIAogc3RhdGljIGlu
dCB6Y29yZV9tZW1tYXBfb3BlbihzdHJ1Y3QgaW5vZGUgKmlub2RlLCBzdHJ1Y3QgZmlsZSAqZmls
cCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3Qgc3RhcnQs
IGVuZDsKIAljaGFyICpidWY7CiAJaW50IGkgPSAwOworCXU2NCByOwogCiAJYnVmID0ga2NhbGxv
YyhtZW1ibG9jay5tZW1vcnkuY250LCBDSFVOS19JTkZPX1NJWkUsIEdGUF9LRVJORUwpOwogCWlm
ICghYnVmKSB7CiAJCXJldHVybiAtRU5PTUVNOwogCX0KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1v
cnksIHJlZykgeworCWZvcl9lYWNoX21lbV9yYW5nZShyLCAmc3RhcnQsICZlbmQpIHsKIAkJc3By
aW50ZihidWYgKyAoaSsrICogQ0hVTktfSU5GT19TSVpFKSwgIiUwMTZsbHggJTAxNmxseCAiLAot
CQkJKHVuc2lnbmVkIGxvbmcgbG9uZykgcmVnLT5iYXNlLAotCQkJKHVuc2lnbmVkIGxvbmcgbG9u
ZykgcmVnLT5zaXplKTsKKwkJCSh1bnNpZ25lZCBsb25nIGxvbmcpIHN0YXJ0LAorCQkJKHVuc2ln
bmVkIGxvbmcgbG9uZykgKGVuZCAtIHN0YXJ0KSk7CiAJfQogCWZpbHAtPnByaXZhdGVfZGF0YSA9
IGJ1ZjsKIAlyZXR1cm4gbm9uc2Vla2FibGVfb3Blbihpbm9kZSwgZmlscCk7Ci0tIAoyLjI2LjIK
Cl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVND
IG1haWxpbmcgbGlzdApPcGVuUklTQ0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3Rz
LmxpYnJlY29yZXMub3JnL2xpc3RpbmZvL29wZW5yaXNjCg==
