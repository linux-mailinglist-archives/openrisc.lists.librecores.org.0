Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id DFC6F1B20BA
	for <lists+openrisc@lfdr.de>; Tue, 21 Apr 2020 10:02:01 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 7F74320B00;
	Tue, 21 Apr 2020 10:02:01 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 63BE320A71
 for <openrisc@lists.librecores.org>; Tue, 14 Apr 2020 17:36:28 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id A03062084D;
 Tue, 14 Apr 2020 15:36:17 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1586878587;
 bh=KABZJwkZuVd1eE4rDFLgcxc6/+LelwyUPK9IAuxSwzA=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=g6NSmnIofFZt3t911LjkHi33cCdLu99TCXhLFJFrx4IX1syR7IGMFtbaMSU6v7B9Y
 U/NQW5hPM+NPkO4s9O8e3gcfIHXfDg3XQBz3z9SswLvYsjVINqYo2g3UznQFyI2VbP
 QcOhsU6LYpmSB8YAZt0YPQOwZWD+riMbX1UQ2wi8=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Tue, 14 Apr 2020 18:34:49 +0300
Message-Id: <20200414153455.21744-9-rppt@kernel.org>
X-Mailer: git-send-email 2.25.1
In-Reply-To: <20200414153455.21744-1-rppt@kernel.org>
References: <20200414153455.21744-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Tue, 21 Apr 2020 10:01:35 +0200
Subject: [OpenRISC] [PATCH v4 08/14] powerpc: add support for folded p4d
 page tables
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 Geert Uytterhoeven <geert+renesas@glider.be>, linux-sh@vger.kernel.org,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>, linux-mm@kvack.org,
 Paul Mackerras <paulus@samba.org>, linux-hexagon@vger.kernel.org,
 Will Deacon <will@kernel.org>, kvmarm@lists.cs.columbia.edu,
 Jonas Bonn <jonas@southpole.se>, linux-arch@vger.kernel.org,
 Brian Cain <bcain@codeaurora.org>, Marc Zyngier <maz@kernel.org>,
 Russell King <linux@armlinux.org.uk>, Ley Foon Tan <ley.foon.tan@intel.com>,
 Mike Rapoport <rppt@linux.ibm.com>, Catalin Marinas <catalin.marinas@arm.com>,
 Julien Thierry <julien.thierry.kdev@gmail.com>,
 uclinux-h8-devel@lists.sourceforge.jp, Fenghua Yu <fenghua.yu@intel.com>,
 Arnd Bergmann <arnd@arndb.de>, Suzuki K Poulose <suzuki.poulose@arm.com>,
 kvm-ppc@vger.kernel.org, openrisc@lists.librecores.org,
 Guan Xuetao <gxt@pku.edu.cn>, linux-arm-kernel@lists.infradead.org,
 Christophe Leroy <christophe.leroy@c-s.fr>, Tony Luck <tony.luck@intel.com>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, linux-kernel@vger.kernel.org,
 James Morse <james.morse@arm.com>, Michael Ellerman <mpe@ellerman.id.au>,
 nios2-dev@lists.rocketboards.org, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKSW1wbGVtZW50IHByaW1p
dGl2ZXMgbmVjZXNzYXJ5IGZvciB0aGUgNHRoIGxldmVsIGZvbGRpbmcsIGFkZCB3YWxrcyBvZiBw
NGQKbGV2ZWwgd2hlcmUgYXBwcm9wcmlhdGUgYW5kIHJlcGxhY2UgNWxldmVsLWZpeHVwLmggd2l0
aCBwZ3RhYmxlLW5vcDRkLmguCgpTaWduZWQtb2ZmLWJ5OiBNaWtlIFJhcG9wb3J0IDxycHB0QGxp
bnV4LmlibS5jb20+ClRlc3RlZC1ieTogQ2hyaXN0b3BoZSBMZXJveSA8Y2hyaXN0b3BoZS5sZXJv
eUBjLXMuZnI+ICMgOHh4IGFuZCA4M3h4Ci0tLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jv
b2szcy8zMi9wZ3RhYmxlLmggIHwgIDEgLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2sz
cy82NC9oYXNoLmggICAgIHwgIDQgKy0KIGFyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3Mv
NjQvcGdhbGxvYy5oICB8ICA0ICstCiBhcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0
L3BndGFibGUuaCAgfCA2MCArKysrKysrKysrLS0tLS0tLS0tCiBhcmNoL3Bvd2VycGMvaW5jbHVk
ZS9hc20vYm9vazNzLzY0L3JhZGl4LmggICAgfCAgNiArLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUv
YXNtL25vaGFzaC8zMi9wZ3RhYmxlLmggIHwgIDEgLQogYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNt
L25vaGFzaC82NC9wZ2FsbG9jLmggIHwgIDIgKy0KIC4uLi9pbmNsdWRlL2FzbS9ub2hhc2gvNjQv
cGd0YWJsZS00ay5oICAgICAgICB8IDMyICsrKysrLS0tLS0KIGFyY2gvcG93ZXJwYy9pbmNsdWRl
L2FzbS9ub2hhc2gvNjQvcGd0YWJsZS5oICB8ICA2ICstCiBhcmNoL3Bvd2VycGMvaW5jbHVkZS9h
c20vcGd0YWJsZS5oICAgICAgICAgICAgfCAxMCArKy0tCiBhcmNoL3Bvd2VycGMva3ZtL2Jvb2sz
c182NF9tbXVfcmFkaXguYyAgICAgICAgfCAzMiArKysrKystLS0tCiBhcmNoL3Bvd2VycGMvbGli
L2NvZGUtcGF0Y2hpbmcuYyAgICAgICAgICAgICAgfCAgNyArKy0KIGFyY2gvcG93ZXJwYy9tbS9i
b29rM3M2NC9oYXNoX3BndGFibGUuYyAgICAgICB8ICA0ICstCiBhcmNoL3Bvd2VycGMvbW0vYm9v
azNzNjQvcmFkaXhfcGd0YWJsZS5jICAgICAgfCAyNiArKysrKy0tLQogYXJjaC9wb3dlcnBjL21t
L2Jvb2szczY0L3N1YnBhZ2VfcHJvdC5jICAgICAgIHwgIDYgKy0KIGFyY2gvcG93ZXJwYy9tbS9o
dWdldGxicGFnZS5jICAgICAgICAgICAgICAgICB8IDI4ICsrKysrLS0tLQogYXJjaC9wb3dlcnBj
L21tL25vaGFzaC9ib29rM2VfcGd0YWJsZS5jICAgICAgIHwgMTUgKystLS0KIGFyY2gvcG93ZXJw
Yy9tbS9wZ3RhYmxlLmMgICAgICAgICAgICAgICAgICAgICB8IDMwICsrKysrKy0tLS0KIGFyY2gv
cG93ZXJwYy9tbS9wZ3RhYmxlXzY0LmMgICAgICAgICAgICAgICAgICB8IDEwICsrLS0KIGFyY2gv
cG93ZXJwYy9tbS9wdGR1bXAvaGFzaHBhZ2V0YWJsZS5jICAgICAgICB8IDIwICsrKysrKy0KIGFy
Y2gvcG93ZXJwYy9tbS9wdGR1bXAvcHRkdW1wLmMgICAgICAgICAgICAgICB8IDE0ICsrKy0tCiBh
cmNoL3Bvd2VycGMveG1vbi94bW9uLmMgICAgICAgICAgICAgICAgICAgICAgfCAxOCArKystLS0K
IDIyIGZpbGVzIGNoYW5nZWQsIDE5NyBpbnNlcnRpb25zKCspLCAxMzkgZGVsZXRpb25zKC0pCgpk
aWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy8zMi9wZ3RhYmxlLmgg
Yi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzMyL3BndGFibGUuaAppbmRleCA3NTQ5
MzkzYzRjNDMuLjYwNTJiNzIyMTZhNiAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUv
YXNtL2Jvb2szcy8zMi9wZ3RhYmxlLmgKKysrIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jv
b2szcy8zMi9wZ3RhYmxlLmgKQEAgLTIsNyArMiw2IEBACiAjaWZuZGVmIF9BU01fUE9XRVJQQ19C
T09LM1NfMzJfUEdUQUJMRV9ICiAjZGVmaW5lIF9BU01fUE9XRVJQQ19CT09LM1NfMzJfUEdUQUJM
RV9ICiAKLSNkZWZpbmUgX19BUkNIX1VTRV81TEVWRUxfSEFDSwogI2luY2x1ZGUgPGFzbS1nZW5l
cmljL3BndGFibGUtbm9wbWQuaD4KIAogI2luY2x1ZGUgPGFzbS9ib29rM3MvMzIvaGFzaC5oPgpk
aWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9oYXNoLmggYi9h
cmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0L2hhc2guaAppbmRleCA2ZmM0NTIwMDky
YzcuLjczYWQwMzhlZDEwYiAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jv
b2szcy82NC9oYXNoLmgKKysrIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9o
YXNoLmgKQEAgLTEzNCw5ICsxMzQsOSBAQCBzdGF0aWMgaW5saW5lIGludCBnZXRfcmVnaW9uX2lk
KHVuc2lnbmVkIGxvbmcgZWEpCiAKICNkZWZpbmUJaGFzaF9fcG1kX2JhZChwbWQpCQkocG1kX3Zh
bChwbWQpICYgSF9QTURfQkFEX0JJVFMpCiAjZGVmaW5lCWhhc2hfX3B1ZF9iYWQocHVkKQkJKHB1
ZF92YWwocHVkKSAmIEhfUFVEX0JBRF9CSVRTKQotc3RhdGljIGlubGluZSBpbnQgaGFzaF9fcGdk
X2JhZChwZ2RfdCBwZ2QpCitzdGF0aWMgaW5saW5lIGludCBoYXNoX19wNGRfYmFkKHA0ZF90IHA0
ZCkKIHsKLQlyZXR1cm4gKHBnZF92YWwocGdkKSA9PSAwKTsKKwlyZXR1cm4gKHA0ZF92YWwocDRk
KSA9PSAwKTsKIH0KICNpZmRlZiBDT05GSUdfU1RSSUNUX0tFUk5FTF9SV1gKIGV4dGVybiB2b2lk
IGhhc2hfX21hcmtfcm9kYXRhX3JvKHZvaWQpOwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2lu
Y2x1ZGUvYXNtL2Jvb2szcy82NC9wZ2FsbG9jLmggYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20v
Ym9vazNzLzY0L3BnYWxsb2MuaAppbmRleCBhNDFlOTFiZDA1ODAuLjY5YzViMDUxNzM0ZiAxMDA2
NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9wZ2FsbG9jLmgKKysr
IGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9wZ2FsbG9jLmgKQEAgLTg1LDkg
Kzg1LDkgQEAgc3RhdGljIGlubGluZSB2b2lkIHBnZF9mcmVlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1t
LCBwZ2RfdCAqcGdkKQogCWttZW1fY2FjaGVfZnJlZShQR1RfQ0FDSEUoUEdEX0lOREVYX1NJWkUp
LCBwZ2QpOwogfQogCi1zdGF0aWMgaW5saW5lIHZvaWQgcGdkX3BvcHVsYXRlKHN0cnVjdCBtbV9z
dHJ1Y3QgKm1tLCBwZ2RfdCAqcGdkLCBwdWRfdCAqcHVkKQorc3RhdGljIGlubGluZSB2b2lkIHA0
ZF9wb3B1bGF0ZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgcDRkX3QgKnBnZCwgcHVkX3QgKnB1ZCkK
IHsKLQkqcGdkID0gIF9fcGdkKF9fcGd0YWJsZV9wdHJfdmFsKHB1ZCkgfCBQR0RfVkFMX0JJVFMp
OworCSpwZ2QgPSAgX19wNGQoX19wZ3RhYmxlX3B0cl92YWwocHVkKSB8IFBHRF9WQUxfQklUUyk7
CiB9CiAKIHN0YXRpYyBpbmxpbmUgcHVkX3QgKnB1ZF9hbGxvY19vbmUoc3RydWN0IG1tX3N0cnVj
dCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcikKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9pbmNs
dWRlL2FzbS9ib29rM3MvNjQvcGd0YWJsZS5oIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jv
b2szcy82NC9wZ3RhYmxlLmgKaW5kZXggMzY4YjEzNjUxN2UwLi5iYzA0NzUxNDcyNGMgMTAwNjQ0
Ci0tLSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3MvNjQvcGd0YWJsZS5oCisrKyBi
L2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3MvNjQvcGd0YWJsZS5oCkBAIC0yLDcgKzIs
NyBAQAogI2lmbmRlZiBfQVNNX1BPV0VSUENfQk9PSzNTXzY0X1BHVEFCTEVfSF8KICNkZWZpbmUg
X0FTTV9QT1dFUlBDX0JPT0szU182NF9QR1RBQkxFX0hfCiAKLSNpbmNsdWRlIDxhc20tZ2VuZXJp
Yy81bGV2ZWwtZml4dXAuaD4KKyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9wZ3RhYmxlLW5vcDRkLmg+
CiAKICNpZm5kZWYgX19BU1NFTUJMWV9fCiAjaW5jbHVkZSA8bGludXgvbW1kZWJ1Zy5oPgpAQCAt
MjUxLDcgKzI1MSw3IEBAIGV4dGVybiB1bnNpZ25lZCBsb25nIF9fcG1kX2ZyYWdfc2l6ZV9zaGlm
dDsKIC8qIEJpdHMgdG8gbWFzayBvdXQgZnJvbSBhIFBVRCB0byBnZXQgdG8gdGhlIFBNRCBwYWdl
ICovCiAjZGVmaW5lIFBVRF9NQVNLRURfQklUUwkJMHhjMDAwMDAwMDAwMDAwMGZmVUwKIC8qIEJp
dHMgdG8gbWFzayBvdXQgZnJvbSBhIFBHRCB0byBnZXQgdG8gdGhlIFBVRCBwYWdlICovCi0jZGVm
aW5lIFBHRF9NQVNLRURfQklUUwkJMHhjMDAwMDAwMDAwMDAwMGZmVUwKKyNkZWZpbmUgUDREX01B
U0tFRF9CSVRTCQkweGMwMDAwMDAwMDAwMDAwZmZVTAogCiAvKgogICogVXNlZCBhcyBhbiBpbmRp
Y2F0b3IgZm9yIHJjdSBjYWxsYmFjayBmdW5jdGlvbnMKQEAgLTk0OSw1NCArOTQ5LDYwIEBAIHN0
YXRpYyBpbmxpbmUgYm9vbCBwdWRfYWNjZXNzX3Blcm1pdHRlZChwdWRfdCBwdWQsIGJvb2wgd3Jp
dGUpCiAJcmV0dXJuIHB0ZV9hY2Nlc3NfcGVybWl0dGVkKHB1ZF9wdGUocHVkKSwgd3JpdGUpOwog
fQogCi0jZGVmaW5lIHBnZF93cml0ZShwZ2QpCQlwdGVfd3JpdGUocGdkX3B0ZShwZ2QpKQorI2Rl
ZmluZSBfX3A0ZF9yYXcoeCkJKChwNGRfdCkgeyBfX3BnZF9yYXcoeCkgfSkKK3N0YXRpYyBpbmxp
bmUgX19iZTY0IHA0ZF9yYXcocDRkX3QgeCkKK3sKKwlyZXR1cm4gcGdkX3Jhdyh4LnBnZCk7Cit9
CisKKyNkZWZpbmUgcDRkX3dyaXRlKHA0ZCkJCXB0ZV93cml0ZShwNGRfcHRlKHA0ZCkpCiAKLXN0
YXRpYyBpbmxpbmUgdm9pZCBwZ2RfY2xlYXIocGdkX3QgKnBnZHApCitzdGF0aWMgaW5saW5lIHZv
aWQgcDRkX2NsZWFyKHA0ZF90ICpwNGRwKQogewotCSpwZ2RwID0gX19wZ2QoMCk7CisJKnA0ZHAg
PSBfX3A0ZCgwKTsKIH0KIAotc3RhdGljIGlubGluZSBpbnQgcGdkX25vbmUocGdkX3QgcGdkKQor
c3RhdGljIGlubGluZSBpbnQgcDRkX25vbmUocDRkX3QgcDRkKQogewotCXJldHVybiAhcGdkX3Jh
dyhwZ2QpOworCXJldHVybiAhcDRkX3JhdyhwNGQpOwogfQogCi1zdGF0aWMgaW5saW5lIGludCBw
Z2RfcHJlc2VudChwZ2RfdCBwZ2QpCitzdGF0aWMgaW5saW5lIGludCBwNGRfcHJlc2VudChwNGRf
dCBwNGQpCiB7Ci0JcmV0dXJuICEhKHBnZF9yYXcocGdkKSAmIGNwdV90b19iZTY0KF9QQUdFX1BS
RVNFTlQpKTsKKwlyZXR1cm4gISEocDRkX3JhdyhwNGQpICYgY3B1X3RvX2JlNjQoX1BBR0VfUFJF
U0VOVCkpOwogfQogCi1zdGF0aWMgaW5saW5lIHB0ZV90IHBnZF9wdGUocGdkX3QgcGdkKQorc3Rh
dGljIGlubGluZSBwdGVfdCBwNGRfcHRlKHA0ZF90IHA0ZCkKIHsKLQlyZXR1cm4gX19wdGVfcmF3
KHBnZF9yYXcocGdkKSk7CisJcmV0dXJuIF9fcHRlX3JhdyhwNGRfcmF3KHA0ZCkpOwogfQogCi1z
dGF0aWMgaW5saW5lIHBnZF90IHB0ZV9wZ2QocHRlX3QgcHRlKQorc3RhdGljIGlubGluZSBwNGRf
dCBwdGVfcDRkKHB0ZV90IHB0ZSkKIHsKLQlyZXR1cm4gX19wZ2RfcmF3KHB0ZV9yYXcocHRlKSk7
CisJcmV0dXJuIF9fcDRkX3JhdyhwdGVfcmF3KHB0ZSkpOwogfQogCi1zdGF0aWMgaW5saW5lIGlu
dCBwZ2RfYmFkKHBnZF90IHBnZCkKK3N0YXRpYyBpbmxpbmUgaW50IHA0ZF9iYWQocDRkX3QgcDRk
KQogewogCWlmIChyYWRpeF9lbmFibGVkKCkpCi0JCXJldHVybiByYWRpeF9fcGdkX2JhZChwZ2Qp
OwotCXJldHVybiBoYXNoX19wZ2RfYmFkKHBnZCk7CisJCXJldHVybiByYWRpeF9fcDRkX2JhZChw
NGQpOworCXJldHVybiBoYXNoX19wNGRfYmFkKHA0ZCk7CiB9CiAKLSNkZWZpbmUgcGdkX2FjY2Vz
c19wZXJtaXR0ZWQgcGdkX2FjY2Vzc19wZXJtaXR0ZWQKLXN0YXRpYyBpbmxpbmUgYm9vbCBwZ2Rf
YWNjZXNzX3Blcm1pdHRlZChwZ2RfdCBwZ2QsIGJvb2wgd3JpdGUpCisjZGVmaW5lIHA0ZF9hY2Nl
c3NfcGVybWl0dGVkIHA0ZF9hY2Nlc3NfcGVybWl0dGVkCitzdGF0aWMgaW5saW5lIGJvb2wgcDRk
X2FjY2Vzc19wZXJtaXR0ZWQocDRkX3QgcDRkLCBib29sIHdyaXRlKQogewotCXJldHVybiBwdGVf
YWNjZXNzX3Blcm1pdHRlZChwZ2RfcHRlKHBnZCksIHdyaXRlKTsKKwlyZXR1cm4gcHRlX2FjY2Vz
c19wZXJtaXR0ZWQocDRkX3B0ZShwNGQpLCB3cml0ZSk7CiB9CiAKLWV4dGVybiBzdHJ1Y3QgcGFn
ZSAqcGdkX3BhZ2UocGdkX3QgcGdkKTsKK2V4dGVybiBzdHJ1Y3QgcGFnZSAqcDRkX3BhZ2UocDRk
X3QgcDRkKTsKIAogLyogUG9pbnRlcnMgaW4gdGhlIHBhZ2UgdGFibGUgdHJlZSBhcmUgcGh5c2lj
YWwgYWRkcmVzc2VzICovCiAjZGVmaW5lIF9fcGd0YWJsZV9wdHJfdmFsKHB0cikJX19wYShwdHIp
CiAKICNkZWZpbmUgcG1kX3BhZ2VfdmFkZHIocG1kKQlfX3ZhKHBtZF92YWwocG1kKSAmIH5QTURf
TUFTS0VEX0JJVFMpCiAjZGVmaW5lIHB1ZF9wYWdlX3ZhZGRyKHB1ZCkJX192YShwdWRfdmFsKHB1
ZCkgJiB+UFVEX01BU0tFRF9CSVRTKQotI2RlZmluZSBwZ2RfcGFnZV92YWRkcihwZ2QpCV9fdmEo
cGdkX3ZhbChwZ2QpICYgflBHRF9NQVNLRURfQklUUykKKyNkZWZpbmUgcDRkX3BhZ2VfdmFkZHIo
cDRkKQlfX3ZhKHA0ZF92YWwocDRkKSAmIH5QNERfTUFTS0VEX0JJVFMpCiAKICNkZWZpbmUgcGdk
X2luZGV4KGFkZHJlc3MpICgoKGFkZHJlc3MpID4+IChQR0RJUl9TSElGVCkpICYgKFBUUlNfUEVS
X1BHRCAtIDEpKQogI2RlZmluZSBwdWRfaW5kZXgoYWRkcmVzcykgKCgoYWRkcmVzcykgPj4gKFBV
RF9TSElGVCkpICYgKFBUUlNfUEVSX1BVRCAtIDEpKQpAQCAtMTAxMCw4ICsxMDE2LDggQEAgZXh0
ZXJuIHN0cnVjdCBwYWdlICpwZ2RfcGFnZShwZ2RfdCBwZ2QpOwogCiAjZGVmaW5lIHBnZF9vZmZz
ZXQobW0sIGFkZHJlc3MpCSAoKG1tKS0+cGdkICsgcGdkX2luZGV4KGFkZHJlc3MpKQogCi0jZGVm
aW5lIHB1ZF9vZmZzZXQocGdkcCwgYWRkcikJXAotCSgoKHB1ZF90ICopIHBnZF9wYWdlX3ZhZGRy
KCoocGdkcCkpKSArIHB1ZF9pbmRleChhZGRyKSkKKyNkZWZpbmUgcHVkX29mZnNldChwNGRwLCBh
ZGRyKQlcCisJKCgocHVkX3QgKikgcDRkX3BhZ2VfdmFkZHIoKihwNGRwKSkpICsgcHVkX2luZGV4
KGFkZHIpKQogI2RlZmluZSBwbWRfb2Zmc2V0KHB1ZHAsYWRkcikgXAogCSgoKHBtZF90ICopIHB1
ZF9wYWdlX3ZhZGRyKCoocHVkcCkpKSArIHBtZF9pbmRleChhZGRyKSkKICNkZWZpbmUgcHRlX29m
ZnNldF9rZXJuZWwoZGlyLGFkZHIpIFwKQEAgLTEzNzAsMTEgKzEzNzYsMTEgQEAgc3RhdGljIGlu
bGluZSBib29sIHB1ZF9pc19sZWFmKHB1ZF90IHB1ZCkKIAlyZXR1cm4gISEocHVkX3JhdyhwdWQp
ICYgY3B1X3RvX2JlNjQoX1BBR0VfUFRFKSk7CiB9CiAKLSNkZWZpbmUgcGdkX2lzX2xlYWYgcGdk
X2lzX2xlYWYKLSNkZWZpbmUgcGdkX2xlYWYgcGdkX2lzX2xlYWYKLXN0YXRpYyBpbmxpbmUgYm9v
bCBwZ2RfaXNfbGVhZihwZ2RfdCBwZ2QpCisjZGVmaW5lIHA0ZF9pc19sZWFmIHA0ZF9pc19sZWFm
CisjZGVmaW5lIHA0ZF9sZWFmIHA0ZF9pc19sZWFmCitzdGF0aWMgaW5saW5lIGJvb2wgcDRkX2lz
X2xlYWYocDRkX3QgcDRkKQogewotCXJldHVybiAhIShwZ2RfcmF3KHBnZCkgJiBjcHVfdG9fYmU2
NChfUEFHRV9QVEUpKTsKKwlyZXR1cm4gISEocDRkX3JhdyhwNGQpICYgY3B1X3RvX2JlNjQoX1BB
R0VfUFRFKSk7CiB9CiAKICNlbmRpZiAvKiBfX0FTU0VNQkxZX18gKi8KZGlmZiAtLWdpdCBhL2Fy
Y2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3MvNjQvcmFkaXguaCBiL2FyY2gvcG93ZXJwYy9p
bmNsdWRlL2FzbS9ib29rM3MvNjQvcmFkaXguaAppbmRleCAwOGMyMjJkNWI3NjQuLjBjYmE3OTRj
NGZiOCAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9yYWRp
eC5oCisrKyBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ib29rM3MvNjQvcmFkaXguaApAQCAt
MzAsNyArMzAsNyBAQAogLyogRG9uJ3QgaGF2ZSBhbnl0aGluZyBpbiB0aGUgcmVzZXJ2ZWQgYml0
cyBhbmQgbGVhZiBiaXRzICovCiAjZGVmaW5lIFJBRElYX1BNRF9CQURfQklUUwkJMHg2MDAwMDAw
MDAwMDAwMGUwVUwKICNkZWZpbmUgUkFESVhfUFVEX0JBRF9CSVRTCQkweDYwMDAwMDAwMDAwMDAw
ZTBVTAotI2RlZmluZSBSQURJWF9QR0RfQkFEX0JJVFMJCTB4NjAwMDAwMDAwMDAwMDBlMFVMCisj
ZGVmaW5lIFJBRElYX1A0RF9CQURfQklUUwkJMHg2MDAwMDAwMDAwMDAwMGUwVUwKIAogI2RlZmlu
ZSBSQURJWF9QTURfU0hJRlQJCShQQUdFX1NISUZUICsgUkFESVhfUFRFX0lOREVYX1NJWkUpCiAj
ZGVmaW5lIFJBRElYX1BVRF9TSElGVAkJKFJBRElYX1BNRF9TSElGVCArIFJBRElYX1BNRF9JTkRF
WF9TSVpFKQpAQCAtMjI3LDkgKzIyNyw5IEBAIHN0YXRpYyBpbmxpbmUgaW50IHJhZGl4X19wdWRf
YmFkKHB1ZF90IHB1ZCkKIH0KIAogCi1zdGF0aWMgaW5saW5lIGludCByYWRpeF9fcGdkX2JhZChw
Z2RfdCBwZ2QpCitzdGF0aWMgaW5saW5lIGludCByYWRpeF9fcDRkX2JhZChwNGRfdCBwNGQpCiB7
Ci0JcmV0dXJuICEhKHBnZF92YWwocGdkKSAmIFJBRElYX1BHRF9CQURfQklUUyk7CisJcmV0dXJu
ICEhKHA0ZF92YWwocDRkKSAmIFJBRElYX1A0RF9CQURfQklUUyk7CiB9CiAKICNpZmRlZiBDT05G
SUdfVFJBTlNQQVJFTlRfSFVHRVBBR0UKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9pbmNsdWRl
L2FzbS9ub2hhc2gvMzIvcGd0YWJsZS5oIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFz
aC8zMi9wZ3RhYmxlLmgKaW5kZXggYjA0YmEyNTdmZGRiLi4zZDBiYzk5ZGQ1MjAgMTAwNjQ0Ci0t
LSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvMzIvcGd0YWJsZS5oCisrKyBiL2Fy
Y2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvMzIvcGd0YWJsZS5oCkBAIC0yLDcgKzIsNiBA
QAogI2lmbmRlZiBfQVNNX1BPV0VSUENfTk9IQVNIXzMyX1BHVEFCTEVfSAogI2RlZmluZSBfQVNN
X1BPV0VSUENfTk9IQVNIXzMyX1BHVEFCTEVfSAogCi0jZGVmaW5lIF9fQVJDSF9VU0VfNUxFVkVM
X0hBQ0sKICNpbmNsdWRlIDxhc20tZ2VuZXJpYy9wZ3RhYmxlLW5vcG1kLmg+CiAKICNpZm5kZWYg
X19BU1NFTUJMWV9fCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vbm9oYXNo
LzY0L3BnYWxsb2MuaCBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvNjQvcGdhbGxv
Yy5oCmluZGV4IGI5NTM0YTc5MzI5My4uNjY4YWVlNjAxN2U3IDEwMDY0NAotLS0gYS9hcmNoL3Bv
d2VycGMvaW5jbHVkZS9hc20vbm9oYXNoLzY0L3BnYWxsb2MuaAorKysgYi9hcmNoL3Bvd2VycGMv
aW5jbHVkZS9hc20vbm9oYXNoLzY0L3BnYWxsb2MuaApAQCAtMTUsNyArMTUsNyBAQCBzdHJ1Y3Qg
dm1lbW1hcF9iYWNraW5nIHsKIH07CiBleHRlcm4gc3RydWN0IHZtZW1tYXBfYmFja2luZyAqdm1l
bW1hcF9saXN0OwogCi0jZGVmaW5lIHBnZF9wb3B1bGF0ZShNTSwgUEdELCBQVUQpCXBnZF9zZXQo
UEdELCAodW5zaWduZWQgbG9uZylQVUQpCisjZGVmaW5lIHA0ZF9wb3B1bGF0ZShNTSwgUDRELCBQ
VUQpCXA0ZF9zZXQoUDRELCAodW5zaWduZWQgbG9uZylQVUQpCiAKIHN0YXRpYyBpbmxpbmUgcHVk
X3QgKnB1ZF9hbGxvY19vbmUoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRk
cikKIHsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvNjQvcGd0
YWJsZS00ay5oIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC82NC9wZ3RhYmxlLTRr
LmgKaW5kZXggYzQwZWMzMmI4MTk0Li44MWIxYzU0ZTNjZjEgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93
ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvNjQvcGd0YWJsZS00ay5oCisrKyBiL2FyY2gvcG93ZXJw
Yy9pbmNsdWRlL2FzbS9ub2hhc2gvNjQvcGd0YWJsZS00ay5oCkBAIC0yLDcgKzIsNyBAQAogI2lm
bmRlZiBfQVNNX1BPV0VSUENfTk9IQVNIXzY0X1BHVEFCTEVfNEtfSAogI2RlZmluZSBfQVNNX1BP
V0VSUENfTk9IQVNIXzY0X1BHVEFCTEVfNEtfSAogCi0jaW5jbHVkZSA8YXNtLWdlbmVyaWMvNWxl
dmVsLWZpeHVwLmg+CisjaW5jbHVkZSA8YXNtLWdlbmVyaWMvcGd0YWJsZS1ub3A0ZC5oPgogCiAv
KgogICogRW50cmllcyBwZXIgcGFnZSBkaXJlY3RvcnkgbGV2ZWwuICBUaGUgUFRFIGxldmVsIG11
c3QgdXNlIGEgNjRiIHJlY29yZApAQCAtNDUsNDEgKzQ1LDQxIEBACiAjZGVmaW5lIFBNRF9NQVNL
RURfQklUUwkJMAogLyogQml0cyB0byBtYXNrIG91dCBmcm9tIGEgUFVEIHRvIGdldCB0byB0aGUg
UE1EIHBhZ2UgKi8KICNkZWZpbmUgUFVEX01BU0tFRF9CSVRTCQkwCi0vKiBCaXRzIHRvIG1hc2sg
b3V0IGZyb20gYSBQR0QgdG8gZ2V0IHRvIHRoZSBQVUQgcGFnZSAqLwotI2RlZmluZSBQR0RfTUFT
S0VEX0JJVFMJCTAKKy8qIEJpdHMgdG8gbWFzayBvdXQgZnJvbSBhIFA0RCB0byBnZXQgdG8gdGhl
IFBVRCBwYWdlICovCisjZGVmaW5lIFA0RF9NQVNLRURfQklUUwkJMAogCiAKIC8qCiAgKiA0LWxl
dmVsIHBhZ2UgdGFibGVzIHJlbGF0ZWQgYml0cwogICovCiAKLSNkZWZpbmUgcGdkX25vbmUocGdk
KQkJKCFwZ2RfdmFsKHBnZCkpCi0jZGVmaW5lIHBnZF9iYWQocGdkKQkJKHBnZF92YWwocGdkKSA9
PSAwKQotI2RlZmluZSBwZ2RfcHJlc2VudChwZ2QpCShwZ2RfdmFsKHBnZCkgIT0gMCkKLSNkZWZp
bmUgcGdkX3BhZ2VfdmFkZHIocGdkKQkocGdkX3ZhbChwZ2QpICYgflBHRF9NQVNLRURfQklUUykK
KyNkZWZpbmUgcDRkX25vbmUocDRkKQkJKCFwNGRfdmFsKHA0ZCkpCisjZGVmaW5lIHA0ZF9iYWQo
cDRkKQkJKHA0ZF92YWwocDRkKSA9PSAwKQorI2RlZmluZSBwNGRfcHJlc2VudChwNGQpCShwNGRf
dmFsKHA0ZCkgIT0gMCkKKyNkZWZpbmUgcDRkX3BhZ2VfdmFkZHIocDRkKQkocDRkX3ZhbChwNGQp
ICYgflA0RF9NQVNLRURfQklUUykKIAogI2lmbmRlZiBfX0FTU0VNQkxZX18KIAotc3RhdGljIGlu
bGluZSB2b2lkIHBnZF9jbGVhcihwZ2RfdCAqcGdkcCkKK3N0YXRpYyBpbmxpbmUgdm9pZCBwNGRf
Y2xlYXIocDRkX3QgKnA0ZHApCiB7Ci0JKnBnZHAgPSBfX3BnZCgwKTsKKwkqcDRkcCA9IF9fcDRk
KDApOwogfQogCi1zdGF0aWMgaW5saW5lIHB0ZV90IHBnZF9wdGUocGdkX3QgcGdkKQorc3RhdGlj
IGlubGluZSBwdGVfdCBwNGRfcHRlKHA0ZF90IHA0ZCkKIHsKLQlyZXR1cm4gX19wdGUocGdkX3Zh
bChwZ2QpKTsKKwlyZXR1cm4gX19wdGUocDRkX3ZhbChwNGQpKTsKIH0KIAotc3RhdGljIGlubGlu
ZSBwZ2RfdCBwdGVfcGdkKHB0ZV90IHB0ZSkKK3N0YXRpYyBpbmxpbmUgcDRkX3QgcHRlX3A0ZChw
dGVfdCBwdGUpCiB7Ci0JcmV0dXJuIF9fcGdkKHB0ZV92YWwocHRlKSk7CisJcmV0dXJuIF9fcDRk
KHB0ZV92YWwocHRlKSk7CiB9Ci1leHRlcm4gc3RydWN0IHBhZ2UgKnBnZF9wYWdlKHBnZF90IHBn
ZCk7CitleHRlcm4gc3RydWN0IHBhZ2UgKnA0ZF9wYWdlKHA0ZF90IHA0ZCk7CiAKICNlbmRpZiAv
KiAhX19BU1NFTUJMWV9fICovCiAKLSNkZWZpbmUgcHVkX29mZnNldChwZ2RwLCBhZGRyKQlcCi0g
ICgoKHB1ZF90ICopIHBnZF9wYWdlX3ZhZGRyKCoocGdkcCkpKSArIFwKKyNkZWZpbmUgcHVkX29m
ZnNldChwNGRwLCBhZGRyKQlcCisgICgoKHB1ZF90ICopIHA0ZF9wYWdlX3ZhZGRyKCoocDRkcCkp
KSArIFwKICAgICAoKChhZGRyKSA+PiBQVURfU0hJRlQpICYgKFBUUlNfUEVSX1BVRCAtIDEpKSkK
IAogI2RlZmluZSBwdWRfRVJST1IoZSkgXApkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2luY2x1
ZGUvYXNtL25vaGFzaC82NC9wZ3RhYmxlLmggYi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vbm9o
YXNoLzY0L3BndGFibGUuaAppbmRleCA5YTMzYjhiZDg0MmQuLmIzNjBmMjYyYjljNiAxMDA2NDQK
LS0tIGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC82NC9wZ3RhYmxlLmgKKysrIGIv
YXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC82NC9wZ3RhYmxlLmgKQEAgLTE3NSwxMSAr
MTc1LDExIEBAIHN0YXRpYyBpbmxpbmUgcHVkX3QgcHRlX3B1ZChwdGVfdCBwdGUpCiAJcmV0dXJu
IF9fcHVkKHB0ZV92YWwocHRlKSk7CiB9CiAjZGVmaW5lIHB1ZF93cml0ZShwdWQpCQlwdGVfd3Jp
dGUocHVkX3B0ZShwdWQpKQotI2RlZmluZSBwZ2Rfd3JpdGUocGdkKQkJcHRlX3dyaXRlKHBnZF9w
dGUocGdkKSkKKyNkZWZpbmUgcDRkX3dyaXRlKHBnZCkJCXB0ZV93cml0ZShwNGRfcHRlKHA0ZCkp
CiAKLXN0YXRpYyBpbmxpbmUgdm9pZCBwZ2Rfc2V0KHBnZF90ICpwZ2RwLCB1bnNpZ25lZCBsb25n
IHZhbCkKK3N0YXRpYyBpbmxpbmUgdm9pZCBwNGRfc2V0KHA0ZF90ICpwNGRwLCB1bnNpZ25lZCBs
b25nIHZhbCkKIHsKLQkqcGdkcCA9IF9fcGdkKHZhbCk7CisJKnA0ZHAgPSBfX3A0ZCh2YWwpOwog
fQogCiAvKgpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL3BndGFibGUuaCBi
L2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKaW5kZXggYjFmMWQ1MzM5NzM1Li5i
YWQ5YjMyNDU1OWQgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9wZ3RhYmxl
LmgKKysrIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL3BndGFibGUuaApAQCAtNDQsMTIgKzQ0
LDEyIEBAIHN0cnVjdCBtbV9zdHJ1Y3Q7CiAjaWZkZWYgQ09ORklHX1BQQzMyCiBzdGF0aWMgaW5s
aW5lIHBtZF90ICpwbWRfcHRyKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIHZh
KQogewotCXJldHVybiBwbWRfb2Zmc2V0KHB1ZF9vZmZzZXQocGdkX29mZnNldChtbSwgdmEpLCB2
YSksIHZhKTsKKwlyZXR1cm4gcG1kX29mZnNldChwdWRfb2Zmc2V0KHA0ZF9vZmZzZXQocGdkX29m
ZnNldChtbSwgdmEpLCB2YSksIHZhKSwgdmEpOwogfQogCiBzdGF0aWMgaW5saW5lIHBtZF90ICpw
bWRfcHRyX2sodW5zaWduZWQgbG9uZyB2YSkKIHsKLQlyZXR1cm4gcG1kX29mZnNldChwdWRfb2Zm
c2V0KHBnZF9vZmZzZXRfayh2YSksIHZhKSwgdmEpOworCXJldHVybiBwbWRfb2Zmc2V0KHB1ZF9v
ZmZzZXQocDRkX29mZnNldChwZ2Rfb2Zmc2V0X2sodmEpLCB2YSksIHZhKSwgdmEpOwogfQogCiBz
dGF0aWMgaW5saW5lIHB0ZV90ICp2aXJ0X3RvX2twdGUodW5zaWduZWQgbG9uZyB2YWRkcikKQEAg
LTE1OCw5ICsxNTgsOSBAQCBzdGF0aWMgaW5saW5lIGJvb2wgcHVkX2lzX2xlYWYocHVkX3QgcHVk
KQogfQogI2VuZGlmCiAKLSNpZm5kZWYgcGdkX2lzX2xlYWYKLSNkZWZpbmUgcGdkX2lzX2xlYWYg
cGdkX2lzX2xlYWYKLXN0YXRpYyBpbmxpbmUgYm9vbCBwZ2RfaXNfbGVhZihwZ2RfdCBwZ2QpCisj
aWZuZGVmIHA0ZF9pc19sZWFmCisjZGVmaW5lIHA0ZF9pc19sZWFmIHA0ZF9pc19sZWFmCitzdGF0
aWMgaW5saW5lIGJvb2wgcDRkX2lzX2xlYWYocDRkX3QgcDRkKQogewogCXJldHVybiBmYWxzZTsK
IH0KZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9rdm0vYm9vazNzXzY0X21tdV9yYWRpeC5jIGIv
YXJjaC9wb3dlcnBjL2t2bS9ib29rM3NfNjRfbW11X3JhZGl4LmMKaW5kZXggOWYwNTAwNjRkMmEy
Li40NTRjZjBkZDFiNWUgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9rdm0vYm9vazNzXzY0X21t
dV9yYWRpeC5jCisrKyBiL2FyY2gvcG93ZXJwYy9rdm0vYm9vazNzXzY0X21tdV9yYWRpeC5jCkBA
IC00OTksMTMgKzQ5OSwxNCBAQCB2b2lkIGt2bXBwY19mcmVlX3BndGFibGVfcmFkaXgoc3RydWN0
IGt2bSAqa3ZtLCBwZ2RfdCAqcGdkLCB1bnNpZ25lZCBpbnQgbHBpZCkKIAl1bnNpZ25lZCBsb25n
IGlnOwogCiAJZm9yIChpZyA9IDA7IGlnIDwgUFRSU19QRVJfUEdEOyArK2lnLCArK3BnZCkgewor
CQlwNGRfdCAqcDRkID0gcDRkX29mZnNldChwZ2QsIDApOwogCQlwdWRfdCAqcHVkOwogCi0JCWlm
ICghcGdkX3ByZXNlbnQoKnBnZCkpCisJCWlmICghcDRkX3ByZXNlbnQoKnA0ZCkpCiAJCQljb250
aW51ZTsKLQkJcHVkID0gcHVkX29mZnNldChwZ2QsIDApOworCQlwdWQgPSBwdWRfb2Zmc2V0KHA0
ZCwgMCk7CiAJCWt2bXBwY191bm1hcF9mcmVlX3B1ZChrdm0sIHB1ZCwgbHBpZCk7Ci0JCXBnZF9j
bGVhcihwZ2QpOworCQlwNGRfY2xlYXIocDRkKTsKIAl9CiB9CiAKQEAgLTU2Niw2ICs1NjcsNyBA
QCBpbnQga3ZtcHBjX2NyZWF0ZV9wdGUoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGd0YWJsZSwg
cHRlX3QgcHRlLAogCQkgICAgICB1bnNpZ25lZCBsb25nICpybWFwcCwgc3RydWN0IHJtYXBfbmVz
dGVkICoqbl9ybWFwKQogewogCXBnZF90ICpwZ2Q7CisJcDRkX3QgKnA0ZDsKIAlwdWRfdCAqcHVk
LCAqbmV3X3B1ZCA9IE5VTEw7CiAJcG1kX3QgKnBtZCwgKm5ld19wbWQgPSBOVUxMOwogCXB0ZV90
ICpwdGVwLCAqbmV3X3B0ZXAgPSBOVUxMOwpAQCAtNTczLDkgKzU3NSwxMSBAQCBpbnQga3ZtcHBj
X2NyZWF0ZV9wdGUoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGd0YWJsZSwgcHRlX3QgcHRlLAog
CiAJLyogVHJhdmVyc2UgdGhlIGd1ZXN0J3MgMm5kLWxldmVsIHRyZWUsIGFsbG9jYXRlIG5ldyBs
ZXZlbHMgbmVlZGVkICovCiAJcGdkID0gcGd0YWJsZSArIHBnZF9pbmRleChncGEpOworCXA0ZCA9
IHA0ZF9vZmZzZXQocGdkLCBncGEpOworCiAJcHVkID0gTlVMTDsKLQlpZiAocGdkX3ByZXNlbnQo
KnBnZCkpCi0JCXB1ZCA9IHB1ZF9vZmZzZXQocGdkLCBncGEpOworCWlmIChwNGRfcHJlc2VudCgq
cDRkKSkKKwkJcHVkID0gcHVkX29mZnNldChwNGQsIGdwYSk7CiAJZWxzZQogCQluZXdfcHVkID0g
cHVkX2FsbG9jX29uZShrdm0tPm1tLCBncGEpOwogCkBAIC01OTYsMTMgKzYwMCwxMyBAQCBpbnQg
a3ZtcHBjX2NyZWF0ZV9wdGUoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGd0YWJsZSwgcHRlX3Qg
cHRlLAogCiAJLyogTm93IHRyYXZlcnNlIGFnYWluIHVuZGVyIHRoZSBsb2NrIGFuZCBjaGFuZ2Ug
dGhlIHRyZWUgKi8KIAlyZXQgPSAtRU5PTUVNOwotCWlmIChwZ2Rfbm9uZSgqcGdkKSkgeworCWlm
IChwNGRfbm9uZSgqcDRkKSkgewogCQlpZiAoIW5ld19wdWQpCiAJCQlnb3RvIG91dF91bmxvY2s7
Ci0JCXBnZF9wb3B1bGF0ZShrdm0tPm1tLCBwZ2QsIG5ld19wdWQpOworCQlwNGRfcG9wdWxhdGUo
a3ZtLT5tbSwgcDRkLCBuZXdfcHVkKTsKIAkJbmV3X3B1ZCA9IE5VTEw7CiAJfQotCXB1ZCA9IHB1
ZF9vZmZzZXQocGdkLCBncGEpOworCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBncGEpOwogCWlmIChw
dWRfaXNfbGVhZigqcHVkKSkgewogCQl1bnNpZ25lZCBsb25nIGhncGEgPSBncGEgJiBQVURfTUFT
SzsKIApAQCAtMTIxOSw3ICsxMjIzLDggQEAgc3RhdGljIHNzaXplX3QgZGVidWdmc19yYWRpeF9y
ZWFkKHN0cnVjdCBmaWxlICpmaWxlLCBjaGFyIF9fdXNlciAqYnVmLAogCXVuc2lnbmVkIGxvbmcg
Z3BhOwogCXBnZF90ICpwZ3Q7CiAJc3RydWN0IGt2bV9uZXN0ZWRfZ3Vlc3QgKm5lc3RlZDsKLQlw
Z2RfdCBwZ2QsICpwZ2RwOworCXBnZF90ICpwZ2RwOworCXA0ZF90IHA0ZCwgKnA0ZHA7CiAJcHVk
X3QgcHVkLCAqcHVkcDsKIAlwbWRfdCBwbWQsICpwbWRwOwogCXB0ZV90ICpwdGVwOwpAQCAtMTI5
MiwxMyArMTI5NywxNCBAQCBzdGF0aWMgc3NpemVfdCBkZWJ1Z2ZzX3JhZGl4X3JlYWQoc3RydWN0
IGZpbGUgKmZpbGUsIGNoYXIgX191c2VyICpidWYsCiAJCX0KIAogCQlwZ2RwID0gcGd0ICsgcGdk
X2luZGV4KGdwYSk7Ci0JCXBnZCA9IFJFQURfT05DRSgqcGdkcCk7Ci0JCWlmICghKHBnZF92YWwo
cGdkKSAmIF9QQUdFX1BSRVNFTlQpKSB7Ci0JCQlncGEgPSAoZ3BhICYgUEdESVJfTUFTSykgKyBQ
R0RJUl9TSVpFOworCQlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBncGEpOworCQlwNGQgPSBSRUFE
X09OQ0UoKnA0ZHApOworCQlpZiAoIShwNGRfdmFsKHA0ZCkgJiBfUEFHRV9QUkVTRU5UKSkgewor
CQkJZ3BhID0gKGdwYSAmIFA0RF9NQVNLKSArIFA0RF9TSVpFOwogCQkJY29udGludWU7CiAJCX0K
IAotCQlwdWRwID0gcHVkX29mZnNldCgmcGdkLCBncGEpOworCQlwdWRwID0gcHVkX29mZnNldCgm
cDRkLCBncGEpOwogCQlwdWQgPSBSRUFEX09OQ0UoKnB1ZHApOwogCQlpZiAoIShwdWRfdmFsKHB1
ZCkgJiBfUEFHRV9QUkVTRU5UKSkgewogCQkJZ3BhID0gKGdwYSAmIFBVRF9NQVNLKSArIFBVRF9T
SVpFOwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2xpYi9jb2RlLXBhdGNoaW5nLmMgYi9hcmNo
L3Bvd2VycGMvbGliL2NvZGUtcGF0Y2hpbmcuYwppbmRleCAzMzQ1ZjAzOWE4NzYuLjdhNTlmNjg2
M2NlYyAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2xpYi9jb2RlLXBhdGNoaW5nLmMKKysrIGIv
YXJjaC9wb3dlcnBjL2xpYi9jb2RlLXBhdGNoaW5nLmMKQEAgLTEwNywxMyArMTA3LDE4IEBAIHN0
YXRpYyBpbmxpbmUgaW50IHVubWFwX3BhdGNoX2FyZWEodW5zaWduZWQgbG9uZyBhZGRyKQogCXB0
ZV90ICpwdGVwOwogCXBtZF90ICpwbWRwOwogCXB1ZF90ICpwdWRwOworCXA0ZF90ICpwNGRwOwog
CXBnZF90ICpwZ2RwOwogCiAJcGdkcCA9IHBnZF9vZmZzZXRfayhhZGRyKTsKIAlpZiAodW5saWtl
bHkoIXBnZHApKQogCQlyZXR1cm4gLUVJTlZBTDsKIAotCXB1ZHAgPSBwdWRfb2Zmc2V0KHBnZHAs
IGFkZHIpOworCXA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGFkZHIpOworCWlmICh1bmxpa2VseSgh
cDRkcCkpCisJCXJldHVybiAtRUlOVkFMOworCisJcHVkcCA9IHB1ZF9vZmZzZXQocDRkcCwgYWRk
cik7CiAJaWYgKHVubGlrZWx5KCFwdWRwKSkKIAkJcmV0dXJuIC1FSU5WQUw7CiAKZGlmZiAtLWdp
dCBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9oYXNoX3BndGFibGUuYyBiL2FyY2gvcG93ZXJw
Yy9tbS9ib29rM3M2NC9oYXNoX3BndGFibGUuYwppbmRleCA2NDczM2I5Y2IyMGEuLjljZDE1OTM3
ZTg4YSAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL21tL2Jvb2szczY0L2hhc2hfcGd0YWJsZS5j
CisrKyBiL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9oYXNoX3BndGFibGUuYwpAQCAtMTQ4LDYg
KzE0OCw3IEBAIHZvaWQgaGFzaF9fdm1lbW1hcF9yZW1vdmVfbWFwcGluZyh1bnNpZ25lZCBsb25n
IHN0YXJ0LAogaW50IGhhc2hfX21hcF9rZXJuZWxfcGFnZSh1bnNpZ25lZCBsb25nIGVhLCB1bnNp
Z25lZCBsb25nIHBhLCBwZ3Byb3RfdCBwcm90KQogewogCXBnZF90ICpwZ2RwOworCXA0ZF90ICpw
NGRwOwogCXB1ZF90ICpwdWRwOwogCXBtZF90ICpwbWRwOwogCXB0ZV90ICpwdGVwOwpAQCAtMTU1
LDcgKzE1Niw4IEBAIGludCBoYXNoX19tYXBfa2VybmVsX3BhZ2UodW5zaWduZWQgbG9uZyBlYSwg
dW5zaWduZWQgbG9uZyBwYSwgcGdwcm90X3QgcHJvdCkKIAlCVUlMRF9CVUdfT04oVEFTS19TSVpF
X1VTRVI2NCA+IEhfUEdUQUJMRV9SQU5HRSk7CiAJaWYgKHNsYWJfaXNfYXZhaWxhYmxlKCkpIHsK
IAkJcGdkcCA9IHBnZF9vZmZzZXRfayhlYSk7Ci0JCXB1ZHAgPSBwdWRfYWxsb2MoJmluaXRfbW0s
IHBnZHAsIGVhKTsKKwkJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgZWEpOworCQlwdWRwID0gcHVk
X2FsbG9jKCZpbml0X21tLCBwNGRwLCBlYSk7CiAJCWlmICghcHVkcCkKIAkJCXJldHVybiAtRU5P
TUVNOwogCQlwbWRwID0gcG1kX2FsbG9jKCZpbml0X21tLCBwdWRwLCBlYSk7CmRpZmYgLS1naXQg
YS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhfcGd0YWJsZS5jIGIvYXJjaC9wb3dlcnBj
L21tL2Jvb2szczY0L3JhZGl4X3BndGFibGUuYwppbmRleCA4ZjllZGYwNzA2M2EuLjk3ODkxY2Ew
ZDQyOCAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL21tL2Jvb2szczY0L3JhZGl4X3BndGFibGUu
YworKysgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhfcGd0YWJsZS5jCkBAIC02NSwx
NyArNjUsMTkgQEAgc3RhdGljIGludCBlYXJseV9tYXBfa2VybmVsX3BhZ2UodW5zaWduZWQgbG9u
ZyBlYSwgdW5zaWduZWQgbG9uZyBwYSwKIHsKIAl1bnNpZ25lZCBsb25nIHBmbiA9IHBhID4+IFBB
R0VfU0hJRlQ7CiAJcGdkX3QgKnBnZHA7CisJcDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1ZHA7CiAJ
cG1kX3QgKnBtZHA7CiAJcHRlX3QgKnB0ZXA7CiAKIAlwZ2RwID0gcGdkX29mZnNldF9rKGVhKTsK
LQlpZiAocGdkX25vbmUoKnBnZHApKSB7CisJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgZWEpOwor
CWlmIChwNGRfbm9uZSgqcDRkcCkpIHsKIAkJcHVkcCA9IGVhcmx5X2FsbG9jX3BndGFibGUoUFVE
X1RBQkxFX1NJWkUsIG5pZCwKIAkJCQkJCXJlZ2lvbl9zdGFydCwgcmVnaW9uX2VuZCk7Ci0JCXBn
ZF9wb3B1bGF0ZSgmaW5pdF9tbSwgcGdkcCwgcHVkcCk7CisJCXA0ZF9wb3B1bGF0ZSgmaW5pdF9t
bSwgcDRkcCwgcHVkcCk7CiAJfQotCXB1ZHAgPSBwdWRfb2Zmc2V0KHBnZHAsIGVhKTsKKwlwdWRw
ID0gcHVkX29mZnNldChwNGRwLCBlYSk7CiAJaWYgKG1hcF9wYWdlX3NpemUgPT0gUFVEX1NJWkUp
IHsKIAkJcHRlcCA9IChwdGVfdCAqKXB1ZHA7CiAJCWdvdG8gc2V0X3RoZV9wdGU7CkBAIC0xMTUs
NiArMTE3LDcgQEAgc3RhdGljIGludCBfX21hcF9rZXJuZWxfcGFnZSh1bnNpZ25lZCBsb25nIGVh
LCB1bnNpZ25lZCBsb25nIHBhLAogewogCXVuc2lnbmVkIGxvbmcgcGZuID0gcGEgPj4gUEFHRV9T
SElGVDsKIAlwZ2RfdCAqcGdkcDsKKwlwNGRfdCAqcDRkcDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRf
dCAqcG1kcDsKIAlwdGVfdCAqcHRlcDsKQEAgLTEzNyw3ICsxNDAsOCBAQCBzdGF0aWMgaW50IF9f
bWFwX2tlcm5lbF9wYWdlKHVuc2lnbmVkIGxvbmcgZWEsIHVuc2lnbmVkIGxvbmcgcGEsCiAJICog
Ym9vdC4KIAkgKi8KIAlwZ2RwID0gcGdkX29mZnNldF9rKGVhKTsKLQlwdWRwID0gcHVkX2FsbG9j
KCZpbml0X21tLCBwZ2RwLCBlYSk7CisJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgZWEpOworCXB1
ZHAgPSBwdWRfYWxsb2MoJmluaXRfbW0sIHA0ZHAsIGVhKTsKIAlpZiAoIXB1ZHApCiAJCXJldHVy
biAtRU5PTUVNOwogCWlmIChtYXBfcGFnZV9zaXplID09IFBVRF9TSVpFKSB7CkBAIC0xNzQsNiAr
MTc4LDcgQEAgdm9pZCByYWRpeF9fY2hhbmdlX21lbW9yeV9yYW5nZSh1bnNpZ25lZCBsb25nIHN0
YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCwKIHsKIAl1bnNpZ25lZCBsb25nIGlkeDsKIAlwZ2RfdCAq
cGdkcDsKKwlwNGRfdCAqcDRkcDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAlwdGVf
dCAqcHRlcDsKQEAgLTE4Niw3ICsxOTEsOCBAQCB2b2lkIHJhZGl4X19jaGFuZ2VfbWVtb3J5X3Jh
bmdlKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgZW5kLAogCiAJZm9yIChpZHgg
PSBzdGFydDsgaWR4IDwgZW5kOyBpZHggKz0gUEFHRV9TSVpFKSB7CiAJCXBnZHAgPSBwZ2Rfb2Zm
c2V0X2soaWR4KTsKLQkJcHVkcCA9IHB1ZF9hbGxvYygmaW5pdF9tbSwgcGdkcCwgaWR4KTsKKwkJ
cDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgaWR4KTsKKwkJcHVkcCA9IHB1ZF9hbGxvYygmaW5pdF9t
bSwgcDRkcCwgaWR4KTsKIAkJaWYgKCFwdWRwKQogCQkJY29udGludWU7CiAJCWlmIChwdWRfaXNf
bGVhZigqcHVkcCkpIHsKQEAgLTg1MCw2ICs4NTYsNyBAQCBzdGF0aWMgdm9pZCBfX21lbWluaXQg
cmVtb3ZlX3BhZ2V0YWJsZSh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCkK
IAl1bnNpZ25lZCBsb25nIGFkZHIsIG5leHQ7CiAJcHVkX3QgKnB1ZF9iYXNlOwogCXBnZF90ICpw
Z2Q7CisJcDRkX3QgKnA0ZDsKIAogCXNwaW5fbG9jaygmaW5pdF9tbS5wYWdlX3RhYmxlX2xvY2sp
OwogCkBAIC04NTcsMTUgKzg2NCwxNiBAQCBzdGF0aWMgdm9pZCBfX21lbWluaXQgcmVtb3ZlX3Bh
Z2V0YWJsZSh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCkKIAkJbmV4dCA9
IHBnZF9hZGRyX2VuZChhZGRyLCBlbmQpOwogCiAJCXBnZCA9IHBnZF9vZmZzZXRfayhhZGRyKTsK
LQkJaWYgKCFwZ2RfcHJlc2VudCgqcGdkKSkKKwkJcDRkID0gcDRkX29mZnNldChwZ2QsIGFkZHIp
OworCQlpZiAoIXA0ZF9wcmVzZW50KCpwNGQpKQogCQkJY29udGludWU7CiAKLQkJaWYgKHBnZF9p
c19sZWFmKCpwZ2QpKSB7Ci0JCQlzcGxpdF9rZXJuZWxfbWFwcGluZyhhZGRyLCBlbmQsIFBHRElS
X1NJWkUsIChwdGVfdCAqKXBnZCk7CisJCWlmIChwNGRfaXNfbGVhZigqcDRkKSkgeworCQkJc3Bs
aXRfa2VybmVsX21hcHBpbmcoYWRkciwgZW5kLCBQNERfU0laRSwgKHB0ZV90ICopcDRkKTsKIAkJ
CWNvbnRpbnVlOwogCQl9CiAKLQkJcHVkX2Jhc2UgPSAocHVkX3QgKilwZ2RfcGFnZV92YWRkcigq
cGdkKTsKKwkJcHVkX2Jhc2UgPSAocHVkX3QgKilwNGRfcGFnZV92YWRkcigqcDRkKTsKIAkJcmVt
b3ZlX3B1ZF90YWJsZShwdWRfYmFzZSwgYWRkciwgbmV4dCk7CiAJfQogCmRpZmYgLS1naXQgYS9h
cmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvc3VicGFnZV9wcm90LmMgYi9hcmNoL3Bvd2VycGMvbW0v
Ym9vazNzNjQvc3VicGFnZV9wcm90LmMKaW5kZXggMmVmMjRhNTNmNGM5Li4yNWEwYzA0NGJkOTMg
MTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9tbS9ib29rM3M2NC9zdWJwYWdlX3Byb3QuYworKysg
Yi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvc3VicGFnZV9wcm90LmMKQEAgLTU0LDE1ICs1NCwx
NyBAQCBzdGF0aWMgdm9pZCBocHRlX2ZsdXNoX3JhbmdlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1
bnNpZ25lZCBsb25nIGFkZHIsCiAJCQkgICAgIGludCBucGFnZXMpCiB7CiAJcGdkX3QgKnBnZDsK
KwlwNGRfdCAqcDRkOwogCXB1ZF90ICpwdWQ7CiAJcG1kX3QgKnBtZDsKIAlwdGVfdCAqcHRlOwog
CXNwaW5sb2NrX3QgKnB0bDsKIAogCXBnZCA9IHBnZF9vZmZzZXQobW0sIGFkZHIpOwotCWlmIChw
Z2Rfbm9uZSgqcGdkKSkKKwlwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcik7CisJaWYgKHA0ZF9u
b25lKCpwNGQpKQogCQlyZXR1cm47Ci0JcHVkID0gcHVkX29mZnNldChwZ2QsIGFkZHIpOworCXB1
ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyKTsKIAlpZiAocHVkX25vbmUoKnB1ZCkpCiAJCXJldHVy
bjsKIAlwbWQgPSBwbWRfb2Zmc2V0KHB1ZCwgYWRkcik7CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2Vy
cGMvbW0vaHVnZXRsYnBhZ2UuYyBiL2FyY2gvcG93ZXJwYy9tbS9odWdldGxicGFnZS5jCmluZGV4
IDMzYjM0NjFkOTFlOC4uNTRmNTk5NGQ0Y2JiIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0v
aHVnZXRsYnBhZ2UuYworKysgYi9hcmNoL3Bvd2VycGMvbW0vaHVnZXRsYnBhZ2UuYwpAQCAtMTE5
LDYgKzExOSw3IEBAIHN0YXRpYyBpbnQgX19odWdlcHRlX2FsbG9jKHN0cnVjdCBtbV9zdHJ1Y3Qg
Km1tLCBodWdlcGRfdCAqaHBkcCwKIHB0ZV90ICpodWdlX3B0ZV9hbGxvYyhzdHJ1Y3QgbW1fc3Ry
dWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIHN6KQogewogCXBnZF90
ICpwZzsKKwlwNGRfdCAqcDQ7CiAJcHVkX3QgKnB1OwogCXBtZF90ICpwbTsKIAlodWdlcGRfdCAq
aHBkcCA9IE5VTEw7CkBAIC0xMjgsMjAgKzEyOSwyMSBAQCBwdGVfdCAqaHVnZV9wdGVfYWxsb2Mo
c3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBz
egogCiAJYWRkciAmPSB+KHN6LTEpOwogCXBnID0gcGdkX29mZnNldChtbSwgYWRkcik7CisJcDQg
PSBwNGRfb2Zmc2V0KHBnLCBhZGRyKTsKIAogI2lmZGVmIENPTkZJR19QUENfQk9PSzNTXzY0CiAJ
aWYgKHBzaGlmdCA9PSBQR0RJUl9TSElGVCkKIAkJLyogMTZHQiBodWdlIHBhZ2UgKi8KLQkJcmV0
dXJuIChwdGVfdCAqKSBwZzsKKwkJcmV0dXJuIChwdGVfdCAqKSBwNDsKIAllbHNlIGlmIChwc2hp
ZnQgPiBQVURfU0hJRlQpIHsKIAkJLyoKIAkJICogV2UgbmVlZCB0byB1c2UgaHVnZXBkIHRhYmxl
CiAJCSAqLwogCQlwdGwgPSAmbW0tPnBhZ2VfdGFibGVfbG9jazsKLQkJaHBkcCA9IChodWdlcGRf
dCAqKXBnOworCQlocGRwID0gKGh1Z2VwZF90ICopcDQ7CiAJfSBlbHNlIHsKIAkJcGRzaGlmdCA9
IFBVRF9TSElGVDsKLQkJcHUgPSBwdWRfYWxsb2MobW0sIHBnLCBhZGRyKTsKKwkJcHUgPSBwdWRf
YWxsb2MobW0sIHA0LCBhZGRyKTsKIAkJaWYgKCFwdSkKIAkJCXJldHVybiBOVUxMOwogCQlpZiAo
cHNoaWZ0ID09IFBVRF9TSElGVCkKQEAgLTE2NiwxMCArMTY4LDEwIEBAIHB0ZV90ICpodWdlX3B0
ZV9hbGxvYyhzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25l
ZCBsb25nIHN6CiAjZWxzZQogCWlmIChwc2hpZnQgPj0gUEdESVJfU0hJRlQpIHsKIAkJcHRsID0g
Jm1tLT5wYWdlX3RhYmxlX2xvY2s7Ci0JCWhwZHAgPSAoaHVnZXBkX3QgKilwZzsKKwkJaHBkcCA9
IChodWdlcGRfdCAqKXA0OwogCX0gZWxzZSB7CiAJCXBkc2hpZnQgPSBQVURfU0hJRlQ7Ci0JCXB1
ID0gcHVkX2FsbG9jKG1tLCBwZywgYWRkcik7CisJCXB1ID0gcHVkX2FsbG9jKG1tLCBwNCwgYWRk
cik7CiAJCWlmICghcHUpCiAJCQlyZXR1cm4gTlVMTDsKIAkJaWYgKHBzaGlmdCA+PSBQVURfU0hJ
RlQpIHsKQEAgLTM5MCw3ICszOTIsNyBAQCBzdGF0aWMgdm9pZCBodWdldGxiX2ZyZWVfcG1kX3Jh
bmdlKHN0cnVjdCBtbXVfZ2F0aGVyICp0bGIsIHB1ZF90ICpwdWQsCiAJbW1fZGVjX25yX3BtZHMo
dGxiLT5tbSk7CiB9CiAKLXN0YXRpYyB2b2lkIGh1Z2V0bGJfZnJlZV9wdWRfcmFuZ2Uoc3RydWN0
IG1tdV9nYXRoZXIgKnRsYiwgcGdkX3QgKnBnZCwKK3N0YXRpYyB2b2lkIGh1Z2V0bGJfZnJlZV9w
dWRfcmFuZ2Uoc3RydWN0IG1tdV9nYXRoZXIgKnRsYiwgcDRkX3QgKnA0ZCwKIAkJCQkgICB1bnNp
Z25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgZW5kLAogCQkJCSAgIHVuc2lnbmVkIGxvbmcg
Zmxvb3IsIHVuc2lnbmVkIGxvbmcgY2VpbGluZykKIHsKQEAgLTQwMCw3ICs0MDIsNyBAQCBzdGF0
aWMgdm9pZCBodWdldGxiX2ZyZWVfcHVkX3JhbmdlKHN0cnVjdCBtbXVfZ2F0aGVyICp0bGIsIHBn
ZF90ICpwZ2QsCiAKIAlzdGFydCA9IGFkZHI7CiAJZG8gewotCQlwdWQgPSBwdWRfb2Zmc2V0KHBn
ZCwgYWRkcik7CisJCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyKTsKIAkJbmV4dCA9IHB1ZF9h
ZGRyX2VuZChhZGRyLCBlbmQpOwogCQlpZiAoIWlzX2h1Z2VwZChfX2h1Z2VwZChwdWRfdmFsKCpw
dWQpKSkpIHsKIAkJCWlmIChwdWRfbm9uZV9vcl9jbGVhcl9iYWQocHVkKSkKQEAgLTQzNSw4ICs0
MzcsOCBAQCBzdGF0aWMgdm9pZCBodWdldGxiX2ZyZWVfcHVkX3JhbmdlKHN0cnVjdCBtbXVfZ2F0
aGVyICp0bGIsIHBnZF90ICpwZ2QsCiAJaWYgKGVuZCAtIDEgPiBjZWlsaW5nIC0gMSkKIAkJcmV0
dXJuOwogCi0JcHVkID0gcHVkX29mZnNldChwZ2QsIHN0YXJ0KTsKLQlwZ2RfY2xlYXIocGdkKTsK
KwlwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgc3RhcnQpOworCXA0ZF9jbGVhcihwNGQpOwogCXB1ZF9m
cmVlX3RsYih0bGIsIHB1ZCwgc3RhcnQpOwogCW1tX2RlY19ucl9wdWRzKHRsYi0+bW0pOwogfQpA
QCAtNDQ5LDYgKzQ1MSw3IEBAIHZvaWQgaHVnZXRsYl9mcmVlX3BnZF9yYW5nZShzdHJ1Y3QgbW11
X2dhdGhlciAqdGxiLAogCQkJICAgIHVuc2lnbmVkIGxvbmcgZmxvb3IsIHVuc2lnbmVkIGxvbmcg
Y2VpbGluZykKIHsKIAlwZ2RfdCAqcGdkOworCXA0ZF90ICpwNGQ7CiAJdW5zaWduZWQgbG9uZyBu
ZXh0OwogCiAJLyoKQEAgLTQ3MSwxMCArNDc0LDExIEBAIHZvaWQgaHVnZXRsYl9mcmVlX3BnZF9y
YW5nZShzdHJ1Y3QgbW11X2dhdGhlciAqdGxiLAogCWRvIHsKIAkJbmV4dCA9IHBnZF9hZGRyX2Vu
ZChhZGRyLCBlbmQpOwogCQlwZ2QgPSBwZ2Rfb2Zmc2V0KHRsYi0+bW0sIGFkZHIpOworCQlwNGQg
PSBwNGRfb2Zmc2V0KHBnZCwgYWRkcik7CiAJCWlmICghaXNfaHVnZXBkKF9faHVnZXBkKHBnZF92
YWwoKnBnZCkpKSkgewotCQkJaWYgKHBnZF9ub25lX29yX2NsZWFyX2JhZChwZ2QpKQorCQkJaWYg
KHA0ZF9ub25lX29yX2NsZWFyX2JhZChwNGQpKQogCQkJCWNvbnRpbnVlOwotCQkJaHVnZXRsYl9m
cmVlX3B1ZF9yYW5nZSh0bGIsIHBnZCwgYWRkciwgbmV4dCwgZmxvb3IsIGNlaWxpbmcpOworCQkJ
aHVnZXRsYl9mcmVlX3B1ZF9yYW5nZSh0bGIsIHA0ZCwgYWRkciwgbmV4dCwgZmxvb3IsIGNlaWxp
bmcpOwogCQl9IGVsc2UgewogCQkJdW5zaWduZWQgbG9uZyBtb3JlOwogCQkJLyoKQEAgLTQ4Nyw3
ICs0OTEsNyBAQCB2b2lkIGh1Z2V0bGJfZnJlZV9wZ2RfcmFuZ2Uoc3RydWN0IG1tdV9nYXRoZXIg
KnRsYiwKIAkJCWlmIChtb3JlID4gbmV4dCkKIAkJCQluZXh0ID0gbW9yZTsKIAotCQkJZnJlZV9o
dWdlcGRfcmFuZ2UodGxiLCAoaHVnZXBkX3QgKilwZ2QsIFBHRElSX1NISUZULAorCQkJZnJlZV9o
dWdlcGRfcmFuZ2UodGxiLCAoaHVnZXBkX3QgKilwNGQsIFBHRElSX1NISUZULAogCQkJCQkgIGFk
ZHIsIG5leHQsIGZsb29yLCBjZWlsaW5nKTsKIAkJfQogCX0gd2hpbGUgKGFkZHIgPSBuZXh0LCBh
ZGRyICE9IGVuZCk7CmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vbm9oYXNoL2Jvb2szZV9w
Z3RhYmxlLmMgYi9hcmNoL3Bvd2VycGMvbW0vbm9oYXNoL2Jvb2szZV9wZ3RhYmxlLmMKaW5kZXgg
NDYzN2ZkZDQ2OWNmLi43Nzg4NGUyNDI4MWQgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9tbS9u
b2hhc2gvYm9vazNlX3BndGFibGUuYworKysgYi9hcmNoL3Bvd2VycGMvbW0vbm9oYXNoL2Jvb2sz
ZV9wZ3RhYmxlLmMKQEAgLTczLDYgKzczLDcgQEAgc3RhdGljIHZvaWQgX19pbml0ICplYXJseV9h
bGxvY19wZ3RhYmxlKHVuc2lnbmVkIGxvbmcgc2l6ZSkKIGludCBfX3JlZiBtYXBfa2VybmVsX3Bh
Z2UodW5zaWduZWQgbG9uZyBlYSwgdW5zaWduZWQgbG9uZyBwYSwgcGdwcm90X3QgcHJvdCkKIHsK
IAlwZ2RfdCAqcGdkcDsKKwlwNGRfdCAqcDRkcDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1k
cDsKIAlwdGVfdCAqcHRlcDsKQEAgLTgwLDcgKzgxLDggQEAgaW50IF9fcmVmIG1hcF9rZXJuZWxf
cGFnZSh1bnNpZ25lZCBsb25nIGVhLCB1bnNpZ25lZCBsb25nIHBhLCBwZ3Byb3RfdCBwcm90KQog
CUJVSUxEX0JVR19PTihUQVNLX1NJWkVfVVNFUjY0ID4gUEdUQUJMRV9SQU5HRSk7CiAJaWYgKHNs
YWJfaXNfYXZhaWxhYmxlKCkpIHsKIAkJcGdkcCA9IHBnZF9vZmZzZXRfayhlYSk7Ci0JCXB1ZHAg
PSBwdWRfYWxsb2MoJmluaXRfbW0sIHBnZHAsIGVhKTsKKwkJcDRkcCA9IHA0ZF9vZmZzZXQocGdk
cCwgZWEpOworCQlwdWRwID0gcHVkX2FsbG9jKCZpbml0X21tLCBwNGRwLCBlYSk7CiAJCWlmICgh
cHVkcCkKIAkJCXJldHVybiAtRU5PTUVNOwogCQlwbWRwID0gcG1kX2FsbG9jKCZpbml0X21tLCBw
dWRwLCBlYSk7CkBAIC05MSwxMyArOTMsMTIgQEAgaW50IF9fcmVmIG1hcF9rZXJuZWxfcGFnZSh1
bnNpZ25lZCBsb25nIGVhLCB1bnNpZ25lZCBsb25nIHBhLCBwZ3Byb3RfdCBwcm90KQogCQkJcmV0
dXJuIC1FTk9NRU07CiAJfSBlbHNlIHsKIAkJcGdkcCA9IHBnZF9vZmZzZXRfayhlYSk7Ci0jaWZu
ZGVmIF9fUEFHRVRBQkxFX1BVRF9GT0xERUQKLQkJaWYgKHBnZF9ub25lKCpwZ2RwKSkgewotCQkJ
cHVkcCA9IGVhcmx5X2FsbG9jX3BndGFibGUoUFVEX1RBQkxFX1NJWkUpOwotCQkJcGdkX3BvcHVs
YXRlKCZpbml0X21tLCBwZ2RwLCBwdWRwKTsKKwkJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgZWEp
OworCQlpZiAocDRkX25vbmUoKnA0ZHApKSB7CisJCQlwbWRwID0gZWFybHlfYWxsb2NfcGd0YWJs
ZShQTURfVEFCTEVfU0laRSk7CisJCQlwNGRfcG9wdWxhdGUoJmluaXRfbW0sIHA0ZHAsIHBtZHAp
OwogCQl9Ci0jZW5kaWYgLyogIV9fUEFHRVRBQkxFX1BVRF9GT0xERUQgKi8KLQkJcHVkcCA9IHB1
ZF9vZmZzZXQocGdkcCwgZWEpOworCQlwdWRwID0gcHVkX29mZnNldChwNGRwLCBlYSk7CiAJCWlm
IChwdWRfbm9uZSgqcHVkcCkpIHsKIAkJCXBtZHAgPSBlYXJseV9hbGxvY19wZ3RhYmxlKFBNRF9U
QUJMRV9TSVpFKTsKIAkJCXB1ZF9wb3B1bGF0ZSgmaW5pdF9tbSwgcHVkcCwgcG1kcCk7CmRpZmYg
LS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZS5jIGIvYXJjaC9wb3dlcnBjL21tL3BndGFi
bGUuYwppbmRleCBlMzc1OWI2OWY4MWIuLmMyNDk5MjcxZjZjMSAxMDA2NDQKLS0tIGEvYXJjaC9w
b3dlcnBjL21tL3BndGFibGUuYworKysgYi9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZS5jCkBAIC0y
NjUsNiArMjY1LDcgQEAgaW50IGh1Z2VfcHRlcF9zZXRfYWNjZXNzX2ZsYWdzKHN0cnVjdCB2bV9h
cmVhX3N0cnVjdCAqdm1hLAogdm9pZCBhc3NlcnRfcHRlX2xvY2tlZChzdHJ1Y3QgbW1fc3RydWN0
ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyKQogewogCXBnZF90ICpwZ2Q7CisJcDRkX3QgKnA0ZDsK
IAlwdWRfdCAqcHVkOwogCXBtZF90ICpwbWQ7CiAKQEAgLTI3Miw3ICsyNzMsOSBAQCB2b2lkIGFz
c2VydF9wdGVfbG9ja2VkKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHIp
CiAJCXJldHVybjsKIAlwZ2QgPSBtbS0+cGdkICsgcGdkX2luZGV4KGFkZHIpOwogCUJVR19PTihw
Z2Rfbm9uZSgqcGdkKSk7Ci0JcHVkID0gcHVkX29mZnNldChwZ2QsIGFkZHIpOworCXA0ZCA9IHA0
ZF9vZmZzZXQocGdkLCBhZGRyKTsKKwlCVUdfT04ocDRkX25vbmUoKnA0ZCkpOworCXB1ZCA9IHB1
ZF9vZmZzZXQocDRkLCBhZGRyKTsKIAlCVUdfT04ocHVkX25vbmUoKnB1ZCkpOwogCXBtZCA9IHBt
ZF9vZmZzZXQocHVkLCBhZGRyKTsKIAkvKgpAQCAtMzEyLDEyICszMTUsMTMgQEAgRVhQT1JUX1NZ
TUJPTF9HUEwodm1hbGxvY190b19waHlzKTsKIHB0ZV90ICpfX2ZpbmRfbGludXhfcHRlKHBnZF90
ICpwZ2RpciwgdW5zaWduZWQgbG9uZyBlYSwKIAkJCWJvb2wgKmlzX3RocCwgdW5zaWduZWQgKmhw
YWdlX3NoaWZ0KQogewotCXBnZF90IHBnZCwgKnBnZHA7CisJcGdkX3QgKnBnZHA7CisJcDRkX3Qg
cDRkLCAqcDRkcDsKIAlwdWRfdCBwdWQsICpwdWRwOwogCXBtZF90IHBtZCwgKnBtZHA7CiAJcHRl
X3QgKnJldF9wdGU7CiAJaHVnZXBkX3QgKmhwZHAgPSBOVUxMOwotCXVuc2lnbmVkIHBkc2hpZnQg
PSBQR0RJUl9TSElGVDsKKwl1bnNpZ25lZCBwZHNoaWZ0OwogCiAJaWYgKGhwYWdlX3NoaWZ0KQog
CQkqaHBhZ2Vfc2hpZnQgPSAwOwpAQCAtMzI1LDI0ICszMjksMjggQEAgcHRlX3QgKl9fZmluZF9s
aW51eF9wdGUocGdkX3QgKnBnZGlyLCB1bnNpZ25lZCBsb25nIGVhLAogCWlmIChpc190aHApCiAJ
CSppc190aHAgPSBmYWxzZTsKIAotCXBnZHAgPSBwZ2RpciArIHBnZF9pbmRleChlYSk7Ci0JcGdk
ICA9IFJFQURfT05DRSgqcGdkcCk7CiAJLyoKIAkgKiBBbHdheXMgb3BlcmF0ZSBvbiB0aGUgbG9j
YWwgc3RhY2sgdmFsdWUuIFRoaXMgbWFrZSBzdXJlIHRoZQogCSAqIHZhbHVlIGRvbid0IGdldCB1
cGRhdGVkIGJ5IGEgcGFyYWxsZWwgVEhQIHNwbGl0L2NvbGxhcHNlLAogCSAqIHBhZ2UgZmF1bHQg
b3IgYSBwYWdlIHVubWFwLiBUaGUgcmV0dXJuIHB0ZV90ICogaXMgc3RpbGwgbm90CiAJICogc3Rh
YmxlLiBTbyBzaG91bGQgYmUgY2hlY2tlZCB0aGVyZSBmb3IgYWJvdmUgY29uZGl0aW9ucy4KKwkg
KiBUb3AgbGV2ZWwgaXMgYW4gZXhjZXB0aW9uIGJlY2F1c2UgaXQgaXMgZm9sZGVkIGludG8gcDRk
LgogCSAqLwotCWlmIChwZ2Rfbm9uZShwZ2QpKQorCXBnZHAgPSBwZ2RpciArIHBnZF9pbmRleChl
YSk7CisJcDRkcCA9IHA0ZF9vZmZzZXQocGdkcCwgZWEpOworCXA0ZCAgPSBSRUFEX09OQ0UoKnA0
ZHApOworCXBkc2hpZnQgPSBQNERfU0hJRlQ7CisKKwlpZiAocDRkX25vbmUocDRkKSkKIAkJcmV0
dXJuIE5VTEw7CiAKLQlpZiAocGdkX2lzX2xlYWYocGdkKSkgewotCQlyZXRfcHRlID0gKHB0ZV90
ICopcGdkcDsKKwlpZiAocDRkX2lzX2xlYWYocDRkKSkgeworCQlyZXRfcHRlID0gKHB0ZV90ICop
cDRkcDsKIAkJZ290byBvdXQ7CiAJfQogCi0JaWYgKGlzX2h1Z2VwZChfX2h1Z2VwZChwZ2RfdmFs
KHBnZCkpKSkgewotCQlocGRwID0gKGh1Z2VwZF90ICopJnBnZDsKKwlpZiAoaXNfaHVnZXBkKF9f
aHVnZXBkKHA0ZF92YWwocDRkKSkpKSB7CisJCWhwZHAgPSAoaHVnZXBkX3QgKikmcDRkOwogCQln
b3RvIG91dF9odWdlOwogCX0KIApAQCAtMzUyLDcgKzM2MCw3IEBAIHB0ZV90ICpfX2ZpbmRfbGlu
dXhfcHRlKHBnZF90ICpwZ2RpciwgdW5zaWduZWQgbG9uZyBlYSwKIAkgKiBpcnEgZGlzYWJsZWQK
IAkgKi8KIAlwZHNoaWZ0ID0gUFVEX1NISUZUOwotCXB1ZHAgPSBwdWRfb2Zmc2V0KCZwZ2QsIGVh
KTsKKwlwdWRwID0gcHVkX29mZnNldCgmcDRkLCBlYSk7CiAJcHVkICA9IFJFQURfT05DRSgqcHVk
cCk7CiAKIAlpZiAocHVkX25vbmUocHVkKSkKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9w
Z3RhYmxlXzY0LmMgYi9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZV82NC5jCmluZGV4IGU3ODgzMmRj
ZTdiYi4uMWY4NmE4OGZkNGJiIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZV82
NC5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlXzY0LmMKQEAgLTEwMSwxMyArMTAxLDEz
IEBAIEVYUE9SVF9TWU1CT0woX19wdGVfZnJhZ19zaXplX3NoaWZ0KTsKIAogI2lmbmRlZiBfX1BB
R0VUQUJMRV9QVURfRk9MREVECiAvKiA0IGxldmVsIHBhZ2UgdGFibGUgKi8KLXN0cnVjdCBwYWdl
ICpwZ2RfcGFnZShwZ2RfdCBwZ2QpCitzdHJ1Y3QgcGFnZSAqcDRkX3BhZ2UocDRkX3QgcDRkKQog
ewotCWlmIChwZ2RfaXNfbGVhZihwZ2QpKSB7Ci0JCVZNX1dBUk5fT04oIXBnZF9odWdlKHBnZCkp
OwotCQlyZXR1cm4gcHRlX3BhZ2UocGdkX3B0ZShwZ2QpKTsKKwlpZiAocDRkX2lzX2xlYWYocDRk
KSkgeworCQlWTV9XQVJOX09OKCFwNGRfaHVnZShwNGQpKTsKKwkJcmV0dXJuIHB0ZV9wYWdlKHA0
ZF9wdGUocDRkKSk7CiAJfQotCXJldHVybiB2aXJ0X3RvX3BhZ2UocGdkX3BhZ2VfdmFkZHIocGdk
KSk7CisJcmV0dXJuIHZpcnRfdG9fcGFnZShwNGRfcGFnZV92YWRkcihwNGQpKTsKIH0KICNlbmRp
ZgogCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vcHRkdW1wL2hhc2hwYWdldGFibGUuYyBi
L2FyY2gvcG93ZXJwYy9tbS9wdGR1bXAvaGFzaHBhZ2V0YWJsZS5jCmluZGV4IGI2ZWQ5NTc4Mzgy
Zi4uNmFhZWIxZWIzYjljIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vcHRkdW1wL2hhc2hw
YWdldGFibGUuYworKysgYi9hcmNoL3Bvd2VycGMvbW0vcHRkdW1wL2hhc2hwYWdldGFibGUuYwpA
QCAtNDE3LDkgKzQxNyw5IEBAIHN0YXRpYyB2b2lkIHdhbGtfcG1kKHN0cnVjdCBwZ19zdGF0ZSAq
c3QsIHB1ZF90ICpwdWQsIHVuc2lnbmVkIGxvbmcgc3RhcnQpCiAJfQogfQogCi1zdGF0aWMgdm9p
ZCB3YWxrX3B1ZChzdHJ1Y3QgcGdfc3RhdGUgKnN0LCBwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25n
IHN0YXJ0KQorc3RhdGljIHZvaWQgd2Fsa19wdWQoc3RydWN0IHBnX3N0YXRlICpzdCwgcDRkX3Qg
KnA0ZCwgdW5zaWduZWQgbG9uZyBzdGFydCkKIHsKLQlwdWRfdCAqcHVkID0gcHVkX29mZnNldChw
Z2QsIDApOworCXB1ZF90ICpwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgMCk7CiAJdW5zaWduZWQgbG9u
ZyBhZGRyOwogCXVuc2lnbmVkIGludCBpOwogCkBAIC00MzEsNiArNDMxLDIwIEBAIHN0YXRpYyB2
b2lkIHdhbGtfcHVkKHN0cnVjdCBwZ19zdGF0ZSAqc3QsIHBnZF90ICpwZ2QsIHVuc2lnbmVkIGxv
bmcgc3RhcnQpCiAJfQogfQogCitzdGF0aWMgdm9pZCB3YWxrX3A0ZChzdHJ1Y3QgcGdfc3RhdGUg
KnN0LCBwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIHN0YXJ0KQoreworCXA0ZF90ICpwNGQgPSBw
NGRfb2Zmc2V0KHBnZCwgMCk7CisJdW5zaWduZWQgbG9uZyBhZGRyOworCXVuc2lnbmVkIGludCBp
OworCisJZm9yIChpID0gMDsgaSA8IFBUUlNfUEVSX1A0RDsgaSsrLCBwNGQrKykgeworCQlhZGRy
ID0gc3RhcnQgKyBpICogUDREX1NJWkU7CisJCWlmICghcDRkX25vbmUoKnA0ZCkpCisJCQkvKiBw
NGQgZXhpc3RzICovCisJCQl3YWxrX3B1ZChzdCwgcDRkLCBhZGRyKTsKKwl9Cit9CisKIHN0YXRp
YyB2b2lkIHdhbGtfcGFnZXRhYmxlcyhzdHJ1Y3QgcGdfc3RhdGUgKnN0KQogewogCXBnZF90ICpw
Z2QgPSBwZ2Rfb2Zmc2V0X2soMFVMKTsKQEAgLTQ0NSw3ICs0NTksNyBAQCBzdGF0aWMgdm9pZCB3
YWxrX3BhZ2V0YWJsZXMoc3RydWN0IHBnX3N0YXRlICpzdCkKIAkJYWRkciA9IEtFUk5fVklSVF9T
VEFSVCArIGkgKiBQR0RJUl9TSVpFOwogCQlpZiAoIXBnZF9ub25lKCpwZ2QpKQogCQkJLyogcGdk
IGV4aXN0cyAqLwotCQkJd2Fsa19wdWQoc3QsIHBnZCwgYWRkcik7CisJCQl3YWxrX3A0ZChzdCwg
cGdkLCBhZGRyKTsKIAl9CiB9CiAKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9wdGR1bXAv
cHRkdW1wLmMgYi9hcmNoL3Bvd2VycGMvbW0vcHRkdW1wL3B0ZHVtcC5jCmluZGV4IGQ5MmJiOGVh
MjI5Yy4uNTA3Y2I5NzkzYjI2IDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vcHRkdW1wL3B0
ZHVtcC5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9wdGR1bXAvcHRkdW1wLmMKQEAgLTI3Nyw5ICsy
NzcsOSBAQCBzdGF0aWMgdm9pZCB3YWxrX3BtZChzdHJ1Y3QgcGdfc3RhdGUgKnN0LCBwdWRfdCAq
cHVkLCB1bnNpZ25lZCBsb25nIHN0YXJ0KQogCX0KIH0KIAotc3RhdGljIHZvaWQgd2Fsa19wdWQo
c3RydWN0IHBnX3N0YXRlICpzdCwgcGdkX3QgKnBnZCwgdW5zaWduZWQgbG9uZyBzdGFydCkKK3N0
YXRpYyB2b2lkIHdhbGtfcHVkKHN0cnVjdCBwZ19zdGF0ZSAqc3QsIHA0ZF90ICpwNGQsIHVuc2ln
bmVkIGxvbmcgc3RhcnQpCiB7Ci0JcHVkX3QgKnB1ZCA9IHB1ZF9vZmZzZXQocGdkLCAwKTsKKwlw
dWRfdCAqcHVkID0gcHVkX29mZnNldChwNGQsIDApOwogCXVuc2lnbmVkIGxvbmcgYWRkcjsKIAl1
bnNpZ25lZCBpbnQgaTsKIApAQCAtMzA0LDExICszMDQsMTMgQEAgc3RhdGljIHZvaWQgd2Fsa19w
YWdldGFibGVzKHN0cnVjdCBwZ19zdGF0ZSAqc3QpCiAJICogdGhlIGhhc2ggcGFnZXRhYmxlLgog
CSAqLwogCWZvciAoaSA9IHBnZF9pbmRleChhZGRyKTsgaSA8IFBUUlNfUEVSX1BHRDsgaSsrLCBw
Z2QrKywgYWRkciArPSBQR0RJUl9TSVpFKSB7Ci0JCWlmICghcGdkX25vbmUoKnBnZCkgJiYgIXBn
ZF9pc19sZWFmKCpwZ2QpKQotCQkJLyogcGdkIGV4aXN0cyAqLwotCQkJd2Fsa19wdWQoc3QsIHBn
ZCwgYWRkcik7CisJCXA0ZF90ICpwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgMCk7CisKKwkJaWYgKCFw
NGRfbm9uZSgqcDRkKSAmJiAhcDRkX2lzX2xlYWYoKnA0ZCkpCisJCQkvKiBwNGQgZXhpc3RzICov
CisJCQl3YWxrX3B1ZChzdCwgcDRkLCBhZGRyKTsKIAkJZWxzZQotCQkJbm90ZV9wYWdlKHN0LCBh
ZGRyLCAxLCBwZ2RfdmFsKCpwZ2QpKTsKKwkJCW5vdGVfcGFnZShzdCwgYWRkciwgMSwgcDRkX3Zh
bCgqcDRkKSk7CiAJfQogfQogCmRpZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMveG1vbi94bW9uLmMg
Yi9hcmNoL3Bvd2VycGMveG1vbi94bW9uLmMKaW5kZXggN2FmODQwYzBmYzkzLi42NGJlNjljYjBi
MTMgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy94bW9uL3htb24uYworKysgYi9hcmNoL3Bvd2Vy
cGMveG1vbi94bW9uLmMKQEAgLTMxMzYsNiArMzEzNiw3IEBAIHN0YXRpYyB2b2lkIHNob3dfcHRl
KHVuc2lnbmVkIGxvbmcgYWRkcikKIAlzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRzayA9IE5VTEw7CiAJ
c3RydWN0IG1tX3N0cnVjdCAqbW07CiAJcGdkX3QgKnBnZHAsICpwZ2RpcjsKKwlwNGRfdCAqcDRk
cDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAlwdGVfdCAqcHRlcDsKQEAgLTMxNjcs
MjAgKzMxNjgsMjEgQEAgc3RhdGljIHZvaWQgc2hvd19wdGUodW5zaWduZWQgbG9uZyBhZGRyKQog
CQlwZ2RpciA9IHBnZF9vZmZzZXQobW0sIDApOwogCX0KIAotCWlmIChwZ2Rfbm9uZSgqcGdkcCkp
IHsKLQkJcHJpbnRmKCJubyBsaW51eCBwYWdlIHRhYmxlIGZvciBhZGRyZXNzXG4iKTsKKwlwNGRw
ID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKKworCWlmIChwNGRfbm9uZSgqcDRkcCkpIHsKKwkJ
cHJpbnRmKCJObyB2YWxpZCBQNERcbiIpOwogCQlyZXR1cm47CiAJfQogCi0JcHJpbnRmKCJwZ2Qg
IEAgMHglcHhcbiIsIHBnZGlyKTsKLQotCWlmIChwZ2RfaXNfbGVhZigqcGdkcCkpIHsKLQkJZm9y
bWF0X3B0ZShwZ2RwLCBwZ2RfdmFsKCpwZ2RwKSk7CisJaWYgKHA0ZF9pc19sZWFmKCpwNGRwKSkg
eworCQlmb3JtYXRfcHRlKHA0ZHAsIHA0ZF92YWwoKnA0ZHApKTsKIAkJcmV0dXJuOwogCX0KLQlw
cmludGYoInBnZHAgQCAweCVweCA9IDB4JTAxNmx4XG4iLCBwZ2RwLCBwZ2RfdmFsKCpwZ2RwKSk7
CiAKLQlwdWRwID0gcHVkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlwcmludGYoInA0ZHAgQCAweCVw
eCA9IDB4JTAxNmx4XG4iLCBwNGRwLCBwNGRfdmFsKCpwNGRwKSk7CisKKwlwdWRwID0gcHVkX29m
ZnNldChwNGRwLCBhZGRyKTsKIAogCWlmIChwdWRfbm9uZSgqcHVkcCkpIHsKIAkJcHJpbnRmKCJO
byB2YWxpZCBQVURcbiIpOwotLSAKMi4yNS4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fXwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMu
bGlicmVjb3Jlcy5vcmcKaHR0cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVu
cmlzYwo=
