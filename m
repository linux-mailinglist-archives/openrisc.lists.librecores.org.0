Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id C2BD1456B43
	for <lists+openrisc@lfdr.de>; Fri, 19 Nov 2021 09:04:19 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id CC869242A6;
	Fri, 19 Nov 2021 09:04:18 +0100 (CET)
Received: from mail-pf1-f170.google.com (mail-pf1-f170.google.com
 [209.85.210.170])
 by mail.librecores.org (Postfix) with ESMTPS id 32C9F240FC
 for <openrisc@lists.librecores.org>; Fri, 19 Nov 2021 09:01:19 +0100 (CET)
Received: by mail-pf1-f170.google.com with SMTP id g19so8724898pfb.8
 for <openrisc@lists.librecores.org>; Fri, 19 Nov 2021 00:01:19 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=from:to:cc:subject:date:message-id:in-reply-to:references
 :mime-version:content-transfer-encoding;
 bh=EE3SEPXoBbvJsiDAeji5FCMph0V1ZFJAuPncPXWzYuc=;
 b=kh9rM6hD/csU0psarGvH1deMLlvio0l/tW7tpWG4HVab9CRAttPkIbjpp6FapiotvQ
 v+n0cwlXmnNVtZyxR2b+uBvS92Lz153yWkr/cmJi0KHaXXnX6oK4zGfI52zhRETcTN6N
 44TPhShDpdj0EetsUVqeCGFQZDOsL/oEJvHmtBHBSHy9DnuUAGRpAG9+ELmu3MR1kDaN
 iqkSLqMtydAGnIOFHe7nWWreBeqbUKunO3mV0FfI1thtKKXNGKBhhM0ty73iKv+AEnQk
 x+/KZIOChNy8YO3PBh934tpq4Mk9ZCbnOdbbPaupoCRfm5APF2mDupRZqzwZqTg3CTPL
 TfBA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
 :references:mime-version:content-transfer-encoding;
 bh=EE3SEPXoBbvJsiDAeji5FCMph0V1ZFJAuPncPXWzYuc=;
 b=yWMA5Dc5juzsS2ZYhChMw7X6nFS+EzcYpzLC5on5rvgZhoHGxuTWq3rW5MkvjkqF+b
 933VUfwavC/q62rXvN46a3F92IiMm1aG4qJFRj13p0MmYBMsQP2/LgI126fYSG5Rrgwc
 tmxHQ58X2BWigJnk9v6wbmpQ1lhBh3xoSYMk8PB4pYehCuXmSMwYTbaYO3YgDx60Aa3V
 ar0fxST6owd51GfG3D4Z6PgLKEHEI8lph55hxkx6u1z0pekA3cgmPwmOgxAIGPwjEIq4
 OmOYZTckS4qI1j9KpW+cp8dTqU6QitSTittpatH/mMzN3uYa4vzRKYrYKWFaEqiCHzPj
 yXXA==
X-Gm-Message-State: AOAM533Clbs3+viekeU82/j7Fh/U/XuKA3Vr28+jwdGbmmkiydBOJKX0
 Q9QNvHN6W6y0g7+ufgobopo=
X-Google-Smtp-Source: ABdhPJzldH7ipqqyeM+oT5d6Qzi/yvo/sIXQ5tPUpktsTjymUZzDLBV0pBKyCmXVkuqv/SB3PAreQA==
X-Received: by 2002:a63:b25d:: with SMTP id t29mr16036769pgo.79.1637308877488; 
 Fri, 19 Nov 2021 00:01:17 -0800 (PST)
Received: from localhost.localdomain ([103.99.179.247])
 by smtp.gmail.com with ESMTPSA id o6sm1791259pfh.70.2021.11.19.00.00.45
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Fri, 19 Nov 2021 00:01:17 -0800 (PST)
From: Calvin Zhang <calvinzhang.cool@gmail.com>
To: Vineet Gupta <vgupta@kernel.org>, Russell King <linux@armlinux.org.uk>,
 Catalin Marinas <catalin.marinas@arm.com>, Will Deacon <will@kernel.org>,
 Guo Ren <guoren@kernel.org>, Yoshinori Sato <ysato@users.sourceforge.jp>,
 Thomas Bogendoerfer <tsbogend@alpha.franken.de>,
 Nick Hu <nickhu@andestech.com>, Greentime Hu <green.hu@gmail.com>,
 Vincent Chen <deanbo422@gmail.com>, Dinh Nguyen <dinguyen@kernel.org>,
 Jonas Bonn <jonas@southpole.se>,
 Stefan Kristiansson <stefan.kristiansson@saunalahti.fi>,
 Stafford Horne <shorne@gmail.com>, Michael Ellerman <mpe@ellerman.id.au>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Paul Mackerras <paulus@samba.org>,
 Paul Walmsley <paul.walmsley@sifive.com>,
 Palmer Dabbelt <palmer@dabbelt.com>, Albert Ou <aou@eecs.berkeley.edu>,
 Rich Felker <dalias@libc.org>, Chris Zankel <chris@zankel.net>,
 Max Filippov <jcmvbkbc@gmail.com>, Rob Herring <robh+dt@kernel.org>,
 Frank Rowand <frowand.list@gmail.com>, Mike Rapoport <rppt@kernel.org>,
 Andrew Morton <akpm@linux-foundation.org>,
 David Hildenbrand <david@redhat.com>,
 Kefeng Wang <wangkefeng.wang@huawei.com>,
 Vladimir Isaev <isaev@synopsys.com>,
 Calvin Zhang <calvinzhang.cool@gmail.com>, Arnd Bergmann <arnd@arndb.de>,
 "Russell King (Oracle)" <rmk+kernel@armlinux.org.uk>,
 Wolfram Sang <wsa+renesas@sang-engineering.com>,
 Guenter Roeck <linux@roeck-us.net>, Marc Zyngier <maz@kernel.org>,
 David Brazdil <dbrazdil@google.com>, Mark Rutland <mark.rutland@arm.com>,
 Andrey Konovalov <andreyknvl@gmail.com>,
 Anshuman Khandual <anshuman.khandual@arm.com>,
 Souptick Joarder <jrdr.linux@gmail.com>,
 Jinyang He <hejinyang@loongson.cn>,
 Alexander Sverdlin <alexander.sverdlin@nokia.com>,
 Serge Semin <Sergey.Semin@baikalelectronics.ru>,
 Geert Uytterhoeven <geert@linux-m68k.org>,
 Ley Foon Tan <ley.foon.tan@intel.com>,
 Andreas Oetken <andreas.oetken@siemens.com>,
 Randy Dunlap <rdunlap@infradead.org>,
 Christophe JAILLET <christophe.jaillet@wanadoo.fr>,
 Christophe Leroy <christophe.leroy@c-s.fr>,
 Andy Shevchenko <andriy.shevchenko@linux.intel.com>,
 Zhang Yunkai <zhang.yunkai@zte.com.cn>,
 Markus Elfring <elfring@users.sourceforge.net>,
 Ganesh Goudar <ganeshgr@linux.ibm.com>,
 "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>,
 Atish Patra <atish.patra@wdc.com>, Anup Patel <anup.patel@wdc.com>,
 Nick Kossifidis <mick@ics.forth.gr>, Alexandre Ghiti <alex@ghiti.fr>,
 Vitaly Wool <vitaly.wool@konsulko.com>
Date: Fri, 19 Nov 2021 15:58:18 +0800
Message-Id: <20211119075844.2902592-2-calvinzhang.cool@gmail.com>
X-Mailer: git-send-email 2.30.2
In-Reply-To: <20211119075844.2902592-1-calvinzhang.cool@gmail.com>
References: <20211119075844.2902592-1-calvinzhang.cool@gmail.com>
MIME-Version: 1.0
X-Mailman-Approved-At: Fri, 19 Nov 2021 09:04:16 +0100
Subject: [OpenRISC] [PATCH 1/2] of: Sort reserved_mem related code
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: uclinux-h8-devel@lists.sourceforge.jp, Rob Herring <robh@kernel.org>,
 Guo Ren <guoren@linux.alibaba.com>, Mauri Sandberg <sandberg@mailfence.com>,
 linux-sh@vger.kernel.org, linux-xtensa@linux-xtensa.org,
 "Rafael J. Wysocki" <rafael.j.wysocki@intel.com>, linux-kernel@vger.kernel.org,
 linux-csky@vger.kernel.org, linux-mips@vger.kernel.org,
 devicetree@vger.kernel.org, openrisc@lists.librecores.org,
 Palmer Dabbelt <palmerdabbelt@google.com>,
 Tiezhu Yang <yangtiezhu@loongson.cn>, linux-snps-arc@lists.infradead.org,
 linuxppc-dev@lists.ozlabs.org, linux-riscv@lists.infradead.org,
 linux-arm-kernel@lists.infradead.org
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

TW92ZSBjb2RlIGFib3V0IHBhcnNpbmcgL3Jlc2VydmVkLW1lbW9yeSBhbmQgaW5pdGlhbGl6aW5n
IG9mCnJlc2VydmVkX21lbXMgYXJyYXkgdG8gb2ZfcmVzZXJ2ZWRfbWVtLmMgZm9yIGJldHRlciBt
b2R1bGFyaXR5LgoKUmVuYW1lIGFycmF5IG5hbWUgZnJvbSByZXNlcnZlZF9tZW0gdG8gcmVzZXJ2
ZWRfbWVtcyB0byBkaXN0aW5ndWlzaApmcm9tIHR5cGUgZGVmaW5pdGlvbi4KClNpZ25lZC1vZmYt
Ynk6IENhbHZpbiBaaGFuZyA8Y2FsdmluemhhbmcuY29vbEBnbWFpbC5jb20+Ci0tLQogZHJpdmVy
cy9vZi9mZHQuYyAgICAgICAgICAgICAgICB8IDEwOCArLS0tLS0tLS0tLS0tLS0tLS0tLS0KIGRy
aXZlcnMvb2Yvb2ZfcHJpdmF0ZS5oICAgICAgICAgfCAgMTIgKystCiBkcml2ZXJzL29mL29mX3Jl
c2VydmVkX21lbS5jICAgIHwgMTYzICsrKysrKysrKysrKysrKysrKysrKysrKysrLS0tLS0tCiBp
bmNsdWRlL2xpbnV4L29mX3Jlc2VydmVkX21lbS5oIHwgICA0ICsKIDQgZmlsZXMgY2hhbmdlZCwg
MTQ5IGluc2VydGlvbnMoKyksIDEzOCBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJz
L29mL2ZkdC5jIGIvZHJpdmVycy9vZi9mZHQuYwppbmRleCBiZGNhMzUyODRjZWIuLjQ0NWFmNGU2
OTMwMCAxMDA2NDQKLS0tIGEvZHJpdmVycy9vZi9mZHQuYworKysgYi9kcml2ZXJzL29mL2ZkdC5j
CkBAIC04MCw3ICs4MCw3IEBAIHZvaWQgX19pbml0IG9mX2ZkdF9saW1pdF9tZW1vcnkoaW50IGxp
bWl0KQogCX0KIH0KIAotc3RhdGljIGJvb2wgb2ZfZmR0X2RldmljZV9pc19hdmFpbGFibGUoY29u
c3Qgdm9pZCAqYmxvYiwgdW5zaWduZWQgbG9uZyBub2RlKQorYm9vbCBvZl9mZHRfZGV2aWNlX2lz
X2F2YWlsYWJsZShjb25zdCB2b2lkICpibG9iLCB1bnNpZ25lZCBsb25nIG5vZGUpCiB7CiAJY29u
c3QgY2hhciAqc3RhdHVzID0gZmR0X2dldHByb3AoYmxvYiwgbm9kZSwgInN0YXR1cyIsIE5VTEwp
OwogCkBAIC00NzYsNyArNDc2LDcgQEAgdm9pZCAqaW5pdGlhbF9ib290X3BhcmFtcyBfX3JvX2Fm
dGVyX2luaXQ7CiAKIHN0YXRpYyB1MzIgb2ZfZmR0X2NyYzMyOwogCi1zdGF0aWMgaW50IF9faW5p
dCBlYXJseV9pbml0X2R0X3Jlc2VydmVfbWVtb3J5X2FyY2gocGh5c19hZGRyX3QgYmFzZSwKK2lu
dCBfX2luaXQgZWFybHlfaW5pdF9kdF9yZXNlcnZlX21lbW9yeV9hcmNoKHBoeXNfYWRkcl90IGJh
c2UsCiAJCQkJCXBoeXNfYWRkcl90IHNpemUsIGJvb2wgbm9tYXApCiB7CiAJaWYgKG5vbWFwKSB7
CkBAIC00OTIsMTA4ICs0OTIsNiBAQCBzdGF0aWMgaW50IF9faW5pdCBlYXJseV9pbml0X2R0X3Jl
c2VydmVfbWVtb3J5X2FyY2gocGh5c19hZGRyX3QgYmFzZSwKIAlyZXR1cm4gbWVtYmxvY2tfcmVz
ZXJ2ZShiYXNlLCBzaXplKTsKIH0KIAotLyoKLSAqIF9fcmVzZXJ2ZWRfbWVtX3Jlc2VydmVfcmVn
KCkgLSByZXNlcnZlIGFsbCBtZW1vcnkgZGVzY3JpYmVkIGluICdyZWcnIHByb3BlcnR5Ci0gKi8K
LXN0YXRpYyBpbnQgX19pbml0IF9fcmVzZXJ2ZWRfbWVtX3Jlc2VydmVfcmVnKHVuc2lnbmVkIGxv
bmcgbm9kZSwKLQkJCQkJICAgICBjb25zdCBjaGFyICp1bmFtZSkKLXsKLQlpbnQgdF9sZW4gPSAo
ZHRfcm9vdF9hZGRyX2NlbGxzICsgZHRfcm9vdF9zaXplX2NlbGxzKSAqIHNpemVvZihfX2JlMzIp
OwotCXBoeXNfYWRkcl90IGJhc2UsIHNpemU7Ci0JaW50IGxlbjsKLQljb25zdCBfX2JlMzIgKnBy
b3A7Ci0JaW50IGZpcnN0ID0gMTsKLQlib29sIG5vbWFwOwotCi0JcHJvcCA9IG9mX2dldF9mbGF0
X2R0X3Byb3Aobm9kZSwgInJlZyIsICZsZW4pOwotCWlmICghcHJvcCkKLQkJcmV0dXJuIC1FTk9F
TlQ7Ci0KLQlpZiAobGVuICYmIGxlbiAlIHRfbGVuICE9IDApIHsKLQkJcHJfZXJyKCJSZXNlcnZl
ZCBtZW1vcnk6IGludmFsaWQgcmVnIHByb3BlcnR5IGluICclcycsIHNraXBwaW5nIG5vZGUuXG4i
LAotCQkgICAgICAgdW5hbWUpOwotCQlyZXR1cm4gLUVJTlZBTDsKLQl9Ci0KLQlub21hcCA9IG9m
X2dldF9mbGF0X2R0X3Byb3Aobm9kZSwgIm5vLW1hcCIsIE5VTEwpICE9IE5VTEw7Ci0KLQl3aGls
ZSAobGVuID49IHRfbGVuKSB7Ci0JCWJhc2UgPSBkdF9tZW1fbmV4dF9jZWxsKGR0X3Jvb3RfYWRk
cl9jZWxscywgJnByb3ApOwotCQlzaXplID0gZHRfbWVtX25leHRfY2VsbChkdF9yb290X3NpemVf
Y2VsbHMsICZwcm9wKTsKLQotCQlpZiAoc2l6ZSAmJgotCQkgICAgZWFybHlfaW5pdF9kdF9yZXNl
cnZlX21lbW9yeV9hcmNoKGJhc2UsIHNpemUsIG5vbWFwKSA9PSAwKQotCQkJcHJfZGVidWcoIlJl
c2VydmVkIG1lbW9yeTogcmVzZXJ2ZWQgcmVnaW9uIGZvciBub2RlICclcyc6IGJhc2UgJXBhLCBz
aXplICVsdSBNaUJcbiIsCi0JCQkJdW5hbWUsICZiYXNlLCAodW5zaWduZWQgbG9uZykoc2l6ZSAv
IFNaXzFNKSk7Ci0JCWVsc2UKLQkJCXByX2luZm8oIlJlc2VydmVkIG1lbW9yeTogZmFpbGVkIHRv
IHJlc2VydmUgbWVtb3J5IGZvciBub2RlICclcyc6IGJhc2UgJXBhLCBzaXplICVsdSBNaUJcbiIs
Ci0JCQkJdW5hbWUsICZiYXNlLCAodW5zaWduZWQgbG9uZykoc2l6ZSAvIFNaXzFNKSk7Ci0KLQkJ
bGVuIC09IHRfbGVuOwotCQlpZiAoZmlyc3QpIHsKLQkJCWZkdF9yZXNlcnZlZF9tZW1fc2F2ZV9u
b2RlKG5vZGUsIHVuYW1lLCBiYXNlLCBzaXplKTsKLQkJCWZpcnN0ID0gMDsKLQkJfQotCX0KLQly
ZXR1cm4gMDsKLX0KLQotLyoKLSAqIF9fcmVzZXJ2ZWRfbWVtX2NoZWNrX3Jvb3QoKSAtIGNoZWNr
IGlmICNzaXplLWNlbGxzLCAjYWRkcmVzcy1jZWxscyBwcm92aWRlZAotICogaW4gL3Jlc2VydmVk
LW1lbW9yeSBtYXRjaGVzIHRoZSB2YWx1ZXMgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IGltcGxl
bWVudGF0aW9uLAotICogYWxzbyBjaGVjayBpZiByYW5nZXMgcHJvcGVydHkgaGFzIGJlZW4gcHJv
dmlkZWQKLSAqLwotc3RhdGljIGludCBfX2luaXQgX19yZXNlcnZlZF9tZW1fY2hlY2tfcm9vdCh1
bnNpZ25lZCBsb25nIG5vZGUpCi17Ci0JY29uc3QgX19iZTMyICpwcm9wOwotCi0JcHJvcCA9IG9m
X2dldF9mbGF0X2R0X3Byb3Aobm9kZSwgIiNzaXplLWNlbGxzIiwgTlVMTCk7Ci0JaWYgKCFwcm9w
IHx8IGJlMzJfdG9fY3B1cChwcm9wKSAhPSBkdF9yb290X3NpemVfY2VsbHMpCi0JCXJldHVybiAt
RUlOVkFMOwotCi0JcHJvcCA9IG9mX2dldF9mbGF0X2R0X3Byb3Aobm9kZSwgIiNhZGRyZXNzLWNl
bGxzIiwgTlVMTCk7Ci0JaWYgKCFwcm9wIHx8IGJlMzJfdG9fY3B1cChwcm9wKSAhPSBkdF9yb290
X2FkZHJfY2VsbHMpCi0JCXJldHVybiAtRUlOVkFMOwotCi0JcHJvcCA9IG9mX2dldF9mbGF0X2R0
X3Byb3Aobm9kZSwgInJhbmdlcyIsIE5VTEwpOwotCWlmICghcHJvcCkKLQkJcmV0dXJuIC1FSU5W
QUw7Ci0JcmV0dXJuIDA7Ci19Ci0KLS8qCi0gKiBmZHRfc2Nhbl9yZXNlcnZlZF9tZW0oKSAtIHNj
YW4gYSBzaW5nbGUgRkRUIG5vZGUgZm9yIHJlc2VydmVkIG1lbW9yeQotICovCi1zdGF0aWMgaW50
IF9faW5pdCBmZHRfc2Nhbl9yZXNlcnZlZF9tZW0odm9pZCkKLXsKLQlpbnQgbm9kZSwgY2hpbGQ7
Ci0JY29uc3Qgdm9pZCAqZmR0ID0gaW5pdGlhbF9ib290X3BhcmFtczsKLQotCW5vZGUgPSBmZHRf
cGF0aF9vZmZzZXQoZmR0LCAiL3Jlc2VydmVkLW1lbW9yeSIpOwotCWlmIChub2RlIDwgMCkKLQkJ
cmV0dXJuIC1FTk9ERVY7Ci0KLQlpZiAoX19yZXNlcnZlZF9tZW1fY2hlY2tfcm9vdChub2RlKSAh
PSAwKSB7Ci0JCXByX2VycigiUmVzZXJ2ZWQgbWVtb3J5OiB1bnN1cHBvcnRlZCBub2RlIGZvcm1h
dCwgaWdub3JpbmdcbiIpOwotCQlyZXR1cm4gLUVJTlZBTDsKLQl9Ci0KLQlmZHRfZm9yX2VhY2hf
c3Vibm9kZShjaGlsZCwgZmR0LCBub2RlKSB7Ci0JCWNvbnN0IGNoYXIgKnVuYW1lOwotCQlpbnQg
ZXJyOwotCi0JCWlmICghb2ZfZmR0X2RldmljZV9pc19hdmFpbGFibGUoZmR0LCBjaGlsZCkpCi0J
CQljb250aW51ZTsKLQotCQl1bmFtZSA9IGZkdF9nZXRfbmFtZShmZHQsIGNoaWxkLCBOVUxMKTsK
LQotCQllcnIgPSBfX3Jlc2VydmVkX21lbV9yZXNlcnZlX3JlZyhjaGlsZCwgdW5hbWUpOwotCQlp
ZiAoZXJyID09IC1FTk9FTlQgJiYgb2ZfZ2V0X2ZsYXRfZHRfcHJvcChjaGlsZCwgInNpemUiLCBO
VUxMKSkKLQkJCWZkdF9yZXNlcnZlZF9tZW1fc2F2ZV9ub2RlKGNoaWxkLCB1bmFtZSwgMCwgMCk7
Ci0JfQotCXJldHVybiAwOwotfQotCiAvKgogICogZmR0X3Jlc2VydmVfZWxmY29yZWhkcigpIC0g
cmVzZXJ2ZXMgbWVtb3J5IGZvciBlbGYgY29yZSBoZWFkZXIKICAqCkBAIC02NDIsNyArNTQwLDcg
QEAgdm9pZCBfX2luaXQgZWFybHlfaW5pdF9mZHRfc2Nhbl9yZXNlcnZlZF9tZW0odm9pZCkKIAl9
CiAKIAlmZHRfc2Nhbl9yZXNlcnZlZF9tZW0oKTsKLQlmZHRfaW5pdF9yZXNlcnZlZF9tZW0oKTsK
KwlvZl9yZXNlcnZlZF9tZW1faW5pdCgpOwogCWZkdF9yZXNlcnZlX2VsZmNvcmVoZHIoKTsKIH0K
IApkaWZmIC0tZ2l0IGEvZHJpdmVycy9vZi9vZl9wcml2YXRlLmggYi9kcml2ZXJzL29mL29mX3By
aXZhdGUuaAppbmRleCA5MzI0NDgzMzk3ZjYuLjg4YjY3ZjhlZDY5OCAxMDA2NDQKLS0tIGEvZHJp
dmVycy9vZi9vZl9wcml2YXRlLmgKKysrIGIvZHJpdmVycy9vZi9vZl9wcml2YXRlLmgKQEAgLTE2
Myw4ICsxNjMsMTQgQEAgc3RhdGljIGlubGluZSBpbnQgb2ZfZG1hX2dldF9yYW5nZShzdHJ1Y3Qg
ZGV2aWNlX25vZGUgKm5wLAogfQogI2VuZGlmCiAKLXZvaWQgZmR0X2luaXRfcmVzZXJ2ZWRfbWVt
KHZvaWQpOwotdm9pZCBmZHRfcmVzZXJ2ZWRfbWVtX3NhdmVfbm9kZSh1bnNpZ25lZCBsb25nIG5v
ZGUsIGNvbnN0IGNoYXIgKnVuYW1lLAotCQkJICAgICAgIHBoeXNfYWRkcl90IGJhc2UsIHBoeXNf
YWRkcl90IHNpemUpOworYm9vbCBvZl9mZHRfZGV2aWNlX2lzX2F2YWlsYWJsZShjb25zdCB2b2lk
ICpibG9iLCB1bnNpZ25lZCBsb25nIG5vZGUpOworaW50IGVhcmx5X2luaXRfZHRfcmVzZXJ2ZV9t
ZW1vcnlfYXJjaChwaHlzX2FkZHJfdCBiYXNlLAorCQkJCQlwaHlzX2FkZHJfdCBzaXplLCBib29s
IG5vbWFwKTsKKyNpZmRlZiBDT05GSUdfT0ZfUkVTRVJWRURfTUVNCitpbnQgZmR0X3NjYW5fcmVz
ZXJ2ZWRfbWVtKHZvaWQpOworI2Vsc2UKK3N0YXRpYyBpbmxpbmUgaW50IGZkdF9zY2FuX3Jlc2Vy
dmVkX21lbSh2b2lkKSB7IH0KKyNlbmRpZgorCiAKICNlbmRpZiAvKiBfTElOVVhfT0ZfUFJJVkFU
RV9IICovCmRpZmYgLS1naXQgYS9kcml2ZXJzL29mL29mX3Jlc2VydmVkX21lbS5jIGIvZHJpdmVy
cy9vZi9vZl9yZXNlcnZlZF9tZW0uYwppbmRleCA5YzBmYjk2MmMyMmIuLjc4NGNmYzVjZDI1MSAx
MDA2NDQKLS0tIGEvZHJpdmVycy9vZi9vZl9yZXNlcnZlZF9tZW0uYworKysgYi9kcml2ZXJzL29m
L29mX3Jlc2VydmVkX21lbS5jCkBAIC0yMCwxMyArMjAsMTQgQEAKICNpbmNsdWRlIDxsaW51eC9v
Zl9yZXNlcnZlZF9tZW0uaD4KICNpbmNsdWRlIDxsaW51eC9zb3J0Lmg+CiAjaW5jbHVkZSA8bGlu
dXgvc2xhYi5oPgorI2luY2x1ZGUgPGxpbnV4L2xpYmZkdC5oPgogI2luY2x1ZGUgPGxpbnV4L21l
bWJsb2NrLmg+CiAjaW5jbHVkZSA8bGludXgva21lbWxlYWsuaD4KIAogI2luY2x1ZGUgIm9mX3By
aXZhdGUuaCIKIAogI2RlZmluZSBNQVhfUkVTRVJWRURfUkVHSU9OUwk2NAotc3RhdGljIHN0cnVj
dCByZXNlcnZlZF9tZW0gcmVzZXJ2ZWRfbWVtW01BWF9SRVNFUlZFRF9SRUdJT05TXTsKK3N0YXRp
YyBzdHJ1Y3QgcmVzZXJ2ZWRfbWVtIHJlc2VydmVkX21lbXNbTUFYX1JFU0VSVkVEX1JFR0lPTlNd
Owogc3RhdGljIGludCByZXNlcnZlZF9tZW1fY291bnQ7CiAKIHN0YXRpYyBpbnQgX19pbml0IGVh
cmx5X2luaXRfZHRfYWxsb2NfcmVzZXJ2ZWRfbWVtb3J5X2FyY2gocGh5c19hZGRyX3Qgc2l6ZSwK
QEAgLTU2LDEyICs1NywxMiBAQCBzdGF0aWMgaW50IF9faW5pdCBlYXJseV9pbml0X2R0X2FsbG9j
X3Jlc2VydmVkX21lbW9yeV9hcmNoKHBoeXNfYWRkcl90IHNpemUsCiAvKgogICogZmR0X3Jlc2Vy
dmVkX21lbV9zYXZlX25vZGUoKSAtIHNhdmUgZmR0IG5vZGUgZm9yIHNlY29uZCBwYXNzIGluaXRp
YWxpemF0aW9uCiAgKi8KLXZvaWQgX19pbml0IGZkdF9yZXNlcnZlZF9tZW1fc2F2ZV9ub2RlKHVu
c2lnbmVkIGxvbmcgbm9kZSwgY29uc3QgY2hhciAqdW5hbWUsCitzdGF0aWMgdm9pZCBfX2luaXQg
ZmR0X3Jlc2VydmVkX21lbV9zYXZlX25vZGUodW5zaWduZWQgbG9uZyBub2RlLCBjb25zdCBjaGFy
ICp1bmFtZSwKIAkJCQkgICAgICBwaHlzX2FkZHJfdCBiYXNlLCBwaHlzX2FkZHJfdCBzaXplKQog
ewotCXN0cnVjdCByZXNlcnZlZF9tZW0gKnJtZW0gPSAmcmVzZXJ2ZWRfbWVtW3Jlc2VydmVkX21l
bV9jb3VudF07CisJc3RydWN0IHJlc2VydmVkX21lbSAqcm1lbSA9ICZyZXNlcnZlZF9tZW1zW3Jl
c2VydmVkX21lbV9jb3VudF07CiAKLQlpZiAocmVzZXJ2ZWRfbWVtX2NvdW50ID09IEFSUkFZX1NJ
WkUocmVzZXJ2ZWRfbWVtKSkgeworCWlmIChyZXNlcnZlZF9tZW1fY291bnQgPT0gQVJSQVlfU0la
RShyZXNlcnZlZF9tZW1zKSkgewogCQlwcl9lcnIoIm5vdCBlbm91Z2ggc3BhY2UgZm9yIGFsbCBk
ZWZpbmVkIHJlZ2lvbnMuXG4iKTsKIAkJcmV0dXJuOwogCX0KQEAgLTE3MywyOSArMTc0LDEwNSBA
QCBzdGF0aWMgY29uc3Qgc3RydWN0IG9mX2RldmljZV9pZCBfX3JtZW1fb2ZfdGFibGVfc2VudGlu
ZWwKIAlfX3VzZWQgX19zZWN0aW9uKCJfX3Jlc2VydmVkbWVtX29mX3RhYmxlX2VuZCIpOwogCiAv
KgotICogX19yZXNlcnZlZF9tZW1faW5pdF9ub2RlKCkgLSBjYWxsIHJlZ2lvbiBzcGVjaWZpYyBy
ZXNlcnZlZCBtZW1vcnkgaW5pdCBjb2RlCisgKiBfX3Jlc2VydmVkX21lbV9jaGVja19yb290KCkg
LSBjaGVjayBpZiAjc2l6ZS1jZWxscywgI2FkZHJlc3MtY2VsbHMgcHJvdmlkZWQKKyAqIGluIC9y
ZXNlcnZlZC1tZW1vcnkgbWF0Y2hlcyB0aGUgdmFsdWVzIHN1cHBvcnRlZCBieSB0aGUgY3VycmVu
dCBpbXBsZW1lbnRhdGlvbiwKKyAqIGFsc28gY2hlY2sgaWYgcmFuZ2VzIHByb3BlcnR5IGhhcyBi
ZWVuIHByb3ZpZGVkCiAgKi8KLXN0YXRpYyBpbnQgX19pbml0IF9fcmVzZXJ2ZWRfbWVtX2luaXRf
bm9kZShzdHJ1Y3QgcmVzZXJ2ZWRfbWVtICpybWVtKQorc3RhdGljIGludCBfX2luaXQgX19yZXNl
cnZlZF9tZW1fY2hlY2tfcm9vdCh1bnNpZ25lZCBsb25nIG5vZGUpCiB7Ci0JZXh0ZXJuIGNvbnN0
IHN0cnVjdCBvZl9kZXZpY2VfaWQgX19yZXNlcnZlZG1lbV9vZl90YWJsZVtdOwotCWNvbnN0IHN0
cnVjdCBvZl9kZXZpY2VfaWQgKmk7Ci0JaW50IHJldCA9IC1FTk9FTlQ7CisJY29uc3QgX19iZTMy
ICpwcm9wOwogCi0JZm9yIChpID0gX19yZXNlcnZlZG1lbV9vZl90YWJsZTsgaSA8ICZfX3JtZW1f
b2ZfdGFibGVfc2VudGluZWw7IGkrKykgewotCQlyZXNlcnZlZG1lbV9vZl9pbml0X2ZuIGluaXRm
biA9IGktPmRhdGE7Ci0JCWNvbnN0IGNoYXIgKmNvbXBhdCA9IGktPmNvbXBhdGlibGU7CisJcHJv
cCA9IG9mX2dldF9mbGF0X2R0X3Byb3Aobm9kZSwgIiNzaXplLWNlbGxzIiwgTlVMTCk7CisJaWYg
KCFwcm9wIHx8IGJlMzJfdG9fY3B1cChwcm9wKSAhPSBkdF9yb290X3NpemVfY2VsbHMpCisJCXJl
dHVybiAtRUlOVkFMOwogCi0JCWlmICghb2ZfZmxhdF9kdF9pc19jb21wYXRpYmxlKHJtZW0tPmZk
dF9ub2RlLCBjb21wYXQpKQotCQkJY29udGludWU7CisJcHJvcCA9IG9mX2dldF9mbGF0X2R0X3By
b3Aobm9kZSwgIiNhZGRyZXNzLWNlbGxzIiwgTlVMTCk7CisJaWYgKCFwcm9wIHx8IGJlMzJfdG9f
Y3B1cChwcm9wKSAhPSBkdF9yb290X2FkZHJfY2VsbHMpCisJCXJldHVybiAtRUlOVkFMOwogCi0J
CXJldCA9IGluaXRmbihybWVtKTsKLQkJaWYgKHJldCA9PSAwKSB7Ci0JCQlwcl9pbmZvKCJpbml0
aWFsaXplZCBub2RlICVzLCBjb21wYXRpYmxlIGlkICVzXG4iLAotCQkJCXJtZW0tPm5hbWUsIGNv
bXBhdCk7Ci0JCQlicmVhazsKKwlwcm9wID0gb2ZfZ2V0X2ZsYXRfZHRfcHJvcChub2RlLCAicmFu
Z2VzIiwgTlVMTCk7CisJaWYgKCFwcm9wKQorCQlyZXR1cm4gLUVJTlZBTDsKKwlyZXR1cm4gMDsK
K30KKworLyoKKyAqIF9fcmVzZXJ2ZWRfbWVtX3Jlc2VydmVfcmVnKCkgLSByZXNlcnZlIGFsbCBt
ZW1vcnkgZGVzY3JpYmVkIGluICdyZWcnIHByb3BlcnR5CisgKi8KK3N0YXRpYyBpbnQgX19pbml0
IF9fcmVzZXJ2ZWRfbWVtX3Jlc2VydmVfcmVnKHVuc2lnbmVkIGxvbmcgbm9kZSwKKwkJCQkJICAg
ICBjb25zdCBjaGFyICp1bmFtZSkKK3sKKwlpbnQgdF9sZW4gPSAoZHRfcm9vdF9hZGRyX2NlbGxz
ICsgZHRfcm9vdF9zaXplX2NlbGxzKSAqIHNpemVvZihfX2JlMzIpOworCXBoeXNfYWRkcl90IGJh
c2UsIHNpemU7CisJaW50IGxlbjsKKwljb25zdCBfX2JlMzIgKnByb3A7CisJaW50IGZpcnN0ID0g
MTsKKwlib29sIG5vbWFwOworCisJcHJvcCA9IG9mX2dldF9mbGF0X2R0X3Byb3Aobm9kZSwgInJl
ZyIsICZsZW4pOworCWlmICghcHJvcCkKKwkJcmV0dXJuIC1FTk9FTlQ7CisKKwlpZiAobGVuICYm
IGxlbiAlIHRfbGVuICE9IDApIHsKKwkJcHJfZXJyKCJSZXNlcnZlZCBtZW1vcnk6IGludmFsaWQg
cmVnIHByb3BlcnR5IGluICclcycsIHNraXBwaW5nIG5vZGUuXG4iLAorCQkgICAgICAgdW5hbWUp
OworCQlyZXR1cm4gLUVJTlZBTDsKKwl9CisKKwlub21hcCA9IG9mX2dldF9mbGF0X2R0X3Byb3Ao
bm9kZSwgIm5vLW1hcCIsIE5VTEwpICE9IE5VTEw7CisKKwl3aGlsZSAobGVuID49IHRfbGVuKSB7
CisJCWJhc2UgPSBkdF9tZW1fbmV4dF9jZWxsKGR0X3Jvb3RfYWRkcl9jZWxscywgJnByb3ApOwor
CQlzaXplID0gZHRfbWVtX25leHRfY2VsbChkdF9yb290X3NpemVfY2VsbHMsICZwcm9wKTsKKwor
CQlpZiAoc2l6ZSAmJgorCQkgICAgZWFybHlfaW5pdF9kdF9yZXNlcnZlX21lbW9yeV9hcmNoKGJh
c2UsIHNpemUsIG5vbWFwKSA9PSAwKQorCQkJcHJfZGVidWcoIlJlc2VydmVkIG1lbW9yeTogcmVz
ZXJ2ZWQgcmVnaW9uIGZvciBub2RlICclcyc6IGJhc2UgJXBhLCBzaXplICVsdSBNaUJcbiIsCisJ
CQkJdW5hbWUsICZiYXNlLCAodW5zaWduZWQgbG9uZykoc2l6ZSAvIFNaXzFNKSk7CisJCWVsc2UK
KwkJCXByX2luZm8oIlJlc2VydmVkIG1lbW9yeTogZmFpbGVkIHRvIHJlc2VydmUgbWVtb3J5IGZv
ciBub2RlICclcyc6IGJhc2UgJXBhLCBzaXplICVsdSBNaUJcbiIsCisJCQkJdW5hbWUsICZiYXNl
LCAodW5zaWduZWQgbG9uZykoc2l6ZSAvIFNaXzFNKSk7CisKKwkJbGVuIC09IHRfbGVuOworCQlp
ZiAoZmlyc3QpIHsKKwkJCWZkdF9yZXNlcnZlZF9tZW1fc2F2ZV9ub2RlKG5vZGUsIHVuYW1lLCBi
YXNlLCBzaXplKTsKKwkJCWZpcnN0ID0gMDsKIAkJfQogCX0KLQlyZXR1cm4gcmV0OworCXJldHVy
biAwOworfQorCisvKgorICogZmR0X3NjYW5fcmVzZXJ2ZWRfbWVtKCkgLSBzY2FuIGEgc2luZ2xl
IEZEVCBub2RlIGZvciByZXNlcnZlZCBtZW1vcnkKKyAqLworaW50IF9faW5pdCBmZHRfc2Nhbl9y
ZXNlcnZlZF9tZW0odm9pZCkKK3sKKwlpbnQgbm9kZSwgY2hpbGQ7CisJY29uc3Qgdm9pZCAqZmR0
ID0gaW5pdGlhbF9ib290X3BhcmFtczsKKworCW5vZGUgPSBmZHRfcGF0aF9vZmZzZXQoZmR0LCAi
L3Jlc2VydmVkLW1lbW9yeSIpOworCWlmIChub2RlIDwgMCkKKwkJcmV0dXJuIC1FTk9ERVY7CisK
KwlpZiAoX19yZXNlcnZlZF9tZW1fY2hlY2tfcm9vdChub2RlKSAhPSAwKSB7CisJCXByX2Vycigi
UmVzZXJ2ZWQgbWVtb3J5OiB1bnN1cHBvcnRlZCBub2RlIGZvcm1hdCwgaWdub3JpbmdcbiIpOwor
CQlyZXR1cm4gLUVJTlZBTDsKKwl9CisKKwlmZHRfZm9yX2VhY2hfc3Vibm9kZShjaGlsZCwgZmR0
LCBub2RlKSB7CisJCWNvbnN0IGNoYXIgKnVuYW1lOworCQlpbnQgZXJyOworCisJCWlmICghb2Zf
ZmR0X2RldmljZV9pc19hdmFpbGFibGUoZmR0LCBjaGlsZCkpCisJCQljb250aW51ZTsKKworCQl1
bmFtZSA9IGZkdF9nZXRfbmFtZShmZHQsIGNoaWxkLCBOVUxMKTsKKworCQllcnIgPSBfX3Jlc2Vy
dmVkX21lbV9yZXNlcnZlX3JlZyhjaGlsZCwgdW5hbWUpOworCQlpZiAoZXJyID09IC1FTk9FTlQg
JiYgb2ZfZ2V0X2ZsYXRfZHRfcHJvcChjaGlsZCwgInNpemUiLCBOVUxMKSkKKwkJCWZkdF9yZXNl
cnZlZF9tZW1fc2F2ZV9ub2RlKGNoaWxkLCB1bmFtZSwgMCwgMCk7CisJfQorCXJldHVybiAwOwog
fQogCiBzdGF0aWMgaW50IF9faW5pdCBfX3JtZW1fY21wKGNvbnN0IHZvaWQgKmEsIGNvbnN0IHZv
aWQgKmIpCkBAIC0yMjgsMTMgKzMwNSwxMyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgX19ybWVtX2No
ZWNrX2Zvcl9vdmVybGFwKHZvaWQpCiAJaWYgKHJlc2VydmVkX21lbV9jb3VudCA8IDIpCiAJCXJl
dHVybjsKIAotCXNvcnQocmVzZXJ2ZWRfbWVtLCByZXNlcnZlZF9tZW1fY291bnQsIHNpemVvZihy
ZXNlcnZlZF9tZW1bMF0pLAorCXNvcnQocmVzZXJ2ZWRfbWVtcywgcmVzZXJ2ZWRfbWVtX2NvdW50
LCBzaXplb2YocmVzZXJ2ZWRfbWVtc1swXSksCiAJICAgICBfX3JtZW1fY21wLCBOVUxMKTsKIAlm
b3IgKGkgPSAwOyBpIDwgcmVzZXJ2ZWRfbWVtX2NvdW50IC0gMTsgaSsrKSB7CiAJCXN0cnVjdCBy
ZXNlcnZlZF9tZW0gKnRoaXMsICpuZXh0OwogCi0JCXRoaXMgPSAmcmVzZXJ2ZWRfbWVtW2ldOwot
CQluZXh0ID0gJnJlc2VydmVkX21lbVtpICsgMV07CisJCXRoaXMgPSAmcmVzZXJ2ZWRfbWVtc1tp
XTsKKwkJbmV4dCA9ICZyZXNlcnZlZF9tZW1zW2kgKyAxXTsKIAogCQlpZiAodGhpcy0+YmFzZSAr
IHRoaXMtPnNpemUgPiBuZXh0LT5iYXNlKSB7CiAJCQlwaHlzX2FkZHJfdCB0aGlzX2VuZCwgbmV4
dF9lbmQ7CkBAIC0yNDgsMTAgKzMyNSwzNiBAQCBzdGF0aWMgdm9pZCBfX2luaXQgX19ybWVtX2No
ZWNrX2Zvcl9vdmVybGFwKHZvaWQpCiAJfQogfQogCisvKgorICogX19yZXNlcnZlZF9tZW1faW5p
dF9ub2RlKCkgLSBjYWxsIHJlZ2lvbiBzcGVjaWZpYyByZXNlcnZlZCBtZW1vcnkgaW5pdCBjb2Rl
CisgKi8KK3N0YXRpYyBpbnQgX19pbml0IF9fcmVzZXJ2ZWRfbWVtX2luaXRfbm9kZShzdHJ1Y3Qg
cmVzZXJ2ZWRfbWVtICpybWVtKQoreworCWV4dGVybiBjb25zdCBzdHJ1Y3Qgb2ZfZGV2aWNlX2lk
IF9fcmVzZXJ2ZWRtZW1fb2ZfdGFibGVbXTsKKwljb25zdCBzdHJ1Y3Qgb2ZfZGV2aWNlX2lkICpp
OworCWludCByZXQgPSAtRU5PRU5UOworCisJZm9yIChpID0gX19yZXNlcnZlZG1lbV9vZl90YWJs
ZTsgaSA8ICZfX3JtZW1fb2ZfdGFibGVfc2VudGluZWw7IGkrKykgeworCQlyZXNlcnZlZG1lbV9v
Zl9pbml0X2ZuIGluaXRmbiA9IGktPmRhdGE7CisJCWNvbnN0IGNoYXIgKmNvbXBhdCA9IGktPmNv
bXBhdGlibGU7CisKKwkJaWYgKCFvZl9mbGF0X2R0X2lzX2NvbXBhdGlibGUocm1lbS0+ZmR0X25v
ZGUsIGNvbXBhdCkpCisJCQljb250aW51ZTsKKworCQlyZXQgPSBpbml0Zm4ocm1lbSk7CisJCWlm
IChyZXQgPT0gMCkgeworCQkJcHJfaW5mbygiaW5pdGlhbGl6ZWQgbm9kZSAlcywgY29tcGF0aWJs
ZSBpZCAlc1xuIiwKKwkJCQlybWVtLT5uYW1lLCBjb21wYXQpOworCQkJYnJlYWs7CisJCX0KKwl9
CisJcmV0dXJuIHJldDsKK30KKwogLyoqCi0gKiBmZHRfaW5pdF9yZXNlcnZlZF9tZW0oKSAtIGFs
bG9jYXRlIGFuZCBpbml0IGFsbCBzYXZlZCByZXNlcnZlZCBtZW1vcnkgcmVnaW9ucworICogb2Zf
cmVzZXJ2ZWRfbWVtX2luaXQoKSAtIGFsbG9jYXRlIGFuZCBpbml0IGFsbCBzYXZlZCByZXNlcnZl
ZCBtZW1vcnkgcmVnaW9ucwogICovCi12b2lkIF9faW5pdCBmZHRfaW5pdF9yZXNlcnZlZF9tZW0o
dm9pZCkKK3ZvaWQgX19pbml0IG9mX3Jlc2VydmVkX21lbV9pbml0KHZvaWQpCiB7CiAJaW50IGk7
CiAKQEAgLTI1OSw3ICszNjIsNyBAQCB2b2lkIF9faW5pdCBmZHRfaW5pdF9yZXNlcnZlZF9tZW0o
dm9pZCkKIAlfX3JtZW1fY2hlY2tfZm9yX292ZXJsYXAoKTsKIAogCWZvciAoaSA9IDA7IGkgPCBy
ZXNlcnZlZF9tZW1fY291bnQ7IGkrKykgewotCQlzdHJ1Y3QgcmVzZXJ2ZWRfbWVtICpybWVtID0g
JnJlc2VydmVkX21lbVtpXTsKKwkJc3RydWN0IHJlc2VydmVkX21lbSAqcm1lbSA9ICZyZXNlcnZl
ZF9tZW1zW2ldOwogCQl1bnNpZ25lZCBsb25nIG5vZGUgPSBybWVtLT5mZHRfbm9kZTsKIAkJaW50
IGxlbjsKIAkJY29uc3QgX19iZTMyICpwcm9wOwpAQCAtMjk5LDggKzQwMiw4IEBAIHN0YXRpYyBp
bmxpbmUgc3RydWN0IHJlc2VydmVkX21lbSAqX19maW5kX3JtZW0oc3RydWN0IGRldmljZV9ub2Rl
ICpub2RlKQogCQlyZXR1cm4gTlVMTDsKIAogCWZvciAoaSA9IDA7IGkgPCByZXNlcnZlZF9tZW1f
Y291bnQ7IGkrKykKLQkJaWYgKHJlc2VydmVkX21lbVtpXS5waGFuZGxlID09IG5vZGUtPnBoYW5k
bGUpCi0JCQlyZXR1cm4gJnJlc2VydmVkX21lbVtpXTsKKwkJaWYgKHJlc2VydmVkX21lbXNbaV0u
cGhhbmRsZSA9PSBub2RlLT5waGFuZGxlKQorCQkJcmV0dXJuICZyZXNlcnZlZF9tZW1zW2ldOwog
CXJldHVybiBOVUxMOwogfQogCkBAIC00NDIsOCArNTQ1LDggQEAgc3RydWN0IHJlc2VydmVkX21l
bSAqb2ZfcmVzZXJ2ZWRfbWVtX2xvb2t1cChzdHJ1Y3QgZGV2aWNlX25vZGUgKm5wKQogCiAJbmFt
ZSA9IGtiYXNlbmFtZShucC0+ZnVsbF9uYW1lKTsKIAlmb3IgKGkgPSAwOyBpIDwgcmVzZXJ2ZWRf
bWVtX2NvdW50OyBpKyspCi0JCWlmICghc3RyY21wKHJlc2VydmVkX21lbVtpXS5uYW1lLCBuYW1l
KSkKLQkJCXJldHVybiAmcmVzZXJ2ZWRfbWVtW2ldOworCQlpZiAoIXN0cmNtcChyZXNlcnZlZF9t
ZW1zW2ldLm5hbWUsIG5hbWUpKQorCQkJcmV0dXJuICZyZXNlcnZlZF9tZW1zW2ldOwogCiAJcmV0
dXJuIE5VTEw7CiB9CmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L29mX3Jlc2VydmVkX21lbS5o
IGIvaW5jbHVkZS9saW51eC9vZl9yZXNlcnZlZF9tZW0uaAppbmRleCA0ZGUyYTI0Y2FkYzkuLjM0
ZTEzNGJlYzYwNiAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9vZl9yZXNlcnZlZF9tZW0uaAor
KysgYi9pbmNsdWRlL2xpbnV4L29mX3Jlc2VydmVkX21lbS5oCkBAIC0zMiw2ICszMiw4IEBAIHR5
cGVkZWYgaW50ICgqcmVzZXJ2ZWRtZW1fb2ZfaW5pdF9mbikoc3RydWN0IHJlc2VydmVkX21lbSAq
cm1lbSk7CiAjZGVmaW5lIFJFU0VSVkVETUVNX09GX0RFQ0xBUkUobmFtZSwgY29tcGF0LCBpbml0
KQkJCVwKIAlfT0ZfREVDTEFSRShyZXNlcnZlZG1lbSwgbmFtZSwgY29tcGF0LCBpbml0LCByZXNl
cnZlZG1lbV9vZl9pbml0X2ZuKQogCit2b2lkIG9mX3Jlc2VydmVkX21lbV9pbml0KHZvaWQpOwor
CiBpbnQgb2ZfcmVzZXJ2ZWRfbWVtX2RldmljZV9pbml0X2J5X2lkeChzdHJ1Y3QgZGV2aWNlICpk
ZXYsCiAJCQkJICAgICAgIHN0cnVjdCBkZXZpY2Vfbm9kZSAqbnAsIGludCBpZHgpOwogaW50IG9m
X3Jlc2VydmVkX21lbV9kZXZpY2VfaW5pdF9ieV9uYW1lKHN0cnVjdCBkZXZpY2UgKmRldiwKQEAg
LTQ1LDYgKzQ3LDggQEAgc3RydWN0IHJlc2VydmVkX21lbSAqb2ZfcmVzZXJ2ZWRfbWVtX2xvb2t1
cChzdHJ1Y3QgZGV2aWNlX25vZGUgKm5wKTsKICNkZWZpbmUgUkVTRVJWRURNRU1fT0ZfREVDTEFS
RShuYW1lLCBjb21wYXQsIGluaXQpCQkJXAogCV9PRl9ERUNMQVJFX1NUVUIocmVzZXJ2ZWRtZW0s
IG5hbWUsIGNvbXBhdCwgaW5pdCwgcmVzZXJ2ZWRtZW1fb2ZfaW5pdF9mbikKIAorc3RhdGljIGlu
bGluZSB2b2lkIG9mX3Jlc2VydmVkX21lbV9pbml0KHZvaWQpIHsgfQorCiBzdGF0aWMgaW5saW5l
IGludCBvZl9yZXNlcnZlZF9tZW1fZGV2aWNlX2luaXRfYnlfaWR4KHN0cnVjdCBkZXZpY2UgKmRl
diwKIAkJCQkJc3RydWN0IGRldmljZV9ub2RlICpucCwgaW50IGlkeCkKIHsKLS0gCjIuMzAuMgoK
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KT3BlblJJU0Mg
bWFpbGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMub3JnCmh0dHBzOi8vbGlzdHMu
bGlicmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJpc2MK
