Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 5B93C2460C7
	for <lists+openrisc@lfdr.de>; Mon, 17 Aug 2020 10:46:33 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id A8F5420CA9;
	Mon, 17 Aug 2020 10:46:32 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 0A97820D68
 for <openrisc@lists.librecores.org>; Sun,  2 Aug 2020 18:36:50 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 4AD3920738;
 Sun,  2 Aug 2020 16:36:38 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1596386208;
 bh=bvOZXZn2Is9HaEyacfk+zuwnN9XcV7hJvRbYvlOqOFo=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=wmv8Qn+1cHW6QKzScHV7LZNq6tXdAJoVbRypaFxmKA/6bDPhyDpdrJk5+6eZB4qBq
 qxmteueGLjs6eBEwtl32V7ryAXvtqFt7L7bP+hF73c8+pCWuJGKyNbQXU2ugMMPLWL
 Mb2udXf375cAb8h9iwJVMEo8Q1JtQ4J2tCBAox+U=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Sun,  2 Aug 2020 19:35:47 +0300
Message-Id: <20200802163601.8189-4-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200802163601.8189-1-rppt@kernel.org>
References: <20200802163601.8189-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Mon, 17 Aug 2020 10:45:38 +0200
Subject: [OpenRISC] [PATCH v2 03/17] arm,
 xtensa: simplify initialization of high memory pages
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Thomas Gleixner <tglx@linutronix.de>,
 Emil Renner Berthing <kernel@esmil.dk>, linux-sh@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Christoph Hellwig <hch@lst.de>,
 Marek Szyprowski <m.szyprowski@samsung.com>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Michael Ellerman <mpe@ellerman.id.au>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Mike Rapoport <rppt@linux.ibm.com>, clang-built-linux@googlegroups.com,
 Ingo Molnar <mingo@redhat.com>, linux-arm-kernel@lists.infradead.org,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Hari Bathini <hbathini@linux.ibm.com>, Michal Simek <monstr@monstr.eu>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, linux-mm@kvack.org,
 linux-kernel@vger.kernel.org, iommu@lists.linux-foundation.org,
 Palmer Dabbelt <palmer@dabbelt.com>, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlIGZ1bmN0aW9uIGZy
ZWVfaGlnaHBhZ2VzKCkgaW4gYm90aCBhcm0gYW5kIHh0ZW5zYSBlc3NlbnRpYWxseSBvcGVuLWNv
ZGUKZm9yX2VhY2hfZnJlZV9tZW1fcmFuZ2UoKSBsb29wIHRvIGRldGVjdCBoaWdoIG1lbW9yeSBw
YWdlcyB0aGF0IHdlcmUgbm90CnJlc2VydmVkIGFuZCB0aGF0IHNob3VsZCBiZSBpbml0aWFsaXpl
ZCBhbmQgcGFzc2VkIHRvIHRoZSBidWRkeSBhbGxvY2F0b3IuCgpSZXBsYWNlIG9wZW4tY29kZWQg
aW1wbGVtZW50YXRpb24gb2YgZm9yX2VhY2hfZnJlZV9tZW1fcmFuZ2UoKSB3aXRoIHVzYWdlCm9m
IG1lbWJsb2NrIEFQSSB0byBzaW1wbGlmeSB0aGUgY29kZS4KClNpZ25lZC1vZmYtYnk6IE1pa2Ug
UmFwb3BvcnQgPHJwcHRAbGludXguaWJtLmNvbT4KUmV2aWV3ZWQtYnk6IE1heCBGaWxpcHBvdiA8
amNtdmJrYmNAZ21haWwuY29tPgkJIyB4dGVuc2EKVGVzdGVkLWJ5OiBNYXggRmlsaXBwb3YgPGpj
bXZia2JjQGdtYWlsLmNvbT4JCSMgeHRlbnNhCi0tLQogYXJjaC9hcm0vbW0vaW5pdC5jICAgIHwg
NDggKysrKysrKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogYXJjaC94dGVuc2EvbW0v
aW5pdC5jIHwgNTUgKysrKysrKystLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQog
MiBmaWxlcyBjaGFuZ2VkLCAxOCBpbnNlcnRpb25zKCspLCA4NSBkZWxldGlvbnMoLSkKCmRpZmYg
LS1naXQgYS9hcmNoL2FybS9tbS9pbml0LmMgYi9hcmNoL2FybS9tbS9pbml0LmMKaW5kZXggMDFl
MThlNDNiMTc0Li42MjZhZjM0OGViOGYgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL21tL2luaXQuYwor
KysgYi9hcmNoL2FybS9tbS9pbml0LmMKQEAgLTM1Miw2MSArMzUyLDI5IEBAIHN0YXRpYyB2b2lk
IF9faW5pdCBmcmVlX3VudXNlZF9tZW1tYXAodm9pZCkKICNlbmRpZgogfQogCi0jaWZkZWYgQ09O
RklHX0hJR0hNRU0KLXN0YXRpYyBpbmxpbmUgdm9pZCBmcmVlX2FyZWFfaGlnaCh1bnNpZ25lZCBs
b25nIHBmbiwgdW5zaWduZWQgbG9uZyBlbmQpCi17Ci0JZm9yICg7IHBmbiA8IGVuZDsgcGZuKysp
Ci0JCWZyZWVfaGlnaG1lbV9wYWdlKHBmbl90b19wYWdlKHBmbikpOwotfQotI2VuZGlmCi0KIHN0
YXRpYyB2b2lkIF9faW5pdCBmcmVlX2hpZ2hwYWdlcyh2b2lkKQogewogI2lmZGVmIENPTkZJR19I
SUdITUVNCiAJdW5zaWduZWQgbG9uZyBtYXhfbG93ID0gbWF4X2xvd19wZm47Ci0Jc3RydWN0IG1l
bWJsb2NrX3JlZ2lvbiAqbWVtLCAqcmVzOworCXBoeXNfYWRkcl90IHJhbmdlX3N0YXJ0LCByYW5n
ZV9lbmQ7CisJdTY0IGk7CiAKIAkvKiBzZXQgaGlnaG1lbSBwYWdlIGZyZWUgKi8KLQlmb3JfZWFj
aF9tZW1ibG9jayhtZW1vcnksIG1lbSkgewotCQl1bnNpZ25lZCBsb25nIHN0YXJ0ID0gbWVtYmxv
Y2tfcmVnaW9uX21lbW9yeV9iYXNlX3BmbihtZW0pOwotCQl1bnNpZ25lZCBsb25nIGVuZCA9IG1l
bWJsb2NrX3JlZ2lvbl9tZW1vcnlfZW5kX3BmbihtZW0pOworCWZvcl9lYWNoX2ZyZWVfbWVtX3Jh
bmdlKGksIE5VTUFfTk9fTk9ERSwgTUVNQkxPQ0tfTk9ORSwKKwkJCQkmcmFuZ2Vfc3RhcnQsICZy
YW5nZV9lbmQsIE5VTEwpIHsKKwkJdW5zaWduZWQgbG9uZyBzdGFydCA9IFBIWVNfUEZOKHJhbmdl
X3N0YXJ0KTsKKwkJdW5zaWduZWQgbG9uZyBlbmQgPSBQSFlTX1BGTihyYW5nZV9lbmQpOwogCiAJ
CS8qIElnbm9yZSBjb21wbGV0ZSBsb3dtZW0gZW50cmllcyAqLwogCQlpZiAoZW5kIDw9IG1heF9s
b3cpCiAJCQljb250aW51ZTsKIAotCQlpZiAobWVtYmxvY2tfaXNfbm9tYXAobWVtKSkKLQkJCWNv
bnRpbnVlOwotCiAJCS8qIFRydW5jYXRlIHBhcnRpYWwgaGlnaG1lbSBlbnRyaWVzICovCiAJCWlm
IChzdGFydCA8IG1heF9sb3cpCiAJCQlzdGFydCA9IG1heF9sb3c7CiAKLQkJLyogRmluZCBhbmQg
ZXhjbHVkZSBhbnkgcmVzZXJ2ZWQgcmVnaW9ucyAqLwotCQlmb3JfZWFjaF9tZW1ibG9jayhyZXNl
cnZlZCwgcmVzKSB7Ci0JCQl1bnNpZ25lZCBsb25nIHJlc19zdGFydCwgcmVzX2VuZDsKLQotCQkJ
cmVzX3N0YXJ0ID0gbWVtYmxvY2tfcmVnaW9uX3Jlc2VydmVkX2Jhc2VfcGZuKHJlcyk7Ci0JCQly
ZXNfZW5kID0gbWVtYmxvY2tfcmVnaW9uX3Jlc2VydmVkX2VuZF9wZm4ocmVzKTsKLQotCQkJaWYg
KHJlc19lbmQgPCBzdGFydCkKLQkJCQljb250aW51ZTsKLQkJCWlmIChyZXNfc3RhcnQgPCBzdGFy
dCkKLQkJCQlyZXNfc3RhcnQgPSBzdGFydDsKLQkJCWlmIChyZXNfc3RhcnQgPiBlbmQpCi0JCQkJ
cmVzX3N0YXJ0ID0gZW5kOwotCQkJaWYgKHJlc19lbmQgPiBlbmQpCi0JCQkJcmVzX2VuZCA9IGVu
ZDsKLQkJCWlmIChyZXNfc3RhcnQgIT0gc3RhcnQpCi0JCQkJZnJlZV9hcmVhX2hpZ2goc3RhcnQs
IHJlc19zdGFydCk7Ci0JCQlzdGFydCA9IHJlc19lbmQ7Ci0JCQlpZiAoc3RhcnQgPT0gZW5kKQot
CQkJCWJyZWFrOwotCQl9Ci0KLQkJLyogQW5kIG5vdyBmcmVlIGFueXRoaW5nIHdoaWNoIHJlbWFp
bnMgKi8KLQkJaWYgKHN0YXJ0IDwgZW5kKQotCQkJZnJlZV9hcmVhX2hpZ2goc3RhcnQsIGVuZCk7
CisJCWZvciAoOyBzdGFydCA8IGVuZDsgc3RhcnQrKykKKwkJCWZyZWVfaGlnaG1lbV9wYWdlKHBm
bl90b19wYWdlKHN0YXJ0KSk7CiAJfQogI2VuZGlmCiB9CmRpZmYgLS1naXQgYS9hcmNoL3h0ZW5z
YS9tbS9pbml0LmMgYi9hcmNoL3h0ZW5zYS9tbS9pbml0LmMKaW5kZXggYTA1YjMwNmNmMzcxLi5h
ZDlkNTlkOTNmMzkgMTAwNjQ0Ci0tLSBhL2FyY2gveHRlbnNhL21tL2luaXQuYworKysgYi9hcmNo
L3h0ZW5zYS9tbS9pbml0LmMKQEAgLTc5LDY3ICs3OSwzMiBAQCB2b2lkIF9faW5pdCB6b25lc19p
bml0KHZvaWQpCiAJZnJlZV9hcmVhX2luaXQobWF4X3pvbmVfcGZuKTsKIH0KIAotI2lmZGVmIENP
TkZJR19ISUdITUVNCi1zdGF0aWMgdm9pZCBfX2luaXQgZnJlZV9hcmVhX2hpZ2godW5zaWduZWQg
bG9uZyBwZm4sIHVuc2lnbmVkIGxvbmcgZW5kKQotewotCWZvciAoOyBwZm4gPCBlbmQ7IHBmbisr
KQotCQlmcmVlX2hpZ2htZW1fcGFnZShwZm5fdG9fcGFnZShwZm4pKTsKLX0KLQogc3RhdGljIHZv
aWQgX19pbml0IGZyZWVfaGlnaHBhZ2VzKHZvaWQpCiB7CisjaWZkZWYgQ09ORklHX0hJR0hNRU0K
IAl1bnNpZ25lZCBsb25nIG1heF9sb3cgPSBtYXhfbG93X3BmbjsKLQlzdHJ1Y3QgbWVtYmxvY2tf
cmVnaW9uICptZW0sICpyZXM7CisJcGh5c19hZGRyX3QgcmFuZ2Vfc3RhcnQsIHJhbmdlX2VuZDsK
Kwl1NjQgaTsKIAotCXJlc2V0X2FsbF96b25lc19tYW5hZ2VkX3BhZ2VzKCk7CiAJLyogc2V0IGhp
Z2htZW0gcGFnZSBmcmVlICovCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCBtZW0pIHsKLQkJ
dW5zaWduZWQgbG9uZyBzdGFydCA9IG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfYmFzZV9wZm4obWVt
KTsKLQkJdW5zaWduZWQgbG9uZyBlbmQgPSBtZW1ibG9ja19yZWdpb25fbWVtb3J5X2VuZF9wZm4o
bWVtKTsKKwlmb3JfZWFjaF9mcmVlX21lbV9yYW5nZShpLCBOVU1BX05PX05PREUsIE1FTUJMT0NL
X05PTkUsCisJCQkJJnJhbmdlX3N0YXJ0LCAmcmFuZ2VfZW5kLCBOVUxMKSB7CisJCXVuc2lnbmVk
IGxvbmcgc3RhcnQgPSBQSFlTX1BGTihyYW5nZV9zdGFydCk7CisJCXVuc2lnbmVkIGxvbmcgZW5k
ID0gUEhZU19QRk4ocmFuZ2VfZW5kKTsKIAogCQkvKiBJZ25vcmUgY29tcGxldGUgbG93bWVtIGVu
dHJpZXMgKi8KIAkJaWYgKGVuZCA8PSBtYXhfbG93KQogCQkJY29udGludWU7CiAKLQkJaWYgKG1l
bWJsb2NrX2lzX25vbWFwKG1lbSkpCi0JCQljb250aW51ZTsKLQogCQkvKiBUcnVuY2F0ZSBwYXJ0
aWFsIGhpZ2htZW0gZW50cmllcyAqLwogCQlpZiAoc3RhcnQgPCBtYXhfbG93KQogCQkJc3RhcnQg
PSBtYXhfbG93OwogCi0JCS8qIEZpbmQgYW5kIGV4Y2x1ZGUgYW55IHJlc2VydmVkIHJlZ2lvbnMg
Ki8KLQkJZm9yX2VhY2hfbWVtYmxvY2socmVzZXJ2ZWQsIHJlcykgewotCQkJdW5zaWduZWQgbG9u
ZyByZXNfc3RhcnQsIHJlc19lbmQ7Ci0KLQkJCXJlc19zdGFydCA9IG1lbWJsb2NrX3JlZ2lvbl9y
ZXNlcnZlZF9iYXNlX3BmbihyZXMpOwotCQkJcmVzX2VuZCA9IG1lbWJsb2NrX3JlZ2lvbl9yZXNl
cnZlZF9lbmRfcGZuKHJlcyk7Ci0KLQkJCWlmIChyZXNfZW5kIDwgc3RhcnQpCi0JCQkJY29udGlu
dWU7Ci0JCQlpZiAocmVzX3N0YXJ0IDwgc3RhcnQpCi0JCQkJcmVzX3N0YXJ0ID0gc3RhcnQ7Ci0J
CQlpZiAocmVzX3N0YXJ0ID4gZW5kKQotCQkJCXJlc19zdGFydCA9IGVuZDsKLQkJCWlmIChyZXNf
ZW5kID4gZW5kKQotCQkJCXJlc19lbmQgPSBlbmQ7Ci0JCQlpZiAocmVzX3N0YXJ0ICE9IHN0YXJ0
KQotCQkJCWZyZWVfYXJlYV9oaWdoKHN0YXJ0LCByZXNfc3RhcnQpOwotCQkJc3RhcnQgPSByZXNf
ZW5kOwotCQkJaWYgKHN0YXJ0ID09IGVuZCkKLQkJCQlicmVhazsKLQkJfQotCi0JCS8qIEFuZCBu
b3cgZnJlZSBhbnl0aGluZyB3aGljaCByZW1haW5zICovCi0JCWlmIChzdGFydCA8IGVuZCkKLQkJ
CWZyZWVfYXJlYV9oaWdoKHN0YXJ0LCBlbmQpOworCQlmb3IgKDsgc3RhcnQgPCBlbmQ7IHN0YXJ0
KyspCisJCQlmcmVlX2hpZ2htZW1fcGFnZShwZm5fdG9fcGFnZShzdGFydCkpOwogCX0KLX0KLSNl
bHNlCi1zdGF0aWMgdm9pZCBfX2luaXQgZnJlZV9oaWdocGFnZXModm9pZCkKLXsKLX0KICNlbmRp
ZgorfQogCiAvKgogICogSW5pdGlhbGl6ZSBtZW1vcnkgcGFnZXMuCi0tIAoyLjI2LjIKCl9fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxp
bmcgbGlzdApPcGVuUklTQ0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJl
Y29yZXMub3JnL2xpc3RpbmZvL29wZW5yaXNjCg==
