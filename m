Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 9598F2E2929
	for <lists+openrisc@lfdr.de>; Fri, 25 Dec 2020 00:15:26 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 8C52820E48;
	Fri, 25 Dec 2020 00:15:24 +0100 (CET)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id B9B69202F9
 for <openrisc@lists.librecores.org>; Thu,  3 Dec 2020 14:29:21 +0100 (CET)
From: Sasha Levin <sashal@kernel.org>
Authentication-Results: mail.kernel.org;
 dkim=permerror (bad message/signature format)
To: linux-kernel@vger.kernel.org,
	stable@vger.kernel.org
Date: Thu,  3 Dec 2020 08:28:21 -0500
Message-Id: <20201203132834.930999-27-sashal@kernel.org>
X-Mailer: git-send-email 2.27.0
In-Reply-To: <20201203132834.930999-1-sashal@kernel.org>
References: <20201203132834.930999-1-sashal@kernel.org>
MIME-Version: 1.0
X-stable: review
X-Patchwork-Hint: Ignore
X-Mailman-Approved-At: Fri, 25 Dec 2020 00:15:21 +0100
Subject: [OpenRISC] [PATCH AUTOSEL 5.9 27/39] sched/idle: Fix
 arch_cpu_idle() vs tracing
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Mark Rutland <mark.rutland@arm.com>, Sasha Levin <sashal@kernel.org>,
 linux-ia64@vger.kernel.org, linux-parisc@vger.kernel.org,
 linux-s390@vger.kernel.org, Peter Zijlstra <peterz@infradead.org>,
 linux-hexagon@vger.kernel.org, linux-sh@vger.kernel.org,
 linux-um@lists.infradead.org, linux-mips@vger.kernel.org,
 linux-csky@vger.kernel.org, sparclinux@vger.kernel.org,
 openrisc@lists.librecores.org, Sven Schnelle <svens@linux.ibm.com>,
 linux-alpha@vger.kernel.org, uclinux-h8-devel@lists.sourceforge.jp,
 linux-riscv@lists.infradead.org, linuxppc-dev@lists.ozlabs.org,
 linux-arm-kernel@lists.infradead.org
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogUGV0ZXIgWmlqbHN0cmEgPHBldGVyekBpbmZyYWRlYWQub3JnPgoKWyBVcHN0cmVhbSBj
b21taXQgNThjNjQ0YmE1MTJjZmJjMmUzOWI3NThkZDk3OWVkZDFkNmQwMGUyNyBdCgpXZSBjYWxs
IGFyY2hfY3B1X2lkbGUoKSB3aXRoIFJDVSBkaXNhYmxlZCwgYnV0IHRoZW4gdXNlCmxvY2FsX2ly
cV97ZW4sZGlzfWFibGUoKSwgd2hpY2ggaW52b2tlcyB0cmFjaW5nLCB3aGljaCByZWxpZXMgb24g
UkNVLgoKU3dpdGNoIGFsbCBhcmNoX2NwdV9pZGxlKCkgaW1wbGVtZW50YXRpb25zIHRvIHVzZQpy
YXdfbG9jYWxfaXJxX3tlbixkaXN9YWJsZSgpIGFuZCBjYXJlZnVsbHkgbWFuYWdlIHRoZQpsb2Nr
ZGVwLHJjdSx0cmFjaW5nIHN0YXRlIGxpa2Ugd2UgZG8gaW4gZW50cnkuCgooWFhYOiB3ZSByZWFs
bHkgc2hvdWxkIGNoYW5nZSBhcmNoX2NwdV9pZGxlKCkgdG8gbm90IHJldHVybiB3aXRoCmludGVy
cnVwdHMgZW5hYmxlZCkKClJlcG9ydGVkLWJ5OiBTdmVuIFNjaG5lbGxlIDxzdmVuc0BsaW51eC5p
Ym0uY29tPgpTaWduZWQtb2ZmLWJ5OiBQZXRlciBaaWpsc3RyYSAoSW50ZWwpIDxwZXRlcnpAaW5m
cmFkZWFkLm9yZz4KUmV2aWV3ZWQtYnk6IE1hcmsgUnV0bGFuZCA8bWFyay5ydXRsYW5kQGFybS5j
b20+ClRlc3RlZC1ieTogTWFyayBSdXRsYW5kIDxtYXJrLnJ1dGxhbmRAYXJtLmNvbT4KTGluazog
aHR0cHM6Ly9sa21sLmtlcm5lbC5vcmcvci8yMDIwMTEyMDExNDkyNS41OTQxMjI2MjZAaW5mcmFk
ZWFkLm9yZwpTaWduZWQtb2ZmLWJ5OiBTYXNoYSBMZXZpbiA8c2FzaGFsQGtlcm5lbC5vcmc+Ci0t
LQogYXJjaC9hbHBoYS9rZXJuZWwvcHJvY2Vzcy5jICAgICAgfCAgMiArLQogYXJjaC9hcm0va2Vy
bmVsL3Byb2Nlc3MuYyAgICAgICAgfCAgMiArLQogYXJjaC9hcm02NC9rZXJuZWwvcHJvY2Vzcy5j
ICAgICAgfCAgMiArLQogYXJjaC9jc2t5L2tlcm5lbC9wcm9jZXNzLmMgICAgICAgfCAgMiArLQog
YXJjaC9oODMwMC9rZXJuZWwvcHJvY2Vzcy5jICAgICAgfCAgMiArLQogYXJjaC9oZXhhZ29uL2tl
cm5lbC9wcm9jZXNzLmMgICAgfCAgMiArLQogYXJjaC9pYTY0L2tlcm5lbC9wcm9jZXNzLmMgICAg
ICAgfCAgMiArLQogYXJjaC9taWNyb2JsYXplL2tlcm5lbC9wcm9jZXNzLmMgfCAgMiArLQogYXJj
aC9taXBzL2tlcm5lbC9pZGxlLmMgICAgICAgICAgfCAxMiArKysrKystLS0tLS0KIGFyY2gvbmlv
czIva2VybmVsL3Byb2Nlc3MuYyAgICAgIHwgIDIgKy0KIGFyY2gvb3BlbnJpc2Mva2VybmVsL3By
b2Nlc3MuYyAgIHwgIDIgKy0KIGFyY2gvcGFyaXNjL2tlcm5lbC9wcm9jZXNzLmMgICAgIHwgIDIg
Ky0KIGFyY2gvcG93ZXJwYy9rZXJuZWwvaWRsZS5jICAgICAgIHwgIDQgKystLQogYXJjaC9yaXNj
di9rZXJuZWwvcHJvY2Vzcy5jICAgICAgfCAgMiArLQogYXJjaC9zMzkwL2tlcm5lbC9pZGxlLmMg
ICAgICAgICAgfCAgNiArKystLS0KIGFyY2gvc2gva2VybmVsL2lkbGUuYyAgICAgICAgICAgIHwg
IDIgKy0KIGFyY2gvc3BhcmMva2VybmVsL2xlb25fcG1jLmMgICAgIHwgIDQgKystLQogYXJjaC9z
cGFyYy9rZXJuZWwvcHJvY2Vzc18zMi5jICAgfCAgMiArLQogYXJjaC9zcGFyYy9rZXJuZWwvcHJv
Y2Vzc182NC5jICAgfCAgNCArKy0tCiBhcmNoL3VtL2tlcm5lbC9wcm9jZXNzLmMgICAgICAgICB8
ICAyICstCiBhcmNoL3g4Ni9pbmNsdWRlL2FzbS9td2FpdC5oICAgICB8ICAyIC0tCiBhcmNoL3g4
Ni9rZXJuZWwvcHJvY2Vzcy5jICAgICAgICB8IDEyICsrKysrKystLS0tLQoga2VybmVsL3NjaGVk
L2lkbGUuYyAgICAgICAgICAgICAgfCAyOCArKysrKysrKysrKysrKysrKysrKysrKysrKystCiAy
MyBmaWxlcyBjaGFuZ2VkLCA2NCBpbnNlcnRpb25zKCspLCAzOCBkZWxldGlvbnMoLSkKCmRpZmYg
LS1naXQgYS9hcmNoL2FscGhhL2tlcm5lbC9wcm9jZXNzLmMgYi9hcmNoL2FscGhhL2tlcm5lbC9w
cm9jZXNzLmMKaW5kZXggNzQ2MmE3OTExMDAyNC4uNGM3YjA0MTRhM2ZmMyAxMDA2NDQKLS0tIGEv
YXJjaC9hbHBoYS9rZXJuZWwvcHJvY2Vzcy5jCisrKyBiL2FyY2gvYWxwaGEva2VybmVsL3Byb2Nl
c3MuYwpAQCAtNTcsNyArNTcsNyBAQCBFWFBPUlRfU1lNQk9MKHBtX3Bvd2VyX29mZik7CiB2b2lk
IGFyY2hfY3B1X2lkbGUodm9pZCkKIHsKIAl3dGludCgwKTsKLQlsb2NhbF9pcnFfZW5hYmxlKCk7
CisJcmF3X2xvY2FsX2lycV9lbmFibGUoKTsKIH0KIAogdm9pZCBhcmNoX2NwdV9pZGxlX2RlYWQo
dm9pZCkKZGlmZiAtLWdpdCBhL2FyY2gvYXJtL2tlcm5lbC9wcm9jZXNzLmMgYi9hcmNoL2FybS9r
ZXJuZWwvcHJvY2Vzcy5jCmluZGV4IDhlNmFjZTAzZTk2MGIuLjlmMTk5YjFlODM4MzkgMTAwNjQ0
Ci0tLSBhL2FyY2gvYXJtL2tlcm5lbC9wcm9jZXNzLmMKKysrIGIvYXJjaC9hcm0va2VybmVsL3By
b2Nlc3MuYwpAQCAtNzEsNyArNzEsNyBAQCB2b2lkIGFyY2hfY3B1X2lkbGUodm9pZCkKIAkJYXJt
X3BtX2lkbGUoKTsKIAllbHNlCiAJCWNwdV9kb19pZGxlKCk7Ci0JbG9jYWxfaXJxX2VuYWJsZSgp
OworCXJhd19sb2NhbF9pcnFfZW5hYmxlKCk7CiB9CiAKIHZvaWQgYXJjaF9jcHVfaWRsZV9wcmVw
YXJlKHZvaWQpCmRpZmYgLS1naXQgYS9hcmNoL2FybTY0L2tlcm5lbC9wcm9jZXNzLmMgYi9hcmNo
L2FybTY0L2tlcm5lbC9wcm9jZXNzLmMKaW5kZXggMmRhNWYzZjlkMzQ1Zi4uZjdjNDJhN2QwOWI2
NiAxMDA2NDQKLS0tIGEvYXJjaC9hcm02NC9rZXJuZWwvcHJvY2Vzcy5jCisrKyBiL2FyY2gvYXJt
NjQva2VybmVsL3Byb2Nlc3MuYwpAQCAtMTI0LDcgKzEyNCw3IEBAIHZvaWQgYXJjaF9jcHVfaWRs
ZSh2b2lkKQogCSAqIHRyaWNrcwogCSAqLwogCWNwdV9kb19pZGxlKCk7Ci0JbG9jYWxfaXJxX2Vu
YWJsZSgpOworCXJhd19sb2NhbF9pcnFfZW5hYmxlKCk7CiB9CiAKICNpZmRlZiBDT05GSUdfSE9U
UExVR19DUFUKZGlmZiAtLWdpdCBhL2FyY2gvY3NreS9rZXJuZWwvcHJvY2Vzcy5jIGIvYXJjaC9j
c2t5L2tlcm5lbC9wcm9jZXNzLmMKaW5kZXggZjczMDg2OWUyMWVlZC4uNjlhZjZiYzg3ZTY0NyAx
MDA2NDQKLS0tIGEvYXJjaC9jc2t5L2tlcm5lbC9wcm9jZXNzLmMKKysrIGIvYXJjaC9jc2t5L2tl
cm5lbC9wcm9jZXNzLmMKQEAgLTEwMiw2ICsxMDIsNiBAQCB2b2lkIGFyY2hfY3B1X2lkbGUodm9p
ZCkKICNpZmRlZiBDT05GSUdfQ1BVX1BNX1NUT1AKIAlhc20gdm9sYXRpbGUoInN0b3BcbiIpOwog
I2VuZGlmCi0JbG9jYWxfaXJxX2VuYWJsZSgpOworCXJhd19sb2NhbF9pcnFfZW5hYmxlKCk7CiB9
CiAjZW5kaWYKZGlmZiAtLWdpdCBhL2FyY2gvaDgzMDAva2VybmVsL3Byb2Nlc3MuYyBiL2FyY2gv
aDgzMDAva2VybmVsL3Byb2Nlc3MuYwppbmRleCA4M2NlM2NhZjczMTM5Li5hMjk2MWM3YjIzMzJj
IDEwMDY0NAotLS0gYS9hcmNoL2g4MzAwL2tlcm5lbC9wcm9jZXNzLmMKKysrIGIvYXJjaC9oODMw
MC9rZXJuZWwvcHJvY2Vzcy5jCkBAIC01Nyw3ICs1Nyw3IEBAIGFzbWxpbmthZ2Ugdm9pZCByZXRf
ZnJvbV9rZXJuZWxfdGhyZWFkKHZvaWQpOwogICovCiB2b2lkIGFyY2hfY3B1X2lkbGUodm9pZCkK
IHsKLQlsb2NhbF9pcnFfZW5hYmxlKCk7CisJcmF3X2xvY2FsX2lycV9lbmFibGUoKTsKIAlfX2Fz
bV9fKCJzbGVlcCIpOwogfQogCmRpZmYgLS1naXQgYS9hcmNoL2hleGFnb24va2VybmVsL3Byb2Nl
c3MuYyBiL2FyY2gvaGV4YWdvbi9rZXJuZWwvcHJvY2Vzcy5jCmluZGV4IGRmZDMyMmM1Y2U4M2Eu
LjIwOTYyNjAxYTFiNDcgMTAwNjQ0Ci0tLSBhL2FyY2gvaGV4YWdvbi9rZXJuZWwvcHJvY2Vzcy5j
CisrKyBiL2FyY2gvaGV4YWdvbi9rZXJuZWwvcHJvY2Vzcy5jCkBAIC00NCw3ICs0NCw3IEBAIHZv
aWQgYXJjaF9jcHVfaWRsZSh2b2lkKQogewogCV9fdm13YWl0KCk7CiAJLyogIGludGVycnVwdHMg
d2FrZSB1cyB1cCwgYnV0IGlycXMgYXJlIHN0aWxsIGRpc2FibGVkICovCi0JbG9jYWxfaXJxX2Vu
YWJsZSgpOworCXJhd19sb2NhbF9pcnFfZW5hYmxlKCk7CiB9CiAKIC8qCmRpZmYgLS1naXQgYS9h
cmNoL2lhNjQva2VybmVsL3Byb2Nlc3MuYyBiL2FyY2gvaWE2NC9rZXJuZWwvcHJvY2Vzcy5jCmlu
ZGV4IGYxOWNiOTdjMDA5ODcuLjFiMjc2OTI2MDY4OGQgMTAwNjQ0Ci0tLSBhL2FyY2gvaWE2NC9r
ZXJuZWwvcHJvY2Vzcy5jCisrKyBiL2FyY2gvaWE2NC9rZXJuZWwvcHJvY2Vzcy5jCkBAIC0yNTIs
NyArMjUyLDcgQEAgdm9pZCBhcmNoX2NwdV9pZGxlKHZvaWQpCiAJaWYgKG1hcmtfaWRsZSkKIAkJ
KCptYXJrX2lkbGUpKDEpOwogCi0Jc2FmZV9oYWx0KCk7CisJcmF3X3NhZmVfaGFsdCgpOwogCiAJ
aWYgKG1hcmtfaWRsZSkKIAkJKCptYXJrX2lkbGUpKDApOwpkaWZmIC0tZ2l0IGEvYXJjaC9taWNy
b2JsYXplL2tlcm5lbC9wcm9jZXNzLmMgYi9hcmNoL21pY3JvYmxhemUva2VybmVsL3Byb2Nlc3Mu
YwppbmRleCBhOWU0NmU1MjVjZDBhLi5mOTk4NjA3NzFmZjQ4IDEwMDY0NAotLS0gYS9hcmNoL21p
Y3JvYmxhemUva2VybmVsL3Byb2Nlc3MuYworKysgYi9hcmNoL21pY3JvYmxhemUva2VybmVsL3By
b2Nlc3MuYwpAQCAtMTQ5LDUgKzE0OSw1IEBAIGludCBkdW1wX2ZwdShzdHJ1Y3QgcHRfcmVncyAq
cmVncywgZWxmX2ZwcmVnc2V0X3QgKmZwcmVncykKIAogdm9pZCBhcmNoX2NwdV9pZGxlKHZvaWQp
CiB7Ci0gICAgICAgbG9jYWxfaXJxX2VuYWJsZSgpOworICAgICAgIHJhd19sb2NhbF9pcnFfZW5h
YmxlKCk7CiB9CmRpZmYgLS1naXQgYS9hcmNoL21pcHMva2VybmVsL2lkbGUuYyBiL2FyY2gvbWlw
cy9rZXJuZWwvaWRsZS5jCmluZGV4IDViYzNiMDQ2OTNjN2QuLjE4ZTY5ZWJmNTY5MWQgMTAwNjQ0
Ci0tLSBhL2FyY2gvbWlwcy9rZXJuZWwvaWRsZS5jCisrKyBiL2FyY2gvbWlwcy9rZXJuZWwvaWRs
ZS5jCkBAIC0zMywxOSArMzMsMTkgQEAgc3RhdGljIHZvaWQgX19jcHVpZGxlIHIzMDgxX3dhaXQo
dm9pZCkKIHsKIAl1bnNpZ25lZCBsb25nIGNmZyA9IHJlYWRfYzBfY29uZigpOwogCXdyaXRlX2Mw
X2NvbmYoY2ZnIHwgUjMwWFhfQ09ORl9IQUxUKTsKLQlsb2NhbF9pcnFfZW5hYmxlKCk7CisJcmF3
X2xvY2FsX2lycV9lbmFibGUoKTsKIH0KIAogc3RhdGljIHZvaWQgX19jcHVpZGxlIHIzOXh4X3dh
aXQodm9pZCkKIHsKIAlpZiAoIW5lZWRfcmVzY2hlZCgpKQogCQl3cml0ZV9jMF9jb25mKHJlYWRf
YzBfY29uZigpIHwgVFgzOV9DT05GX0hBTFQpOwotCWxvY2FsX2lycV9lbmFibGUoKTsKKwlyYXdf
bG9jYWxfaXJxX2VuYWJsZSgpOwogfQogCiB2b2lkIF9fY3B1aWRsZSByNGtfd2FpdCh2b2lkKQog
ewotCWxvY2FsX2lycV9lbmFibGUoKTsKKwlyYXdfbG9jYWxfaXJxX2VuYWJsZSgpOwogCV9fcjRr
X3dhaXQoKTsKIH0KIApAQCAtNjQsNyArNjQsNyBAQCB2b2lkIF9fY3B1aWRsZSByNGtfd2FpdF9p
cnFvZmYodm9pZCkKIAkJIgkuc2V0CWFyY2g9cjQwMDAJXG4iCiAJCSIJd2FpdAkJCVxuIgogCQki
CS5zZXQJcG9wCQlcbiIpOwotCWxvY2FsX2lycV9lbmFibGUoKTsKKwlyYXdfbG9jYWxfaXJxX2Vu
YWJsZSgpOwogfQogCiAvKgpAQCAtODQsNyArODQsNyBAQCBzdGF0aWMgdm9pZCBfX2NwdWlkbGUg
cm03a193YWl0X2lycW9mZih2b2lkKQogCQkiCXdhaXQJCQkJCQlcbiIKIAkJIgltdGMwCSQxLCAk
MTIJCSMgc3RhbGxzIHVudGlsIFcgc3RhZ2UJXG4iCiAJCSIJLnNldAlwb3AJCQkJCVxuIik7Ci0J
bG9jYWxfaXJxX2VuYWJsZSgpOworCXJhd19sb2NhbF9pcnFfZW5hYmxlKCk7CiB9CiAKIC8qCkBA
IC0yNTcsNyArMjU3LDcgQEAgdm9pZCBhcmNoX2NwdV9pZGxlKHZvaWQpCiAJaWYgKGNwdV93YWl0
KQogCQljcHVfd2FpdCgpOwogCWVsc2UKLQkJbG9jYWxfaXJxX2VuYWJsZSgpOworCQlyYXdfbG9j
YWxfaXJxX2VuYWJsZSgpOwogfQogCiAjaWZkZWYgQ09ORklHX0NQVV9JRExFCmRpZmYgLS1naXQg
YS9hcmNoL25pb3MyL2tlcm5lbC9wcm9jZXNzLmMgYi9hcmNoL25pb3MyL2tlcm5lbC9wcm9jZXNz
LmMKaW5kZXggODhhNGVjMDNlZGFiNC4uZjVjYzU1YTg4ZDMxMCAxMDA2NDQKLS0tIGEvYXJjaC9u
aW9zMi9rZXJuZWwvcHJvY2Vzcy5jCisrKyBiL2FyY2gvbmlvczIva2VybmVsL3Byb2Nlc3MuYwpA
QCAtMzMsNyArMzMsNyBAQCBFWFBPUlRfU1lNQk9MKHBtX3Bvd2VyX29mZik7CiAKIHZvaWQgYXJj
aF9jcHVfaWRsZSh2b2lkKQogewotCWxvY2FsX2lycV9lbmFibGUoKTsKKwlyYXdfbG9jYWxfaXJx
X2VuYWJsZSgpOwogfQogCiAvKgpkaWZmIC0tZ2l0IGEvYXJjaC9vcGVucmlzYy9rZXJuZWwvcHJv
Y2Vzcy5jIGIvYXJjaC9vcGVucmlzYy9rZXJuZWwvcHJvY2Vzcy5jCmluZGV4IDBmZjM5MWYwMDMz
NGMuLjNjOTg3MjhjY2UyNDkgMTAwNjQ0Ci0tLSBhL2FyY2gvb3BlbnJpc2Mva2VybmVsL3Byb2Nl
c3MuYworKysgYi9hcmNoL29wZW5yaXNjL2tlcm5lbC9wcm9jZXNzLmMKQEAgLTc5LDcgKzc5LDcg
QEAgdm9pZCBtYWNoaW5lX3Bvd2VyX29mZih2b2lkKQogICovCiB2b2lkIGFyY2hfY3B1X2lkbGUo
dm9pZCkKIHsKLQlsb2NhbF9pcnFfZW5hYmxlKCk7CisJcmF3X2xvY2FsX2lycV9lbmFibGUoKTsK
IAlpZiAobWZzcHIoU1BSX1VQUikgJiBTUFJfVVBSX1BNUCkKIAkJbXRzcHIoU1BSX1BNUiwgbWZz
cHIoU1BSX1BNUikgfCBTUFJfUE1SX0RNRSk7CiB9CmRpZmYgLS1naXQgYS9hcmNoL3BhcmlzYy9r
ZXJuZWwvcHJvY2Vzcy5jIGIvYXJjaC9wYXJpc2Mva2VybmVsL3Byb2Nlc3MuYwppbmRleCBmMTk2
ZDk2ZTJmOWY1Li5hOTJhMjNkNmFjZDkzIDEwMDY0NAotLS0gYS9hcmNoL3BhcmlzYy9rZXJuZWwv
cHJvY2Vzcy5jCisrKyBiL2FyY2gvcGFyaXNjL2tlcm5lbC9wcm9jZXNzLmMKQEAgLTE2OSw3ICsx
NjksNyBAQCB2b2lkIF9fY3B1aWRsZSBhcmNoX2NwdV9pZGxlX2RlYWQodm9pZCkKIAogdm9pZCBf
X2NwdWlkbGUgYXJjaF9jcHVfaWRsZSh2b2lkKQogewotCWxvY2FsX2lycV9lbmFibGUoKTsKKwly
YXdfbG9jYWxfaXJxX2VuYWJsZSgpOwogCiAJLyogbm9wIG9uIHJlYWwgaGFyZHdhcmUsIHFlbXUg
d2lsbCBpZGxlIHNsZWVwLiAqLwogCWFzbSB2b2xhdGlsZSgib3IgJSVyMTAsJSVyMTAsJSVyMTBc
biI6OjopOwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2tlcm5lbC9pZGxlLmMgYi9hcmNoL3Bv
d2VycGMva2VybmVsL2lkbGUuYwppbmRleCA0MjJlMzFkMmY1YTJiLi44ZGYzNWYxMzI5YTQyIDEw
MDY0NAotLS0gYS9hcmNoL3Bvd2VycGMva2VybmVsL2lkbGUuYworKysgYi9hcmNoL3Bvd2VycGMv
a2VybmVsL2lkbGUuYwpAQCAtNjAsOSArNjAsOSBAQCB2b2lkIGFyY2hfY3B1X2lkbGUodm9pZCkK
IAkJICogaW50ZXJydXB0cyBlbmFibGVkLCBzb21lIGRvbid0LgogCQkgKi8KIAkJaWYgKGlycXNf
ZGlzYWJsZWQoKSkKLQkJCWxvY2FsX2lycV9lbmFibGUoKTsKKwkJCXJhd19sb2NhbF9pcnFfZW5h
YmxlKCk7CiAJfSBlbHNlIHsKLQkJbG9jYWxfaXJxX2VuYWJsZSgpOworCQlyYXdfbG9jYWxfaXJx
X2VuYWJsZSgpOwogCQkvKgogCQkgKiBHbyBpbnRvIGxvdyB0aHJlYWQgcHJpb3JpdHkgYW5kIHBv
c3NpYmx5CiAJCSAqIGxvdyBwb3dlciBtb2RlLgpkaWZmIC0tZ2l0IGEvYXJjaC9yaXNjdi9rZXJu
ZWwvcHJvY2Vzcy5jIGIvYXJjaC9yaXNjdi9rZXJuZWwvcHJvY2Vzcy5jCmluZGV4IDJiOTdjNDkz
NDI3YzkuLjMwOGUxZDk1ZWNiZjAgMTAwNjQ0Ci0tLSBhL2FyY2gvcmlzY3Yva2VybmVsL3Byb2Nl
c3MuYworKysgYi9hcmNoL3Jpc2N2L2tlcm5lbC9wcm9jZXNzLmMKQEAgLTM2LDcgKzM2LDcgQEAg
ZXh0ZXJuIGFzbWxpbmthZ2Ugdm9pZCByZXRfZnJvbV9rZXJuZWxfdGhyZWFkKHZvaWQpOwogdm9p
ZCBhcmNoX2NwdV9pZGxlKHZvaWQpCiB7CiAJd2FpdF9mb3JfaW50ZXJydXB0KCk7Ci0JbG9jYWxf
aXJxX2VuYWJsZSgpOworCXJhd19sb2NhbF9pcnFfZW5hYmxlKCk7CiB9CiAKIHZvaWQgc2hvd19y
ZWdzKHN0cnVjdCBwdF9yZWdzICpyZWdzKQpkaWZmIC0tZ2l0IGEvYXJjaC9zMzkwL2tlcm5lbC9p
ZGxlLmMgYi9hcmNoL3MzOTAva2VybmVsL2lkbGUuYwppbmRleCBmN2YxZTY0ZTBkOTgwLi4yYjg1
MDk2OTY0Zjg0IDEwMDY0NAotLS0gYS9hcmNoL3MzOTAva2VybmVsL2lkbGUuYworKysgYi9hcmNo
L3MzOTAva2VybmVsL2lkbGUuYwpAQCAtMzMsMTAgKzMzLDEwIEBAIHZvaWQgZW5hYmxlZF93YWl0
KHZvaWQpCiAJCVBTV19NQVNLX0lPIHwgUFNXX01BU0tfRVhUIHwgUFNXX01BU0tfTUNIRUNLOwog
CWNsZWFyX2NwdV9mbGFnKENJRl9OT0haX0RFTEFZKTsKIAotCWxvY2FsX2lycV9zYXZlKGZsYWdz
KTsKKwlyYXdfbG9jYWxfaXJxX3NhdmUoZmxhZ3MpOwogCS8qIENhbGwgdGhlIGFzc2VtYmxlciBt
YWdpYyBpbiBlbnRyeS5TICovCiAJcHN3X2lkbGUoaWRsZSwgcHN3X21hc2spOwotCWxvY2FsX2ly
cV9yZXN0b3JlKGZsYWdzKTsKKwlyYXdfbG9jYWxfaXJxX3Jlc3RvcmUoZmxhZ3MpOwogCiAJLyog
QWNjb3VudCB0aW1lIHNwZW50IHdpdGggZW5hYmxlZCB3YWl0IHBzdyBsb2FkZWQgYXMgaWRsZSB0
aW1lLiAqLwogCXJhd193cml0ZV9zZXFjb3VudF9iZWdpbigmaWRsZS0+c2VxY291bnQpOwpAQCAt
MTIzLDcgKzEyMyw3IEBAIHZvaWQgYXJjaF9jcHVfaWRsZV9lbnRlcih2b2lkKQogdm9pZCBhcmNo
X2NwdV9pZGxlKHZvaWQpCiB7CiAJZW5hYmxlZF93YWl0KCk7Ci0JbG9jYWxfaXJxX2VuYWJsZSgp
OworCXJhd19sb2NhbF9pcnFfZW5hYmxlKCk7CiB9CiAKIHZvaWQgYXJjaF9jcHVfaWRsZV9leGl0
KHZvaWQpCmRpZmYgLS1naXQgYS9hcmNoL3NoL2tlcm5lbC9pZGxlLmMgYi9hcmNoL3NoL2tlcm5l
bC9pZGxlLmMKaW5kZXggMGRjMGY1MmY5YmI4ZC4uZjU5ODE0OTgzYmQ1OSAxMDA2NDQKLS0tIGEv
YXJjaC9zaC9rZXJuZWwvaWRsZS5jCisrKyBiL2FyY2gvc2gva2VybmVsL2lkbGUuYwpAQCAtMjIs
NyArMjIsNyBAQCBzdGF0aWMgdm9pZCAoKnNoX2lkbGUpKHZvaWQpOwogdm9pZCBkZWZhdWx0X2lk
bGUodm9pZCkKIHsKIAlzZXRfYmxfYml0KCk7Ci0JbG9jYWxfaXJxX2VuYWJsZSgpOworCXJhd19s
b2NhbF9pcnFfZW5hYmxlKCk7CiAJLyogSXNuJ3QgdGhpcyByYWN5ID8gKi8KIAljcHVfc2xlZXAo
KTsKIAljbGVhcl9ibF9iaXQoKTsKZGlmZiAtLWdpdCBhL2FyY2gvc3BhcmMva2VybmVsL2xlb25f
cG1jLmMgYi9hcmNoL3NwYXJjL2tlcm5lbC9sZW9uX3BtYy5jCmluZGV4IDA2NWUyZDRiNzI5MDgu
LjM5NmY0NmJjYTUyZWIgMTAwNjQ0Ci0tLSBhL2FyY2gvc3BhcmMva2VybmVsL2xlb25fcG1jLmMK
KysrIGIvYXJjaC9zcGFyYy9rZXJuZWwvbGVvbl9wbWMuYwpAQCAtNTAsNyArNTAsNyBAQCBzdGF0
aWMgdm9pZCBwbWNfbGVvbl9pZGxlX2ZpeHVwKHZvaWQpCiAJcmVnaXN0ZXIgdW5zaWduZWQgaW50
IGFkZHJlc3MgPSAodW5zaWduZWQgaW50KWxlb24zX2lycWN0cmxfcmVnczsKIAogCS8qIEludGVy
cnVwdHMgbmVlZCB0byBiZSBlbmFibGVkIHRvIG5vdCBoYW5nIHRoZSBDUFUgKi8KLQlsb2NhbF9p
cnFfZW5hYmxlKCk7CisJcmF3X2xvY2FsX2lycV9lbmFibGUoKTsKIAogCV9fYXNtX18gX192b2xh
dGlsZV9fICgKIAkJIndyCSUlZzAsICUlYXNyMTlcbiIKQEAgLTY2LDcgKzY2LDcgQEAgc3RhdGlj
IHZvaWQgcG1jX2xlb25faWRsZV9maXh1cCh2b2lkKQogc3RhdGljIHZvaWQgcG1jX2xlb25faWRs
ZSh2b2lkKQogewogCS8qIEludGVycnVwdHMgbmVlZCB0byBiZSBlbmFibGVkIHRvIG5vdCBoYW5n
IHRoZSBDUFUgKi8KLQlsb2NhbF9pcnFfZW5hYmxlKCk7CisJcmF3X2xvY2FsX2lycV9lbmFibGUo
KTsKIAogCS8qIEZvciBzeXN0ZW1zIHdpdGhvdXQgcG93ZXItZG93biwgdGhpcyB3aWxsIGJlIG5v
LW9wICovCiAJX19hc21fXyBfX3ZvbGF0aWxlX18gKCJ3cgklZzAsICVhc3IxOVxuXHQiKTsKZGlm
ZiAtLWdpdCBhL2FyY2gvc3BhcmMva2VybmVsL3Byb2Nlc3NfMzIuYyBiL2FyY2gvc3BhcmMva2Vy
bmVsL3Byb2Nlc3NfMzIuYwppbmRleCBhZGZjYWVhYjNkZGM1Li5hMDIzNjM3MzU5MTU0IDEwMDY0
NAotLS0gYS9hcmNoL3NwYXJjL2tlcm5lbC9wcm9jZXNzXzMyLmMKKysrIGIvYXJjaC9zcGFyYy9r
ZXJuZWwvcHJvY2Vzc18zMi5jCkBAIC03NCw3ICs3NCw3IEBAIHZvaWQgYXJjaF9jcHVfaWRsZSh2
b2lkKQogewogCWlmIChzcGFyY19pZGxlKQogCQkoKnNwYXJjX2lkbGUpKCk7Ci0JbG9jYWxfaXJx
X2VuYWJsZSgpOworCXJhd19sb2NhbF9pcnFfZW5hYmxlKCk7CiB9CiAKIC8qIFhYWCBjbGkvc3Rp
IC0+IGxvY2FsX2lycV94eHggaGVyZSwgY2hlY2sgdGhpcyB3b3JrcyBvbmNlIFNNUCBpcyBmaXhl
ZC4gKi8KZGlmZiAtLWdpdCBhL2FyY2gvc3BhcmMva2VybmVsL3Byb2Nlc3NfNjQuYyBiL2FyY2gv
c3BhcmMva2VybmVsL3Byb2Nlc3NfNjQuYwppbmRleCBhNzUwOTNiOTkzZjlhLi42ZjhjNzgyMmZj
MDY1IDEwMDY0NAotLS0gYS9hcmNoL3NwYXJjL2tlcm5lbC9wcm9jZXNzXzY0LmMKKysrIGIvYXJj
aC9zcGFyYy9rZXJuZWwvcHJvY2Vzc182NC5jCkBAIC02MiwxMSArNjIsMTEgQEAgdm9pZCBhcmNo
X2NwdV9pZGxlKHZvaWQpCiB7CiAJaWYgKHRsYl90eXBlICE9IGh5cGVydmlzb3IpIHsKIAkJdG91
Y2hfbm1pX3dhdGNoZG9nKCk7Ci0JCWxvY2FsX2lycV9lbmFibGUoKTsKKwkJcmF3X2xvY2FsX2ly
cV9lbmFibGUoKTsKIAl9IGVsc2UgewogCQl1bnNpZ25lZCBsb25nIHBzdGF0ZTsKIAotCQlsb2Nh
bF9pcnFfZW5hYmxlKCk7CisJCXJhd19sb2NhbF9pcnFfZW5hYmxlKCk7CiAKICAgICAgICAgICAg
ICAgICAvKiBUaGUgc3VuNHYgc2xlZXBpbmcgY29kZSByZXF1aXJlcyB0aGF0IHdlIGhhdmUgUFNU
QVRFLklFIGNsZWFyZWQgb3ZlcgogICAgICAgICAgICAgICAgICAqIHRoZSBjcHUgc2xlZXAgaHlw
ZXJ2aXNvciBjYWxsLgpkaWZmIC0tZ2l0IGEvYXJjaC91bS9rZXJuZWwvcHJvY2Vzcy5jIGIvYXJj
aC91bS9rZXJuZWwvcHJvY2Vzcy5jCmluZGV4IDI2YjVlMjQzZDNmYzAuLjQ5NWYxMDE3OTJiM2Qg
MTAwNjQ0Ci0tLSBhL2FyY2gvdW0va2VybmVsL3Byb2Nlc3MuYworKysgYi9hcmNoL3VtL2tlcm5l
bC9wcm9jZXNzLmMKQEAgLTIxNyw3ICsyMTcsNyBAQCB2b2lkIGFyY2hfY3B1X2lkbGUodm9pZCkK
IHsKIAljcHVfdGFza3NbY3VycmVudF90aHJlYWRfaW5mbygpLT5jcHVdLnBpZCA9IG9zX2dldHBp
ZCgpOwogCXVtX2lkbGVfc2xlZXAoKTsKLQlsb2NhbF9pcnFfZW5hYmxlKCk7CisJcmF3X2xvY2Fs
X2lycV9lbmFibGUoKTsKIH0KIAogaW50IF9fY2FudF9zbGVlcCh2b2lkKSB7CmRpZmYgLS1naXQg
YS9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9td2FpdC5oIGIvYXJjaC94ODYvaW5jbHVkZS9hc20vbXdh
aXQuaAppbmRleCBlMDM5YTkzM2FjYTNjLi4yOWRkMjdiNWEzMzlkIDEwMDY0NAotLS0gYS9hcmNo
L3g4Ni9pbmNsdWRlL2FzbS9td2FpdC5oCisrKyBiL2FyY2gveDg2L2luY2x1ZGUvYXNtL213YWl0
LmgKQEAgLTg4LDggKzg4LDYgQEAgc3RhdGljIGlubGluZSB2b2lkIF9fbXdhaXR4KHVuc2lnbmVk
IGxvbmcgZWF4LCB1bnNpZ25lZCBsb25nIGVieCwKIAogc3RhdGljIGlubGluZSB2b2lkIF9fc3Rp
X213YWl0KHVuc2lnbmVkIGxvbmcgZWF4LCB1bnNpZ25lZCBsb25nIGVjeCkKIHsKLQl0cmFjZV9o
YXJkaXJxc19vbigpOwotCiAJbWRzX2lkbGVfY2xlYXJfY3B1X2J1ZmZlcnMoKTsKIAkvKiAibXdh
aXQgJWVheCwgJWVjeDsiICovCiAJYXNtIHZvbGF0aWxlKCJzdGk7IC5ieXRlIDB4MGYsIDB4MDEs
IDB4Yzk7IgpkaWZmIC0tZ2l0IGEvYXJjaC94ODYva2VybmVsL3Byb2Nlc3MuYyBiL2FyY2gveDg2
L2tlcm5lbC9wcm9jZXNzLmMKaW5kZXggYmE0NTkzYTkxM2ZhYi4uMTQ1YTdhYzBjMTlhYSAxMDA2
NDQKLS0tIGEvYXJjaC94ODYva2VybmVsL3Byb2Nlc3MuYworKysgYi9hcmNoL3g4Ni9rZXJuZWwv
cHJvY2Vzcy5jCkBAIC02ODUsNyArNjg1LDcgQEAgdm9pZCBhcmNoX2NwdV9pZGxlKHZvaWQpCiAg
Ki8KIHZvaWQgX19jcHVpZGxlIGRlZmF1bHRfaWRsZSh2b2lkKQogewotCXNhZmVfaGFsdCgpOwor
CXJhd19zYWZlX2hhbHQoKTsKIH0KICNpZiBkZWZpbmVkKENPTkZJR19BUE1fTU9EVUxFKSB8fCBk
ZWZpbmVkKENPTkZJR19IQUxUUE9MTF9DUFVJRExFX01PRFVMRSkKIEVYUE9SVF9TWU1CT0woZGVm
YXVsdF9pZGxlKTsKQEAgLTczNiw2ICs3MzYsOCBAQCB2b2lkIHN0b3BfdGhpc19jcHUodm9pZCAq
ZHVtbXkpCiAvKgogICogQU1EIEVycmF0dW0gNDAwIGF3YXJlIGlkbGUgcm91dGluZS4gV2UgaGFu
ZGxlIGl0IHRoZSBzYW1lIHdheSBhcyBDMyBwb3dlcgogICogc3RhdGVzIChsb2NhbCBhcGljIHRp
bWVyIGFuZCBUU0Mgc3RvcCkuCisgKgorICogWFhYIHRoaXMgZnVuY3Rpb24gaXMgY29tcGxldGVs
eSBidWdnZXJlZCB2cyBSQ1UgYW5kIHRyYWNpbmcuCiAgKi8KIHN0YXRpYyB2b2lkIGFtZF9lNDAw
X2lkbGUodm9pZCkKIHsKQEAgLTc1Nyw5ICs3NTksOSBAQCBzdGF0aWMgdm9pZCBhbWRfZTQwMF9p
ZGxlKHZvaWQpCiAJICogVGhlIHN3aXRjaCBiYWNrIGZyb20gYnJvYWRjYXN0IG1vZGUgbmVlZHMg
dG8gYmUgY2FsbGVkIHdpdGgKIAkgKiBpbnRlcnJ1cHRzIGRpc2FibGVkLgogCSAqLwotCWxvY2Fs
X2lycV9kaXNhYmxlKCk7CisJcmF3X2xvY2FsX2lycV9kaXNhYmxlKCk7CiAJdGlja19icm9hZGNh
c3RfZXhpdCgpOwotCWxvY2FsX2lycV9lbmFibGUoKTsKKwlyYXdfbG9jYWxfaXJxX2VuYWJsZSgp
OwogfQogCiAvKgpAQCAtODAxLDkgKzgwMyw5IEBAIHN0YXRpYyBfX2NwdWlkbGUgdm9pZCBtd2Fp
dF9pZGxlKHZvaWQpCiAJCWlmICghbmVlZF9yZXNjaGVkKCkpCiAJCQlfX3N0aV9td2FpdCgwLCAw
KTsKIAkJZWxzZQotCQkJbG9jYWxfaXJxX2VuYWJsZSgpOworCQkJcmF3X2xvY2FsX2lycV9lbmFi
bGUoKTsKIAl9IGVsc2UgewotCQlsb2NhbF9pcnFfZW5hYmxlKCk7CisJCXJhd19sb2NhbF9pcnFf
ZW5hYmxlKCk7CiAJfQogCV9fY3VycmVudF9jbHJfcG9sbGluZygpOwogfQpkaWZmIC0tZ2l0IGEv
a2VybmVsL3NjaGVkL2lkbGUuYyBiL2tlcm5lbC9zY2hlZC9pZGxlLmMKaW5kZXggZjMyNGRjMzZm
YzQzZC4uZGVlODA3ZmZhZDExYiAxMDA2NDQKLS0tIGEva2VybmVsL3NjaGVkL2lkbGUuYworKysg
Yi9rZXJuZWwvc2NoZWQvaWRsZS5jCkBAIC03OCw3ICs3OCw3IEBAIHZvaWQgX193ZWFrIGFyY2hf
Y3B1X2lkbGVfZGVhZCh2b2lkKSB7IH0KIHZvaWQgX193ZWFrIGFyY2hfY3B1X2lkbGUodm9pZCkK
IHsKIAljcHVfaWRsZV9mb3JjZV9wb2xsID0gMTsKLQlsb2NhbF9pcnFfZW5hYmxlKCk7CisJcmF3
X2xvY2FsX2lycV9lbmFibGUoKTsKIH0KIAogLyoqCkBAIC05NCw5ICs5NCwzNSBAQCB2b2lkIF9f
Y3B1aWRsZSBkZWZhdWx0X2lkbGVfY2FsbCh2b2lkKQogCiAJCXRyYWNlX2NwdV9pZGxlKDEsIHNt
cF9wcm9jZXNzb3JfaWQoKSk7CiAJCXN0b3BfY3JpdGljYWxfdGltaW5ncygpOworCisJCS8qCisJ
CSAqIGFyY2hfY3B1X2lkbGUoKSBpcyBzdXBwb3NlZCB0byBlbmFibGUgSVJRcywgaG93ZXZlcgor
CQkgKiB3ZSBjYW4ndCBkbyB0aGF0IGJlY2F1c2Ugb2YgUkNVIGFuZCB0cmFjaW5nLgorCQkgKgor
CQkgKiBUcmFjZSBJUlFzIGVuYWJsZSBoZXJlLCB0aGVuIHN3aXRjaCBvZmYgUkNVLCBhbmQgaGF2
ZQorCQkgKiBhcmNoX2NwdV9pZGxlKCkgdXNlIHJhd19sb2NhbF9pcnFfZW5hYmxlKCkuIE5vdGUg
dGhhdAorCQkgKiByY3VfaWRsZV9lbnRlcigpIHJlbGllcyBvbiBsb2NrZGVwIElSUSBzdGF0ZSwg
c28gc3dpdGNoIHRoYXQKKwkJICogbGFzdCAtLSB0aGlzIGlzIHZlcnkgc2ltaWxhciB0byB0aGUg
ZW50cnkgY29kZS4KKwkJICovCisJCXRyYWNlX2hhcmRpcnFzX29uX3ByZXBhcmUoKTsKKwkJbG9j
a2RlcF9oYXJkaXJxc19vbl9wcmVwYXJlKF9USElTX0lQXyk7CiAJCXJjdV9pZGxlX2VudGVyKCk7
CisJCWxvY2tkZXBfaGFyZGlycXNfb24oX1RISVNfSVBfKTsKKwogCQlhcmNoX2NwdV9pZGxlKCk7
CisKKwkJLyoKKwkJICogT0ssIHNvIElSUXMgYXJlIGVuYWJsZWQgaGVyZSwgYnV0IFJDVSBuZWVk
cyB0aGVtIGRpc2FibGVkIHRvCisJCSAqIHR1cm4gaXRzZWxmIGJhY2sgb24uLiBmdW5ueSB0aGlu
ZyBpcyB0aGF0IGRpc2FibGluZyBJUlFzCisJCSAqIHdpbGwgY2F1c2UgdHJhY2luZywgd2hpY2gg
bmVlZHMgUkNVLiBKdW1wIHRocm91Z2ggaG9vcHMgdG8KKwkJICogbWFrZSBpdCAnd29yaycuCisJ
CSAqLworCQlyYXdfbG9jYWxfaXJxX2Rpc2FibGUoKTsKKwkJbG9ja2RlcF9oYXJkaXJxc19vZmYo
X1RISVNfSVBfKTsKIAkJcmN1X2lkbGVfZXhpdCgpOworCQlsb2NrZGVwX2hhcmRpcnFzX29uKF9U
SElTX0lQXyk7CisJCXJhd19sb2NhbF9pcnFfZW5hYmxlKCk7CisKIAkJc3RhcnRfY3JpdGljYWxf
dGltaW5ncygpOwogCQl0cmFjZV9jcHVfaWRsZShQV1JfRVZFTlRfRVhJVCwgc21wX3Byb2Nlc3Nv
cl9pZCgpKTsKIAl9Ci0tIAoyLjI3LjAKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcgbGlzdApPcGVuUklTQ0BsaXN0cy5saWJy
ZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29yZXMub3JnL2xpc3RpbmZvL29wZW5yaXNj
Cg==
