Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 991184B5687
	for <lists+openrisc@lfdr.de>; Mon, 14 Feb 2022 17:37:09 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 7DDD82480D;
	Mon, 14 Feb 2022 17:37:09 +0100 (CET)
Received: from sin.source.kernel.org (sin.source.kernel.org [145.40.73.55])
 by mail.librecores.org (Postfix) with ESMTPS id B036D24806
 for <openrisc@lists.librecores.org>; Mon, 14 Feb 2022 17:37:06 +0100 (CET)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by sin.source.kernel.org (Postfix) with ESMTPS id ACB96CE1882;
 Mon, 14 Feb 2022 16:37:04 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id E9DBBC340EE;
 Mon, 14 Feb 2022 16:36:52 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=k20201202; t=1644856623;
 bh=e2iSAXM6ZPRVl+tkhLTuNMYUzuU7jFNdjgVrJi1CpK0=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=nsz4rV5bYLKJKHk390zWerby5GGSAypHvWBR+CVgIQiaGeNVpm+nneRwUG9ggTPGj
 r0i/geC52lNjEbPr510VA+nFtftmpHrvK8Au/r2fi+4xV8lS3vuGgjwaUATpFJMIzU
 eo2yHsoOtmi1IAhjXBiLVvjf1eDuJHwMFC3uaewQKiYYfH99nd179pQOL4G7/05Gmd
 4NJK9jA7N0wfJfi3e0En4diLI84yqT0RTAeBwyuj5dE7wV0ryEByF2EbJDmlg03Jbm
 LlI8Rzlu/f5flM7GzO5NOZNMB/fft00wYe9JfzBLIWGjnAFgVmE1+afC8RTjTlPiTx
 IG2GnYjrMZouA==
From: Arnd Bergmann <arnd@kernel.org>
To: Linus Torvalds <torvalds@linux-foundation.org>,
 Christoph Hellwig <hch@lst.de>, linux-arch@vger.kernel.org,
 linux-mm@kvack.org, linux-api@vger.kernel.org, arnd@arndb.de,
 linux-kernel@vger.kernel.org
Date: Mon, 14 Feb 2022 17:34:45 +0100
Message-Id: <20220214163452.1568807-8-arnd@kernel.org>
X-Mailer: git-send-email 2.29.2
In-Reply-To: <20220214163452.1568807-1-arnd@kernel.org>
References: <20220214163452.1568807-1-arnd@kernel.org>
MIME-Version: 1.0
Subject: [OpenRISC] [PATCH 07/14] uaccess: generalize access_ok()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: mark.rutland@arm.com, dalias@libc.org, linux-ia64@vger.kernel.org,
 linux-sh@vger.kernel.org, peterz@infradead.org, jcmvbkbc@gmail.com,
 guoren@kernel.org, sparclinux@vger.kernel.org, linux-hexagon@vger.kernel.org,
 linux-riscv@lists.infradead.org, will@kernel.org, ardb@kernel.org,
 linux-s390@vger.kernel.org, bcain@codeaurora.org, mpe@ellerman.id.au,
 deller@gmx.de, x86@kernel.org, linux@armlinux.org.uk,
 linux-csky@vger.kernel.org, mingo@redhat.com,
 linux-snps-arc@lists.infradead.org, linux-xtensa@linux-xtensa.org,
 hca@linux.ibm.com, linux-alpha@vger.kernel.org, linux-um@lists.infradead.org,
 linux-m68k@lists.linux-m68k.org, openrisc@lists.librecores.org,
 green.hu@gmail.com, linux-arm-kernel@lists.infradead.org, monstr@monstr.eu,
 tsbogend@alpha.franken.de, linux-parisc@vger.kernel.org, nickhu@andestech.com,
 linux-mips@vger.kernel.org, dinguyen@kernel.org, ebiederm@xmission.com,
 richard@nod.at, akpm@linux-foundation.org, linuxppc-dev@lists.ozlabs.org,
 davem@davemloft.net
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogQXJuZCBCZXJnbWFubiA8YXJuZEBhcm5kYi5kZT4KClRoZXJlIGFyZSBtYW55IGRpZmZl
cmVudCB3YXlzIHRoYXQgYWNjZXNzX29rKCkgaXMgZGVmaW5lZCBhY3Jvc3MKYXJjaGl0ZWN0dXJl
cywgYnV0IGluIHRoZSBlbmQsIHRoZXkgYWxsIGp1c3QgY29tcGFyZSBhZ2FpbnN0IHRoZQp1c2Vy
X2FkZHJfbWF4KCkgdmFsdWUgb3IgdGhleSBhY2NlcHQgYW55dGhpbmcuCgpQcm92aWRlIG9uZSBk
ZWZpbml0aW9uIHRoYXQgd29ya3MgZm9yIG1vc3QgYXJjaGl0ZWN0dXJlcywgY2hlY2tpbmcKYWdh
aW5zdCBUQVNLX1NJWkVfTUFYIGZvciB1c2VyIHByb2Nlc3NlcyBvciBza2lwcGluZyB0aGUgY2hl
Y2sgaW5zaWRlCm9mIHVhY2Nlc3Nfa2VybmVsKCkgc2VjdGlvbnMuCgpGb3IgYXJjaGl0ZWN0dXJl
cyB3aXRob3V0IENPTkZJR19TRVRfRlMoKSwgdGhpcyBzaG91bGQgYmUgdGhlIGZhc3Rlc3QKY2hl
Y2ssIGFzIGl0IGNvbWVzIGRvd24gdG8gYSBzaW5nbGUgY29tcGFyaXNvbiBvZiBhIHBvaW50ZXIg
YWdhaW5zdCBhCmNvbXBpbGUtdGltZSBjb25zdGFudCwgd2hpbGUgdGhlIGFyY2hpdGVjdHVyZSBz
cGVjaWZpYyB2ZXJzaW9ucyB0ZW5kIHRvCmRvIHNvbWV0aGluZyBtb3JlIGNvbXBsZXggZm9yIGhp
c3RvcmljIHJlYXNvbnMgb3IgZ2V0IHNvbWV0aGluZyB3cm9uZy4KClR5cGUgY2hlY2tpbmcgZm9y
IF9fdXNlciBhbm5vdGF0aW9ucyBpcyBoYW5kbGVkIGluY29uc2lzdGVudGx5IGFjcm9zcwphcmNo
aXRlY3R1cmVzLCBidXQgdGhpcyBpcyBlYXNpbHkgc2ltcGxpZmllZCBhcyB3ZWxsIGJ5IHVzaW5n
IGFuIGlubGluZQpmdW5jdGlvbiB0aGF0IHRha2VzIGEgJ2NvbnN0IHZvaWQgX191c2VyIConIGFy
Z3VtZW50LiBBIGhhbmRmdWwgb2YKY2FsbGVycyBuZWVkIGFuIGV4dHJhIF9fdXNlciBhbm5vdGF0
aW9uIGZvciB0aGlzLgoKU29tZSBhcmNoaXRlY3R1cmVzIGhhZCB0cmljayB0byB1c2UgMzMtYml0
IG9yIDY1LWJpdCBhcml0aG1ldGljIG9uIHRoZQphZGRyZXNzZXMgdG8gY2FsY3VsYXRlIHRoZSBv
dmVyZmxvdywgaG93ZXZlciB0aGlzIHNpbXBsZXIgdmVyc2lvbiB1c2VzCmZld2VyIHJlZ2lzdGVy
cywgd2hpY2ggbWVhbnMgaXQgY2FuIHByb2R1Y2UgYmV0dGVyIG9iamVjdCBjb2RlIGluIHRoZQpl
bmQgZGVzcGl0ZSBuZWVkaW5nIGEgc2Vjb25kIChzdGF0aWNhbGx5IHByZWRpY3RlZCkgYnJhbmNo
LgoKU2lnbmVkLW9mZi1ieTogQXJuZCBCZXJnbWFubiA8YXJuZEBhcm5kYi5kZT4KLS0tCiBhcmNo
L2FscGhhL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCAgICAgIHwgMzQgKysrLS0tLS0tLS0tLS0tCiBh
cmNoL2FyYy9pbmNsdWRlL2FzbS91YWNjZXNzLmggICAgICAgIHwgMjkgLS0tLS0tLS0tLS0tLQog
YXJjaC9hcm0vaW5jbHVkZS9hc20vdWFjY2Vzcy5oICAgICAgICB8IDIwICstLS0tLS0tLQogYXJj
aC9hcm0va2VybmVsL3N3cF9lbXVsYXRlLmMgICAgICAgICB8ICAyICstCiBhcmNoL2FybS9rZXJu
ZWwvdHJhcHMuYyAgICAgICAgICAgICAgIHwgIDIgKy0KIGFyY2gvYXJtNjQvaW5jbHVkZS9hc20v
dWFjY2Vzcy5oICAgICAgfCAgNSArKy0KIGFyY2gvY3NreS9pbmNsdWRlL2FzbS91YWNjZXNzLmgg
ICAgICAgfCAgOCAtLS0tCiBhcmNoL2Nza3kva2VybmVsL3NpZ25hbC5jICAgICAgICAgICAgIHwg
IDIgKy0KIGFyY2gvaGV4YWdvbi9pbmNsdWRlL2FzbS91YWNjZXNzLmggICAgfCAyNSAtLS0tLS0t
LS0tLS0KIGFyY2gvaWE2NC9pbmNsdWRlL2FzbS91YWNjZXNzLmggICAgICAgfCAgNSArLS0KIGFy
Y2gvbTY4ay9pbmNsdWRlL2FzbS91YWNjZXNzLmggICAgICAgfCAgNSArKy0KIGFyY2gvbWljcm9i
bGF6ZS9pbmNsdWRlL2FzbS91YWNjZXNzLmggfCAgOCArLS0tCiBhcmNoL21pcHMvaW5jbHVkZS9h
c20vdWFjY2Vzcy5oICAgICAgIHwgMjkgKy0tLS0tLS0tLS0tLQogYXJjaC9uZHMzMi9pbmNsdWRl
L2FzbS91YWNjZXNzLmggICAgICB8ICA3ICstLS0KIGFyY2gvbmlvczIvaW5jbHVkZS9hc20vdWFj
Y2Vzcy5oICAgICAgfCAxMSArLS0tLQogYXJjaC9uaW9zMi9rZXJuZWwvc2lnbmFsLmMgICAgICAg
ICAgICB8IDIwICsrKysrLS0tLQogYXJjaC9vcGVucmlzYy9pbmNsdWRlL2FzbS91YWNjZXNzLmgg
ICB8IDE5ICstLS0tLS0tLQogYXJjaC9wYXJpc2MvaW5jbHVkZS9hc20vdWFjY2Vzcy5oICAgICB8
IDEwICsrKy0tCiBhcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vdWFjY2Vzcy5oICAgIHwgMTEgKy0t
LS0KIGFyY2gvcG93ZXJwYy9saWIvc3N0ZXAuYyAgICAgICAgICAgICAgfCAgNCArLQogYXJjaC9y
aXNjdi9pbmNsdWRlL2FzbS91YWNjZXNzLmggICAgICB8IDMxICstLS0tLS0tLS0tLS0tCiBhcmNo
L3Jpc2N2L2tlcm5lbC9wZXJmX2NhbGxjaGFpbi5jICAgIHwgIDIgKy0KIGFyY2gvczM5MC9pbmNs
dWRlL2FzbS91YWNjZXNzLmggICAgICAgfCAxMSArKy0tLQogYXJjaC9zaC9pbmNsdWRlL2FzbS91
YWNjZXNzLmggICAgICAgICB8IDIyICstLS0tLS0tLS0KIGFyY2gvc3BhcmMvaW5jbHVkZS9hc20v
dWFjY2Vzcy5oICAgICAgfCAgMyAtLQogYXJjaC9zcGFyYy9pbmNsdWRlL2FzbS91YWNjZXNzXzMy
LmggICB8IDE4ICsrLS0tLS0tCiBhcmNoL3NwYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3NfNjQuaCAg
IHwgMzUgKysrKy0tLS0tLS0tLS0tLQogYXJjaC9zcGFyYy9rZXJuZWwvc2lnbmFsXzMyLmMgICAg
ICAgICB8ICAyICstCiBhcmNoL3VtL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCAgICAgICAgIHwgIDUg
KystCiBhcmNoL3g4Ni9pbmNsdWRlL2FzbS91YWNjZXNzLmggICAgICAgIHwgMTQgKy0tLS0tLQog
YXJjaC94dGVuc2EvaW5jbHVkZS9hc20vdWFjY2Vzcy5oICAgICB8IDEwICstLS0tCiBpbmNsdWRl
L2FzbS1nZW5lcmljL2FjY2Vzc19vay5oICAgICAgIHwgNTkgKysrKysrKysrKysrKysrKysrKysr
KysrKysrCiBpbmNsdWRlL2FzbS1nZW5lcmljL3VhY2Nlc3MuaCAgICAgICAgIHwgMjEgKy0tLS0t
LS0tLQogaW5jbHVkZS9saW51eC91YWNjZXNzLmggICAgICAgICAgICAgICB8ICA3IC0tLS0KIDM0
IGZpbGVzIGNoYW5nZWQsIDEzMCBpbnNlcnRpb25zKCspLCAzNjYgZGVsZXRpb25zKC0pCiBjcmVh
dGUgbW9kZSAxMDA2NDQgaW5jbHVkZS9hc20tZ2VuZXJpYy9hY2Nlc3Nfb2suaAoKZGlmZiAtLWdp
dCBhL2FyY2gvYWxwaGEvaW5jbHVkZS9hc20vdWFjY2Vzcy5oIGIvYXJjaC9hbHBoYS9pbmNsdWRl
L2FzbS91YWNjZXNzLmgKaW5kZXggMWI2ZjI1ZWZhMjQ3Li44MmM1NzQzZmM5Y2QgMTAwNjQ0Ci0t
LSBhL2FyY2gvYWxwaGEvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2FyY2gvYWxwaGEvaW5j
bHVkZS9hc20vdWFjY2Vzcy5oCkBAIC0yMCwyOCArMjAsNyBAQAogI2RlZmluZSBnZXRfZnMoKSAg
KGN1cnJlbnRfdGhyZWFkX2luZm8oKS0+YWRkcl9saW1pdCkKICNkZWZpbmUgc2V0X2ZzKHgpIChj
dXJyZW50X3RocmVhZF9pbmZvKCktPmFkZHJfbGltaXQgPSAoeCkpCiAKLSNkZWZpbmUgdWFjY2Vz
c19rZXJuZWwoKQkoZ2V0X2ZzKCkuc2VnID09IEtFUk5FTF9EUy5zZWcpCi0KLS8qCi0gKiBJcyBh
IGFkZHJlc3MgdmFsaWQ/IFRoaXMgZG9lcyBhIHN0cmFpZ2h0Zm9yd2FyZCBjYWxjdWxhdGlvbiBy
YXRoZXIKLSAqIHRoYW4gdGVzdHMuCi0gKgotICogQWRkcmVzcyB2YWxpZCBpZjoKLSAqICAtICJh
ZGRyIiBkb2Vzbid0IGhhdmUgYW55IGhpZ2gtYml0cyBzZXQKLSAqICAtIEFORCAic2l6ZSIgZG9l
c24ndCBoYXZlIGFueSBoaWdoLWJpdHMgc2V0Ci0gKiAgLSBBTkQgImFkZHIrc2l6ZS0oc2l6ZSAh
PSAwKSIgZG9lc24ndCBoYXZlIGFueSBoaWdoLWJpdHMgc2V0Ci0gKiAgLSBPUiB3ZSBhcmUgaW4g
a2VybmVsIG1vZGUuCi0gKi8KLSNkZWZpbmUgX19hY2Nlc3Nfb2soYWRkciwgc2l6ZSkgKHsJCQkJ
XAotCXVuc2lnbmVkIGxvbmcgX19hb19hID0gKGFkZHIpLCBfX2FvX2IgPSAoc2l6ZSk7CQlcCi0J
dW5zaWduZWQgbG9uZyBfX2FvX2VuZCA9IF9fYW9fYSArIF9fYW9fYiAtICEhX19hb19iOwlcCi0J
KGdldF9mcygpLnNlZyAmIChfX2FvX2EgfCBfX2FvX2IgfCBfX2FvX2VuZCkpID09IDA7IH0pCi0K
LSNkZWZpbmUgYWNjZXNzX29rKGFkZHIsIHNpemUpCQkJCVwKLSh7CQkJCQkJCVwKLQlfX2Noa191
c2VyX3B0cihhZGRyKTsJCQkJXAotCV9fYWNjZXNzX29rKCgodW5zaWduZWQgbG9uZykoYWRkcikp
LCAoc2l6ZSkpOwlcCi19KQorI2luY2x1ZGUgPGFzbS1nZW5lcmljL2FjY2Vzc19vay5oPgogCiAv
KgogICogVGhlc2UgYXJlIHRoZSBtYWluIHNpbmdsZS12YWx1ZSB0cmFuc2ZlciByb3V0aW5lcy4g
IFRoZXkgYXV0b21hdGljYWxseQpAQCAtMTA1LDcgKzg0LDcgQEAgZXh0ZXJuIHZvaWQgX19nZXRf
dXNlcl91bmtub3duKHZvaWQpOwogCWxvbmcgX19ndV9lcnIgPSAtRUZBVUxUOwkJCQlcCiAJdW5z
aWduZWQgbG9uZyBfX2d1X3ZhbCA9IDA7CQkJCVwKIAljb25zdCBfX3R5cGVvZl9fKCoocHRyKSkg
X191c2VyICpfX2d1X2FkZHIgPSAocHRyKTsJXAotCWlmIChfX2FjY2Vzc19vaygodW5zaWduZWQg
bG9uZylfX2d1X2FkZHIsIHNpemUpKSB7CVwKKwlpZiAoX19hY2Nlc3Nfb2soX19ndV9hZGRyLCBz
aXplKSkgewkJCVwKIAkJX19ndV9lcnIgPSAwOwkJCQkJXAogCQlzd2l0Y2ggKHNpemUpIHsJCQkJ
CVwKIAkJICBjYXNlIDE6IF9fZ2V0X3VzZXJfOChfX2d1X2FkZHIpOyBicmVhazsJXApAQCAtMjAw
LDcgKzE3OSw3IEBAIGV4dGVybiB2b2lkIF9fcHV0X3VzZXJfdW5rbm93bih2b2lkKTsKICh7CQkJ
CQkJCQlcCiAJbG9uZyBfX3B1X2VyciA9IC1FRkFVTFQ7CQkJCVwKIAlfX3R5cGVvZl9fKCoocHRy
KSkgX191c2VyICpfX3B1X2FkZHIgPSAocHRyKTsJCVwKLQlpZiAoX19hY2Nlc3Nfb2soKHVuc2ln
bmVkIGxvbmcpX19wdV9hZGRyLCBzaXplKSkgewlcCisJaWYgKF9fYWNjZXNzX29rKF9fcHVfYWRk
ciwgc2l6ZSkpIHsJCQlcCiAJCV9fcHVfZXJyID0gMDsJCQkJCVwKIAkJc3dpdGNoIChzaXplKSB7
CQkJCQlcCiAJCSAgY2FzZSAxOiBfX3B1dF91c2VyXzgoeCwgX19wdV9hZGRyKTsgYnJlYWs7CVwK
QEAgLTMxNiwxNyArMjk1LDE0IEBAIHJhd19jb3B5X3RvX3VzZXIodm9pZCBfX3VzZXIgKnRvLCBj
b25zdCB2b2lkICpmcm9tLCB1bnNpZ25lZCBsb25nIGxlbikKIAogZXh0ZXJuIGxvbmcgX19jbGVh
cl91c2VyKHZvaWQgX191c2VyICp0bywgbG9uZyBsZW4pOwogCi1leHRlcm4gaW5saW5lIGxvbmcK
K3N0YXRpYyBpbmxpbmUgbG9uZwogY2xlYXJfdXNlcih2b2lkIF9fdXNlciAqdG8sIGxvbmcgbGVu
KQogewotCWlmIChfX2FjY2Vzc19vaygodW5zaWduZWQgbG9uZyl0bywgbGVuKSkKKwlpZiAoX19h
Y2Nlc3Nfb2sodG8sIGxlbikpCiAJCWxlbiA9IF9fY2xlYXJfdXNlcih0bywgbGVuKTsKIAlyZXR1
cm4gbGVuOwogfQogCi0jZGVmaW5lIHVzZXJfYWRkcl9tYXgoKSBcCi0gICAgICAgICh1YWNjZXNz
X2tlcm5lbCgpID8gfjBVTCA6IFRBU0tfU0laRSkKLQogZXh0ZXJuIGxvbmcgc3RybmNweV9mcm9t
X3VzZXIoY2hhciAqZGVzdCwgY29uc3QgY2hhciBfX3VzZXIgKnNyYywgbG9uZyBjb3VudCk7CiBl
eHRlcm4gX19tdXN0X2NoZWNrIGxvbmcgc3Rybmxlbl91c2VyKGNvbnN0IGNoYXIgX191c2VyICpz
dHIsIGxvbmcgbik7CiAKZGlmZiAtLWdpdCBhL2FyY2gvYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3Mu
aCBiL2FyY2gvYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAppbmRleCA3ODNiZmRiM2JmYTMuLjMw
ZjgwYjRiZTJhYiAxMDA2NDQKLS0tIGEvYXJjaC9hcmMvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisr
KyBiL2FyY2gvYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaApAQCAtMjMsMzUgKzIzLDYgQEAKIAog
I2luY2x1ZGUgPGxpbnV4L3N0cmluZy5oPgkvKiBmb3IgZ2VuZXJpYyBzdHJpbmcgZnVuY3Rpb25z
ICovCiAKLQotI2RlZmluZSBfX2tlcm5lbF9vawkJKHVhY2Nlc3Nfa2VybmVsKCkpCi0KLS8qCi0g
KiBBbGdvcml0aG1pY2FsbHksIGZvciBfX3VzZXJfb2soKSB3ZSB3YW50IGRvOgotICogCShzdGFy
dCA8IFRBU0tfU0laRSkgJiYgKHN0YXJ0K2xlbiA8IFRBU0tfU0laRSkKLSAqIHdoZXJlIFRBU0tf
U0laRSBjb3VsZCBlaXRoZXIgYmUgcmV0cmlldmVkIGZyb20gdGhyZWFkX2luZm8tPmFkZHJfbGlt
aXQgb3IKLSAqIGVtaXR0ZWQgZGlyZWN0bHkgaW4gY29kZS4KLSAqCi0gKiBUaGlzIGNhbiBob3dl
dmVyIGJlIHJld3JpdHRlbiBhcyBmb2xsb3dzOgotICoJKGxlbiA8PSBUQVNLX1NJWkUpICYmIChz
dGFydCtsZW4gPCBUQVNLX1NJWkUpCi0gKgotICogQmVjYXVzZSBpdCBlc3NlbnRpYWxseSBjaGVj
a3MgaWYgYnVmZmVyIGVuZCBpcyB3aXRoaW4gbGltaXQgYW5kIEBsZW4gaXMKLSAqIG5vbi1uZ2Vh
dGl2ZSwgd2hpY2ggaW1wbGllcyB0aGF0IGJ1ZmZlciBzdGFydCB3aWxsIGJlIHdpdGhpbiBsaW1p
dCB0b28uCi0gKgotICogVGhlIHJlYXNvbiBmb3IgcmV3cml0aW5nIGJlaW5nLCBmb3IgbWFqb3Jp
dHkgb2YgY2FzZXMsIEBsZW4gaXMgZ2VuZXJhbGx5Ci0gKiBjb21waWxlIHRpbWUgY29uc3RhbnQs
IGNhdXNpbmcgZmlyc3Qgc3ViLWV4cHJlc3Npb24gdG8gYmUgY29tcGlsZSB0aW1lCi0gKiBzdWJz
dW1lZC4KLSAqCi0gKiBUaGUgc2Vjb25kIHBhcnQgd291bGQgZ2VuZXJhdGUgd2VpcmQgbGFyZ2Ug
TElNTXMgZS5nLiAoMHg2MDAwXzAwMDAgLSAweDEwKSwKLSAqIHNvIHdlIGNoZWNrIGZvciBUQVNL
X1NJWkUgdXNpbmcgZ2V0X2ZzKCkgc2luY2UgdGhlIGFkZHJfbGltaXQgbG9hZCBmcm9tIG1lbQot
ICogd291bGQgYWxyZWFkeSBoYXZlIGJlZW4gZG9uZSBhdCB0aGlzIGNhbGwgc2l0ZSBmb3IgX19r
ZXJuZWxfb2soKQotICoKLSAqLwotI2RlZmluZSBfX3VzZXJfb2soYWRkciwgc3opCSgoKHN6KSA8
PSBUQVNLX1NJWkUpICYmIFwKLQkJCQkgKChhZGRyKSA8PSAoZ2V0X2ZzKCkgLSAoc3opKSkpCi0j
ZGVmaW5lIF9fYWNjZXNzX29rKGFkZHIsIHN6KQkodW5saWtlbHkoX19rZXJuZWxfb2spIHx8IFwK
LQkJCQkgbGlrZWx5KF9fdXNlcl9vaygoYWRkciksIChzeikpKSkKLQogLyoqKioqKioqKioqIFNp
bmdsZSBieXRlL2h3b3JkL3dvcmQgY29waWVzICoqKioqKioqKioqKioqKioqKi8KIAogI2RlZmlu
ZSBfX2dldF91c2VyX2ZuKHN6LCB1LCBrKQkJCQkJXApkaWZmIC0tZ2l0IGEvYXJjaC9hcm0vaW5j
bHVkZS9hc20vdWFjY2Vzcy5oIGIvYXJjaC9hcm0vaW5jbHVkZS9hc20vdWFjY2Vzcy5oCmluZGV4
IGQyMGQ3OGMzNGI5NC4uMmZjYmVjOWMzMDZjIDEwMDY0NAotLS0gYS9hcmNoL2FybS9pbmNsdWRl
L2FzbS91YWNjZXNzLmgKKysrIGIvYXJjaC9hcm0vaW5jbHVkZS9hc20vdWFjY2Vzcy5oCkBAIC01
NSwyMSArNTUsNiBAQCBleHRlcm4gaW50IF9fcHV0X3VzZXJfYmFkKHZvaWQpOwogCiAjaWZkZWYg
Q09ORklHX01NVQogCi0vKgotICogV2UgdXNlIDMzLWJpdCBhcml0aG1ldGljIGhlcmUuICBTdWNj
ZXNzIHJldHVybnMgemVybywgZmFpbHVyZSByZXR1cm5zCi0gKiBhZGRyX2xpbWl0LiAgV2UgdGFr
ZSBhZHZhbnRhZ2UgdGhhdCBhZGRyX2xpbWl0IHdpbGwgYmUgemVybyBmb3IgS0VSTkVMX0RTLAot
ICogc28gdGhpcyB3aWxsIGFsd2F5cyByZXR1cm4gc3VjY2VzcyBpbiB0aGF0IGNhc2UuCi0gKi8K
LSNkZWZpbmUgX19yYW5nZV9vayhhZGRyLCBzaXplKSAoeyBcCi0JdW5zaWduZWQgbG9uZyBmbGFn
LCByb2tzdW07IFwKLQlfX2Noa191c2VyX3B0cihhZGRyKTsJXAotCV9fYXNtX18oIi5zeW50YXgg
dW5pZmllZFxuIiBcCi0JCSJhZGRzICUxLCAlMiwgJTM7IHNiY3NjYyAlMSwgJTEsICUwOyBtb3Zj
YyAlMCwgIzAiIFwKLQkJOiAiPSZyIiAoZmxhZyksICI9JnIiIChyb2tzdW0pIFwKLQkJOiAiciIg
KGFkZHIpLCAiSXIiIChzaXplKSwgIjAiIChUQVNLX1NJWkUpIFwKLQkJOiAiY2MiKTsgXAotCWZs
YWc7IH0pCi0KIC8qCiAgKiBUaGlzIGlzIGEgdHlwZTogZWl0aGVyIHVuc2lnbmVkIGxvbmcsIGlm
IHRoZSBhcmd1bWVudCBmaXRzIGludG8KICAqIHRoYXQgdHlwZSwgb3Igb3RoZXJ3aXNlIHVuc2ln
bmVkIGxvbmcgbG9uZy4KQEAgLTI0MSwxNSArMjI2LDEyIEBAIGV4dGVybiBpbnQgX19wdXRfdXNl
cl84KHZvaWQgKiwgdW5zaWduZWQgbG9uZyBsb25nKTsKIAogI2Vsc2UgLyogQ09ORklHX01NVSAq
LwogCi0jZGVmaW5lIF9fYWRkcl9vayhhZGRyKQkJKCh2b2lkKShhZGRyKSwgMSkKLSNkZWZpbmUg
X19yYW5nZV9vayhhZGRyLCBzaXplKQkoKHZvaWQpKGFkZHIpLCAwKQotCiAjZGVmaW5lIGdldF91
c2VyKHgsIHApCV9fZ2V0X3VzZXIoeCwgcCkKICNkZWZpbmUgX19wdXRfdXNlcl9jaGVjayBfX3B1
dF91c2VyX25vY2hlY2sKIAogI2VuZGlmIC8qIENPTkZJR19NTVUgKi8KIAotI2RlZmluZSBhY2Nl
c3Nfb2soYWRkciwgc2l6ZSkJKF9fcmFuZ2Vfb2soYWRkciwgc2l6ZSkgPT0gMCkKKyNpbmNsdWRl
IDxhc20tZ2VuZXJpYy9hY2Nlc3Nfb2suaD4KIAogI2lmZGVmIENPTkZJR19DUFVfU1BFQ1RSRQog
LyoKZGlmZiAtLWdpdCBhL2FyY2gvYXJtL2tlcm5lbC9zd3BfZW11bGF0ZS5jIGIvYXJjaC9hcm0v
a2VybmVsL3N3cF9lbXVsYXRlLmMKaW5kZXggNjE2NmJhMzhiZjk5Li5iNzRiZmNmOTRmYjEgMTAw
NjQ0Ci0tLSBhL2FyY2gvYXJtL2tlcm5lbC9zd3BfZW11bGF0ZS5jCisrKyBiL2FyY2gvYXJtL2tl
cm5lbC9zd3BfZW11bGF0ZS5jCkBAIC0xOTUsNyArMTk1LDcgQEAgc3RhdGljIGludCBzd3BfaGFu
ZGxlcihzdHJ1Y3QgcHRfcmVncyAqcmVncywgdW5zaWduZWQgaW50IGluc3RyKQogCQkgZGVzdHJl
ZywgRVhUUkFDVF9SRUdfTlVNKGluc3RyLCBSVDJfT0ZGU0VUKSwgZGF0YSk7CiAKIAkvKiBDaGVj
ayBhY2Nlc3MgaW4gcmVhc29uYWJsZSBhY2Nlc3MgcmFuZ2UgZm9yIGJvdGggU1dQIGFuZCBTV1BC
ICovCi0JaWYgKCFhY2Nlc3Nfb2soKGFkZHJlc3MgJiB+MyksIDQpKSB7CisJaWYgKCFhY2Nlc3Nf
b2soKHZvaWQgX191c2VyICopKGFkZHJlc3MgJiB+MyksIDQpKSB7CiAJCXByX2RlYnVnKCJTV1B7
Qn0gZW11bGF0aW9uOiBhY2Nlc3MgdG8gJXAgbm90IGFsbG93ZWQhXG4iLAogCQkJICh2b2lkICop
YWRkcmVzcyk7CiAJCXJlcyA9IC1FRkFVTFQ7CmRpZmYgLS1naXQgYS9hcmNoL2FybS9rZXJuZWwv
dHJhcHMuYyBiL2FyY2gvYXJtL2tlcm5lbC90cmFwcy5jCmluZGV4IGRhMDRlZDg1ODU1YS4uMjZj
OGM4Mjc2Mjk3IDEwMDY0NAotLS0gYS9hcmNoL2FybS9rZXJuZWwvdHJhcHMuYworKysgYi9hcmNo
L2FybS9rZXJuZWwvdHJhcHMuYwpAQCAtNTc2LDcgKzU3Niw3IEBAIGRvX2NhY2hlX29wKHVuc2ln
bmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgZW5kLCBpbnQgZmxhZ3MpCiAJaWYgKGVuZCA8
IHN0YXJ0IHx8IGZsYWdzKQogCQlyZXR1cm4gLUVJTlZBTDsKIAotCWlmICghYWNjZXNzX29rKHN0
YXJ0LCBlbmQgLSBzdGFydCkpCisJaWYgKCFhY2Nlc3Nfb2soKHZvaWQgX191c2VyICopc3RhcnQs
IGVuZCAtIHN0YXJ0KSkKIAkJcmV0dXJuIC1FRkFVTFQ7CiAKIAlyZXR1cm4gX19kb19jYWNoZV9v
cChzdGFydCwgZW5kKTsKZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20vdWFjY2Vz
cy5oIGIvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS91YWNjZXNzLmgKaW5kZXggMmUyMDg3OWZlM2Nm
Li4zNTdmN2JkOWM5ODEgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20vdWFjY2Vz
cy5oCisrKyBiL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCkBAIC0zMyw3ICszMyw3
IEBACiAgKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGZvbGxvd2luZyB0ZXN0OgogICogKHU2
NSlhZGRyICsgKHU2NSlzaXplIDw9ICh1NjUpVEFTS19TSVpFX01BWAogICovCi1zdGF0aWMgaW5s
aW5lIHVuc2lnbmVkIGxvbmcgX19yYW5nZV9vayhjb25zdCB2b2lkIF9fdXNlciAqYWRkciwgdW5z
aWduZWQgbG9uZyBzaXplKQorc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIF9fYWNjZXNzX29r
KGNvbnN0IHZvaWQgX191c2VyICphZGRyLCB1bnNpZ25lZCBsb25nIHNpemUpCiB7CiAJdW5zaWdu
ZWQgbG9uZyByZXQsIGxpbWl0ID0gVEFTS19TSVpFX01BWCAtIDE7CiAKQEAgLTY2LDggKzY2LDkg
QEAgc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIF9fcmFuZ2Vfb2soY29uc3Qgdm9pZCBfX3Vz
ZXIgKmFkZHIsIHVuc2lnbmVkIGxvbmcgc2kKIAogCXJldHVybiByZXQ7CiB9CisjZGVmaW5lIF9f
YWNjZXNzX29rIF9fYWNjZXNzX29rCiAKLSNkZWZpbmUgYWNjZXNzX29rKGFkZHIsIHNpemUpCV9f
cmFuZ2Vfb2soYWRkciwgc2l6ZSkKKyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9hY2Nlc3Nfb2suaD4K
IAogLyoKICAqIFVzZXIgYWNjZXNzIGVuYWJsaW5nL2Rpc2FibGluZy4KZGlmZiAtLWdpdCBhL2Fy
Y2gvY3NreS9pbmNsdWRlL2FzbS91YWNjZXNzLmggYi9hcmNoL2Nza3kvaW5jbHVkZS9hc20vdWFj
Y2Vzcy5oCmluZGV4IGFjNWE1NGY1N2Q0MC4uZmVjOGY3N2ZmYzk5IDEwMDY0NAotLS0gYS9hcmNo
L2Nza3kvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2FyY2gvY3NreS9pbmNsdWRlL2FzbS91
YWNjZXNzLmgKQEAgLTUsMTQgKzUsNiBAQAogCiAjZGVmaW5lIHVzZXJfYWRkcl9tYXgoKSAoY3Vy
cmVudF90aHJlYWRfaW5mbygpLT5hZGRyX2xpbWl0LnNlZykKIAotc3RhdGljIGlubGluZSBpbnQg
X19hY2Nlc3Nfb2sodW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIHNpemUpCi17Ci0J
dW5zaWduZWQgbG9uZyBsaW1pdCA9IHVzZXJfYWRkcl9tYXgoKTsKLQotCXJldHVybiAoc2l6ZSA8
PSBsaW1pdCkgJiYgKGFkZHIgPD0gKGxpbWl0IC0gc2l6ZSkpOwotfQotI2RlZmluZSBfX2FjY2Vz
c19vayBfX2FjY2Vzc19vawotCiAvKgogICogX19wdXRfdXNlcl9mbgogICovCmRpZmYgLS1naXQg
YS9hcmNoL2Nza3kva2VybmVsL3NpZ25hbC5jIGIvYXJjaC9jc2t5L2tlcm5lbC9zaWduYWwuYwpp
bmRleCBjN2I3NjNkMmY1MjYuLjg4NjdkZGYzZTZjNyAxMDA2NDQKLS0tIGEvYXJjaC9jc2t5L2tl
cm5lbC9zaWduYWwuYworKysgYi9hcmNoL2Nza3kva2VybmVsL3NpZ25hbC5jCkBAIC0xMzYsNyAr
MTM2LDcgQEAgc3RhdGljIGlubGluZSB2b2lkIF9fdXNlciAqZ2V0X3NpZ2ZyYW1lKHN0cnVjdCBr
c2lnbmFsICprc2lnLAogc3RhdGljIGludAogc2V0dXBfcnRfZnJhbWUoc3RydWN0IGtzaWduYWwg
KmtzaWcsIHNpZ3NldF90ICpzZXQsIHN0cnVjdCBwdF9yZWdzICpyZWdzKQogewotCXN0cnVjdCBy
dF9zaWdmcmFtZSAqZnJhbWU7CisJc3RydWN0IHJ0X3NpZ2ZyYW1lIF9fdXNlciAqZnJhbWU7CiAJ
aW50IGVyciA9IDA7CiAKIAlmcmFtZSA9IGdldF9zaWdmcmFtZShrc2lnLCByZWdzLCBzaXplb2Yo
KmZyYW1lKSk7CmRpZmYgLS1naXQgYS9hcmNoL2hleGFnb24vaW5jbHVkZS9hc20vdWFjY2Vzcy5o
IGIvYXJjaC9oZXhhZ29uL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAppbmRleCA3MTliYTNmM2M0NWMu
LmJmZjc3ZWZjMGQ5YSAxMDA2NDQKLS0tIGEvYXJjaC9oZXhhZ29uL2luY2x1ZGUvYXNtL3VhY2Nl
c3MuaAorKysgYi9hcmNoL2hleGFnb24vaW5jbHVkZS9hc20vdWFjY2Vzcy5oCkBAIC0xMiwzMSAr
MTIsNiBAQAogICovCiAjaW5jbHVkZSA8YXNtL3NlY3Rpb25zLmg+CiAKLS8qCi0gKiBhY2Nlc3Nf
b2s6IC0gQ2hlY2tzIGlmIGEgdXNlciBzcGFjZSBwb2ludGVyIGlzIHZhbGlkCi0gKiBAYWRkcjog
VXNlciBzcGFjZSBwb2ludGVyIHRvIHN0YXJ0IG9mIGJsb2NrIHRvIGNoZWNrCi0gKiBAc2l6ZTog
U2l6ZSBvZiBibG9jayB0byBjaGVjawotICoKLSAqIENvbnRleHQ6IFVzZXIgY29udGV4dCBvbmx5
LiBUaGlzIGZ1bmN0aW9uIG1heSBzbGVlcCBpZiBwYWdlZmF1bHRzIGFyZQotICogICAgICAgICAg
ZW5hYmxlZC4KLSAqCi0gKiBDaGVja3MgaWYgYSBwb2ludGVyIHRvIGEgYmxvY2sgb2YgbWVtb3J5
IGluIHVzZXIgc3BhY2UgaXMgdmFsaWQuCi0gKgotICogUmV0dXJucyB0cnVlIChub256ZXJvKSBp
ZiB0aGUgbWVtb3J5IGJsb2NrICptYXkqIGJlIHZhbGlkLCBmYWxzZSAoemVybykKLSAqIGlmIGl0
IGlzIGRlZmluaXRlbHkgaW52YWxpZC4KLSAqCi0gKi8KLSNkZWZpbmUgdWFjY2Vzc19rZXJuZWwo
KSAoZ2V0X2ZzKCkuc2VnID09IEtFUk5FTF9EUy5zZWcpCi0jZGVmaW5lIHVzZXJfYWRkcl9tYXgo
KSAodWFjY2Vzc19rZXJuZWwoKSA/IH4wVUwgOiBUQVNLX1NJWkUpCi0KLXN0YXRpYyBpbmxpbmUg
aW50IF9fYWNjZXNzX29rKHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBzaXplKQot
ewotCXVuc2lnbmVkIGxvbmcgbGltaXQgPSBUQVNLX1NJWkU7Ci0KLQlyZXR1cm4gKHNpemUgPD0g
bGltaXQpICYmIChhZGRyIDw9IChsaW1pdCAtIHNpemUpKTsKLX0KLSNkZWZpbmUgX19hY2Nlc3Nf
b2sgX19hY2Nlc3Nfb2sKLQogLyoKICAqIFdoZW4gYSBrZXJuZWwtbW9kZSBwYWdlIGZhdWx0IGlz
IHRha2VuLCB0aGUgZmF1bHRpbmcgaW5zdHJ1Y3Rpb24KICAqIGFkZHJlc3MgaXMgY2hlY2tlZCBh
Z2FpbnN0IGEgdGFibGUgb2YgZXhjZXB0aW9uX3RhYmxlX2VudHJpZXMuCmRpZmYgLS1naXQgYS9h
cmNoL2lhNjQvaW5jbHVkZS9hc20vdWFjY2Vzcy5oIGIvYXJjaC9pYTY0L2luY2x1ZGUvYXNtL3Vh
Y2Nlc3MuaAppbmRleCBlMTlkMmRjYzBjZWQuLmUyNDJhM2NjMTMzMCAxMDA2NDQKLS0tIGEvYXJj
aC9pYTY0L2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAorKysgYi9hcmNoL2lhNjQvaW5jbHVkZS9hc20v
dWFjY2Vzcy5oCkBAIC01MCw4ICs1MCw2IEBACiAjZGVmaW5lIGdldF9mcygpICAoY3VycmVudF90
aHJlYWRfaW5mbygpLT5hZGRyX2xpbWl0KQogI2RlZmluZSBzZXRfZnMoeCkgKGN1cnJlbnRfdGhy
ZWFkX2luZm8oKS0+YWRkcl9saW1pdCA9ICh4KSkKIAotI2RlZmluZSB1YWNjZXNzX2tlcm5lbCgp
CShnZXRfZnMoKS5zZWcgPT0gS0VSTkVMX0RTLnNlZykKLQogLyoKICAqIFdoZW4gYWNjZXNzaW5n
IHVzZXIgbWVtb3J5LCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGUgZW50aXJlIGFyZWEgcmVhbGx5
IGlzIGluCiAgKiB1c2VyLWxldmVsIHNwYWNlLiAgSW4gb3JkZXIgdG8gZG8gdGhpcyBlZmZpY2ll
bnRseSwgd2UgbWFrZSBzdXJlIHRoYXQgdGhlIHBhZ2UgYXQKQEAgLTY1LDcgKzYzLDggQEAgc3Rh
dGljIGlubGluZSBpbnQgX19hY2Nlc3Nfb2soY29uc3Qgdm9pZCBfX3VzZXIgKnAsIHVuc2lnbmVk
IGxvbmcgc2l6ZSkKIAlyZXR1cm4gbGlrZWx5KGFkZHIgPD0gc2VnKSAmJgogCSAoc2VnID09IEtF
Uk5FTF9EUy5zZWcgfHwgbGlrZWx5KFJFR0lPTl9PRkZTRVQoYWRkcikgPCBSR05fTUFQX0xJTUlU
KSk7CiB9Ci0jZGVmaW5lIGFjY2Vzc19vayhhZGRyLCBzaXplKQlfX2FjY2Vzc19vaygoYWRkciks
IChzaXplKSkKKyNkZWZpbmUgX19hY2Nlc3Nfb2sgX19hY2Nlc3Nfb2sKKyNpbmNsdWRlIDxhc20t
Z2VuZXJpYy9hY2Nlc3Nfb2suaD4KIAogLyoKICAqIFRoZXNlIGFyZSB0aGUgbWFpbiBzaW5nbGUt
dmFsdWUgdHJhbnNmZXIgcm91dGluZXMuICBUaGV5IGF1dG9tYXRpY2FsbHkKZGlmZiAtLWdpdCBh
L2FyY2gvbTY4ay9pbmNsdWRlL2FzbS91YWNjZXNzLmggYi9hcmNoL202OGsvaW5jbHVkZS9hc20v
dWFjY2Vzcy5oCmluZGV4IDc5NjE3YzBiMmY5MS4uZDZiYjU3MjAzNjVhIDEwMDY0NAotLS0gYS9h
cmNoL202OGsvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2FyY2gvbTY4ay9pbmNsdWRlL2Fz
bS91YWNjZXNzLmgKQEAgLTEyLDE1ICsxMiwxOCBAQAogI2luY2x1ZGUgPGFzbS9leHRhYmxlLmg+
CiAKIC8qIFdlIGxldCB0aGUgTU1VIGRvIGFsbCBjaGVja2luZyAqLwotc3RhdGljIGlubGluZSBp
bnQgYWNjZXNzX29rKGNvbnN0IHZvaWQgX191c2VyICphZGRyLAorc3RhdGljIGlubGluZSBpbnQg
X19hY2Nlc3Nfb2soY29uc3Qgdm9pZCBfX3VzZXIgKmFkZHIsCiAJCQkgICAgdW5zaWduZWQgbG9u
ZyBzaXplKQogewogCS8qCiAJICogWFhYOiBmb3IgIUNPTkZJR19DUFVfSEFTX0FERFJFU1NfU1BB
Q0VTIHRoaXMgcmVhbGx5IG5lZWRzIHRvIGNoZWNrCiAJICogZm9yIFRBU0tfU0laRSEKKwkgKiBS
ZW1vdmluZyB0aGlzIGhlbHBlciBpcyBwcm9iYWJseSBzdWZmaWNpZW50LgogCSAqLwogCXJldHVy
biAxOwogfQorI2RlZmluZSBfX2FjY2Vzc19vayBfX2FjY2Vzc19vaworI2luY2x1ZGUgPGFzbS1n
ZW5lcmljL2FjY2Vzc19vay5oPgogCiAvKgogICogTm90IGFsbCB2YXJpZW50cyBvZiB0aGUgNjhr
IGZhbWlseSBzdXBwb3J0IHRoZSBub3Rpb24gb2YgYWRkcmVzcyBzcGFjZXMuCmRpZmYgLS1naXQg
YS9hcmNoL21pY3JvYmxhemUvaW5jbHVkZS9hc20vdWFjY2Vzcy5oIGIvYXJjaC9taWNyb2JsYXpl
L2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAppbmRleCA1YjZlMGU3Nzg4ZjQuLmRkODJlOTBhZGI1MiAx
MDA2NDQKLS0tIGEvYXJjaC9taWNyb2JsYXplL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAorKysgYi9h
cmNoL21pY3JvYmxhemUvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCkBAIC0zOSwxMyArMzksNyBAQAog
CiAjIGRlZmluZSB1YWNjZXNzX2tlcm5lbCgpCShnZXRfZnMoKS5zZWcgPT0gS0VSTkVMX0RTLnNl
ZykKIAotc3RhdGljIGlubGluZSBpbnQgX19hY2Nlc3Nfb2sodW5zaWduZWQgbG9uZyBhZGRyLCB1
bnNpZ25lZCBsb25nIHNpemUpCi17Ci0JdW5zaWduZWQgbG9uZyBsaW1pdCA9IHVzZXJfYWRkcl9t
YXgoKTsKLQotCXJldHVybiAoc2l6ZSA8PSBsaW1pdCkgJiYgKGFkZHIgPD0gKGxpbWl0IC0gc2l6
ZSkpOwotfQotI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgc2l6ZSkgX19hY2Nlc3Nfb2soKHVuc2ln
bmVkIGxvbmcpYWRkciwgc2l6ZSkKKyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9hY2Nlc3Nfb2suaD4K
IAogIyBkZWZpbmUgX19GSVhVUF9TRUNUSU9OCSIuc2VjdGlvbiAuZml4dXAsXCJheFwiXG4iCiAj
IGRlZmluZSBfX0VYX1RBQkxFX1NFQ1RJT04JIi5zZWN0aW9uIF9fZXhfdGFibGUsXCJhXCJcbiIK
ZGlmZiAtLWdpdCBhL2FyY2gvbWlwcy9pbmNsdWRlL2FzbS91YWNjZXNzLmggYi9hcmNoL21pcHMv
aW5jbHVkZS9hc20vdWFjY2Vzcy5oCmluZGV4IGQ3Yzg5ZGMzNDI2Yy4uNDM2MjQ4NjUyYjI4IDEw
MDY0NAotLS0gYS9hcmNoL21pcHMvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2FyY2gvbWlw
cy9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAgLTQ0LDM0ICs0NCw3IEBAIGV4dGVybiB1NjQgX191
YV9saW1pdDsKIAogI2VuZGlmIC8qIENPTkZJR182NEJJVCAqLwogCi0vKgotICogYWNjZXNzX29r
OiAtIENoZWNrcyBpZiBhIHVzZXIgc3BhY2UgcG9pbnRlciBpcyB2YWxpZAotICogQGFkZHI6IFVz
ZXIgc3BhY2UgcG9pbnRlciB0byBzdGFydCBvZiBibG9jayB0byBjaGVjawotICogQHNpemU6IFNp
emUgb2YgYmxvY2sgdG8gY2hlY2sKLSAqCi0gKiBDb250ZXh0OiBVc2VyIGNvbnRleHQgb25seS4g
VGhpcyBmdW5jdGlvbiBtYXkgc2xlZXAgaWYgcGFnZWZhdWx0cyBhcmUKLSAqICAgICAgICAgIGVu
YWJsZWQuCi0gKgotICogQ2hlY2tzIGlmIGEgcG9pbnRlciB0byBhIGJsb2NrIG9mIG1lbW9yeSBp
biB1c2VyIHNwYWNlIGlzIHZhbGlkLgotICoKLSAqIFJldHVybnMgdHJ1ZSAobm9uemVybykgaWYg
dGhlIG1lbW9yeSBibG9jayBtYXkgYmUgdmFsaWQsIGZhbHNlICh6ZXJvKQotICogaWYgaXQgaXMg
ZGVmaW5pdGVseSBpbnZhbGlkLgotICoKLSAqIE5vdGUgdGhhdCwgZGVwZW5kaW5nIG9uIGFyY2hp
dGVjdHVyZSwgdGhpcyBmdW5jdGlvbiBwcm9iYWJseSBqdXN0Ci0gKiBjaGVja3MgdGhhdCB0aGUg
cG9pbnRlciBpcyBpbiB0aGUgdXNlciBzcGFjZSByYW5nZSAtIGFmdGVyIGNhbGxpbmcKLSAqIHRo
aXMgZnVuY3Rpb24sIG1lbW9yeSBhY2Nlc3MgZnVuY3Rpb25zIG1heSBzdGlsbCByZXR1cm4gLUVG
QVVMVC4KLSAqLwotCi1zdGF0aWMgaW5saW5lIGludCBfX2FjY2Vzc19vayhjb25zdCB2b2lkIF9f
dXNlciAqcCwgdW5zaWduZWQgbG9uZyBzaXplKQotewotCXVuc2lnbmVkIGxvbmcgYWRkciA9ICh1
bnNpZ25lZCBsb25nKXA7Ci0JdW5zaWduZWQgbG9uZyBsaW1pdCA9IFRBU0tfU0laRV9NQVg7Ci0K
LQlyZXR1cm4gKHNpemUgPD0gbGltaXQpICYmIChhZGRyIDw9IChsaW1pdCAtIHNpemUpKTsKLX0K
LQotI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgc2l6ZSkJCQkJCVwKLQlsaWtlbHkoX19hY2Nlc3Nf
b2soKGFkZHIpLCAoc2l6ZSkpKQorI2luY2x1ZGUgPGFzbS1nZW5lcmljL2FjY2Vzc19vay5oPgog
CiAvKgogICogcHV0X3VzZXI6IC0gV3JpdGUgYSBzaW1wbGUgdmFsdWUgaW50byB1c2VyIHNwYWNl
LgpkaWZmIC0tZ2l0IGEvYXJjaC9uZHMzMi9pbmNsdWRlL2FzbS91YWNjZXNzLmggYi9hcmNoL25k
czMyL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAppbmRleCAzN2E0MDk4MWRlYjMuLjgzMmQ2NDJhNDA2
OCAxMDA2NDQKLS0tIGEvYXJjaC9uZHMzMi9pbmNsdWRlL2FzbS91YWNjZXNzLmgKKysrIGIvYXJj
aC9uZHMzMi9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAgLTM4LDE4ICszOCwxNSBAQCBleHRlcm4g
aW50IGZpeHVwX2V4Y2VwdGlvbihzdHJ1Y3QgcHRfcmVncyAqcmVncyk7CiAKICNkZWZpbmUgZ2V0
X2ZzKCkJKGN1cnJlbnRfdGhyZWFkX2luZm8oKS0+YWRkcl9saW1pdCkKICNkZWZpbmUgdXNlcl9h
ZGRyX21heAlnZXRfZnMKKyNkZWZpbmUgdWFjY2Vzc19rZXJuZWwoKSAoZ2V0X2ZzKCkgPT0gS0VS
TkVMX0RTKQogCiBzdGF0aWMgaW5saW5lIHZvaWQgc2V0X2ZzKG1tX3NlZ21lbnRfdCBmcykKIHsK
IAljdXJyZW50X3RocmVhZF9pbmZvKCktPmFkZHJfbGltaXQgPSBmczsKIH0KIAotI2RlZmluZSB1
YWNjZXNzX2tlcm5lbCgpCShnZXRfZnMoKSA9PSBLRVJORUxfRFMpCisjaW5jbHVkZSA8YXNtLWdl
bmVyaWMvYWNjZXNzX29rLmg+CiAKLSNkZWZpbmUgX19yYW5nZV9vayhhZGRyLCBzaXplKSAoc2l6
ZSA8PSBnZXRfZnMoKSAmJiBhZGRyIDw9IChnZXRfZnMoKSAtc2l6ZSkpCi0KLSNkZWZpbmUgYWNj
ZXNzX29rKGFkZHIsIHNpemUpCVwKLQlfX3JhbmdlX29rKCh1bnNpZ25lZCBsb25nKWFkZHIsICh1
bnNpZ25lZCBsb25nKXNpemUpCiAvKgogICogU2luZ2xlLXZhbHVlIHRyYW5zZmVyIHJvdXRpbmVz
LiAgVGhleSBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgcmlnaHQKICAqIHNpemUgaWYgd2UganVzdCBo
YXZlIHRoZSByaWdodCBwb2ludGVyIHR5cGUuICBOb3RlIHRoYXQgdGhlIGZ1bmN0aW9ucwpkaWZm
IC0tZ2l0IGEvYXJjaC9uaW9zMi9pbmNsdWRlL2FzbS91YWNjZXNzLmggYi9hcmNoL25pb3MyL2lu
Y2x1ZGUvYXNtL3VhY2Nlc3MuaAppbmRleCBiYTkzNDBlOTZmZDQuLjlhNzY1OGRmN2Y4ZCAxMDA2
NDQKLS0tIGEvYXJjaC9uaW9zMi9pbmNsdWRlL2FzbS91YWNjZXNzLmgKKysrIGIvYXJjaC9uaW9z
Mi9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAgLTMwLDE5ICszMCwxMCBAQAogI2RlZmluZSBnZXRf
ZnMoKQkJKGN1cnJlbnRfdGhyZWFkX2luZm8oKS0+YWRkcl9saW1pdCkKICNkZWZpbmUgc2V0X2Zz
KHNlZykJCShjdXJyZW50X3RocmVhZF9pbmZvKCktPmFkZHJfbGltaXQgPSAoc2VnKSkKIAotI2Rl
ZmluZSB1YWNjZXNzX2tlcm5lbCgpIChnZXRfZnMoKS5zZWcgPT0gS0VSTkVMX0RTLnNlZykKLQot
I2RlZmluZSBfX2FjY2Vzc19vayhhZGRyLCBsZW4pCQkJXAotCSgoKHNpZ25lZCBsb25nKSgoKGxv
bmcpZ2V0X2ZzKCkuc2VnKSAmCVwKLQkJKChsb25nKShhZGRyKSB8ICgoKGxvbmcpKGFkZHIpKSAr
IChsZW4pKSB8IChsZW4pKSkpID09IDApCi0KLSNkZWZpbmUgYWNjZXNzX29rKGFkZHIsIGxlbikJ
CVwKLQlsaWtlbHkoX19hY2Nlc3Nfb2soKHVuc2lnbmVkIGxvbmcpKGFkZHIpLCAodW5zaWduZWQg
bG9uZykobGVuKSkpCisjaW5jbHVkZSA8YXNtLWdlbmVyaWMvYWNjZXNzX29rLmg+CiAKICMgZGVm
aW5lIF9fRVhfVEFCTEVfU0VDVElPTgkiLnNlY3Rpb24gX19leF90YWJsZSxcImFcIlxuIgogCi0j
ZGVmaW5lIHVzZXJfYWRkcl9tYXgoKSAodWFjY2Vzc19rZXJuZWwoKSA/IH4wVUwgOiBUQVNLX1NJ
WkUpCi0KIC8qCiAgKiBaZXJvIFVzZXJzcGFjZQogICovCmRpZmYgLS1naXQgYS9hcmNoL25pb3My
L2tlcm5lbC9zaWduYWwuYyBiL2FyY2gvbmlvczIva2VybmVsL3NpZ25hbC5jCmluZGV4IDIwMDlh
ZTJkM2MzYi4uMzg2ZTQ2NDQzYjYwIDEwMDY0NAotLS0gYS9hcmNoL25pb3MyL2tlcm5lbC9zaWdu
YWwuYworKysgYi9hcmNoL25pb3MyL2tlcm5lbC9zaWduYWwuYwpAQCAtMzYsMTAgKzM2LDEwIEBA
IHN0cnVjdCBydF9zaWdmcmFtZSB7CiAKIHN0YXRpYyBpbmxpbmUgaW50IHJ0X3Jlc3RvcmVfdWNv
bnRleHQoc3RydWN0IHB0X3JlZ3MgKnJlZ3MsCiAJCQkJCXN0cnVjdCBzd2l0Y2hfc3RhY2sgKnN3
LAotCQkJCQlzdHJ1Y3QgdWNvbnRleHQgKnVjLCBpbnQgKnByMikKKwkJCQkJc3RydWN0IHVjb250
ZXh0IF9fdXNlciAqdWMsIGludCAqcHIyKQogewogCWludCB0ZW1wOwotCXVuc2lnbmVkIGxvbmcg
KmdyZWdzID0gdWMtPnVjX21jb250ZXh0LmdyZWdzOworCXVuc2lnbmVkIGxvbmcgX191c2VyICpn
cmVncyA9IHVjLT51Y19tY29udGV4dC5ncmVnczsKIAlpbnQgZXJyOwogCiAJLyogQWx3YXlzIG1h
a2UgYW55IHBlbmRpbmcgcmVzdGFydGVkIHN5c3RlbSBjYWxscyByZXR1cm4gLUVJTlRSICovCkBA
IC0xMDIsMTAgKzEwMiwxMSBAQCBhc21saW5rYWdlIGludCBkb19ydF9zaWdyZXR1cm4oc3RydWN0
IHN3aXRjaF9zdGFjayAqc3cpCiB7CiAJc3RydWN0IHB0X3JlZ3MgKnJlZ3MgPSAoc3RydWN0IHB0
X3JlZ3MgKikoc3cgKyAxKTsKIAkvKiBWZXJpZnksIGNhbiB3ZSBmb2xsb3cgdGhlIHN0YWNrIGJh
Y2sgKi8KLQlzdHJ1Y3QgcnRfc2lnZnJhbWUgKmZyYW1lID0gKHN0cnVjdCBydF9zaWdmcmFtZSAq
KSByZWdzLT5zcDsKKwlzdHJ1Y3QgcnRfc2lnZnJhbWUgX191c2VyICpmcmFtZTsKIAlzaWdzZXRf
dCBzZXQ7CiAJaW50IHJ2YWw7CiAKKwlmcmFtZSA9IChzdHJ1Y3QgcnRfc2lnZnJhbWUgX191c2Vy
ICopIHJlZ3MtPnNwOwogCWlmICghYWNjZXNzX29rKGZyYW1lLCBzaXplb2YoKmZyYW1lKSkpCiAJ
CWdvdG8gYmFkZnJhbWU7CiAKQEAgLTEyNCwxMCArMTI1LDEwIEBAIGFzbWxpbmthZ2UgaW50IGRv
X3J0X3NpZ3JldHVybihzdHJ1Y3Qgc3dpdGNoX3N0YWNrICpzdykKIAlyZXR1cm4gMDsKIH0KIAot
c3RhdGljIGlubGluZSBpbnQgcnRfc2V0dXBfdWNvbnRleHQoc3RydWN0IHVjb250ZXh0ICp1Yywg
c3RydWN0IHB0X3JlZ3MgKnJlZ3MpCitzdGF0aWMgaW5saW5lIGludCBydF9zZXR1cF91Y29udGV4
dChzdHJ1Y3QgdWNvbnRleHQgX191c2VyICp1Yywgc3RydWN0IHB0X3JlZ3MgKnJlZ3MpCiB7CiAJ
c3RydWN0IHN3aXRjaF9zdGFjayAqc3cgPSAoc3RydWN0IHN3aXRjaF9zdGFjayAqKXJlZ3MgLSAx
OwotCXVuc2lnbmVkIGxvbmcgKmdyZWdzID0gdWMtPnVjX21jb250ZXh0LmdyZWdzOworCXVuc2ln
bmVkIGxvbmcgX191c2VyICpncmVncyA9IHVjLT51Y19tY29udGV4dC5ncmVnczsKIAlpbnQgZXJy
ID0gMDsKIAogCWVyciB8PSBfX3B1dF91c2VyKE1DT05URVhUX1ZFUlNJT04sICZ1Yy0+dWNfbWNv
bnRleHQudmVyc2lvbik7CkBAIC0xNjIsOCArMTYzLDkgQEAgc3RhdGljIGlubGluZSBpbnQgcnRf
c2V0dXBfdWNvbnRleHQoc3RydWN0IHVjb250ZXh0ICp1Yywgc3RydWN0IHB0X3JlZ3MgKnJlZ3Mp
CiAJcmV0dXJuIGVycjsKIH0KIAotc3RhdGljIGlubGluZSB2b2lkICpnZXRfc2lnZnJhbWUoc3Ry
dWN0IGtzaWduYWwgKmtzaWcsIHN0cnVjdCBwdF9yZWdzICpyZWdzLAotCQkJCSBzaXplX3QgZnJh
bWVfc2l6ZSkKK3N0YXRpYyBpbmxpbmUgdm9pZCBfX3VzZXIgKmdldF9zaWdmcmFtZShzdHJ1Y3Qg
a3NpZ25hbCAqa3NpZywKKwkJCQkJc3RydWN0IHB0X3JlZ3MgKnJlZ3MsCisJCQkJCXNpemVfdCBm
cmFtZV9zaXplKQogewogCXVuc2lnbmVkIGxvbmcgdXNwOwogCkBAIC0xNzQsMTMgKzE3NiwxMyBA
QCBzdGF0aWMgaW5saW5lIHZvaWQgKmdldF9zaWdmcmFtZShzdHJ1Y3Qga3NpZ25hbCAqa3NpZywg
c3RydWN0IHB0X3JlZ3MgKnJlZ3MsCiAJdXNwID0gc2lnc3AodXNwLCBrc2lnKTsKIAogCS8qIFZl
cmlmeSwgaXMgaXQgMzIgb3IgNjQgYml0IGFsaWduZWQgKi8KLQlyZXR1cm4gKHZvaWQgKikoKHVz
cCAtIGZyYW1lX3NpemUpICYgLThVTCk7CisJcmV0dXJuICh2b2lkIF9fdXNlciAqKSgodXNwIC0g
ZnJhbWVfc2l6ZSkgJiAtOFVMKTsKIH0KIAogc3RhdGljIGludCBzZXR1cF9ydF9mcmFtZShzdHJ1
Y3Qga3NpZ25hbCAqa3NpZywgc2lnc2V0X3QgKnNldCwKIAkJCSAgc3RydWN0IHB0X3JlZ3MgKnJl
Z3MpCiB7Ci0Jc3RydWN0IHJ0X3NpZ2ZyYW1lICpmcmFtZTsKKwlzdHJ1Y3QgcnRfc2lnZnJhbWUg
X191c2VyICpmcmFtZTsKIAlpbnQgZXJyID0gMDsKIAogCWZyYW1lID0gZ2V0X3NpZ2ZyYW1lKGtz
aWcsIHJlZ3MsIHNpemVvZigqZnJhbWUpKTsKZGlmZiAtLWdpdCBhL2FyY2gvb3BlbnJpc2MvaW5j
bHVkZS9hc20vdWFjY2Vzcy5oIGIvYXJjaC9vcGVucmlzYy9pbmNsdWRlL2FzbS91YWNjZXNzLmgK
aW5kZXggMTIwZjUwMDU0NjFiLi44ZjA0OWVjOTliM2UgMTAwNjQ0Ci0tLSBhL2FyY2gvb3BlbnJp
c2MvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2FyY2gvb3BlbnJpc2MvaW5jbHVkZS9hc20v
dWFjY2Vzcy5oCkBAIC00NSwyMSArNDUsNyBAQAogCiAjZGVmaW5lIHVhY2Nlc3Nfa2VybmVsKCkJ
KGdldF9mcygpID09IEtFUk5FTF9EUykKIAotLyogRW5zdXJlIHRoYXQgdGhlIHJhbmdlIGZyb20g
YWRkciB0byBhZGRyK3NpemUgaXMgYWxsIHdpdGhpbiB0aGUgcHJvY2VzcycKLSAqIGFkZHJlc3Mg
c3BhY2UKLSAqLwotc3RhdGljIGlubGluZSBpbnQgX19yYW5nZV9vayh1bnNpZ25lZCBsb25nIGFk
ZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKLXsKLQljb25zdCBtbV9zZWdtZW50X3QgZnMgPSBnZXRf
ZnMoKTsKLQotCXJldHVybiBzaXplIDw9IGZzICYmIGFkZHIgPD0gKGZzIC0gc2l6ZSk7Ci19Ci0K
LSNkZWZpbmUgYWNjZXNzX29rKGFkZHIsIHNpemUpCQkJCQkJXAotKHsgCQkJCQkJCQkJXAotCV9f
Y2hrX3VzZXJfcHRyKGFkZHIpOwkJCQkJCVwKLQlfX3JhbmdlX29rKCh1bnNpZ25lZCBsb25nKShh
ZGRyKSwgKHNpemUpKTsJCQlcCi19KQorI2luY2x1ZGUgPGFzbS1nZW5lcmljL2FjY2Vzc19vay5o
PgogCiAvKgogICogVGhlc2UgYXJlIHRoZSBtYWluIHNpbmdsZS12YWx1ZSB0cmFuc2ZlciByb3V0
aW5lcy4gIFRoZXkgYXV0b21hdGljYWxseQpAQCAtMjY4LDkgKzI1NCw2IEBAIGNsZWFyX3VzZXIo
dm9pZCBfX3VzZXIgKmFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKIAlyZXR1cm4gc2l6ZTsKIH0K
IAotI2RlZmluZSB1c2VyX2FkZHJfbWF4KCkgXAotCSh1YWNjZXNzX2tlcm5lbCgpID8gfjBVTCA6
IFRBU0tfU0laRSkKLQogZXh0ZXJuIGxvbmcgc3RybmNweV9mcm9tX3VzZXIoY2hhciAqZGVzdCwg
Y29uc3QgY2hhciBfX3VzZXIgKnNyYywgbG9uZyBjb3VudCk7CiAKIGV4dGVybiBfX211c3RfY2hl
Y2sgbG9uZyBzdHJubGVuX3VzZXIoY29uc3QgY2hhciBfX3VzZXIgKnN0ciwgbG9uZyBuKTsKZGlm
ZiAtLWdpdCBhL2FyY2gvcGFyaXNjL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gvcGFyaXNj
L2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAppbmRleCAwOTI1YmJkNmRiNjcuLmI2OGYxOWUxMTM2MSAx
MDA2NDQKLS0tIGEvYXJjaC9wYXJpc2MvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2FyY2gv
cGFyaXNjL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaApAQCAtMTcsOSArMTcsMTMgQEAKICAqIFdlIGp1
c3QgbGV0IHRoZSBwYWdlIGZhdWx0IGhhbmRsZXIgZG8gdGhlIHJpZ2h0IHRoaW5nLiBUaGlzIGFs
c28gbWVhbnMKICAqIHRoYXQgcHV0X3VzZXIgaXMgdGhlIHNhbWUgYXMgX19wdXRfdXNlciwgZXRj
LgogICovCi0KLSNkZWZpbmUgYWNjZXNzX29rKHVhZGRyLCBzaXplKQlcCi0JKCAodWFkZHIpID09
ICh1YWRkcikgKQorc3RhdGljIGlubGluZSBpbnQgX19hY2Nlc3Nfb2soY29uc3Qgdm9pZCBfX3Vz
ZXIgKmFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKK3sKKwlyZXR1cm4gMTsKK30KKyNkZWZpbmUg
X19hY2Nlc3Nfb2sgX19hY2Nlc3Nfb2sKKyNkZWZpbmUgVEFTS19TSVpFX01BWCBERUZBVUxUX1RB
U0tfU0laRQorI2luY2x1ZGUgPGFzbS1nZW5lcmljL2FjY2Vzc19vay5oPgogCiAjZGVmaW5lIHB1
dF91c2VyIF9fcHV0X3VzZXIKICNkZWZpbmUgZ2V0X3VzZXIgX19nZXRfdXNlcgpkaWZmIC0tZ2l0
IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gvcG93ZXJwYy9pbmNs
dWRlL2FzbS91YWNjZXNzLmgKaW5kZXggYTAwMzJjMmU3NTUwLi4yZTgzMjE3ZjUyZGUgMTAwNjQ0
Ci0tLSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS91YWNjZXNzLmgKKysrIGIvYXJjaC9wb3dl
cnBjL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaApAQCAtMTEsMTggKzExLDkgQEAKICNpZmRlZiBfX3Bv
d2VycGM2NF9fCiAvKiBXZSB1c2UgVEFTS19TSVpFX1VTRVI2NCBhcyBUQVNLX1NJWkUgaXMgbm90
IGNvbnN0YW50ICovCiAjZGVmaW5lIFRBU0tfU0laRV9NQVgJCVRBU0tfU0laRV9VU0VSNjQKLSNl
bHNlCi0jZGVmaW5lIFRBU0tfU0laRV9NQVgJCVRBU0tfU0laRQogI2VuZGlmCiAKLXN0YXRpYyBp
bmxpbmUgYm9vbCBfX2FjY2Vzc19vayh1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcg
c2l6ZSkKLXsKLQlyZXR1cm4gYWRkciA8IFRBU0tfU0laRV9NQVggJiYgc2l6ZSA8PSBUQVNLX1NJ
WkVfTUFYIC0gYWRkcjsKLX0KLQotI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgc2l6ZSkJCVwKLQko
X19jaGtfdXNlcl9wdHIoYWRkciksCQlcCi0JIF9fYWNjZXNzX29rKCh1bnNpZ25lZCBsb25nKShh
ZGRyKSwgKHNpemUpKSkKKyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9hY2Nlc3Nfb2suaD4KIAogLyoK
ICAqIFRoZXNlIGFyZSB0aGUgbWFpbiBzaW5nbGUtdmFsdWUgdHJhbnNmZXIgcm91dGluZXMuICBU
aGV5IGF1dG9tYXRpY2FsbHkKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9saWIvc3N0ZXAuYyBi
L2FyY2gvcG93ZXJwYy9saWIvc3N0ZXAuYwppbmRleCBhOTRiMGNkMGJkYzUuLjAyMmQyM2FlMzAw
YiAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2xpYi9zc3RlcC5jCisrKyBiL2FyY2gvcG93ZXJw
Yy9saWIvc3N0ZXAuYwpAQCAtMTEyLDkgKzExMiw5IEBAIHN0YXRpYyBub2twcm9iZV9pbmxpbmUg
bG9uZyBhZGRyZXNzX29rKHN0cnVjdCBwdF9yZWdzICpyZWdzLAogewogCWlmICghdXNlcl9tb2Rl
KHJlZ3MpKQogCQlyZXR1cm4gMTsKLQlpZiAoX19hY2Nlc3Nfb2soZWEsIG5iKSkKKwlpZiAoYWNj
ZXNzX29rKCh2b2lkIF9fdXNlciAqKWVhLCBuYikpCiAJCXJldHVybiAxOwotCWlmIChfX2FjY2Vz
c19vayhlYSwgMSkpCisJaWYgKGFjY2Vzc19vaygodm9pZCBfX3VzZXIgKillYSwgMSkpCiAJCS8q
IEFjY2VzcyBvdmVybGFwcyB0aGUgZW5kIG9mIHRoZSB1c2VyIHJlZ2lvbiAqLwogCQlyZWdzLT5k
YXIgPSBUQVNLX1NJWkVfTUFYIC0gMTsKIAllbHNlCmRpZmYgLS1naXQgYS9hcmNoL3Jpc2N2L2lu
Y2x1ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gvcmlzY3YvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCmlu
ZGV4IDQ0MDdiOWU0OGQyYy4uODU1NDUwYmVkOWY1IDEwMDY0NAotLS0gYS9hcmNoL3Jpc2N2L2lu
Y2x1ZGUvYXNtL3VhY2Nlc3MuaAorKysgYi9hcmNoL3Jpc2N2L2luY2x1ZGUvYXNtL3VhY2Nlc3Mu
aApAQCAtMjEsNDIgKzIxLDEzIEBACiAjaW5jbHVkZSA8YXNtL2J5dGVvcmRlci5oPgogI2luY2x1
ZGUgPGFzbS9leHRhYmxlLmg+CiAjaW5jbHVkZSA8YXNtL2FzbS5oPgorI2luY2x1ZGUgPGFzbS1n
ZW5lcmljL2FjY2Vzc19vay5oPgogCiAjZGVmaW5lIF9fZW5hYmxlX3VzZXJfYWNjZXNzKCkJCQkJ
CQkJXAogCV9fYXNtX18gX192b2xhdGlsZV9fICgiY3NycyBzc3RhdHVzLCAlMCIgOiA6ICJyIiAo
U1JfU1VNKSA6ICJtZW1vcnkiKQogI2RlZmluZSBfX2Rpc2FibGVfdXNlcl9hY2Nlc3MoKQkJCQkJ
CQlcCiAJX19hc21fXyBfX3ZvbGF0aWxlX18gKCJjc3JjIHNzdGF0dXMsICUwIiA6IDogInIiIChT
Ul9TVU0pIDogIm1lbW9yeSIpCiAKLS8qKgotICogYWNjZXNzX29rOiAtIENoZWNrcyBpZiBhIHVz
ZXIgc3BhY2UgcG9pbnRlciBpcyB2YWxpZAotICogQGFkZHI6IFVzZXIgc3BhY2UgcG9pbnRlciB0
byBzdGFydCBvZiBibG9jayB0byBjaGVjawotICogQHNpemU6IFNpemUgb2YgYmxvY2sgdG8gY2hl
Y2sKLSAqCi0gKiBDb250ZXh0OiBVc2VyIGNvbnRleHQgb25seS4gIFRoaXMgZnVuY3Rpb24gbWF5
IHNsZWVwLgotICoKLSAqIENoZWNrcyBpZiBhIHBvaW50ZXIgdG8gYSBibG9jayBvZiBtZW1vcnkg
aW4gdXNlciBzcGFjZSBpcyB2YWxpZC4KLSAqCi0gKiBSZXR1cm5zIHRydWUgKG5vbnplcm8pIGlm
IHRoZSBtZW1vcnkgYmxvY2sgbWF5IGJlIHZhbGlkLCBmYWxzZSAoemVybykKLSAqIGlmIGl0IGlz
IGRlZmluaXRlbHkgaW52YWxpZC4KLSAqCi0gKiBOb3RlIHRoYXQsIGRlcGVuZGluZyBvbiBhcmNo
aXRlY3R1cmUsIHRoaXMgZnVuY3Rpb24gcHJvYmFibHkganVzdAotICogY2hlY2tzIHRoYXQgdGhl
IHBvaW50ZXIgaXMgaW4gdGhlIHVzZXIgc3BhY2UgcmFuZ2UgLSBhZnRlciBjYWxsaW5nCi0gKiB0
aGlzIGZ1bmN0aW9uLCBtZW1vcnkgYWNjZXNzIGZ1bmN0aW9ucyBtYXkgc3RpbGwgcmV0dXJuIC1F
RkFVTFQuCi0gKi8KLSNkZWZpbmUgYWNjZXNzX29rKGFkZHIsIHNpemUpICh7CQkJCQlcCi0JX19j
aGtfdXNlcl9wdHIoYWRkcik7CQkJCQkJXAotCWxpa2VseShfX2FjY2Vzc19vaygodW5zaWduZWQg
bG9uZyBfX2ZvcmNlKShhZGRyKSwgKHNpemUpKSk7CVwKLX0pCi0KLS8qCi0gKiBFbnN1cmUgdGhh
dCB0aGUgcmFuZ2UgW2FkZHIsIGFkZHIrc2l6ZSkgaXMgd2l0aGluIHRoZSBwcm9jZXNzJ3MKLSAq
IGFkZHJlc3Mgc3BhY2UKLSAqLwotc3RhdGljIGlubGluZSBpbnQgX19hY2Nlc3Nfb2sodW5zaWdu
ZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIHNpemUpCi17Ci0JcmV0dXJuIHNpemUgPD0gVEFT
S19TSVpFICYmIGFkZHIgPD0gVEFTS19TSVpFIC0gc2l6ZTsKLX0KLQogLyoKICAqIFRoZSBleGNl
cHRpb24gdGFibGUgY29uc2lzdHMgb2YgcGFpcnMgb2YgYWRkcmVzc2VzOiB0aGUgZmlyc3QgaXMg
dGhlCiAgKiBhZGRyZXNzIG9mIGFuIGluc3RydWN0aW9uIHRoYXQgaXMgYWxsb3dlZCB0byBmYXVs
dCwgYW5kIHRoZSBzZWNvbmQgaXMKZGlmZiAtLWdpdCBhL2FyY2gvcmlzY3Yva2VybmVsL3BlcmZf
Y2FsbGNoYWluLmMgYi9hcmNoL3Jpc2N2L2tlcm5lbC9wZXJmX2NhbGxjaGFpbi5jCmluZGV4IDFm
YzA3NWI4Zjc2NC4uZjBjN2JiOTgxMTlhIDEwMDY0NAotLS0gYS9hcmNoL3Jpc2N2L2tlcm5lbC9w
ZXJmX2NhbGxjaGFpbi5jCisrKyBiL2FyY2gvcmlzY3Yva2VybmVsL3BlcmZfY2FsbGNoYWluLmMK
QEAgLTE1LDcgKzE1LDcgQEAgc3RhdGljIHVuc2lnbmVkIGxvbmcgdXNlcl9iYWNrdHJhY2Uoc3Ry
dWN0IHBlcmZfY2FsbGNoYWluX2VudHJ5X2N0eCAqZW50cnksCiB7CiAJc3RydWN0IHN0YWNrZnJh
bWUgYnVmdGFpbDsKIAl1bnNpZ25lZCBsb25nIHJhID0gMDsKLQl1bnNpZ25lZCBsb25nICp1c2Vy
X2ZyYW1lX3RhaWwgPQorCXVuc2lnbmVkIGxvbmcgX191c2VyICp1c2VyX2ZyYW1lX3RhaWwgPQog
CQkJKHVuc2lnbmVkIGxvbmcgKikoZnAgLSBzaXplb2Yoc3RydWN0IHN0YWNrZnJhbWUpKTsKIAog
CS8qIENoZWNrIGFjY2Vzc2liaWxpdHkgb2Ygb25lIHN0cnVjdCBmcmFtZV90YWlsIGJleW9uZCAq
LwpkaWZmIC0tZ2l0IGEvYXJjaC9zMzkwL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gvczM5
MC9pbmNsdWRlL2FzbS91YWNjZXNzLmgKaW5kZXggMjkzMzJlZGY0NmYwLi5mODRkNzBjOGUxODgg
MTAwNjQ0Ci0tLSBhL2FyY2gvczM5MC9pbmNsdWRlL2FzbS91YWNjZXNzLmgKKysrIGIvYXJjaC9z
MzkwL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaApAQCAtMjAsMTggKzIwLDEzIEBACiAKIHZvaWQgZGVi
dWdfdXNlcl9hc2NlKGludCBleGl0KTsKIAotc3RhdGljIGlubGluZSBpbnQgX19yYW5nZV9vayh1
bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKK3N0YXRpYyBpbmxpbmUgaW50
IF9fYWNjZXNzX29rKGNvbnN0IHZvaWQgX191c2VyICphZGRyLCB1bnNpZ25lZCBsb25nIHNpemUp
CiB7CiAJcmV0dXJuIDE7CiB9CisjZGVmaW5lIF9fYWNjZXNzX29rIF9fYWNjZXNzX29rCiAKLSNk
ZWZpbmUgX19hY2Nlc3Nfb2soYWRkciwgc2l6ZSkJCQkJXAotKHsJCQkJCQkJXAotCV9fY2hrX3Vz
ZXJfcHRyKGFkZHIpOwkJCQlcCi0JX19yYW5nZV9vaygodW5zaWduZWQgbG9uZykoYWRkciksIChz
aXplKSk7CVwKLX0pCi0KLSNkZWZpbmUgYWNjZXNzX29rKGFkZHIsIHNpemUpIF9fYWNjZXNzX29r
KGFkZHIsIHNpemUpCisjaW5jbHVkZSA8YXNtLWdlbmVyaWMvYWNjZXNzX29rLmg+CiAKIHVuc2ln
bmVkIGxvbmcgX19tdXN0X2NoZWNrCiByYXdfY29weV9mcm9tX3VzZXIodm9pZCAqdG8sIGNvbnN0
IHZvaWQgX191c2VyICpmcm9tLCB1bnNpZ25lZCBsb25nIG4pOwpkaWZmIC0tZ2l0IGEvYXJjaC9z
aC9pbmNsdWRlL2FzbS91YWNjZXNzLmggYi9hcmNoL3NoL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaApp
bmRleCA4ODY3YmIwNGIwMGUuLmNjZDIxOWQ3NDg1MSAxMDA2NDQKLS0tIGEvYXJjaC9zaC9pbmNs
dWRlL2FzbS91YWNjZXNzLmgKKysrIGIvYXJjaC9zaC9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAg
LTUsMjggKzUsMTAgQEAKICNpbmNsdWRlIDxhc20vc2VnbWVudC5oPgogI2luY2x1ZGUgPGFzbS9l
eHRhYmxlLmg+CiAKLSNkZWZpbmUgX19hZGRyX29rKGFkZHIpIFwKLQkoKHVuc2lnbmVkIGxvbmcg
X19mb3JjZSkoYWRkcikgPCBjdXJyZW50X3RocmVhZF9pbmZvKCktPmFkZHJfbGltaXQuc2VnKQot
Ci0vKgotICogX19hY2Nlc3Nfb2s6IENoZWNrIGlmIGFkZHJlc3Mgd2l0aCBzaXplIGlzIE9LIG9y
IG5vdC4KLSAqCi0gKiBVaGh1aCwgdGhpcyBuZWVkcyAzMy1iaXQgYXJpdGhtZXRpYy4gV2UgaGF2
ZSBhIGNhcnJ5Li4KLSAqCi0gKiBzdW0gOj0gYWRkciArIHNpemU7ICBjYXJyeT8gLS0+IGZsYWcg
PSB0cnVlOwotICogaWYgKHN1bSA+PSBhZGRyX2xpbWl0KSBmbGFnID0gdHJ1ZTsKLSAqLwotI2Rl
ZmluZSBfX2FjY2Vzc19vayhhZGRyLCBzaXplKQkoewkJCQlcCi0JdW5zaWduZWQgbG9uZyBfX2Fv
X2EgPSAoYWRkciksIF9fYW9fYiA9IChzaXplKTsJCVwKLQl1bnNpZ25lZCBsb25nIF9fYW9fZW5k
ID0gX19hb19hICsgX19hb19iIC0gISFfX2FvX2I7CVwKLQlfX2FvX2VuZCA+PSBfX2FvX2EgJiYg
X19hZGRyX29rKF9fYW9fZW5kKTsgfSkKLQotI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgc2l6ZSkJ
XAotCShfX2Noa191c2VyX3B0cihhZGRyKSwJCVwKLQkgX19hY2Nlc3Nfb2soKHVuc2lnbmVkIGxv
bmcgX19mb3JjZSkoYWRkciksIChzaXplKSkpCi0KICNkZWZpbmUgdXNlcl9hZGRyX21heCgpCShj
dXJyZW50X3RocmVhZF9pbmZvKCktPmFkZHJfbGltaXQuc2VnKQogCisjaW5jbHVkZSA8YXNtLWdl
bmVyaWMvYWNjZXNzX29rLmg+CisKIC8qCiAgKiBVaCwgdGhlc2Ugc2hvdWxkIGJlY29tZSB0aGUg
bWFpbiBzaW5nbGUtdmFsdWUgdHJhbnNmZXIgcm91dGluZXMgLi4uCiAgKiBUaGV5IGF1dG9tYXRp
Y2FsbHkgdXNlIHRoZSByaWdodCBzaXplIGlmIHdlIGp1c3QgaGF2ZSB0aGUgcmlnaHQKZGlmZiAt
LWdpdCBhL2FyY2gvc3BhcmMvaW5jbHVkZS9hc20vdWFjY2Vzcy5oIGIvYXJjaC9zcGFyYy9pbmNs
dWRlL2FzbS91YWNjZXNzLmgKaW5kZXggMzkwMDk0MjAwZmM0Li5lZTc1ZjY5ZTNmY2QgMTAwNjQ0
Ci0tLSBhL2FyY2gvc3BhcmMvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2FyY2gvc3BhcmMv
aW5jbHVkZS9hc20vdWFjY2Vzcy5oCkBAIC0xMCw5ICsxMCw2IEBACiAjaW5jbHVkZSA8YXNtL3Vh
Y2Nlc3NfMzIuaD4KICNlbmRpZgogCi0jZGVmaW5lIHVzZXJfYWRkcl9tYXgoKSBcCi0JKHVhY2Nl
c3Nfa2VybmVsKCkgPyB+MFVMIDogVEFTS19TSVpFKQotCiBsb25nIHN0cm5jcHlfZnJvbV91c2Vy
KGNoYXIgKmRlc3QsIGNvbnN0IGNoYXIgX191c2VyICpzcmMsIGxvbmcgY291bnQpOwogCiAjZW5k
aWYKZGlmZiAtLWdpdCBhL2FyY2gvc3BhcmMvaW5jbHVkZS9hc20vdWFjY2Vzc18zMi5oIGIvYXJj
aC9zcGFyYy9pbmNsdWRlL2FzbS91YWNjZXNzXzMyLmgKaW5kZXggNGExMjM0NmJiNjljLi4zNjc3
NDcxMTYyNjAgMTAwNjQ0Ci0tLSBhL2FyY2gvc3BhcmMvaW5jbHVkZS9hc20vdWFjY2Vzc18zMi5o
CisrKyBiL2FyY2gvc3BhcmMvaW5jbHVkZS9hc20vdWFjY2Vzc18zMi5oCkBAIC0yNSwxNyArMjUs
NyBAQAogI2RlZmluZSBnZXRfZnMoKQkoY3VycmVudC0+dGhyZWFkLmN1cnJlbnRfZHMpCiAjZGVm
aW5lIHNldF9mcyh2YWwpCSgoY3VycmVudC0+dGhyZWFkLmN1cnJlbnRfZHMpID0gKHZhbCkpCiAK
LSNkZWZpbmUgdWFjY2Vzc19rZXJuZWwoKSAoZ2V0X2ZzKCkuc2VnID09IEtFUk5FTF9EUy5zZWcp
Ci0KLS8qIFdlIGhhdmUgdGhlcmUgYSBuaWNlIG5vdC1tYXBwZWQgcGFnZSBhdCBQQUdFX09GRlNF
VCAtIFBBR0VfU0laRSwgc28gdGhhdCB0aGlzIHRlc3QKLSAqIGNhbiBiZSBmYWlybHkgbGlnaHR3
ZWlnaHQuCi0gKiBObyBvbmUgY2FuIHJlYWQvd3JpdGUgYW55dGhpbmcgZnJvbSB1c2VybGFuZCBp
biB0aGUga2VybmVsIHNwYWNlIGJ5IHNldHRpbmcKLSAqIGxhcmdlIHNpemUgYW5kIGFkZHJlc3Mg
bmVhciB0byBQQUdFX09GRlNFVCAtIGEgZmF1bHQgd2lsbCBicmVhayBoaXMgaW50ZW50aW9ucy4K
LSAqLwotI2RlZmluZSBfX3VzZXJfb2soYWRkciwgc2l6ZSkgKHsgKHZvaWQpKHNpemUpOyAoYWRk
cikgPCBTVEFDS19UT1A7IH0pCi0jZGVmaW5lIF9fa2VybmVsX29rICh1YWNjZXNzX2tlcm5lbCgp
KQotI2RlZmluZSBfX2FjY2Vzc19vayhhZGRyLCBzaXplKSAoX191c2VyX29rKChhZGRyKSAmIGdl
dF9mcygpLnNlZywgKHNpemUpKSkKLSNkZWZpbmUgYWNjZXNzX29rKGFkZHIsIHNpemUpIF9fYWNj
ZXNzX29rKCh1bnNpZ25lZCBsb25nKShhZGRyKSwgc2l6ZSkKKyNpbmNsdWRlIDxhc20tZ2VuZXJp
Yy9hY2Nlc3Nfb2suaD4KIAogLyogVWgsIHRoZXNlIHNob3VsZCBiZWNvbWUgdGhlIG1haW4gc2lu
Z2xlLXZhbHVlIHRyYW5zZmVyIHJvdXRpbmVzLi4KICAqIFRoZXkgYXV0b21hdGljYWxseSB1c2Ug
dGhlIHJpZ2h0IHNpemUgaWYgd2UganVzdCBoYXZlIHRoZSByaWdodApAQCAtNDcsMTMgKzM3LDEz
IEBACiAgKiBhbmQgaGlkZSBhbGwgdGhlIHVnbGluZXNzIGZyb20gdGhlIHVzZXIuCiAgKi8KICNk
ZWZpbmUgcHV0X3VzZXIoeCwgcHRyKSAoeyBcCi0JdW5zaWduZWQgbG9uZyBfX3B1X2FkZHIgPSAo
dW5zaWduZWQgbG9uZykocHRyKTsgXAorCXZvaWQgX191c2VyICpfX3B1X2FkZHIgPSAocHRyKTsg
XAogCV9fY2hrX3VzZXJfcHRyKHB0cik7IFwKIAlfX3B1dF91c2VyX2NoZWNrKChfX3R5cGVvZl9f
KCoocHRyKSkpKHgpLCBfX3B1X2FkZHIsIHNpemVvZigqKHB0cikpKTsgXAogfSkKIAogI2RlZmlu
ZSBnZXRfdXNlcih4LCBwdHIpICh7IFwKLQl1bnNpZ25lZCBsb25nIF9fZ3VfYWRkciA9ICh1bnNp
Z25lZCBsb25nKShwdHIpOyBcCisJY29uc3Qgdm9pZCBfX3VzZXIgKl9fZ3VfYWRkciA9IChwdHIp
OyBcCiAJX19jaGtfdXNlcl9wdHIocHRyKTsgXAogCV9fZ2V0X3VzZXJfY2hlY2soKHgpLCBfX2d1
X2FkZHIsIHNpemVvZigqKHB0cikpLCBfX3R5cGVvZl9fKCoocHRyKSkpOyBcCiB9KQpAQCAtMjMy
LDcgKzIyMiw3IEBAIHN0YXRpYyBpbmxpbmUgdW5zaWduZWQgbG9uZyBfX2NsZWFyX3VzZXIodm9p
ZCBfX3VzZXIgKmFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKIAogc3RhdGljIGlubGluZSB1bnNp
Z25lZCBsb25nIGNsZWFyX3VzZXIodm9pZCBfX3VzZXIgKmFkZHIsIHVuc2lnbmVkIGxvbmcgbikK
IHsKLQlpZiAobiAmJiBfX2FjY2Vzc19vaygodW5zaWduZWQgbG9uZykgYWRkciwgbikpCisJaWYg
KG4gJiYgX19hY2Nlc3Nfb2soYWRkciwgbikpCiAJCXJldHVybiBfX2NsZWFyX3VzZXIoYWRkciwg
bik7CiAJZWxzZQogCQlyZXR1cm4gbjsKZGlmZiAtLWdpdCBhL2FyY2gvc3BhcmMvaW5jbHVkZS9h
c20vdWFjY2Vzc182NC5oIGIvYXJjaC9zcGFyYy9pbmNsdWRlL2FzbS91YWNjZXNzXzY0LmgKaW5k
ZXggNWMxMmZiNDZiYzYxLi4wMDBiYWM2N2NmMzEgMTAwNjQ0Ci0tLSBhL2FyY2gvc3BhcmMvaW5j
bHVkZS9hc20vdWFjY2Vzc182NC5oCisrKyBiL2FyY2gvc3BhcmMvaW5jbHVkZS9hc20vdWFjY2Vz
c182NC5oCkBAIC0zMSw3ICszMSwxMiBAQAogCiAjZGVmaW5lIGdldF9mcygpICgobW1fc2VnbWVu
dF90KXsoY3VycmVudF90aHJlYWRfaW5mbygpLT5jdXJyZW50X2RzKX0pCiAKLSNkZWZpbmUgdWFj
Y2Vzc19rZXJuZWwoKSAoZ2V0X2ZzKCkuc2VnID09IEtFUk5FTF9EUy5zZWcpCitzdGF0aWMgaW5s
aW5lIGludCBfX2FjY2Vzc19vayhjb25zdCB2b2lkIF9fdXNlciAqYWRkciwgdW5zaWduZWQgbG9u
ZyBzaXplKQoreworCXJldHVybiAxOworfQorI2RlZmluZSBfX2FjY2Vzc19vayBfX2FjY2Vzc19v
aworI2luY2x1ZGUgPGFzbS1nZW5lcmljL2FjY2Vzc19vay5oPgogCiAjZGVmaW5lIHNldF9mcyh2
YWwpCQkJCQkJCQlcCiBkbyB7CQkJCQkJCQkJCVwKQEAgLTQzLDMzICs0OCw3IEBAIGRvIHsJCQkJ
CQkJCQkJXAogICogVGVzdCB3aGV0aGVyIGEgYmxvY2sgb2YgbWVtb3J5IGlzIGEgdmFsaWQgdXNl
ciBzcGFjZSBhZGRyZXNzLgogICogUmV0dXJucyAwIGlmIHRoZSByYW5nZSBpcyB2YWxpZCwgbm9u
emVybyBvdGhlcndpc2UuCiAgKi8KLXN0YXRpYyBpbmxpbmUgYm9vbCBfX2Noa19yYW5nZV9ub3Rf
b2sodW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIHNpemUsIHVuc2lnbmVkIGxvbmcg
bGltaXQpCi17Ci0JaWYgKF9fYnVpbHRpbl9jb25zdGFudF9wKHNpemUpKQotCQlyZXR1cm4gYWRk
ciA+IGxpbWl0IC0gc2l6ZTsKLQotCWFkZHIgKz0gc2l6ZTsKLQlpZiAoYWRkciA8IHNpemUpCi0J
CXJldHVybiB0cnVlOwotCi0JcmV0dXJuIGFkZHIgPiBsaW1pdDsKLX0KLQotI2RlZmluZSBfX3Jh
bmdlX25vdF9vayhhZGRyLCBzaXplLCBsaW1pdCkgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgXAotKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgXAotCV9fY2hrX3VzZXJfcHRyKGFkZHIpOyAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCi0JX19jaGtfcmFuZ2Vfbm90X29rKCh1
bnNpZ25lZCBsb25nIF9fZm9yY2UpKGFkZHIpLCBzaXplLCBsaW1pdCk7IFwKLX0pCi0KLXN0YXRp
YyBpbmxpbmUgaW50IF9fYWNjZXNzX29rKGNvbnN0IHZvaWQgX191c2VyICogYWRkciwgdW5zaWdu
ZWQgbG9uZyBzaXplKQotewotCXJldHVybiAxOwotfQotCi1zdGF0aWMgaW5saW5lIGludCBhY2Nl
c3Nfb2soY29uc3Qgdm9pZCBfX3VzZXIgKiBhZGRyLCB1bnNpZ25lZCBsb25nIHNpemUpCi17Ci0J
cmV0dXJuIDE7Ci19CisjZGVmaW5lIF9fcmFuZ2Vfbm90X29rKGFkZHIsIHNpemUsIGxpbWl0KSAo
IV9fYWNjZXNzX29rKGFkZHIsIHNpemUpKQogCiB2b2lkIF9fcmV0bF9lZmF1bHQodm9pZCk7CiAK
ZGlmZiAtLWdpdCBhL2FyY2gvc3BhcmMva2VybmVsL3NpZ25hbF8zMi5jIGIvYXJjaC9zcGFyYy9r
ZXJuZWwvc2lnbmFsXzMyLmMKaW5kZXggZmZhYjE2MzY5YmVhLi43NGY4MDQ0M2IxOTUgMTAwNjQ0
Ci0tLSBhL2FyY2gvc3BhcmMva2VybmVsL3NpZ25hbF8zMi5jCisrKyBiL2FyY2gvc3BhcmMva2Vy
bmVsL3NpZ25hbF8zMi5jCkBAIC02NSw3ICs2NSw3IEBAIHN0cnVjdCBydF9zaWduYWxfZnJhbWUg
ewogICovCiBzdGF0aWMgaW5saW5lIGJvb2wgaW52YWxpZF9mcmFtZV9wb2ludGVyKHZvaWQgX191
c2VyICpmcCwgaW50IGZwbGVuKQogewotCWlmICgoKCh1bnNpZ25lZCBsb25nKSBmcCkgJiAxNSkg
fHwgIV9fYWNjZXNzX29rKCh1bnNpZ25lZCBsb25nKWZwLCBmcGxlbikpCisJaWYgKCgoKHVuc2ln
bmVkIGxvbmcpIGZwKSAmIDE1KSB8fCAhYWNjZXNzX29rKGZwLCBmcGxlbikpCiAJCXJldHVybiB0
cnVlOwogCiAJcmV0dXJuIGZhbHNlOwpkaWZmIC0tZ2l0IGEvYXJjaC91bS9pbmNsdWRlL2FzbS91
YWNjZXNzLmggYi9hcmNoL3VtL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAppbmRleCAxZWNmYzk2YmNj
NTAuLjdkOWQ2MGU0MWU0ZSAxMDA2NDQKLS0tIGEvYXJjaC91bS9pbmNsdWRlL2FzbS91YWNjZXNz
LmgKKysrIGIvYXJjaC91bS9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAgLTI1LDcgKzI1LDcgQEAK
IGV4dGVybiB1bnNpZ25lZCBsb25nIHJhd19jb3B5X2Zyb21fdXNlcih2b2lkICp0bywgY29uc3Qg
dm9pZCBfX3VzZXIgKmZyb20sIHVuc2lnbmVkIGxvbmcgbik7CiBleHRlcm4gdW5zaWduZWQgbG9u
ZyByYXdfY29weV90b191c2VyKHZvaWQgX191c2VyICp0bywgY29uc3Qgdm9pZCAqZnJvbSwgdW5z
aWduZWQgbG9uZyBuKTsKIGV4dGVybiB1bnNpZ25lZCBsb25nIF9fY2xlYXJfdXNlcih2b2lkIF9f
dXNlciAqbWVtLCB1bnNpZ25lZCBsb25nIGxlbik7Ci1zdGF0aWMgaW5saW5lIGludCBfX2FjY2Vz
c19vayh1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSk7CitzdGF0aWMgaW5s
aW5lIGludCBfX2FjY2Vzc19vayhjb25zdCB2b2lkIF9fdXNlciAqcHRyLCB1bnNpZ25lZCBsb25n
IHNpemUpOwogCiAvKiBUZWFjaCBhc20tZ2VuZXJpYy91YWNjZXNzLmggdGhhdCB3ZSBoYXZlIEMg
ZnVuY3Rpb25zIGZvciB0aGVzZS4gKi8KICNkZWZpbmUgX19hY2Nlc3Nfb2sgX19hY2Nlc3Nfb2sK
QEAgLTM2LDggKzM2LDkgQEAgc3RhdGljIGlubGluZSBpbnQgX19hY2Nlc3Nfb2sodW5zaWduZWQg
bG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIHNpemUpOwogCiAjaW5jbHVkZSA8YXNtLWdlbmVyaWMv
dWFjY2Vzcy5oPgogCi1zdGF0aWMgaW5saW5lIGludCBfX2FjY2Vzc19vayh1bnNpZ25lZCBsb25n
IGFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKK3N0YXRpYyBpbmxpbmUgaW50IF9fYWNjZXNzX29r
KGNvbnN0IHZvaWQgX191c2VyICpwdHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKIHsKKwl1bnNpZ25l
ZCBsb25nIGFkZHIgPSAodW5zaWduZWQgbG9uZylwdHI7CiAJcmV0dXJuIF9fYWRkcl9yYW5nZV9u
b3dyYXAoYWRkciwgc2l6ZSkgJiYKIAkJKF9fdW5kZXJfdGFza19zaXplKGFkZHIsIHNpemUpIHx8
CiAJCSBfX2FjY2Vzc19va192c3lzY2FsbChhZGRyLCBzaXplKSk7CmRpZmYgLS1naXQgYS9hcmNo
L3g4Ni9pbmNsdWRlL2FzbS91YWNjZXNzLmggYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS91YWNjZXNz
LmgKaW5kZXggYzZkOWRjNDI3MjRkLi5jNWU0YmI3MTYxYmMgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2
L2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAorKysgYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS91YWNjZXNz
LmgKQEAgLTEyLDE4ICsxMiw2IEBACiAjaW5jbHVkZSA8YXNtL3NtYXAuaD4KICNpbmNsdWRlIDxh
c20vZXh0YWJsZS5oPgogCi0vKgotICogVGVzdCB3aGV0aGVyIGEgYmxvY2sgb2YgbWVtb3J5IGlz
IGEgdmFsaWQgdXNlciBzcGFjZSBhZGRyZXNzLgotICogUmV0dXJucyAwIGlmIHRoZSByYW5nZSBp
cyB2YWxpZCwgbm9uemVybyBvdGhlcndpc2UuCi0gKi8KLXN0YXRpYyBpbmxpbmUgYm9vbCBfX2Fj
Y2Vzc19vayh2b2lkIF9fdXNlciAqcHRyLCB1bnNpZ25lZCBsb25nIHNpemUpCi17Ci0JdW5zaWdu
ZWQgbG9uZyBsaW1pdCA9IFRBU0tfU0laRV9NQVg7Ci0JdW5zaWduZWQgbG9uZyBhZGRyID0gcHRy
OwotCi0JcmV0dXJuIChzaXplIDw9IGxpbWl0KSAmJiAoYWRkciA8PSAobGltaXQgLSBzaXplKSk7
Ci19Ci0KICNpZmRlZiBDT05GSUdfREVCVUdfQVRPTUlDX1NMRUVQCiBzdGF0aWMgaW5saW5lIGJv
b2wgcGFnZWZhdWx0X2Rpc2FibGVkKHZvaWQpOwogIyBkZWZpbmUgV0FSTl9PTl9JTl9JUlEoKQlc
CkBAIC01NSw2ICs0Myw4IEBAIHN0YXRpYyBpbmxpbmUgYm9vbCBwYWdlZmF1bHRfZGlzYWJsZWQo
dm9pZCk7CiAJbGlrZWx5KF9fYWNjZXNzX29rKGFkZHIsIHNpemUpKTtcCiB9KQogCisjaW5jbHVk
ZSA8YXNtLWdlbmVyaWMvYWNjZXNzX29rLmg+CisKICNkZWZpbmUgX19yYW5nZV9ub3Rfb2soYWRk
ciwgc2l6ZSwgbGltaXQpCSghX19hY2Nlc3Nfb2soYWRkciwgc2l6ZSkpCiAjZGVmaW5lIF9fY2hr
X3JhbmdlX25vdF9vayhhZGRyLCBzaXplLCBsaW1pdCkJKCFfX2FjY2Vzc19vaygodm9pZCBfX3Vz
ZXIgKilhZGRyLCBzaXplKSkKIApkaWZmIC0tZ2l0IGEvYXJjaC94dGVuc2EvaW5jbHVkZS9hc20v
dWFjY2Vzcy5oIGIvYXJjaC94dGVuc2EvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCmluZGV4IDc1YmQ4
ZmJmNTJiYS4uMGVkZDllNGIyM2QwIDEwMDY0NAotLS0gYS9hcmNoL3h0ZW5zYS9pbmNsdWRlL2Fz
bS91YWNjZXNzLmgKKysrIGIvYXJjaC94dGVuc2EvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCkBAIC0z
NSwxNSArMzUsNyBAQAogI2RlZmluZSBnZXRfZnMoKQkoY3VycmVudC0+dGhyZWFkLmN1cnJlbnRf
ZHMpCiAjZGVmaW5lIHNldF9mcyh2YWwpCShjdXJyZW50LT50aHJlYWQuY3VycmVudF9kcyA9ICh2
YWwpKQogCi0jZGVmaW5lIHVhY2Nlc3Nfa2VybmVsKCkgKGdldF9mcygpLnNlZyA9PSBLRVJORUxf
RFMuc2VnKQotCi0jZGVmaW5lIF9fa2VybmVsX29rICh1YWNjZXNzX2tlcm5lbCgpKQotI2RlZmlu
ZSBfX3VzZXJfb2soYWRkciwgc2l6ZSkgXAotCQkoKChzaXplKSA8PSBUQVNLX1NJWkUpJiYoKGFk
ZHIpIDw9IFRBU0tfU0laRS0oc2l6ZSkpKQotI2RlZmluZSBfX2FjY2Vzc19vayhhZGRyLCBzaXpl
KSAoX19rZXJuZWxfb2sgfHwgX191c2VyX29rKChhZGRyKSwgKHNpemUpKSkKLSNkZWZpbmUgYWNj
ZXNzX29rKGFkZHIsIHNpemUpIF9fYWNjZXNzX29rKCh1bnNpZ25lZCBsb25nKShhZGRyKSwgKHNp
emUpKQotCi0jZGVmaW5lIHVzZXJfYWRkcl9tYXgoKSAodWFjY2Vzc19rZXJuZWwoKSA/IH4wVUwg
OiBUQVNLX1NJWkUpCisjaW5jbHVkZSA8YXNtLWdlbmVyaWMvYWNjZXNzX29rLmg+CiAKIC8qCiAg
KiBUaGVzZSBhcmUgdGhlIG1haW4gc2luZ2xlLXZhbHVlIHRyYW5zZmVyIHJvdXRpbmVzLiAgVGhl
eQpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9hc20tZ2VuZXJpYy9hY2Nlc3Nfb2suaCBiL2luY2x1ZGUv
YXNtLWdlbmVyaWMvYWNjZXNzX29rLmgKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAw
MDAwMDAwLi44ODNiNTczYWY1ZmUKLS0tIC9kZXYvbnVsbAorKysgYi9pbmNsdWRlL2FzbS1nZW5l
cmljL2FjY2Vzc19vay5oCkBAIC0wLDAgKzEsNTkgQEAKKy8qIFNQRFgtTGljZW5zZS1JZGVudGlm
aWVyOiBHUEwtMi4wICovCisjaWZuZGVmIF9fQVNNX0dFTkVSSUNfQUNDRVNTX09LX0hfXworI2Rl
ZmluZSBfX0FTTV9HRU5FUklDX0FDQ0VTU19PS19IX18KKworLyoKKyAqIENoZWNraW5nIHdoZXRo
ZXIgYSBwb2ludGVyIGlzIHZhbGlkIGZvciB1c2VyIHNwYWNlIGFjY2Vzcy4KKyAqIFRoZXNlIGRl
ZmluaXRpb25zIHdvcmsgb24gbW9zdCBhcmNoaXRlY3R1cmVzLCBidXQgb3ZlcnJpZGVzIGNhbgor
ICogYmUgdXNlZCB3aGVyZSBuZWNlc3NhcnkuCisgKi8KKworLyoKKyAqIGFyY2hpdGVjdHVyZXMg
d2l0aCBjb21wYXQgdGFza3MgaGF2ZSBhIHZhcmlhYmxlIFRBU0tfU0laRSBhbmQgc2hvdWxkCisg
KiBvdmVycmlkZSB0aGlzIHRvIGEgY29uc3RhbnQuCisgKi8KKyNpZm5kZWYgVEFTS19TSVpFX01B
WAorI2RlZmluZSBUQVNLX1NJWkVfTUFYCQkJVEFTS19TSVpFCisjZW5kaWYKKworI2lmbmRlZiB1
YWNjZXNzX2tlcm5lbAorI2lmZGVmIENPTkZJR19TRVRfRlMKKyNkZWZpbmUgdWFjY2Vzc19rZXJu
ZWwoKQkJKGdldF9mcygpLnNlZyA9PSBLRVJORUxfRFMuc2VnKQorI2Vsc2UKKyNkZWZpbmUgdWFj
Y2Vzc19rZXJuZWwoKQkJKDApCisjZW5kaWYKKyNlbmRpZgorCisjaWZuZGVmIHVzZXJfYWRkcl9t
YXgKKyNkZWZpbmUgdXNlcl9hZGRyX21heCgpCQkJKHVhY2Nlc3Nfa2VybmVsKCkgPyB+MFVMIDog
VEFTS19TSVpFX01BWCkKKyNlbmRpZgorCisjaWZuZGVmIF9fYWNjZXNzX29rCisvKgorICogJ3Np
emUnIGlzIGEgY29tcGlsZS10aW1lIGNvbnN0YW50IGZvciBtb3N0IGNhbGxlcnMsIHNvIG9wdGlt
aXplIGZvcgorICogdGhpcyBjYXNlIHRvIHR1cm4gdGhlIGNoZWNrIGludG8gYSBzaW5nbGUgY29t
cGFyaXNvbiBhZ2FpbnN0IGEgY29uc3RhbnQKKyAqIGxpbWl0IGFuZCBjYXRjaCBhbGwgcG9zc2li
bGUgb3ZlcmZsb3dzLgorICogT24gYXJjaGl0ZWN0dXJlcyB3aXRoIHNlcGFyYXRlIHVzZXIgYWRk
cmVzcyBzcGFjZSAobTY4aywgczM5MCwgcGFyaXNjLAorICogc3BhcmM2NCkgb3IgdGhvc2Ugd2l0
aG91dCBhbiBNTVUsIHRoaXMgc2hvdWxkIGFsd2F5cyByZXR1cm4gdHJ1ZS4KKyAqCisgKiBUaGlz
IHZlcnNpb24gd2FzIG9yaWdpbmFsbHkgY29udHJpYnV0ZWQgYnkgSm9uYXMgQm9ubiBmb3IgdGhl
CisgKiBPcGVuUklTQyBhcmNoaXRlY3R1cmUsIGFuZCB3YXMgZm91bmQgdG8gYmUgdGhlIG1vc3Qg
ZWZmaWNpZW50CisgKiBmb3IgY29uc3RhbnQgJ3NpemUnIGFuZCAnbGltaXQnIHZhbHVlcy4KKyAq
Lworc3RhdGljIGlubGluZSBpbnQgX19hY2Nlc3Nfb2soY29uc3Qgdm9pZCBfX3VzZXIgKnB0ciwg
dW5zaWduZWQgbG9uZyBzaXplKQoreworCXVuc2lnbmVkIGxvbmcgbGltaXQgPSB1c2VyX2FkZHJf
bWF4KCk7CisJdW5zaWduZWQgbG9uZyBhZGRyID0gKHVuc2lnbmVkIGxvbmcpcHRyOworCisJaWYg
KGxpbWl0ID09IFVMT05HX01BWCkKKwkJcmV0dXJuIHRydWU7CisKKwlyZXR1cm4gKHNpemUgPD0g
bGltaXQpICYmIChhZGRyIDw9IChsaW1pdCAtIHNpemUpKTsKK30KKyNlbmRpZgorCisjaWZuZGVm
IGFjY2Vzc19vaworI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgc2l6ZSkgbGlrZWx5KF9fYWNjZXNz
X29rKGFkZHIsIHNpemUpKQorI2VuZGlmCisKKyNlbmRpZgpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9h
c20tZ2VuZXJpYy91YWNjZXNzLmggYi9pbmNsdWRlL2FzbS1nZW5lcmljL3VhY2Nlc3MuaAppbmRl
eCAwODcwZmExMWE3YzUuLmViYzY4NWRjOGQ3NCAxMDA2NDQKLS0tIGEvaW5jbHVkZS9hc20tZ2Vu
ZXJpYy91YWNjZXNzLmgKKysrIGIvaW5jbHVkZS9hc20tZ2VuZXJpYy91YWNjZXNzLmgKQEAgLTEx
NCwyOCArMTE0LDkgQEAgc3RhdGljIGlubGluZSB2b2lkIHNldF9mcyhtbV9zZWdtZW50X3QgZnMp
CiB9CiAjZW5kaWYKIAotI2lmbmRlZiB1YWNjZXNzX2tlcm5lbAotI2RlZmluZSB1YWNjZXNzX2tl
cm5lbCgpIChnZXRfZnMoKS5zZWcgPT0gS0VSTkVMX0RTLnNlZykKLSNlbmRpZgotCi0jaWZuZGVm
IHVzZXJfYWRkcl9tYXgKLSNkZWZpbmUgdXNlcl9hZGRyX21heCgpICh1YWNjZXNzX2tlcm5lbCgp
ID8gfjBVTCA6IFRBU0tfU0laRSkKLSNlbmRpZgotCiAjZW5kaWYgLyogQ09ORklHX1NFVF9GUyAq
LwogCi0jZGVmaW5lIGFjY2Vzc19vayhhZGRyLCBzaXplKSBfX2FjY2Vzc19vaygodW5zaWduZWQg
bG9uZykoYWRkciksKHNpemUpKQotCi0vKgotICogVGhlIGFyY2hpdGVjdHVyZSBzaG91bGQgcmVh
bGx5IG92ZXJyaWRlIHRoaXMgaWYgcG9zc2libGUsIGF0IGxlYXN0Ci0gKiBkb2luZyBhIGNoZWNr
IG9uIHRoZSBnZXRfZnMoKQotICovCi0jaWZuZGVmIF9fYWNjZXNzX29rCi1zdGF0aWMgaW5saW5l
IGludCBfX2FjY2Vzc19vayh1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkK
LXsKLQlyZXR1cm4gMTsKLX0KLSNlbmRpZgorI2luY2x1ZGUgPGFzbS1nZW5lcmljL2FjY2Vzc19v
ay5oPgogCiAvKgogICogVGhlc2UgYXJlIHRoZSBtYWluIHNpbmdsZS12YWx1ZSB0cmFuc2ZlciBy
b3V0aW5lcy4gIFRoZXkgYXV0b21hdGljYWxseQpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC91
YWNjZXNzLmggYi9pbmNsdWRlL2xpbnV4L3VhY2Nlc3MuaAppbmRleCA2N2U5YmM5NGRjNDAuLjJj
MzE2NjdlNjJlMCAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC91YWNjZXNzLmgKKysrIGIvaW5j
bHVkZS9saW51eC91YWNjZXNzLmgKQEAgLTMzLDEzICszMyw2IEBAIHR5cGVkZWYgc3RydWN0IHsK
IAkvKiBlbXB0eSBkdW1teSAqLwogfSBtbV9zZWdtZW50X3Q7CiAKLSNpZm5kZWYgVEFTS19TSVpF
X01BWAotI2RlZmluZSBUQVNLX1NJWkVfTUFYCQkJVEFTS19TSVpFCi0jZW5kaWYKLQotI2RlZmlu
ZSB1YWNjZXNzX2tlcm5lbCgpCQkoZmFsc2UpCi0jZGVmaW5lIHVzZXJfYWRkcl9tYXgoKQkJCShU
QVNLX1NJWkVfTUFYKQotCiBzdGF0aWMgaW5saW5lIG1tX3NlZ21lbnRfdCBmb3JjZV91YWNjZXNz
X2JlZ2luKHZvaWQpCiB7CiAJcmV0dXJuIChtbV9zZWdtZW50X3QpIHsgfTsKLS0gCjIuMjkuMgoK
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KT3BlblJJU0Mg
bWFpbGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMub3JnCmh0dHBzOi8vbGlzdHMu
bGlicmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJpc2MK
