Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id F24C72499BE
	for <lists+openrisc@lfdr.de>; Wed, 19 Aug 2020 11:55:52 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id A044420D6B;
	Wed, 19 Aug 2020 11:55:52 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 6B37320CC9
 for <openrisc@lists.librecores.org>; Tue, 18 Aug 2020 17:19:01 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 6DD4E207DE;
 Tue, 18 Aug 2020 15:18:49 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1597763940;
 bh=HcGhQXcsMUr5cgaYxz1IAZG8e/84FtB6msPEsabRt2k=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=uDvoo4F3xdOiwlNaD+/J1ZjOaH7ESbr1hE0fvBsuHz6p6nAtPNWFhz0COXBTbUvIF
 53SKsmr5Ln1OjKfxBEaAMrQw+ZGNnQ/UBuNQs5OESB9PTSnnbm9008JYdxOJMftxSe
 +4akvU6zOG564LseLC5Po/9DcXmlrQ8Xv/698q/8=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Tue, 18 Aug 2020 18:16:29 +0300
Message-Id: <20200818151634.14343-13-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200818151634.14343-1-rppt@kernel.org>
References: <20200818151634.14343-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Wed, 19 Aug 2020 11:55:42 +0200
Subject: [OpenRISC] [PATCH v3 12/17] arch,
 drivers: replace for_each_membock() with for_each_mem_range()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Thomas Gleixner <tglx@linutronix.de>,
 Emil Renner Berthing <kernel@esmil.dk>, linux-sh@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Christoph Hellwig <hch@lst.de>,
 Marek Szyprowski <m.szyprowski@samsung.com>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Michael Ellerman <mpe@ellerman.id.au>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Mike Rapoport <rppt@linux.ibm.com>, clang-built-linux@googlegroups.com,
 Ingo Molnar <mingo@redhat.com>, linux-arm-kernel@lists.infradead.org,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Hari Bathini <hbathini@linux.ibm.com>, Daniel Axtens <dja@axtens.net>,
 Michal Simek <monstr@monstr.eu>, Yoshinori Sato <ysato@users.sourceforge.jp>,
 linux-mm@kvack.org, linux-kernel@vger.kernel.org,
 iommu@lists.linux-foundation.org, Palmer Dabbelt <palmer@dabbelt.com>,
 linuxppc-dev@lists.ozlabs.org, Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlcmUgYXJlIHNldmVy
YWwgb2NjdXJyZW5jZXMgb2YgdGhlIGZvbGxvd2luZyBwYXR0ZXJuOgoKCWZvcl9lYWNoX21lbWJs
b2NrKG1lbW9yeSwgcmVnKSB7CgkJc3RhcnQgPSBfX3Bmbl90b19waHlzKG1lbWJsb2NrX3JlZ2lv
bl9tZW1vcnlfYmFzZV9wZm4ocmVnKTsKCQllbmQgPSBfX3Bmbl90b19waHlzKG1lbWJsb2NrX3Jl
Z2lvbl9tZW1vcnlfZW5kX3BmbihyZWcpKTsKCgkJLyogZG8gc29tZXRoaW5nIHdpdGggc3RhcnQg
YW5kIGVuZCAqLwoJfQoKVXNpbmcgZm9yX2VhY2hfbWVtX3JhbmdlKCkgaXRlcmF0b3IgaXMgbW9y
ZSBhcHByb3ByaWF0ZSBpbiBzdWNoIGNhc2VzIGFuZAphbGxvd3Mgc2ltcGxlciBhbmQgY2xlYW5l
ciBjb2RlLgoKU2lnbmVkLW9mZi1ieTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29t
PgotLS0KIGFyY2gvYXJtL2tlcm5lbC9zZXR1cC5jICAgICAgICAgICAgICAgICAgfCAxOCArKysr
KystLS0KIGFyY2gvYXJtL21tL21tdS5jICAgICAgICAgICAgICAgICAgICAgICAgfCAzOSArKysr
KystLS0tLS0tLS0tLS0KIGFyY2gvYXJtL21tL3Btc2EtdjcuYyAgICAgICAgICAgICAgICAgICAg
fCAyMyArKysrKystLS0tLQogYXJjaC9hcm0vbW0vcG1zYS12OC5jICAgICAgICAgICAgICAgICAg
ICB8IDE3ICsrKystLS0tCiBhcmNoL2FybS94ZW4vbW0uYyAgICAgICAgICAgICAgICAgICAgICAg
IHwgIDcgKystLQogYXJjaC9hcm02NC9tbS9rYXNhbl9pbml0LmMgICAgICAgICAgICAgICB8IDEw
ICsrLS0tCiBhcmNoL2FybTY0L21tL21tdS5jICAgICAgICAgICAgICAgICAgICAgIHwgMTEgKyst
LS0tCiBhcmNoL2M2eC9rZXJuZWwvc2V0dXAuYyAgICAgICAgICAgICAgICAgIHwgIDkgKysrLS0K
IGFyY2gvbWljcm9ibGF6ZS9tbS9pbml0LmMgICAgICAgICAgICAgICAgfCAgOSArKystLQogYXJj
aC9taXBzL2Nhdml1bS1vY3Rlb24vZG1hLW9jdGVvbi5jICAgICB8IDEyICsrKy0tLQogYXJjaC9t
aXBzL2tlcm5lbC9zZXR1cC5jICAgICAgICAgICAgICAgICB8IDMxICsrKysrKystLS0tLS0tLQog
YXJjaC9vcGVucmlzYy9tbS9pbml0LmMgICAgICAgICAgICAgICAgICB8ICA4ICsrLS0KIGFyY2gv
cG93ZXJwYy9rZXJuZWwvZmFkdW1wLmMgICAgICAgICAgICAgfCA1MCArKysrKysrKysrKy0tLS0t
LS0tLS0tLS0KIGFyY2gvcG93ZXJwYy9rZXhlYy9maWxlX2xvYWRfNjQuYyAgICAgICAgfCAxMCAr
Ky0tLQogYXJjaC9wb3dlcnBjL21tL2Jvb2szczY0L2hhc2hfdXRpbHMuYyAgICB8IDE2ICsrKyst
LS0tCiBhcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhfcGd0YWJsZS5jIHwgMTAgKystLS0K
IGFyY2gvcG93ZXJwYy9tbS9rYXNhbi9rYXNhbl9pbml0XzMyLmMgICAgfCAgOCArKy0tCiBhcmNo
L3Bvd2VycGMvbW0vbWVtLmMgICAgICAgICAgICAgICAgICAgIHwgMTYgKysrKystLS0KIGFyY2gv
cG93ZXJwYy9tbS9wZ3RhYmxlXzMyLmMgICAgICAgICAgICAgfCAgOCArKy0tCiBhcmNoL3Jpc2N2
L21tL2luaXQuYyAgICAgICAgICAgICAgICAgICAgIHwgMjUgKysrKystLS0tLS0tCiBhcmNoL3Jp
c2N2L21tL2thc2FuX2luaXQuYyAgICAgICAgICAgICAgIHwgMTAgKystLS0KIGFyY2gvczM5MC9r
ZXJuZWwvc2V0dXAuYyAgICAgICAgICAgICAgICAgfCAyMyArKysrKysrLS0tLQogYXJjaC9zMzkw
L21tL3ZtZW0uYyAgICAgICAgICAgICAgICAgICAgICB8ICA3ICsrLS0KIGFyY2gvc3BhcmMvbW0v
aW5pdF82NC5jICAgICAgICAgICAgICAgICAgfCAxMiArKy0tLS0KIGRyaXZlcnMvYnVzL212ZWJ1
LW1idXMuYyAgICAgICAgICAgICAgICAgfCAxMiArKystLS0KIDI1IGZpbGVzIGNoYW5nZWQsIDE5
NCBpbnNlcnRpb25zKCspLCAyMDcgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvYXJjaC9hcm0v
a2VybmVsL3NldHVwLmMgYi9hcmNoL2FybS9rZXJuZWwvc2V0dXAuYwppbmRleCBkOGUxOGNkZDk2
ZDMuLjNmNjVkMGFjOWY2MyAxMDA2NDQKLS0tIGEvYXJjaC9hcm0va2VybmVsL3NldHVwLmMKKysr
IGIvYXJjaC9hcm0va2VybmVsL3NldHVwLmMKQEAgLTg0MywxOSArODQzLDI1IEBAIGVhcmx5X3Bh
cmFtKCJtZW0iLCBlYXJseV9tZW0pOwogCiBzdGF0aWMgdm9pZCBfX2luaXQgcmVxdWVzdF9zdGFu
ZGFyZF9yZXNvdXJjZXMoY29uc3Qgc3RydWN0IG1hY2hpbmVfZGVzYyAqbWRlc2MpCiB7Ci0Jc3Ry
dWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnaW9uOworCXBoeXNfYWRkcl90IHN0YXJ0LCBlbmQsIHJl
c19lbmQ7CiAJc3RydWN0IHJlc291cmNlICpyZXM7CisJdTY0IGk7CiAKIAlrZXJuZWxfY29kZS5z
dGFydCAgID0gdmlydF90b19waHlzKF90ZXh0KTsKIAlrZXJuZWxfY29kZS5lbmQgICAgID0gdmly
dF90b19waHlzKF9faW5pdF9iZWdpbiAtIDEpOwogCWtlcm5lbF9kYXRhLnN0YXJ0ICAgPSB2aXJ0
X3RvX3BoeXMoX3NkYXRhKTsKIAlrZXJuZWxfZGF0YS5lbmQgICAgID0gdmlydF90b19waHlzKF9l
bmQgLSAxKTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnaW9uKSB7Ci0JCXBoeXNf
YWRkcl90IHN0YXJ0ID0gX19wZm5fdG9fcGh5cyhtZW1ibG9ja19yZWdpb25fbWVtb3J5X2Jhc2Vf
cGZuKHJlZ2lvbikpOwotCQlwaHlzX2FkZHJfdCBlbmQgPSBfX3Bmbl90b19waHlzKG1lbWJsb2Nr
X3JlZ2lvbl9tZW1vcnlfZW5kX3BmbihyZWdpb24pKSAtIDE7CisJZm9yX2VhY2hfbWVtX3Jhbmdl
KGksICZzdGFydCwgJmVuZCkgewogCQl1bnNpZ25lZCBsb25nIGJvb3RfYWxpYXNfc3RhcnQ7CiAK
KwkJLyoKKwkJICogSW4gbWVtYmxvY2ssIGVuZCBwb2ludHMgdG8gdGhlIGZpcnN0IGJ5dGUgYWZ0
ZXIgdGhlCisJCSAqIHJhbmdlIHdoaWxlIGluIHJlc291cnNlcywgZW5kIHBvaW50cyB0byB0aGUg
bGFzdCBieXRlIGluCisJCSAqIHRoZSByYW5nZS4KKwkJICovCisJCXJlc19lbmQgPSBlbmQgLSAx
OworCiAJCS8qCiAJCSAqIFNvbWUgc3lzdGVtcyBoYXZlIGEgc3BlY2lhbCBtZW1vcnkgYWxpYXMg
d2hpY2ggaXMgb25seQogCQkgKiB1c2VkIGZvciBib290aW5nLiAgV2UgbmVlZCB0byBhZHZlcnRp
c2UgdGhpcyByZWdpb24gdG8KQEAgLTg2OSw3ICs4NzUsNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQg
cmVxdWVzdF9zdGFuZGFyZF9yZXNvdXJjZXMoY29uc3Qgc3RydWN0IG1hY2hpbmVfZGVzYyAqbWRl
c2MpCiAJCQkJICAgICAgX19mdW5jX18sIHNpemVvZigqcmVzKSk7CiAJCQlyZXMtPm5hbWUgPSAi
U3lzdGVtIFJBTSAoYm9vdCBhbGlhcykiOwogCQkJcmVzLT5zdGFydCA9IGJvb3RfYWxpYXNfc3Rh
cnQ7Ci0JCQlyZXMtPmVuZCA9IHBoeXNfdG9faWRtYXAoZW5kKTsKKwkJCXJlcy0+ZW5kID0gcGh5
c190b19pZG1hcChyZXNfZW5kKTsKIAkJCXJlcy0+ZmxhZ3MgPSBJT1JFU09VUkNFX01FTSB8IElP
UkVTT1VSQ0VfQlVTWTsKIAkJCXJlcXVlc3RfcmVzb3VyY2UoJmlvbWVtX3Jlc291cmNlLCByZXMp
OwogCQl9CkBAIC04ODAsNyArODg2LDcgQEAgc3RhdGljIHZvaWQgX19pbml0IHJlcXVlc3Rfc3Rh
bmRhcmRfcmVzb3VyY2VzKGNvbnN0IHN0cnVjdCBtYWNoaW5lX2Rlc2MgKm1kZXNjKQogCQkJICAg
ICAgc2l6ZW9mKCpyZXMpKTsKIAkJcmVzLT5uYW1lICA9ICJTeXN0ZW0gUkFNIjsKIAkJcmVzLT5z
dGFydCA9IHN0YXJ0OwotCQlyZXMtPmVuZCA9IGVuZDsKKwkJcmVzLT5lbmQgPSByZXNfZW5kOwog
CQlyZXMtPmZsYWdzID0gSU9SRVNPVVJDRV9TWVNURU1fUkFNIHwgSU9SRVNPVVJDRV9CVVNZOwog
CiAJCXJlcXVlc3RfcmVzb3VyY2UoJmlvbWVtX3Jlc291cmNlLCByZXMpOwpkaWZmIC0tZ2l0IGEv
YXJjaC9hcm0vbW0vbW11LmMgYi9hcmNoL2FybS9tbS9tbXUuYwppbmRleCBjMzZmOTc3YjJjY2Iu
LjY5OGNjNzQwYzZiOCAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vbW11LmMKKysrIGIvYXJjaC9h
cm0vbW0vbW11LmMKQEAgLTExNTQsOSArMTE1NCw4IEBAIHBoeXNfYWRkcl90IGFybV9sb3dtZW1f
bGltaXQgX19pbml0ZGF0YSA9IDA7CiAKIHZvaWQgX19pbml0IGFkanVzdF9sb3dtZW1fYm91bmRz
KHZvaWQpCiB7Ci0JcGh5c19hZGRyX3QgbWVtYmxvY2tfbGltaXQgPSAwOwotCXU2NCB2bWFsbG9j
X2xpbWl0OwotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKKwlwaHlzX2FkZHJfdCBibG9j
a19zdGFydCwgYmxvY2tfZW5kLCBtZW1ibG9ja19saW1pdCA9IDA7CisJdTY0IHZtYWxsb2NfbGlt
aXQsIGk7CiAJcGh5c19hZGRyX3QgbG93bWVtX2xpbWl0ID0gMDsKIAogCS8qCkBAIC0xMTcyLDI2
ICsxMTcxLDE4IEBAIHZvaWQgX19pbml0IGFkanVzdF9sb3dtZW1fYm91bmRzKHZvaWQpCiAJICog
VGhlIGZpcnN0IHVzYWJsZSByZWdpb24gbXVzdCBiZSBQTUQgYWxpZ25lZC4gTWFyayBpdHMgc3Rh
cnQKIAkgKiBhcyBNRU1CTE9DS19OT01BUCBpZiBpdCBpc24ndAogCSAqLwotCWZvcl9lYWNoX21l
bWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCWlmICghbWVtYmxvY2tfaXNfbm9tYXAocmVnKSkgewot
CQkJaWYgKCFJU19BTElHTkVEKHJlZy0+YmFzZSwgUE1EX1NJWkUpKSB7Ci0JCQkJcGh5c19hZGRy
X3QgbGVuOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmYmxvY2tfc3RhcnQsICZibG9ja19lbmQp
IHsKKwkJaWYgKCFJU19BTElHTkVEKGJsb2NrX3N0YXJ0LCBQTURfU0laRSkpIHsKKwkJCXBoeXNf
YWRkcl90IGxlbjsKIAotCQkJCWxlbiA9IHJvdW5kX3VwKHJlZy0+YmFzZSwgUE1EX1NJWkUpIC0g
cmVnLT5iYXNlOwotCQkJCW1lbWJsb2NrX21hcmtfbm9tYXAocmVnLT5iYXNlLCBsZW4pOwotCQkJ
fQotCQkJYnJlYWs7CisJCQlsZW4gPSByb3VuZF91cChibG9ja19zdGFydCwgUE1EX1NJWkUpIC0g
YmxvY2tfc3RhcnQ7CisJCQltZW1ibG9ja19tYXJrX25vbWFwKGJsb2NrX3N0YXJ0LCBsZW4pOwog
CQl9CisJCWJyZWFrOwogCX0KIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0J
CXBoeXNfYWRkcl90IGJsb2NrX3N0YXJ0ID0gcmVnLT5iYXNlOwotCQlwaHlzX2FkZHJfdCBibG9j
a19lbmQgPSByZWctPmJhc2UgKyByZWctPnNpemU7Ci0KLQkJaWYgKG1lbWJsb2NrX2lzX25vbWFw
KHJlZykpCi0JCQljb250aW51ZTsKLQotCQlpZiAocmVnLT5iYXNlIDwgdm1hbGxvY19saW1pdCkg
eworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmYmxvY2tfc3RhcnQsICZibG9ja19lbmQpIHsKKwkJ
aWYgKGJsb2NrX3N0YXJ0IDwgdm1hbGxvY19saW1pdCkgewogCQkJaWYgKGJsb2NrX2VuZCA+IGxv
d21lbV9saW1pdCkKIAkJCQkvKgogCQkJCSAqIENvbXBhcmUgYXMgdTY0IHRvIGVuc3VyZSB2bWFs
bG9jX2xpbWl0IGRvZXMKQEAgLTE0NDAsMTkgKzE0MzEsMTUgQEAgc3RhdGljIHZvaWQgX19pbml0
IGttYXBfaW5pdCh2b2lkKQogCiBzdGF0aWMgdm9pZCBfX2luaXQgbWFwX2xvd21lbSh2b2lkKQog
ewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKIAlwaHlzX2FkZHJfdCBrZXJuZWxfeF9z
dGFydCA9IHJvdW5kX2Rvd24oX19wYShLRVJORUxfU1RBUlQpLCBTRUNUSU9OX1NJWkUpOwogCXBo
eXNfYWRkcl90IGtlcm5lbF94X2VuZCA9IHJvdW5kX3VwKF9fcGEoX19pbml0X2VuZCksIFNFQ1RJ
T05fU0laRSk7CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsKIAogCS8qIE1hcCBh
bGwgdGhlIGxvd21lbSBtZW1vcnkgYmFua3MuICovCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5
LCByZWcpIHsKLQkJcGh5c19hZGRyX3Qgc3RhcnQgPSByZWctPmJhc2U7Ci0JCXBoeXNfYWRkcl90
IGVuZCA9IHN0YXJ0ICsgcmVnLT5zaXplOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQs
ICZlbmQpIHsKIAkJc3RydWN0IG1hcF9kZXNjIG1hcDsKIAotCQlpZiAobWVtYmxvY2tfaXNfbm9t
YXAocmVnKSkKLQkJCWNvbnRpbnVlOwotCiAJCWlmIChlbmQgPiBhcm1fbG93bWVtX2xpbWl0KQog
CQkJZW5kID0gYXJtX2xvd21lbV9saW1pdDsKIAkJaWYgKHN0YXJ0ID49IGVuZCkKZGlmZiAtLWdp
dCBhL2FyY2gvYXJtL21tL3Btc2EtdjcuYyBiL2FyY2gvYXJtL21tL3Btc2EtdjcuYwppbmRleCA2
OTlmYTJlODg3MjUuLmRiYjI0MjIzMjFhNiAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vcG1zYS12
Ny5jCisrKyBiL2FyY2gvYXJtL21tL3Btc2EtdjcuYwpAQCAtMjMxLDEyICsyMzEsMTIgQEAgc3Rh
dGljIGludCBfX2luaXQgYWxsb2NhdGVfcmVnaW9uKHBoeXNfYWRkcl90IGJhc2UsIHBoeXNfYWRk
cl90IHNpemUsCiB2b2lkIF9faW5pdCBwbXNhdjdfYWRqdXN0X2xvd21lbV9ib3VuZHModm9pZCkK
IHsKIAlwaHlzX2FkZHJfdCAgc3BlY2lmaWVkX21lbV9zaXplID0gMCwgdG90YWxfbWVtX3NpemUg
PSAwOwotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKLQlib29sIGZpcnN0ID0gdHJ1ZTsK
IAlwaHlzX2FkZHJfdCBtZW1fc3RhcnQ7CiAJcGh5c19hZGRyX3QgbWVtX2VuZDsKKwlwaHlzX2Fk
ZHJfdCByZWdfc3RhcnQsIHJlZ19lbmQ7CiAJdW5zaWduZWQgaW50IG1lbV9tYXhfcmVnaW9uczsK
LQlpbnQgbnVtLCBpOworCWludCBudW07CisJdTY0IGk7CiAKIAkvKiBGcmVlLXVwIFBNU0F2N19Q
Uk9CRV9SRUdJT04gKi8KIAltcHVfbWluX3JlZ2lvbl9vcmRlciA9IF9fbXB1X21pbl9yZWdpb25f
b3JkZXIoKTsKQEAgLTI2MiwyMCArMjYyLDE5IEBAIHZvaWQgX19pbml0IHBtc2F2N19hZGp1c3Rf
bG93bWVtX2JvdW5kcyh2b2lkKQogCW1lbV9tYXhfcmVnaW9ucyAtPSBudW07CiAjZW5kaWYKIAot
CWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCWlmIChmaXJzdCkgeworCWZvcl9l
YWNoX21lbV9yYW5nZShpLCAmcmVnX3N0YXJ0LCAmcmVnX2VuZCkgeworCQlpZiAoaSA9PSAwKSB7
CiAJCQlwaHlzX2FkZHJfdCBwaHlzX29mZnNldCA9IFBIWVNfT0ZGU0VUOwogCiAJCQkvKgogCQkJ
ICogSW5pdGlhbGx5IG9ubHkgdXNlIG1lbW9yeSBjb250aW51b3VzIGZyb20KIAkJCSAqIFBIWVNf
T0ZGU0VUICovCi0JCQlpZiAocmVnLT5iYXNlICE9IHBoeXNfb2Zmc2V0KQorCQkJaWYgKHJlZ19z
dGFydCAhPSBwaHlzX29mZnNldCkKIAkJCQlwYW5pYygiRmlyc3QgbWVtb3J5IGJhbmsgbXVzdCBi
ZSBjb250aWd1b3VzIGZyb20gUEhZU19PRkZTRVQiKTsKIAotCQkJbWVtX3N0YXJ0ID0gcmVnLT5i
YXNlOwotCQkJbWVtX2VuZCA9IHJlZy0+YmFzZSArIHJlZy0+c2l6ZTsKLQkJCXNwZWNpZmllZF9t
ZW1fc2l6ZSA9IHJlZy0+c2l6ZTsKLQkJCWZpcnN0ID0gZmFsc2U7CisJCQltZW1fc3RhcnQgPSBy
ZWdfc3RhcnQ7CisJCQltZW1fZW5kID0gcmVnX2VuZAorCQkJc3BlY2lmaWVkX21lbV9zaXplID0g
bWVtX2VuZCAtIG1lbV9zdGFydDsKIAkJfSBlbHNlIHsKIAkJCS8qCiAJCQkgKiBtZW1ibG9jayBh
dXRvIG1lcmdlcyBjb250aWd1b3VzIGJsb2NrcywgcmVtb3ZlCkBAIC0yODMsOCArMjgyLDggQEAg
dm9pZCBfX2luaXQgcG1zYXY3X2FkanVzdF9sb3dtZW1fYm91bmRzKHZvaWQpCiAJCQkgKiBibG9j
a3Mgc2VwYXJhdGVseSB3aGlsZSBpdGVyYXRpbmcpCiAJCQkgKi8KIAkJCXByX25vdGljZSgiSWdu
b3JpbmcgUkFNIGFmdGVyICVwYSwgbWVtb3J5IGF0ICVwYSBpZ25vcmVkXG4iLAotCQkJCSAgJm1l
bV9lbmQsICZyZWctPmJhc2UpOwotCQkJbWVtYmxvY2tfcmVtb3ZlKHJlZy0+YmFzZSwgMCAtIHJl
Zy0+YmFzZSk7CisJCQkJICAmbWVtX2VuZCwgJnJlZ19zdGFydCk7CisJCQltZW1ibG9ja19yZW1v
dmUocmVnX3N0YXJ0LCAwIC0gcmVnX3N0YXJ0KTsKIAkJCWJyZWFrOwogCQl9CiAJfQpkaWZmIC0t
Z2l0IGEvYXJjaC9hcm0vbW0vcG1zYS12OC5jIGIvYXJjaC9hcm0vbW0vcG1zYS12OC5jCmluZGV4
IDBkN2Q1ZmI1OTI0Ny4uMmRlMDE5Zjc1MDNlIDEwMDY0NAotLS0gYS9hcmNoL2FybS9tbS9wbXNh
LXY4LmMKKysrIGIvYXJjaC9hcm0vbW0vcG1zYS12OC5jCkBAIC05NCwyMCArOTQsMTkgQEAgc3Rh
dGljIF9faW5pdCBib29sIGlzX3JlZ2lvbl9maXhlZChpbnQgbnVtYmVyKQogdm9pZCBfX2luaXQg
cG1zYXY4X2FkanVzdF9sb3dtZW1fYm91bmRzKHZvaWQpCiB7CiAJcGh5c19hZGRyX3QgbWVtX2Vu
ZDsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7Ci0JYm9vbCBmaXJzdCA9IHRydWU7CisJ
cGh5c19hZGRyX3QgcmVnX3N0YXJ0LCByZWdfZW5kOworCXU2NCBpOwogCi0JZm9yX2VhY2hfbWVt
YmxvY2sobWVtb3J5LCByZWcpIHsKLQkJaWYgKGZpcnN0KSB7CisJZm9yX2VhY2hfbWVtX3Jhbmdl
KGksICZyZWdfc3RhcnQsICZyZWdfZW5kKSB7CisJCWlmIChpID09IDApIHsKIAkJCXBoeXNfYWRk
cl90IHBoeXNfb2Zmc2V0ID0gUEhZU19PRkZTRVQ7CiAKIAkJCS8qCiAJCQkgKiBJbml0aWFsbHkg
b25seSB1c2UgbWVtb3J5IGNvbnRpbnVvdXMgZnJvbQogCQkJICogUEhZU19PRkZTRVQgKi8KLQkJ
CWlmIChyZWctPmJhc2UgIT0gcGh5c19vZmZzZXQpCisJCQlpZiAocmVnX3N0YXJ0ICE9IHBoeXNf
b2Zmc2V0KQogCQkJCXBhbmljKCJGaXJzdCBtZW1vcnkgYmFuayBtdXN0IGJlIGNvbnRpZ3VvdXMg
ZnJvbSBQSFlTX09GRlNFVCIpOwotCQkJbWVtX2VuZCA9IHJlZy0+YmFzZSArIHJlZy0+c2l6ZTsK
LQkJCWZpcnN0ID0gZmFsc2U7CisJCQltZW1fZW5kID0gcmVnX2VuZDsKIAkJfSBlbHNlIHsKIAkJ
CS8qCiAJCQkgKiBtZW1ibG9jayBhdXRvIG1lcmdlcyBjb250aWd1b3VzIGJsb2NrcywgcmVtb3Zl
CkBAIC0xMTUsOCArMTE0LDggQEAgdm9pZCBfX2luaXQgcG1zYXY4X2FkanVzdF9sb3dtZW1fYm91
bmRzKHZvaWQpCiAJCQkgKiBibG9ja3Mgc2VwYXJhdGVseSB3aGlsZSBpdGVyYXRpbmcpCiAJCQkg
Ki8KIAkJCXByX25vdGljZSgiSWdub3JpbmcgUkFNIGFmdGVyICVwYSwgbWVtb3J5IGF0ICVwYSBp
Z25vcmVkXG4iLAotCQkJCSAgJm1lbV9lbmQsICZyZWctPmJhc2UpOwotCQkJbWVtYmxvY2tfcmVt
b3ZlKHJlZy0+YmFzZSwgMCAtIHJlZy0+YmFzZSk7CisJCQkJICAmbWVtX2VuZCwgJnJlZ19zdGFy
dCk7CisJCQltZW1ibG9ja19yZW1vdmUocmVnX3N0YXJ0LCAwIC0gcmVnX3N0YXJ0KTsKIAkJCWJy
ZWFrOwogCQl9CiAJfQpkaWZmIC0tZ2l0IGEvYXJjaC9hcm0veGVuL21tLmMgYi9hcmNoL2FybS94
ZW4vbW0uYwppbmRleCAzOTY3OTdmZmUyYjEuLmQzZWY5NzVhMDk2NSAxMDA2NDQKLS0tIGEvYXJj
aC9hcm0veGVuL21tLmMKKysrIGIvYXJjaC9hcm0veGVuL21tLmMKQEAgLTI1LDExICsyNSwxMiBA
QAogCiB1bnNpZ25lZCBsb25nIHhlbl9nZXRfc3dpb3RsYl9mcmVlX3BhZ2VzKHVuc2lnbmVkIGlu
dCBvcmRlcikKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3Qg
YmFzZTsKIAlnZnBfdCBmbGFncyA9IF9fR0ZQX05PV0FSTnxfX0dGUF9LU1dBUERfUkVDTEFJTTsK
Kwl1NjQgaTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCWlmIChyZWct
PmJhc2UgPCAocGh5c19hZGRyX3QpMHhmZmZmZmZmZikgeworCWZvcl9lYWNoX21lbV9yYW5nZShp
LCAmYmFzZSwgTlVMTCkgeworCQlpZiAoYmFzZSA8IChwaHlzX2FkZHJfdCkweGZmZmZmZmZmKSB7
CiAJCQlpZiAoSVNfRU5BQkxFRChDT05GSUdfWk9ORV9ETUEzMikpCiAJCQkJZmxhZ3MgfD0gX19H
RlBfRE1BMzI7CiAJCQllbHNlCmRpZmYgLS1naXQgYS9hcmNoL2FybTY0L21tL2thc2FuX2luaXQu
YyBiL2FyY2gvYXJtNjQvbW0va2FzYW5faW5pdC5jCmluZGV4IDcyOTFiMjZjZTc4OC4uYjI0ZTQz
ZDIwNjY3IDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L21tL2thc2FuX2luaXQuYworKysgYi9hcmNo
L2FybTY0L21tL2thc2FuX2luaXQuYwpAQCAtMjEyLDggKzIxMiw4IEBAIHZvaWQgX19pbml0IGth
c2FuX2luaXQodm9pZCkKIHsKIAl1NjQga2ltZ19zaGFkb3dfc3RhcnQsIGtpbWdfc2hhZG93X2Vu
ZDsKIAl1NjQgbW9kX3NoYWRvd19zdGFydCwgbW9kX3NoYWRvd19lbmQ7Ci0Jc3RydWN0IG1lbWJs
b2NrX3JlZ2lvbiAqcmVnOwotCWludCBpOworCXBoeXNfYWRkcl90IHBhX3N0YXJ0LCBwYV9lbmQ7
CisJdTY0IGk7CiAKIAlraW1nX3NoYWRvd19zdGFydCA9ICh1NjQpa2FzYW5fbWVtX3RvX3NoYWRv
dyhfdGV4dCkgJiBQQUdFX01BU0s7CiAJa2ltZ19zaGFkb3dfZW5kID0gUEFHRV9BTElHTigodTY0
KWthc2FuX21lbV90b19zaGFkb3coX2VuZCkpOwpAQCAtMjQ2LDkgKzI0Niw5IEBAIHZvaWQgX19p
bml0IGthc2FuX2luaXQodm9pZCkKIAkJa2FzYW5fcG9wdWxhdGVfZWFybHlfc2hhZG93KCh2b2lk
ICopbW9kX3NoYWRvd19lbmQsCiAJCQkJCSAgICAodm9pZCAqKWtpbWdfc2hhZG93X3N0YXJ0KTsK
IAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXZvaWQgKnN0YXJ0ID0gKHZv
aWQgKilfX3BoeXNfdG9fdmlydChyZWctPmJhc2UpOwotCQl2b2lkICplbmQgPSAodm9pZCAqKV9f
cGh5c190b192aXJ0KHJlZy0+YmFzZSArIHJlZy0+c2l6ZSk7CisJZm9yX2VhY2hfbWVtX3Jhbmdl
KGksICZwYV9zdGFydCwgJnBhX2VuZCkgeworCQl2b2lkICpzdGFydCA9ICh2b2lkICopX19waHlz
X3RvX3ZpcnQocGFfc3RhcnQpOworCQl2b2lkICplbmQgPSAodm9pZCAqKV9fcGh5c190b192aXJ0
KHBhX2VuZCk7CiAKIAkJaWYgKHN0YXJ0ID49IGVuZCkKIAkJCWJyZWFrOwpkaWZmIC0tZ2l0IGEv
YXJjaC9hcm02NC9tbS9tbXUuYyBiL2FyY2gvYXJtNjQvbW0vbW11LmMKaW5kZXggNzVkZjYyZmVh
MWI2Li42NDIxMTQzNjYyOWQgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtNjQvbW0vbW11LmMKKysrIGIv
YXJjaC9hcm02NC9tbS9tbXUuYwpAQCAtNDYyLDggKzQ2Miw5IEBAIHN0YXRpYyB2b2lkIF9faW5p
dCBtYXBfbWVtKHBnZF90ICpwZ2RwKQogewogCXBoeXNfYWRkcl90IGtlcm5lbF9zdGFydCA9IF9f
cGFfc3ltYm9sKF90ZXh0KTsKIAlwaHlzX2FkZHJfdCBrZXJuZWxfZW5kID0gX19wYV9zeW1ib2wo
X19pbml0X2JlZ2luKTsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRy
X3Qgc3RhcnQsIGVuZDsKIAlpbnQgZmxhZ3MgPSAwOworCXU2NCBpOwogCiAJaWYgKHJvZGF0YV9m
dWxsIHx8IGRlYnVnX3BhZ2VhbGxvY19lbmFibGVkKCkpCiAJCWZsYWdzID0gTk9fQkxPQ0tfTUFQ
UElOR1MgfCBOT19DT05UX01BUFBJTkdTOwpAQCAtNDgyLDE1ICs0ODMsOSBAQCBzdGF0aWMgdm9p
ZCBfX2luaXQgbWFwX21lbShwZ2RfdCAqcGdkcCkKICNlbmRpZgogCiAJLyogbWFwIGFsbCB0aGUg
bWVtb3J5IGJhbmtzICovCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJcGh5
c19hZGRyX3Qgc3RhcnQgPSByZWctPmJhc2U7Ci0JCXBoeXNfYWRkcl90IGVuZCA9IHN0YXJ0ICsg
cmVnLT5zaXplOwotCisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgewogCQlp
ZiAoc3RhcnQgPj0gZW5kKQogCQkJYnJlYWs7Ci0JCWlmIChtZW1ibG9ja19pc19ub21hcChyZWcp
KQotCQkJY29udGludWU7Ci0KIAkJX19tYXBfbWVtYmxvY2socGdkcCwgc3RhcnQsIGVuZCwgUEFH
RV9LRVJORUwsIGZsYWdzKTsKIAl9CiAKZGlmZiAtLWdpdCBhL2FyY2gvYzZ4L2tlcm5lbC9zZXR1
cC5jIGIvYXJjaC9jNngva2VybmVsL3NldHVwLmMKaW5kZXggOGVmMzUxMzFmOTk5Li45MjU0YzNi
Nzk0YTUgMTAwNjQ0Ci0tLSBhL2FyY2gvYzZ4L2tlcm5lbC9zZXR1cC5jCisrKyBiL2FyY2gvYzZ4
L2tlcm5lbC9zZXR1cC5jCkBAIC0yODcsNyArMjg3LDggQEAgbm90cmFjZSB2b2lkIF9faW5pdCBt
YWNoaW5lX2luaXQodW5zaWduZWQgbG9uZyBkdF9wdHIpCiAKIHZvaWQgX19pbml0IHNldHVwX2Fy
Y2goY2hhciAqKmNtZGxpbmVfcCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJ
cGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsKIAogCXByaW50ayhLRVJOX0lORk8gIklu
aXRpYWxpemluZyBrZXJuZWxcbiIpOwogCkBAIC0zNTEsOSArMzUyLDkgQEAgdm9pZCBfX2luaXQg
c2V0dXBfYXJjaChjaGFyICoqY21kbGluZV9wKQogCWRpc2FibGVfY2FjaGluZyhyYW1fc3RhcnQs
IHJhbV9lbmQgLSAxKTsKIAogCS8qIFNldCBjYWNoaW5nIG9mIGV4dGVybmFsIFJBTSB1c2VkIGJ5
IExpbnV4ICovCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpCi0JCWVuYWJsZV9jYWNo
aW5nKENBQ0hFX1JFR0lPTl9TVEFSVChyZWctPmJhc2UpLAotCQkJICAgICAgIENBQ0hFX1JFR0lP
Tl9TVEFSVChyZWctPmJhc2UgKyByZWctPnNpemUgLSAxKSk7CisJZm9yX2VhY2hfbWVtX3Jhbmdl
KGksICZzdGFydCwgJmVuZCkKKwkJZW5hYmxlX2NhY2hpbmcoQ0FDSEVfUkVHSU9OX1NUQVJUKHN0
YXJ0KSwKKwkJCSAgICAgICBDQUNIRV9SRUdJT05fU1RBUlQoZW5kIC0gMSkpOwogCiAjaWZkZWYg
Q09ORklHX0JMS19ERVZfSU5JVFJECiAJLyoKZGlmZiAtLWdpdCBhL2FyY2gvbWljcm9ibGF6ZS9t
bS9pbml0LmMgYi9hcmNoL21pY3JvYmxhemUvbW0vaW5pdC5jCmluZGV4IDQ5ZTBjMjQxZjliMS4u
MTU0MDNiNWFkZmNmIDEwMDY0NAotLS0gYS9hcmNoL21pY3JvYmxhemUvbW0vaW5pdC5jCisrKyBi
L2FyY2gvbWljcm9ibGF6ZS9tbS9pbml0LmMKQEAgLTEwNiwxMyArMTA2LDE0IEBAIHN0YXRpYyB2
b2lkIF9faW5pdCBwYWdpbmdfaW5pdCh2b2lkKQogdm9pZCBfX2luaXQgc2V0dXBfbWVtb3J5KHZv
aWQpCiB7CiAjaWZuZGVmIENPTkZJR19NTVUKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7
CiAJdTMyIGtlcm5lbF9hbGlnbl9zdGFydCwga2VybmVsX2FsaWduX3NpemU7CisJcGh5c19hZGRy
X3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsKIAogCS8qIEZpbmQgbWFpbiBtZW1vcnkgd2hlcmUgaXMg
dGhlIGtlcm5lbCAqLwotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCW1lbW9y
eV9zdGFydCA9ICh1MzIpcmVnLT5iYXNlOwotCQlsb3dtZW1fc2l6ZSA9IHJlZy0+c2l6ZTsKKwlm
b3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKSB7CisJCW1lbW9yeV9zdGFydCA9IHN0
YXJ0OworCQlsb3dtZW1fc2l6ZSA9IGVuZCAtIHN0YXJ0OwogCQlpZiAoKG1lbW9yeV9zdGFydCA8
PSAodTMyKV90ZXh0KSAmJgogCQkJKCh1MzIpX3RleHQgPD0gKG1lbW9yeV9zdGFydCArIGxvd21l
bV9zaXplIC0gMSkpKSB7CiAJCQltZW1vcnlfc2l6ZSA9IGxvd21lbV9zaXplOwpkaWZmIC0tZ2l0
IGEvYXJjaC9taXBzL2Nhdml1bS1vY3Rlb24vZG1hLW9jdGVvbi5jIGIvYXJjaC9taXBzL2Nhdml1
bS1vY3Rlb24vZG1hLW9jdGVvbi5jCmluZGV4IDE0ZWE2ODBkMTgwZS4uZDkzOGMxZjdjMWUxIDEw
MDY0NAotLS0gYS9hcmNoL21pcHMvY2F2aXVtLW9jdGVvbi9kbWEtb2N0ZW9uLmMKKysrIGIvYXJj
aC9taXBzL2Nhdml1bS1vY3Rlb24vZG1hLW9jdGVvbi5jCkBAIC0xOTAsMjUgKzE5MCwyNSBAQCBj
aGFyICpvY3Rlb25fc3dpb3RsYjsKIAogdm9pZCBfX2luaXQgcGxhdF9zd2lvdGxiX3NldHVwKHZv
aWQpCiB7Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqbWVtOworCXBoeXNfYWRkcl90IHN0YXJ0
LCBlbmQ7CiAJcGh5c19hZGRyX3QgbWF4X2FkZHI7CiAJcGh5c19hZGRyX3QgYWRkcl9zaXplOwog
CXNpemVfdCBzd2lvdGxic2l6ZTsKIAl1bnNpZ25lZCBsb25nIHN3aW90bGJfbnNsYWJzOworCXU2
NCBpOwogCiAJbWF4X2FkZHIgPSAwOwogCWFkZHJfc2l6ZSA9IDA7CiAKLQlmb3JfZWFjaF9tZW1i
bG9jayhtZW1vcnksIG1lbSkgeworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQp
IHsKIAkJLyogVGhlc2UgYWRkcmVzc2VzIG1hcCBsb3cgZm9yIFBDSS4gKi8KIAkJaWYgKG1lbS0+
YmFzZSA+IDB4NDEwMDAwMDAwdWxsICYmICFPQ1RFT05fSVNfT0NURU9OMigpKQogCQkJY29udGlu
dWU7CiAKLQkJYWRkcl9zaXplICs9IG1lbS0+c2l6ZTsKLQotCQlpZiAobWF4X2FkZHIgPCBtZW0t
PmJhc2UgKyBtZW0tPnNpemUpCi0JCQltYXhfYWRkciA9IG1lbS0+YmFzZSArIG1lbS0+c2l6ZTsK
KwkJYWRkcl9zaXplICs9IChlbmQgLSBzdGFydCk7CiAKKwkJaWYgKG1heF9hZGRyIDwgZW5kKQor
CQkJbWF4X2FkZHIgPSBlbmQ7CiAJfQogCiAJc3dpb3RsYnNpemUgPSBQQUdFX1NJWkU7CmRpZmYg
LS1naXQgYS9hcmNoL21pcHMva2VybmVsL3NldHVwLmMgYi9hcmNoL21pcHMva2VybmVsL3NldHVw
LmMKaW5kZXggYmY1ZjVhY2FiMGE4Li4zMzViZDE4OGI4YjQgMTAwNjQ0Ci0tLSBhL2FyY2gvbWlw
cy9rZXJuZWwvc2V0dXAuYworKysgYi9hcmNoL21pcHMva2VybmVsL3NldHVwLmMKQEAgLTMwMCw4
ICszMDAsOSBAQCBzdGF0aWMgdm9pZCBfX2luaXQgYm9vdG1lbV9pbml0KHZvaWQpCiAKIHN0YXRp
YyB2b2lkIF9faW5pdCBib290bWVtX2luaXQodm9pZCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVn
aW9uICptZW07CiAJcGh5c19hZGRyX3QgcmFtc3RhcnQsIHJhbWVuZDsKKwlwaHlzX2FkZHJfdCBz
dGFydCwgZW5kOworCXU2NCBpOwogCiAJcmFtc3RhcnQgPSBtZW1ibG9ja19zdGFydF9vZl9EUkFN
KCk7CiAJcmFtZW5kID0gbWVtYmxvY2tfZW5kX29mX0RSQU0oKTsKQEAgLTMzOCwxOCArMzM5LDEz
IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBib290bWVtX2luaXQodm9pZCkKIAogCW1pbl9sb3dfcGZu
ID0gQVJDSF9QRk5fT0ZGU0VUOwogCW1heF9wZm4gPSBQRk5fRE9XTihyYW1lbmQpOwotCWZvcl9l
YWNoX21lbWJsb2NrKG1lbW9yeSwgbWVtKSB7Ci0JCXVuc2lnbmVkIGxvbmcgc3RhcnQgPSBtZW1i
bG9ja19yZWdpb25fbWVtb3J5X2Jhc2VfcGZuKG1lbSk7Ci0JCXVuc2lnbmVkIGxvbmcgZW5kID0g
bWVtYmxvY2tfcmVnaW9uX21lbW9yeV9lbmRfcGZuKG1lbSk7Ci0KKwlmb3JfZWFjaF9tZW1fcmFu
Z2UoaSwgJnN0YXJ0LCAmZW5kKSB7CiAJCS8qCiAJCSAqIFNraXAgaGlnaG1lbSBoZXJlIHNvIHdl
IGdldCBhbiBhY2N1cmF0ZSBtYXhfbG93X3BmbiBpZiBsb3cKIAkJICogbWVtb3J5IHN0b3BzIHNo
b3J0IG9mIGhpZ2ggbWVtb3J5LgogCQkgKiBJZiB0aGUgcmVnaW9uIG92ZXJsYXBzIEhJR0hNRU1f
U1RBUlQsIGVuZCBpcyBjbGlwcGVkIHNvCiAJCSAqIG1heF9wZm4gZXhjbHVkZXMgdGhlIGhpZ2ht
ZW0gcG9ydGlvbi4KIAkJICovCi0JCWlmIChtZW1ibG9ja19pc19ub21hcChtZW0pKQotCQkJY29u
dGludWU7CiAJCWlmIChzdGFydCA+PSBQRk5fRE9XTihISUdITUVNX1NUQVJUKSkKIAkJCWNvbnRp
bnVlOwogCQlpZiAoZW5kID4gUEZOX0RPV04oSElHSE1FTV9TVEFSVCkpCkBAIC00NTAsMTMgKzQ0
NiwxMiBAQCBlYXJseV9wYXJhbSgibWVtbWFwIiwgZWFybHlfcGFyc2VfbWVtbWFwKTsKIHVuc2ln
bmVkIGxvbmcgc2V0dXBfZWxmY29yZWhkciwgc2V0dXBfZWxmY29yZWhkcl9zaXplOwogc3RhdGlj
IGludCBfX2luaXQgZWFybHlfcGFyc2VfZWxmY29yZWhkcihjaGFyICpwKQogewotCXN0cnVjdCBt
ZW1ibG9ja19yZWdpb24gKm1lbTsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5kOworCXU2NCBpOwog
CiAJc2V0dXBfZWxmY29yZWhkciA9IG1lbXBhcnNlKHAsICZwKTsKIAotCSBmb3JfZWFjaF9tZW1i
bG9jayhtZW1vcnksIG1lbSkgewotCQl1bnNpZ25lZCBsb25nIHN0YXJ0ID0gbWVtLT5iYXNlOwot
CQl1bnNpZ25lZCBsb25nIGVuZCA9IHN0YXJ0ICsgbWVtLT5zaXplOworCWZvcl9lYWNoX21lbV9y
YW5nZShpLCAmc3RhcnQsICZlbmQpIHsKIAkJaWYgKHNldHVwX2VsZmNvcmVoZHIgPj0gc3RhcnQg
JiYgc2V0dXBfZWxmY29yZWhkciA8IGVuZCkgewogCQkJLyoKIAkJCSAqIFJlc2VydmUgZnJvbSB0
aGUgZWxmIGNvcmUgaGVhZGVyIHRvIHRoZSBlbmQgb2YKQEAgLTcyMCw3ICs3MTUsOCBAQCBzdGF0
aWMgdm9pZCBfX2luaXQgYXJjaF9tZW1faW5pdChjaGFyICoqY21kbGluZV9wKQogCiBzdGF0aWMg
dm9pZCBfX2luaXQgcmVzb3VyY2VfaW5pdCh2b2lkKQogewotCXN0cnVjdCBtZW1ibG9ja19yZWdp
b24gKnJlZ2lvbjsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5kOworCXU2NCBpOwogCiAJaWYgKFVO
Q0FDX0JBU0UgIT0gSU9fQkFTRSkKIAkJcmV0dXJuOwpAQCAtNzMyLDkgKzcyOCw3IEBAIHN0YXRp
YyB2b2lkIF9faW5pdCByZXNvdXJjZV9pbml0KHZvaWQpCiAJYnNzX3Jlc291cmNlLnN0YXJ0ID0g
X19wYV9zeW1ib2woJl9fYnNzX3N0YXJ0KTsKIAlic3NfcmVzb3VyY2UuZW5kID0gX19wYV9zeW1i
b2woJl9fYnNzX3N0b3ApIC0gMTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnaW9u
KSB7Ci0JCXBoeXNfYWRkcl90IHN0YXJ0ID0gUEZOX1BIWVMobWVtYmxvY2tfcmVnaW9uX21lbW9y
eV9iYXNlX3BmbihyZWdpb24pKTsKLQkJcGh5c19hZGRyX3QgZW5kID0gUEZOX1BIWVMobWVtYmxv
Y2tfcmVnaW9uX21lbW9yeV9lbmRfcGZuKHJlZ2lvbikpIC0gMTsKKwlmb3JfZWFjaF9tZW1fcmFu
Z2UoaSwgJnN0YXJ0LCAmZW5kKSB7CiAJCXN0cnVjdCByZXNvdXJjZSAqcmVzOwogCiAJCXJlcyA9
IG1lbWJsb2NrX2FsbG9jKHNpemVvZihzdHJ1Y3QgcmVzb3VyY2UpLCBTTVBfQ0FDSEVfQllURVMp
OwpAQCAtNzQzLDcgKzczNywxMiBAQCBzdGF0aWMgdm9pZCBfX2luaXQgcmVzb3VyY2VfaW5pdCh2
b2lkKQogCQkJICAgICAgc2l6ZW9mKHN0cnVjdCByZXNvdXJjZSkpOwogCiAJCXJlcy0+c3RhcnQg
PSBzdGFydDsKLQkJcmVzLT5lbmQgPSBlbmQ7CisJCS8qCisJCSAqIEluIG1lbWJsb2NrLCBlbmQg
cG9pbnRzIHRvIHRoZSBmaXJzdCBieXRlIGFmdGVyIHRoZQorCQkgKiByYW5nZSB3aGlsZSBpbiBy
ZXNvdXJzZXMsIGVuZCBwb2ludHMgdG8gdGhlIGxhc3QgYnl0ZSBpbgorCQkgKiB0aGUgcmFuZ2Uu
CisJCSAqLworCQlyZXMtPmVuZCA9IGVuZCAtIDE7CiAJCXJlcy0+ZmxhZ3MgPSBJT1JFU09VUkNF
X1NZU1RFTV9SQU0gfCBJT1JFU09VUkNFX0JVU1k7CiAJCXJlcy0+bmFtZSA9ICJTeXN0ZW0gUkFN
IjsKIApkaWZmIC0tZ2l0IGEvYXJjaC9vcGVucmlzYy9tbS9pbml0LmMgYi9hcmNoL29wZW5yaXNj
L21tL2luaXQuYwppbmRleCAzZDdjNzljNzc0NWQuLjgzNDhmZWFhZjQ2ZSAxMDA2NDQKLS0tIGEv
YXJjaC9vcGVucmlzYy9tbS9pbml0LmMKKysrIGIvYXJjaC9vcGVucmlzYy9tbS9pbml0LmMKQEAg
LTY0LDYgKzY0LDcgQEAgZXh0ZXJuIGNvbnN0IGNoYXIgX3Nfa2VybmVsX3JvW10sIF9lX2tlcm5l
bF9yb1tdOwogICovCiBzdGF0aWMgdm9pZCBfX2luaXQgbWFwX3JhbSh2b2lkKQogeworCXBoeXNf
YWRkcl90IHN0YXJ0LCBlbmQ7CiAJdW5zaWduZWQgbG9uZyB2LCBwLCBlOwogCXBncHJvdF90IHBy
b3Q7CiAJcGdkX3QgKnBnZTsKQEAgLTcxLDYgKzcyLDcgQEAgc3RhdGljIHZvaWQgX19pbml0IG1h
cF9yYW0odm9pZCkKIAlwdWRfdCAqcHVlOwogCXBtZF90ICpwbWU7CiAJcHRlX3QgKnB0ZTsKKwl1
NjQgaTsKIAkvKiBUaGVzZSBtYXJrIGV4dGVudHMgb2YgcmVhZC1vbmx5IGtlcm5lbCBwYWdlcy4u
LgogCSAqIC4uLmZyb20gdm1saW51eC5sZHMuUwogCSAqLwpAQCAtNzgsOSArODAsOSBAQCBzdGF0
aWMgdm9pZCBfX2luaXQgbWFwX3JhbSh2b2lkKQogCiAJdiA9IFBBR0VfT0ZGU0VUOwogCi0JZm9y
X2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWdpb24pIHsKLQkJcCA9ICh1MzIpIHJlZ2lvbi0+YmFz
ZSAmIFBBR0VfTUFTSzsKLQkJZSA9IHAgKyAodTMyKSByZWdpb24tPnNpemU7CisJZm9yX2VhY2hf
bWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgeworCQlwID0gKHUzMikgc3RhcnQgJiBQQUdFX01B
U0s7CisJCWUgPSAodTMyKSBlbmQ7CiAKIAkJdiA9ICh1MzIpIF9fdmEocCk7CiAJCXBnZSA9IHBn
ZF9vZmZzZXRfayh2KTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9rZXJuZWwvZmFkdW1wLmMg
Yi9hcmNoL3Bvd2VycGMva2VybmVsL2ZhZHVtcC5jCmluZGV4IGU0NjliMTUwYmUyMS4uNWNkZjQx
NjhhNjFhIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMva2VybmVsL2ZhZHVtcC5jCisrKyBiL2Fy
Y2gvcG93ZXJwYy9rZXJuZWwvZmFkdW1wLmMKQEAgLTE5MSwxMyArMTkxLDEzIEBAIGludCBpc19m
YWR1bXBfYWN0aXZlKHZvaWQpCiAgKi8KIHN0YXRpYyBib29sIGlzX2ZhZHVtcF9tZW1fYXJlYV9j
b250aWd1b3VzKHU2NCBkX3N0YXJ0LCB1NjQgZF9lbmQpCiB7Ci0Jc3RydWN0IG1lbWJsb2NrX3Jl
Z2lvbiAqcmVnOworCXBoeXNfYWRkcl90IHJlZ19zdGFydCwgcmVnX2VuZDsKIAlib29sIHJldCA9
IGZhbHNlOwotCXU2NCBzdGFydCwgZW5kOworCXU2NCBpLCBzdGFydCwgZW5kOwogCi0JZm9yX2Vh
Y2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJc3RhcnQgPSBtYXhfdCh1NjQsIGRfc3RhcnQs
IHJlZy0+YmFzZSk7Ci0JCWVuZCA9IG1pbl90KHU2NCwgZF9lbmQsIChyZWctPmJhc2UgKyByZWct
PnNpemUpKTsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnJlZ19zdGFydCwgJnJlZ19lbmQpIHsK
KwkJc3RhcnQgPSBtYXhfdCh1NjQsIGRfc3RhcnQsIHJlZ19zdGFydCk7CisJCWVuZCA9IG1pbl90
KHU2NCwgZF9lbmQsIHJlZ19lbmQpOwogCQlpZiAoZF9zdGFydCA8IGVuZCkgewogCQkJLyogTWVt
b3J5IGhvbGUgZnJvbSBkX3N0YXJ0IHRvIHN0YXJ0ICovCiAJCQlpZiAoc3RhcnQgPiBkX3N0YXJ0
KQpAQCAtNDIyLDM0ICs0MjIsMzQgQEAgc3RhdGljIGludCBfX2luaXQgYWRkX2Jvb3RfbWVtX3Jl
Z2lvbnModW5zaWduZWQgbG9uZyBtc3RhcnQsCiAKIHN0YXRpYyBpbnQgX19pbml0IGZhZHVtcF9n
ZXRfYm9vdF9tZW1fcmVnaW9ucyh2b2lkKQogewotCXVuc2lnbmVkIGxvbmcgYmFzZSwgc2l6ZSwg
Y3VyX3NpemUsIGhvbGVfc2l6ZSwgbGFzdF9lbmQ7CisJdW5zaWduZWQgbG9uZyBzaXplLCBjdXJf
c2l6ZSwgaG9sZV9zaXplLCBsYXN0X2VuZDsKIAl1bnNpZ25lZCBsb25nIG1lbV9zaXplID0gZndf
ZHVtcC5ib290X21lbW9yeV9zaXplOwotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKKwlw
aHlzX2FkZHJfdCByZWdfc3RhcnQsIHJlZ19lbmQ7CiAJaW50IHJldCA9IDE7CisJdTY0IGk7CiAK
IAlmd19kdW1wLmJvb3RfbWVtX3JlZ3NfY250ID0gMDsKIAogCWxhc3RfZW5kID0gMDsKIAlob2xl
X3NpemUgPSAwOwogCWN1cl9zaXplID0gMDsKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJl
ZykgewotCQliYXNlID0gcmVnLT5iYXNlOwotCQlzaXplID0gcmVnLT5zaXplOwotCQlob2xlX3Np
emUgKz0gKGJhc2UgLSBsYXN0X2VuZCk7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZyZWdfc3Rh
cnQsICZyZWdfZW5kKSB7CisJCXNpemUgPSByZWdfZW5kIC0gcmVnX3N0YXJ0OworCQlob2xlX3Np
emUgKz0gKHJlZ19zdGFydCAtIGxhc3RfZW5kKTsKIAogCQlpZiAoKGN1cl9zaXplICsgc2l6ZSkg
Pj0gbWVtX3NpemUpIHsKIAkJCXNpemUgPSAobWVtX3NpemUgLSBjdXJfc2l6ZSk7Ci0JCQlyZXQg
PSBhZGRfYm9vdF9tZW1fcmVnaW9ucyhiYXNlLCBzaXplKTsKKwkJCXJldCA9IGFkZF9ib290X21l
bV9yZWdpb25zKHJlZ19zdGFydCwgc2l6ZSk7CiAJCQlicmVhazsKIAkJfQogCiAJCW1lbV9zaXpl
IC09IHNpemU7CiAJCWN1cl9zaXplICs9IHNpemU7Ci0JCXJldCA9IGFkZF9ib290X21lbV9yZWdp
b25zKGJhc2UsIHNpemUpOworCQlyZXQgPSBhZGRfYm9vdF9tZW1fcmVnaW9ucyhyZWdfc3RhcnQs
IHNpemUpOwogCQlpZiAoIXJldCkKIAkJCWJyZWFrOwogCi0JCWxhc3RfZW5kID0gYmFzZSArIHNp
emU7CisJCWxhc3RfZW5kID0gcmVnX2VuZDsKIAl9CiAJZndfZHVtcC5ib290X21lbV90b3AgPSBQ
QUdFX0FMSUdOKGZ3X2R1bXAuYm9vdF9tZW1vcnlfc2l6ZSArIGhvbGVfc2l6ZSk7CiAKQEAgLTk4
NSw5ICs5ODUsOCBAQCBzdGF0aWMgaW50IGZhZHVtcF9pbml0X2VsZmNvcmVfaGVhZGVyKGNoYXIg
KmJ1ZnApCiAgKi8KIHN0YXRpYyBpbnQgZmFkdW1wX3NldHVwX2NyYXNoX21lbW9yeV9yYW5nZXMo
dm9pZCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7Ci0JdTY0IHN0YXJ0LCBlbmQ7
Ci0JaW50IGksIHJldDsKKwl1NjQgaSwgc3RhcnQsIGVuZDsKKwlpbnQgcmV0OwogCiAJcHJfZGVi
dWcoIlNldHVwIGNyYXNoIG1lbW9yeSByYW5nZXMuXG4iKTsKIAljcmFzaF9tcmFuZ2VfaW5mby5t
ZW1fcmFuZ2VfY250ID0gMDsKQEAgLTEwMDUsMTAgKzEwMDQsNyBAQCBzdGF0aWMgaW50IGZhZHVt
cF9zZXR1cF9jcmFzaF9tZW1vcnlfcmFuZ2VzKHZvaWQpCiAJCQlyZXR1cm4gcmV0OwogCX0KIAot
CWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXN0YXJ0ID0gKHU2NClyZWctPmJh
c2U7Ci0JCWVuZCA9IHN0YXJ0ICsgKHU2NClyZWctPnNpemU7Ci0KKwlmb3JfZWFjaF9tZW1fcmFu
Z2UoaSwgJnN0YXJ0LCAmZW5kKSB7CiAJCS8qCiAJCSAqIHNraXAgdGhlIG1lbW9yeSBjaHVuayB0
aGF0IGlzIGFscmVhZHkgYWRkZWQKIAkJICogKDAgdGhyb3VnaCBib290X21lbW9yeV90b3ApLgpA
QCAtMTI0Miw3ICsxMjM4LDkgQEAgc3RhdGljIHZvaWQgZmFkdW1wX2ZyZWVfcmVzZXJ2ZWRfbWVt
b3J5KHVuc2lnbmVkIGxvbmcgc3RhcnRfcGZuLAogICovCiBzdGF0aWMgdm9pZCBmYWR1bXBfcmVs
ZWFzZV9yZXNlcnZlZF9hcmVhKHU2NCBzdGFydCwgdTY0IGVuZCkKIHsKLQl1NjQgdHN0YXJ0LCB0
ZW5kLCBzcGZuLCBlcGZuLCByZWdfc3BmbiwgcmVnX2VwZm4sIGk7CisJdW5zaWduZWQgbG9uZyBy
ZWdfc3BmbiwgcmVnX2VwZm47CisJdTY0IHRzdGFydCwgdGVuZCwgc3BmbiwgZXBmbjsKKwlpbnQg
aTsKIAogCXNwZm4gPSBQSFlTX1BGTihzdGFydCk7CiAJZXBmbiA9IFBIWVNfUEZOKGVuZCk7CkBA
IC0xNjg1LDEyICsxNjgzLDEwIEBAIGludCBfX2luaXQgZmFkdW1wX3Jlc2VydmVfbWVtKHZvaWQp
CiAvKiBQcmVzZXJ2ZSBldmVyeXRoaW5nIGFib3ZlIHRoZSBiYXNlIGFkZHJlc3MgKi8KIHN0YXRp
YyB2b2lkIF9faW5pdCBmYWR1bXBfcmVzZXJ2ZV9jcmFzaF9hcmVhKHU2NCBiYXNlKQogewotCXN0
cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKLQl1NjQgbXN0YXJ0LCBtc2l6ZTsKKwl1NjQgaSwg
bXN0YXJ0LCBtZW5kLCBtc2l6ZTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7
Ci0JCW1zdGFydCA9IHJlZy0+YmFzZTsKLQkJbXNpemUgID0gcmVnLT5zaXplOworCWZvcl9lYWNo
X21lbV9yYW5nZShpLCAmbXN0YXJ0LCAmbWVuZCkgeworCQltc2l6ZSAgPSBtZW5kIC0gbXN0YXJ0
OwogCiAJCWlmICgobXN0YXJ0ICsgbXNpemUpIDwgYmFzZSkKIAkJCWNvbnRpbnVlOwpkaWZmIC0t
Z2l0IGEvYXJjaC9wb3dlcnBjL2tleGVjL2ZpbGVfbG9hZF82NC5jIGIvYXJjaC9wb3dlcnBjL2tl
eGVjL2ZpbGVfbG9hZF82NC5jCmluZGV4IDJjOWQ5MDhlYWI5Ni4uYzY5YmNmOWI1NDdhIDEwMDY0
NAotLS0gYS9hcmNoL3Bvd2VycGMva2V4ZWMvZmlsZV9sb2FkXzY0LmMKKysrIGIvYXJjaC9wb3dl
cnBjL2tleGVjL2ZpbGVfbG9hZF82NC5jCkBAIC0xMzgsMTUgKzEzOCwxMyBAQCBzdGF0aWMgaW50
IGdldF91c2FibGVfbWVtb3J5X3JhbmdlcyhzdHJ1Y3QgY3Jhc2hfbWVtICoqbWVtX3JhbmdlcykK
ICAqLwogc3RhdGljIGludCBnZXRfY3Jhc2hfbWVtb3J5X3JhbmdlcyhzdHJ1Y3QgY3Jhc2hfbWVt
ICoqbWVtX3JhbmdlcykKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19h
ZGRyX3QgYmFzZSwgZW5kOwogCXN0cnVjdCBjcmFzaF9tZW0gKnRtZW07CisJdTY0IGk7CiAJaW50
IHJldDsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXU2NCBiYXNlLCBz
aXplOwotCi0JCWJhc2UgPSAodTY0KXJlZy0+YmFzZTsKLQkJc2l6ZSA9ICh1NjQpcmVnLT5zaXpl
OworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmYmFzZSwgJmVuZCkgeworCQl1NjQgc2l6ZSA9IGVu
ZCAtIGJhc2U7CiAKIAkJLyogU2tpcCBiYWNrdXAgbWVtb3J5IHJlZ2lvbiwgd2hpY2ggbmVlZHMg
YSBzZXBhcmF0ZSBlbnRyeSAqLwogCQlpZiAoYmFzZSA9PSBCQUNLVVBfU1JDX1NUQVJUKSB7CmRp
ZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvaGFzaF91dGlscy5jIGIvYXJjaC9w
b3dlcnBjL21tL2Jvb2szczY0L2hhc2hfdXRpbHMuYwppbmRleCAxZGE5ZGJiYTkyMTcuLmRjNDBk
ZjA2NTY5OCAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL21tL2Jvb2szczY0L2hhc2hfdXRpbHMu
YworKysgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvaGFzaF91dGlscy5jCkBAIC03LDcgKzcs
NyBAQAogICoKICAqIFNNUCBzY2FsYWJpbGl0eSB3b3JrOgogICogICAgQ29weXJpZ2h0IChDKSAy
MDAxIEFudG9uIEJsYW5jaGFyZCA8YW50b25AYXUuaWJtLmNvbT4sIElCTQotICogCisgKgogICog
ICAgTW9kdWxlIG5hbWU6IGh0YWIuYwogICoKICAqICAgIERlc2NyaXB0aW9uOgpAQCAtODY1LDgg
Kzg2NSw4IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBodGFiX2luaXRpYWxpemUodm9pZCkKIAl1bnNp
Z25lZCBsb25nIHRhYmxlOwogCXVuc2lnbmVkIGxvbmcgcHRlZ19jb3VudDsKIAl1bnNpZ25lZCBs
b25nIHByb3Q7Ci0JdW5zaWduZWQgbG9uZyBiYXNlID0gMCwgc2l6ZSA9IDA7Ci0Jc3RydWN0IG1l
bWJsb2NrX3JlZ2lvbiAqcmVnOworCXBoeXNfYWRkcl90IGJhc2UgPSAwLCBzaXplID0gMCwgZW5k
OworCXU2NCBpOwogCiAJREJHKCIgLT4gaHRhYl9pbml0aWFsaXplKClcbiIpOwogCkBAIC04ODIs
NyArODgyLDcgQEAgc3RhdGljIHZvaWQgX19pbml0IGh0YWJfaW5pdGlhbGl6ZSh2b2lkKQogCS8q
CiAJICogQ2FsY3VsYXRlIHRoZSByZXF1aXJlZCBzaXplIG9mIHRoZSBodGFiLiAgV2Ugd2FudCB0
aGUgbnVtYmVyIG9mCiAJICogUFRFR3MgdG8gZXF1YWwgb25lIGhhbGYgdGhlIG51bWJlciBvZiBy
ZWFsIHBhZ2VzLgotCSAqLyAKKwkgKi8KIAlodGFiX3NpemVfYnl0ZXMgPSBodGFiX2dldF90YWJs
ZV9zaXplKCk7CiAJcHRlZ19jb3VudCA9IGh0YWJfc2l6ZV9ieXRlcyA+PiA3OwogCkBAIC04OTIs
NyArODkyLDcgQEAgc3RhdGljIHZvaWQgX19pbml0IGh0YWJfaW5pdGlhbGl6ZSh2b2lkKQogCSAg
ICBmaXJtd2FyZV9oYXNfZmVhdHVyZShGV19GRUFUVVJFX1BTM19MVjEpKSB7CiAJCS8qIFVzaW5n
IGEgaHlwZXJ2aXNvciB3aGljaCBvd25zIHRoZSBodGFiICovCiAJCWh0YWJfYWRkcmVzcyA9IE5V
TEw7Ci0JCV9TRFIxID0gMDsgCisJCV9TRFIxID0gMDsKICNpZmRlZiBDT05GSUdfRkFfRFVNUAog
CQkvKgogCQkgKiBJZiBmaXJtd2FyZSBhc3Npc3RlZCBkdW1wIGlzIGFjdGl2ZSBmaXJtd2FyZSBw
cmVzZXJ2ZXMKQEAgLTk1OCw5ICs5NTgsOSBAQCBzdGF0aWMgdm9pZCBfX2luaXQgaHRhYl9pbml0
aWFsaXplKHZvaWQpCiAjZW5kaWYgLyogQ09ORklHX0RFQlVHX1BBR0VBTExPQyAqLwogCiAJLyog
Y3JlYXRlIGJvbHRlZCB0aGUgbGluZWFyIG1hcHBpbmcgaW4gdGhlIGhhc2ggdGFibGUgKi8KLQlm
b3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewotCQliYXNlID0gKHVuc2lnbmVkIGxvbmcp
X192YShyZWctPmJhc2UpOwotCQlzaXplID0gcmVnLT5zaXplOworCWZvcl9lYWNoX21lbV9yYW5n
ZShpLCAmYmFzZSwgJmVuZCkgeworCQlzaXplID0gZW5kIC0gYmFzZTsKKwkJYmFzZSA9ICh1bnNp
Z25lZCBsb25nKV9fdmEoYmFzZSk7CiAKIAkJREJHKCJjcmVhdGluZyBtYXBwaW5nIGZvciByZWdp
b246ICVseC4uJWx4IChwcm90OiAlbHgpXG4iLAogCQkgICAgYmFzZSwgc2l6ZSwgcHJvdCk7CmRp
ZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhfcGd0YWJsZS5jIGIvYXJj
aC9wb3dlcnBjL21tL2Jvb2szczY0L3JhZGl4X3BndGFibGUuYwppbmRleCAyOGM3ODQ5NzZiZWQu
LmQyZGFlNGQ2MTU1MiAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL21tL2Jvb2szczY0L3JhZGl4
X3BndGFibGUuYworKysgYi9hcmNoL3Bvd2VycGMvbW0vYm9vazNzNjQvcmFkaXhfcGd0YWJsZS5j
CkBAIC0zMjksNyArMzI5LDggQEAgc3RhdGljIGludCBfX21lbWluaXQgY3JlYXRlX3BoeXNpY2Fs
X21hcHBpbmcodW5zaWduZWQgbG9uZyBzdGFydCwKIHN0YXRpYyB2b2lkIF9faW5pdCByYWRpeF9p
bml0X3BndGFibGUodm9pZCkKIHsKIAl1bnNpZ25lZCBsb25nIHJ0c19maWVsZDsKLQlzdHJ1Y3Qg
bWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsK
IAogCS8qIFdlIGRvbid0IHN1cHBvcnQgc2xiIGZvciByYWRpeCAqLwogCW1tdV9zbGJfc2l6ZSA9
IDA7CkBAIC0zMzcsMjAgKzMzOCwxOSBAQCBzdGF0aWMgdm9pZCBfX2luaXQgcmFkaXhfaW5pdF9w
Z3RhYmxlKHZvaWQpCiAJLyoKIAkgKiBDcmVhdGUgdGhlIGxpbmVhciBtYXBwaW5nCiAJICovCi0J
Zm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwg
JnN0YXJ0LCAmZW5kKSB7CiAJCS8qCiAJCSAqIFRoZSBtZW1ibG9jayBhbGxvY2F0b3IgIGlzIHVw
IGF0IHRoaXMgcG9pbnQsIHNvIHRoZQogCQkgKiBwYWdlIHRhYmxlcyB3aWxsIGJlIGFsbG9jYXRl
ZCB3aXRoaW4gdGhlIHJhbmdlLiBObwogCQkgKiBuZWVkIG9yIGEgbm9kZSAod2hpY2ggd2UgZG9u
J3QgaGF2ZSB5ZXQpLgogCQkgKi8KIAotCQlpZiAoKHJlZy0+YmFzZSArIHJlZy0+c2l6ZSkgPj0g
UkFESVhfVk1BTExPQ19TVEFSVCkgeworCQlpZiAoZW5kID49IFJBRElYX1ZNQUxMT0NfU1RBUlQp
IHsKIAkJCXByX3dhcm4oIk91dHNpZGUgdGhlIHN1cHBvcnRlZCByYW5nZVxuIik7CiAJCQljb250
aW51ZTsKIAkJfQogCi0JCVdBUk5fT04oY3JlYXRlX3BoeXNpY2FsX21hcHBpbmcocmVnLT5iYXNl
LAotCQkJCQkJcmVnLT5iYXNlICsgcmVnLT5zaXplLAorCQlXQVJOX09OKGNyZWF0ZV9waHlzaWNh
bF9tYXBwaW5nKHN0YXJ0LCBlbmQsCiAJCQkJCQlyYWRpeF9tZW1fYmxvY2tfc2l6ZSwKIAkJCQkJ
CS0xLCBQQUdFX0tFUk5FTCkpOwogCX0KZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9rYXNh
bi9rYXNhbl9pbml0XzMyLmMgYi9hcmNoL3Bvd2VycGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5j
CmluZGV4IGZiMjk0MDQ2ZTAwZS4uMjZmZGEzMjAzMzIwIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2Vy
cGMvbW0va2FzYW4va2FzYW5faW5pdF8zMi5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9rYXNhbi9r
YXNhbl9pbml0XzMyLmMKQEAgLTEzOCwxMSArMTM4LDExIEBAIHZvaWQgX19pbml0IGthc2FuX21t
dV9pbml0KHZvaWQpCiAKIHZvaWQgX19pbml0IGthc2FuX2luaXQodm9pZCkKIHsKLQlzdHJ1Y3Qg
bWVtYmxvY2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3QgYmFzZSwgZW5kOworCXU2NCBpOwog
Ci0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJcGh5c19hZGRyX3QgYmFzZSA9
IHJlZy0+YmFzZTsKLQkJcGh5c19hZGRyX3QgdG9wID0gbWluKGJhc2UgKyByZWctPnNpemUsIHRv
dGFsX2xvd21lbSk7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZiYXNlLCAmZW5kKSB7CisJCXBo
eXNfYWRkcl90IHRvcCA9IG1pbihlbmQsIHRvdGFsX2xvd21lbSk7CiAJCWludCByZXQ7CiAKIAkJ
aWYgKGJhc2UgPj0gdG9wKQpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL21lbS5jIGIvYXJj
aC9wb3dlcnBjL21tL21lbS5jCmluZGV4IDgwZGYzMjlmMTgwZS4uNWUyZTdjMGE4ZjFhIDEwMDY0
NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vbWVtLmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL21lbS5j
CkBAIC01ODUsMjAgKzU4NSwyNCBAQCB2b2lkIGZsdXNoX2ljYWNoZV91c2VyX3BhZ2Uoc3RydWN0
IHZtX2FyZWFfc3RydWN0ICp2bWEsIHN0cnVjdCBwYWdlICpwYWdlLAogICovCiBzdGF0aWMgaW50
IF9faW5pdCBhZGRfc3lzdGVtX3JhbV9yZXNvdXJjZXModm9pZCkKIHsKLQlzdHJ1Y3QgbWVtYmxv
Y2tfcmVnaW9uICpyZWc7CisJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKKwl1NjQgaTsKIAotCWZv
cl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZz
dGFydCwgJmVuZCkgewogCQlzdHJ1Y3QgcmVzb3VyY2UgKnJlczsKLQkJdW5zaWduZWQgbG9uZyBi
YXNlID0gcmVnLT5iYXNlOwotCQl1bnNpZ25lZCBsb25nIHNpemUgPSByZWctPnNpemU7CiAKIAkJ
cmVzID0ga3phbGxvYyhzaXplb2Yoc3RydWN0IHJlc291cmNlKSwgR0ZQX0tFUk5FTCk7CiAJCVdB
Uk5fT04oIXJlcyk7CiAKIAkJaWYgKHJlcykgewogCQkJcmVzLT5uYW1lID0gIlN5c3RlbSBSQU0i
OwotCQkJcmVzLT5zdGFydCA9IGJhc2U7Ci0JCQlyZXMtPmVuZCA9IGJhc2UgKyBzaXplIC0gMTsK
KwkJCXJlcy0+c3RhcnQgPSBzdGFydDsKKwkJCS8qCisJCQkgKiBJbiBtZW1ibG9jaywgZW5kIHBv
aW50cyB0byB0aGUgZmlyc3QgYnl0ZSBhZnRlcgorCQkJICogdGhlIHJhbmdlIHdoaWxlIGluIHJl
c291cnNlcywgZW5kIHBvaW50cyB0byB0aGUKKwkJCSAqIGxhc3QgYnl0ZSBpbiB0aGUgcmFuZ2Uu
CisJCQkgKi8KKwkJCXJlcy0+ZW5kID0gZW5kIC0gMTsKIAkJCXJlcy0+ZmxhZ3MgPSBJT1JFU09V
UkNFX1NZU1RFTV9SQU0gfCBJT1JFU09VUkNFX0JVU1k7CiAJCQlXQVJOX09OKHJlcXVlc3RfcmVz
b3VyY2UoJmlvbWVtX3Jlc291cmNlLCByZXMpIDwgMCk7CiAJCX0KZGlmZiAtLWdpdCBhL2FyY2gv
cG93ZXJwYy9tbS9wZ3RhYmxlXzMyLmMgYi9hcmNoL3Bvd2VycGMvbW0vcGd0YWJsZV8zMi5jCmlu
ZGV4IDZlYjRlYWI3OTM4NS4uMDc5MTU5ZTk3YmNhIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMv
bW0vcGd0YWJsZV8zMi5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9wZ3RhYmxlXzMyLmMKQEAgLTEy
MywxMSArMTIzLDExIEBAIHN0YXRpYyB2b2lkIF9faW5pdCBfX21hcGluX3JhbV9jaHVuayh1bnNp
Z25lZCBsb25nIG9mZnNldCwgdW5zaWduZWQgbG9uZyB0b3ApCiAKIHZvaWQgX19pbml0IG1hcGlu
X3JhbSh2b2lkKQogewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKKwlwaHlzX2FkZHJf
dCBiYXNlLCBlbmQ7CisJdTY0IGk7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykg
ewotCQlwaHlzX2FkZHJfdCBiYXNlID0gcmVnLT5iYXNlOwotCQlwaHlzX2FkZHJfdCB0b3AgPSBt
aW4oYmFzZSArIHJlZy0+c2l6ZSwgdG90YWxfbG93bWVtKTsKKwlmb3JfZWFjaF9tZW1fcmFuZ2Uo
aSwgJmJhc2UsICZlbmQpIHsKKwkJcGh5c19hZGRyX3QgdG9wID0gbWluKGVuZCwgdG90YWxfbG93
bWVtKTsKIAogCQlpZiAoYmFzZSA+PSB0b3ApCiAJCQljb250aW51ZTsKZGlmZiAtLWdpdCBhL2Fy
Y2gvcmlzY3YvbW0vaW5pdC5jIGIvYXJjaC9yaXNjdi9tbS9pbml0LmMKaW5kZXggMDQ4NWNmYWFj
YzcyLi4wNjM1NTcxNmQxOWEgMTAwNjQ0Ci0tLSBhL2FyY2gvcmlzY3YvbW0vaW5pdC5jCisrKyBi
L2FyY2gvcmlzY3YvbW0vaW5pdC5jCkBAIC0xNDUsMjEgKzE0NSwyMSBAQCBzdGF0aWMgcGh5c19h
ZGRyX3QgZHRiX2Vhcmx5X3BhIF9faW5pdGRhdGE7CiAKIHZvaWQgX19pbml0IHNldHVwX2Jvb3Rt
ZW0odm9pZCkKIHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CiAJcGh5c19hZGRyX3Qg
bWVtX3NpemUgPSAwOwogCXBoeXNfYWRkcl90IHRvdGFsX21lbSA9IDA7Ci0JcGh5c19hZGRyX3Qg
bWVtX3N0YXJ0LCBlbmQgPSAwOworCXBoeXNfYWRkcl90IG1lbV9zdGFydCwgc3RhcnQsIGVuZCA9
IDA7CiAJcGh5c19hZGRyX3Qgdm1saW51eF9lbmQgPSBfX3BhX3N5bWJvbCgmX2VuZCk7CiAJcGh5
c19hZGRyX3Qgdm1saW51eF9zdGFydCA9IF9fcGFfc3ltYm9sKCZfc3RhcnQpOworCXU2NCBpOwog
CiAJLyogRmluZCB0aGUgbWVtb3J5IHJlZ2lvbiBjb250YWluaW5nIHRoZSBrZXJuZWwgKi8KLQlm
b3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewotCQllbmQgPSByZWctPmJhc2UgKyByZWct
PnNpemU7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgeworCQlwaHlzX2Fk
ZHJfdCBzaXplID0gZW5kIC0gc3RhcnQ7CiAJCWlmICghdG90YWxfbWVtKQotCQkJbWVtX3N0YXJ0
ID0gcmVnLT5iYXNlOwotCQlpZiAocmVnLT5iYXNlIDw9IHZtbGludXhfc3RhcnQgJiYgdm1saW51
eF9lbmQgPD0gZW5kKQotCQkJQlVHX09OKHJlZy0+c2l6ZSA9PSAwKTsKLQkJdG90YWxfbWVtID0g
dG90YWxfbWVtICsgcmVnLT5zaXplOworCQkJbWVtX3N0YXJ0ID0gc3RhcnQ7CisJCWlmIChzdGFy
dCA8PSB2bWxpbnV4X3N0YXJ0ICYmIHZtbGludXhfZW5kIDw9IGVuZCkKKwkJCUJVR19PTihzaXpl
ID09IDApOworCQl0b3RhbF9tZW0gPSB0b3RhbF9tZW0gKyBzaXplOwogCX0KIAogCS8qCkBAIC00
NTYsNyArNDU2LDcgQEAgc3RhdGljIHZvaWQgX19pbml0IHNldHVwX3ZtX2ZpbmFsKHZvaWQpCiB7
CiAJdWludHB0cl90IHZhLCBtYXBfc2l6ZTsKIAlwaHlzX2FkZHJfdCBwYSwgc3RhcnQsIGVuZDsK
LQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJdTY0IGk7CiAKIAkvKiBTZXQgbW11X2Vu
YWJsZWQgZmxhZyAqLwogCW1tdV9lbmFibGVkID0gdHJ1ZTsKQEAgLTQ2NywxNCArNDY3LDkgQEAg
c3RhdGljIHZvaWQgX19pbml0IHNldHVwX3ZtX2ZpbmFsKHZvaWQpCiAJCQkgICBQR0RJUl9TSVpF
LCBQQUdFX1RBQkxFKTsKIAogCS8qIE1hcCBhbGwgbWVtb3J5IGJhbmtzICovCi0JZm9yX2VhY2hf
bWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJc3RhcnQgPSByZWctPmJhc2U7Ci0JCWVuZCA9IHN0
YXJ0ICsgcmVnLT5zaXplOwotCisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkg
ewogCQlpZiAoc3RhcnQgPj0gZW5kKQogCQkJYnJlYWs7Ci0JCWlmIChtZW1ibG9ja19pc19ub21h
cChyZWcpKQotCQkJY29udGludWU7CiAJCWlmIChzdGFydCA8PSBfX3BhKFBBR0VfT0ZGU0VUKSAm
JgogCQkgICAgX19wYShQQUdFX09GRlNFVCkgPCBlbmQpCiAJCQlzdGFydCA9IF9fcGEoUEFHRV9P
RkZTRVQpOwpkaWZmIC0tZ2l0IGEvYXJjaC9yaXNjdi9tbS9rYXNhbl9pbml0LmMgYi9hcmNoL3Jp
c2N2L21tL2thc2FuX2luaXQuYwppbmRleCA4N2I0YWIzZDNjNzcuLjEyZGRkMWY2YmY3MCAxMDA2
NDQKLS0tIGEvYXJjaC9yaXNjdi9tbS9rYXNhbl9pbml0LmMKKysrIGIvYXJjaC9yaXNjdi9tbS9r
YXNhbl9pbml0LmMKQEAgLTg1LDE2ICs4NSwxNiBAQCBzdGF0aWMgdm9pZCBfX2luaXQgcG9wdWxh
dGUodm9pZCAqc3RhcnQsIHZvaWQgKmVuZCkKIAogdm9pZCBfX2luaXQga2FzYW5faW5pdCh2b2lk
KQogewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKLQl1bnNpZ25lZCBsb25nIGk7CisJ
cGh5c19hZGRyX3QgX3N0YXJ0LCBfZW5kOworCXU2NCBpOwogCiAJa2FzYW5fcG9wdWxhdGVfZWFy
bHlfc2hhZG93KCh2b2lkICopS0FTQU5fU0hBRE9XX1NUQVJULAogCQkJCSAgICAodm9pZCAqKWth
c2FuX21lbV90b19zaGFkb3coKHZvaWQgKikKIAkJCQkJCQkJVk1BTExPQ19FTkQpKTsKIAotCWZv
cl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXZvaWQgKnN0YXJ0ID0gKHZvaWQgKilf
X3ZhKHJlZy0+YmFzZSk7Ci0JCXZvaWQgKmVuZCA9ICh2b2lkICopX192YShyZWctPmJhc2UgKyBy
ZWctPnNpemUpOworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmX3N0YXJ0LCAmX2VuZCkgeworCQl2
b2lkICpzdGFydCA9ICh2b2lkICopX3N0YXJ0OworCQl2b2lkICplbmQgPSAodm9pZCAqKV9lbmQ7
CiAKIAkJaWYgKHN0YXJ0ID49IGVuZCkKIAkJCWJyZWFrOwpkaWZmIC0tZ2l0IGEvYXJjaC9zMzkw
L2tlcm5lbC9zZXR1cC5jIGIvYXJjaC9zMzkwL2tlcm5lbC9zZXR1cC5jCmluZGV4IDY4MDg5ZWFi
YWUyNy4uYjQxNmE2NDk5MWIwIDEwMDY0NAotLS0gYS9hcmNoL3MzOTAva2VybmVsL3NldHVwLmMK
KysrIGIvYXJjaC9zMzkwL2tlcm5lbC9zZXR1cC5jCkBAIC00ODQsOCArNDg0LDkgQEAgc3RhdGlj
IHN0cnVjdCByZXNvdXJjZSBfX2luaXRkYXRhICpzdGFuZGFyZF9yZXNvdXJjZXNbXSA9IHsKIHN0
YXRpYyB2b2lkIF9faW5pdCBzZXR1cF9yZXNvdXJjZXModm9pZCkKIHsKIAlzdHJ1Y3QgcmVzb3Vy
Y2UgKnJlcywgKnN0ZF9yZXMsICpzdWJfcmVzOwotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJl
ZzsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5kOwogCWludCBqOworCXU2NCBpOwogCiAJY29kZV9y
ZXNvdXJjZS5zdGFydCA9ICh1bnNpZ25lZCBsb25nKSBfdGV4dDsKIAljb2RlX3Jlc291cmNlLmVu
ZCA9ICh1bnNpZ25lZCBsb25nKSBfZXRleHQgLSAxOwpAQCAtNDk0LDcgKzQ5NSw3IEBAIHN0YXRp
YyB2b2lkIF9faW5pdCBzZXR1cF9yZXNvdXJjZXModm9pZCkKIAlic3NfcmVzb3VyY2Uuc3RhcnQg
PSAodW5zaWduZWQgbG9uZykgX19ic3Nfc3RhcnQ7CiAJYnNzX3Jlc291cmNlLmVuZCA9ICh1bnNp
Z25lZCBsb25nKSBfX2Jzc19zdG9wIC0gMTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwg
cmVnKSB7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgewogCQlyZXMgPSBt
ZW1ibG9ja19hbGxvYyhzaXplb2YoKnJlcyksIDgpOwogCQlpZiAoIXJlcykKIAkJCXBhbmljKCIl
czogRmFpbGVkIHRvIGFsbG9jYXRlICV6dSBieXRlcyBhbGlnbj0weCV4XG4iLApAQCAtNTAyLDgg
KzUwMywxMyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgc2V0dXBfcmVzb3VyY2VzKHZvaWQpCiAJCXJl
cy0+ZmxhZ3MgPSBJT1JFU09VUkNFX0JVU1kgfCBJT1JFU09VUkNFX1NZU1RFTV9SQU07CiAKIAkJ
cmVzLT5uYW1lID0gIlN5c3RlbSBSQU0iOwotCQlyZXMtPnN0YXJ0ID0gcmVnLT5iYXNlOwotCQly
ZXMtPmVuZCA9IHJlZy0+YmFzZSArIHJlZy0+c2l6ZSAtIDE7CisJCXJlcy0+c3RhcnQgPSBzdGFy
dDsKKwkJLyoKKwkJICogSW4gbWVtYmxvY2ssIGVuZCBwb2ludHMgdG8gdGhlIGZpcnN0IGJ5dGUg
YWZ0ZXIgdGhlCisJCSAqIHJhbmdlIHdoaWxlIGluIHJlc291cnNlcywgZW5kIHBvaW50cyB0byB0
aGUgbGFzdCBieXRlIGluCisJCSAqIHRoZSByYW5nZS4KKwkJICovCisJCXJlcy0+ZW5kID0gZW5k
IC0gMTsKIAkJcmVxdWVzdF9yZXNvdXJjZSgmaW9tZW1fcmVzb3VyY2UsIHJlcyk7CiAKIAkJZm9y
IChqID0gMDsgaiA8IEFSUkFZX1NJWkUoc3RhbmRhcmRfcmVzb3VyY2VzKTsgaisrKSB7CkBAIC04
MTksMTQgKzgyNSwxNSBAQCBzdGF0aWMgdm9pZCBfX2luaXQgcmVzZXJ2ZV9rZXJuZWwodm9pZCkK
IAogc3RhdGljIHZvaWQgX19pbml0IHNldHVwX21lbW9yeSh2b2lkKQogewotCXN0cnVjdCBtZW1i
bG9ja19yZWdpb24gKnJlZzsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5kOworCXU2NCBpOwogCiAJ
LyoKIAkgKiBJbml0IHN0b3JhZ2Uga2V5IGZvciBwcmVzZW50IG1lbW9yeQogCSAqLwotCWZvcl9l
YWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXN0b3JhZ2Vfa2V5X2luaXRfcmFuZ2UocmVn
LT5iYXNlLCByZWctPmJhc2UgKyByZWctPnNpemUpOwotCX0KKwlmb3JfZWFjaF9tZW1fcmFuZ2Uo
aSwgJnN0YXJ0LCAmZW5kKQorCQlzdG9yYWdlX2tleV9pbml0X3JhbmdlKHN0YXJ0LCBlbmQpOwor
CiAJcHN3X3NldF9rZXkoUEFHRV9ERUZBVUxUX0tFWSk7CiAKIAkvKiBPbmx5IGNvc21ldGljcyAq
LwpkaWZmIC0tZ2l0IGEvYXJjaC9zMzkwL21tL3ZtZW0uYyBiL2FyY2gvczM5MC9tbS92bWVtLmMK
aW5kZXggMWFlZDFhNGRmYzJkLi42N2E2MTRhOWI3N2MgMTAwNjQ0Ci0tLSBhL2FyY2gvczM5MC9t
bS92bWVtLmMKKysrIGIvYXJjaC9zMzkwL21tL3ZtZW0uYwpAQCAtNTU0LDEwICs1NTQsMTEgQEAg
aW50IHZtZW1fYWRkX21hcHBpbmcodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBz
aXplKQogICovCiB2b2lkIF9faW5pdCB2bWVtX21hcF9pbml0KHZvaWQpCiB7Ci0Jc3RydWN0IG1l
bWJsb2NrX3JlZ2lvbiAqcmVnOworCXBoeXNfYWRkcl90IGJhc2UsIGVuZDsKKwl1NjQgaTsKIAot
CWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKQotCQl2bWVtX2FkZF9yYW5nZShyZWctPmJh
c2UsIHJlZy0+c2l6ZSk7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZiYXNlLCAmZW5kKQorCQl2
bWVtX2FkZF9yYW5nZShiYXNlLCBlbmQgLSBiYXNlKTsKIAlfX3NldF9tZW1vcnkoKHVuc2lnbmVk
IGxvbmcpX3N0ZXh0LAogCQkgICAgICh1bnNpZ25lZCBsb25nKShfZXRleHQgLSBfc3RleHQpID4+
IFBBR0VfU0hJRlQsCiAJCSAgICAgU0VUX01FTU9SWV9STyB8IFNFVF9NRU1PUllfWCk7CmRpZmYg
LS1naXQgYS9hcmNoL3NwYXJjL21tL2luaXRfNjQuYyBiL2FyY2gvc3BhcmMvbW0vaW5pdF82NC5j
CmluZGV4IGZhZDZkMzEyOTkwNC4uOTZlZGY2NGQ0ZmIzIDEwMDY0NAotLS0gYS9hcmNoL3NwYXJj
L21tL2luaXRfNjQuYworKysgYi9hcmNoL3NwYXJjL21tL2luaXRfNjQuYwpAQCAtMTE5MiwxOCAr
MTE5MiwxNCBAQCBpbnQgb2Zfbm9kZV90b19uaWQoc3RydWN0IGRldmljZV9ub2RlICpkcCkKIAog
c3RhdGljIHZvaWQgX19pbml0IGFkZF9ub2RlX3Jhbmdlcyh2b2lkKQogewotCXN0cnVjdCBtZW1i
bG9ja19yZWdpb24gKnJlZzsKKwlwaHlzX2FkZHJfdCBzdGFydCwgZW5kOwogCXVuc2lnbmVkIGxv
bmcgcHJldl9tYXg7CisJdTY0IGk7CiAKIG1lbWJsb2NrX3Jlc2l6ZWQ6CiAJcHJldl9tYXggPSBt
ZW1ibG9jay5tZW1vcnkubWF4OwogCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsK
LQkJdW5zaWduZWQgbG9uZyBzaXplID0gcmVnLT5zaXplOwotCQl1bnNpZ25lZCBsb25nIHN0YXJ0
LCBlbmQ7Ci0KLQkJc3RhcnQgPSByZWctPmJhc2U7Ci0JCWVuZCA9IHN0YXJ0ICsgc2l6ZTsKKwlm
b3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKSB7CiAJCXdoaWxlIChzdGFydCA8IGVu
ZCkgewogCQkJdW5zaWduZWQgbG9uZyB0aGlzX2VuZDsKIAkJCWludCBuaWQ7CkBAIC0xMjExLDcg
KzEyMDcsNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgYWRkX25vZGVfcmFuZ2VzKHZvaWQpCiAJCQl0
aGlzX2VuZCA9IG1lbWJsb2NrX25pZF9yYW5nZShzdGFydCwgZW5kLCAmbmlkKTsKIAogCQkJbnVt
YWRiZygiU2V0dGluZyBtZW1ibG9jayBOVU1BIG5vZGUgbmlkWyVkXSAiCi0JCQkJInN0YXJ0WyVs
eF0gZW5kWyVseF1cbiIsCisJCQkJInN0YXJ0WyVsbHhdIGVuZFslbHhdXG4iLAogCQkJCW5pZCwg
c3RhcnQsIHRoaXNfZW5kKTsKIAogCQkJbWVtYmxvY2tfc2V0X25vZGUoc3RhcnQsIHRoaXNfZW5k
IC0gc3RhcnQsCmRpZmYgLS1naXQgYS9kcml2ZXJzL2J1cy9tdmVidS1tYnVzLmMgYi9kcml2ZXJz
L2J1cy9tdmVidS1tYnVzLmMKaW5kZXggNWIyYTExYTg4OTUxLi4yNTE5Y2VlZGU2NGIgMTAwNjQ0
Ci0tLSBhL2RyaXZlcnMvYnVzL212ZWJ1LW1idXMuYworKysgYi9kcml2ZXJzL2J1cy9tdmVidS1t
YnVzLmMKQEAgLTYxMCwyMyArNjEwLDIzIEBAIHN0YXRpYyB1bnNpZ25lZCBpbnQgYXJtYWRhX3hw
X21idXNfd2luX3JlbWFwX29mZnNldChpbnQgd2luKQogc3RhdGljIHZvaWQgX19pbml0CiBtdmVi
dV9tYnVzX2ZpbmRfYnJpZGdlX2hvbGUodWludDY0X3QgKnN0YXJ0LCB1aW50NjRfdCAqZW5kKQog
ewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnI7Ci0JdWludDY0X3QgcyA9IDA7CisJcGh5c19h
ZGRyX3QgcmVnX3N0YXJ0LCByZWdfZW5kOworCXVpbnQ2NF90IGksIHMgPSAwOwogCi0JZm9yX2Vh
Y2hfbWVtYmxvY2sobWVtb3J5LCByKSB7CisJZm9yX2VhY2hfbWVtX3JhbmdlKGksICZyZWdfc3Rh
cnQsICZyZWdfZW5kKSB7CiAJCS8qCiAJCSAqIFRoaXMgcGFydCBvZiB0aGUgbWVtb3J5IGlzIGFi
b3ZlIDQgR0IsIHNvIHdlIGRvbid0CiAJCSAqIGNhcmUgZm9yIHRoZSBNQnVzIGJyaWRnZSBob2xl
LgogCQkgKi8KLQkJaWYgKHItPmJhc2UgPj0gMHgxMDAwMDAwMDBVTEwpCisJCWlmIChyZWdfc3Rh
cnQgPj0gMHgxMDAwMDAwMDBVTEwpCiAJCQljb250aW51ZTsKIAogCQkvKgogCQkgKiBUaGUgTUJ1
cyBicmlkZ2UgaG9sZSBpcyBhdCB0aGUgZW5kIG9mIHRoZSBSQU0gdW5kZXIKIAkJICogdGhlIDQg
R0IgbGltaXQuCiAJCSAqLwotCQlpZiAoci0+YmFzZSArIHItPnNpemUgPiBzKQotCQkJcyA9IHIt
PmJhc2UgKyByLT5zaXplOworCQlpZiAocmVnX2VuZCA+IHMpCisJCQlzID0gcmVnX2VuZDsKIAl9
CiAKIAkqc3RhcnQgPSBzOwotLSAKMi4yNi4yCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fXwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMu
bGlicmVjb3Jlcy5vcmcKaHR0cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVu
cmlzYwo=
