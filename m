Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 1E7E44B8917
	for <lists+openrisc@lfdr.de>; Wed, 16 Feb 2022 14:17:47 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id F024124830;
	Wed, 16 Feb 2022 14:17:46 +0100 (CET)
Received: from dfw.source.kernel.org (dfw.source.kernel.org [139.178.84.217])
 by mail.librecores.org (Postfix) with ESMTPS id 91C8E24822
 for <openrisc@lists.librecores.org>; Wed, 16 Feb 2022 14:17:45 +0100 (CET)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by dfw.source.kernel.org (Postfix) with ESMTPS id 7F31A616B7;
 Wed, 16 Feb 2022 13:17:44 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 7EE9AC004E1;
 Wed, 16 Feb 2022 13:17:34 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=k20201202; t=1645017464;
 bh=2V/jchBP8kBRIT0s1XOrHdI0jJSQB1mfHKldiUel4c8=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=KuFPO1lFLaWvnXAnPRSPXDKFqb7rJ5xDcxE3HOkEkh9mpGyy2aBpcXuJFHyP2BdoZ
 iIp4jmx03VzbvjY3jDx2mjcAGWZ3M6b6KGO1G7/x3hr1VZyZUWQyAaOuIO6LczuG3t
 s3iHx0UgID4/K2IxZ+OKZBRd7zsoJb5hOURmNwJqU0plIAWdvYpmL3HekEpFCVAMfr
 8WnO33IK+foc6PCI93ZQtqdAVfWmZsvEAd6G74UkXXzBrCyN8rQw5fAx9YmeYApaD7
 +fwr8gc1dQ2Qw7KQuvm+3OcUmMsSGeZekIVcm/zvfN+x6o1AbHZuhJFFncpqvvxDOX
 kweEeDF9oCwgA==
From: Arnd Bergmann <arnd@kernel.org>
To: Linus Torvalds <torvalds@linux-foundation.org>,
 Christoph Hellwig <hch@lst.de>, linux-arch@vger.kernel.org,
 linux-mm@kvack.org, linux-api@vger.kernel.org, arnd@arndb.de,
 linux-kernel@vger.kernel.org, viro@zeniv.linux.org.uk
Date: Wed, 16 Feb 2022 14:13:26 +0100
Message-Id: <20220216131332.1489939-13-arnd@kernel.org>
X-Mailer: git-send-email 2.29.2
In-Reply-To: <20220216131332.1489939-1-arnd@kernel.org>
References: <20220216131332.1489939-1-arnd@kernel.org>
MIME-Version: 1.0
Subject: [OpenRISC] [PATCH v2 12/18] uaccess: fix type mismatch warnings
 from access_ok()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: mark.rutland@arm.com, dalias@libc.org, linux-ia64@vger.kernel.org,
 linux-sh@vger.kernel.org, peterz@infradead.org, jcmvbkbc@gmail.com,
 guoren@kernel.org, sparclinux@vger.kernel.org, linux-hexagon@vger.kernel.org,
 linux-riscv@lists.infradead.org, will@kernel.org, ardb@kernel.org,
 linux-s390@vger.kernel.org, kernel test robot <lkp@intel.com>,
 bcain@codeaurora.org, mpe@ellerman.id.au, deller@gmx.de, x86@kernel.org,
 linux@armlinux.org.uk, linux-csky@vger.kernel.org, mingo@redhat.com,
 linux-snps-arc@lists.infradead.org, linux-xtensa@linux-xtensa.org,
 hca@linux.ibm.com, linux-alpha@vger.kernel.org, linux-um@lists.infradead.org,
 linux-m68k@lists.linux-m68k.org, openrisc@lists.librecores.org,
 green.hu@gmail.com, monstr@monstr.eu, tsbogend@alpha.franken.de,
 linux-parisc@vger.kernel.org, nickhu@andestech.com, linux-mips@vger.kernel.org,
 dinguyen@kernel.org, ebiederm@xmission.com, richard@nod.at,
 akpm@linux-foundation.org, linuxppc-dev@lists.ozlabs.org, davem@davemloft.net
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogQXJuZCBCZXJnbWFubiA8YXJuZEBhcm5kYi5kZT4KCk9uIHNvbWUgYXJjaGl0ZWN0dXJl
cywgYWNjZXNzX29rKCkgZG9lcyBub3QgZG8gYW55IGFyZ3VtZW50IHR5cGUKY2hlY2tpbmcsIHNv
IHJlcGxhY2luZyB0aGUgZGVmaW5pdGlvbiB3aXRoIGEgZ2VuZXJpYyBvbmUgY2F1c2VzCmEgZmV3
IHdhcm5pbmdzIGZvciBoYXJtbGVzcyBpc3N1ZXMgdGhhdCB3ZXJlIG5ldmVyIGNhdWdodCBiZWZv
cmUuCgpGaXggdGhlIG9uZXMgdGhhdCBJIGZvdW5kIGVpdGhlciB0aHJvdWdoIG15IG93biB0ZXN0
IGJ1aWxkcyBvcgp0aGF0IHdlcmUgcmVwb3J0ZWQgYnkgdGhlIDAtZGF5IGJvdC4KClJlcG9ydGVk
LWJ5OiBrZXJuZWwgdGVzdCByb2JvdCA8bGtwQGludGVsLmNvbT4KU2lnbmVkLW9mZi1ieTogQXJu
ZCBCZXJnbWFubiA8YXJuZEBhcm5kYi5kZT4KLS0tCiBhcmNoL2FyYy9rZXJuZWwvcHJvY2Vzcy5j
ICAgICAgICAgICB8ICAyICstCiBhcmNoL2FybS9rZXJuZWwvc3dwX2VtdWxhdGUuYyAgICAgICB8
ICAyICstCiBhcmNoL2FybS9rZXJuZWwvdHJhcHMuYyAgICAgICAgICAgICB8ICAyICstCiBhcmNo
L2Nza3kva2VybmVsL3NpZ25hbC5jICAgICAgICAgICB8ICAyICstCiBhcmNoL21pcHMvc2lieXRl
L2NvbW1vbi9zYl90YnByb2YuYyB8ICA2ICsrKy0tLQogYXJjaC9uaW9zMi9rZXJuZWwvc2lnbmFs
LmMgICAgICAgICAgfCAyMCArKysrKysrKysrKy0tLS0tLS0tLQogYXJjaC9wb3dlcnBjL2xpYi9z
c3RlcC5jICAgICAgICAgICAgfCAgNCArKy0tCiBhcmNoL3Jpc2N2L2tlcm5lbC9wZXJmX2NhbGxj
aGFpbi5jICB8ICAyICstCiBhcmNoL3NwYXJjL2tlcm5lbC9zaWduYWxfMzIuYyAgICAgICB8ICAy
ICstCiBsaWIvdGVzdF9sb2NrdXAuYyAgICAgICAgICAgICAgICAgICB8ICA0ICsrLS0KIDEwIGZp
bGVzIGNoYW5nZWQsIDI0IGluc2VydGlvbnMoKyksIDIyIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdp
dCBhL2FyY2gvYXJjL2tlcm5lbC9wcm9jZXNzLmMgYi9hcmNoL2FyYy9rZXJuZWwvcHJvY2Vzcy5j
CmluZGV4IDhlOTAwNTJmNmYwNS4uNWY3ZjVhYWIzNjFmIDEwMDY0NAotLS0gYS9hcmNoL2FyYy9r
ZXJuZWwvcHJvY2Vzcy5jCisrKyBiL2FyY2gvYXJjL2tlcm5lbC9wcm9jZXNzLmMKQEAgLTQzLDcg
KzQzLDcgQEAgU1lTQ0FMTF9ERUZJTkUwKGFyY19nZXR0bHMpCiAJcmV0dXJuIHRhc2tfdGhyZWFk
X2luZm8oY3VycmVudCktPnRocl9wdHI7CiB9CiAKLVNZU0NBTExfREVGSU5FMyhhcmNfdXNyX2Nt
cHhjaGcsIGludCAqLCB1YWRkciwgaW50LCBleHBlY3RlZCwgaW50LCBuZXcpCitTWVNDQUxMX0RF
RklORTMoYXJjX3Vzcl9jbXB4Y2hnLCBpbnQgX191c2VyICosIHVhZGRyLCBpbnQsIGV4cGVjdGVk
LCBpbnQsIG5ldykKIHsKIAlzdHJ1Y3QgcHRfcmVncyAqcmVncyA9IGN1cnJlbnRfcHRfcmVncygp
OwogCXUzMiB1dmFsOwpkaWZmIC0tZ2l0IGEvYXJjaC9hcm0va2VybmVsL3N3cF9lbXVsYXRlLmMg
Yi9hcmNoL2FybS9rZXJuZWwvc3dwX2VtdWxhdGUuYwppbmRleCA2MTY2YmEzOGJmOTkuLmI3NGJm
Y2Y5NGZiMSAxMDA2NDQKLS0tIGEvYXJjaC9hcm0va2VybmVsL3N3cF9lbXVsYXRlLmMKKysrIGIv
YXJjaC9hcm0va2VybmVsL3N3cF9lbXVsYXRlLmMKQEAgLTE5NSw3ICsxOTUsNyBAQCBzdGF0aWMg
aW50IHN3cF9oYW5kbGVyKHN0cnVjdCBwdF9yZWdzICpyZWdzLCB1bnNpZ25lZCBpbnQgaW5zdHIp
CiAJCSBkZXN0cmVnLCBFWFRSQUNUX1JFR19OVU0oaW5zdHIsIFJUMl9PRkZTRVQpLCBkYXRhKTsK
IAogCS8qIENoZWNrIGFjY2VzcyBpbiByZWFzb25hYmxlIGFjY2VzcyByYW5nZSBmb3IgYm90aCBT
V1AgYW5kIFNXUEIgKi8KLQlpZiAoIWFjY2Vzc19vaygoYWRkcmVzcyAmIH4zKSwgNCkpIHsKKwlp
ZiAoIWFjY2Vzc19vaygodm9pZCBfX3VzZXIgKikoYWRkcmVzcyAmIH4zKSwgNCkpIHsKIAkJcHJf
ZGVidWcoIlNXUHtCfSBlbXVsYXRpb246IGFjY2VzcyB0byAlcCBub3QgYWxsb3dlZCFcbiIsCiAJ
CQkgKHZvaWQgKilhZGRyZXNzKTsKIAkJcmVzID0gLUVGQVVMVDsKZGlmZiAtLWdpdCBhL2FyY2gv
YXJtL2tlcm5lbC90cmFwcy5jIGIvYXJjaC9hcm0va2VybmVsL3RyYXBzLmMKaW5kZXggZGEwNGVk
ODU4NTVhLi4yNmM4YzgyNzYyOTcgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL2tlcm5lbC90cmFwcy5j
CisrKyBiL2FyY2gvYXJtL2tlcm5lbC90cmFwcy5jCkBAIC01NzYsNyArNTc2LDcgQEAgZG9fY2Fj
aGVfb3AodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBlbmQsIGludCBmbGFncykK
IAlpZiAoZW5kIDwgc3RhcnQgfHwgZmxhZ3MpCiAJCXJldHVybiAtRUlOVkFMOwogCi0JaWYgKCFh
Y2Nlc3Nfb2soc3RhcnQsIGVuZCAtIHN0YXJ0KSkKKwlpZiAoIWFjY2Vzc19vaygodm9pZCBfX3Vz
ZXIgKilzdGFydCwgZW5kIC0gc3RhcnQpKQogCQlyZXR1cm4gLUVGQVVMVDsKIAogCXJldHVybiBf
X2RvX2NhY2hlX29wKHN0YXJ0LCBlbmQpOwpkaWZmIC0tZ2l0IGEvYXJjaC9jc2t5L2tlcm5lbC9z
aWduYWwuYyBiL2FyY2gvY3NreS9rZXJuZWwvc2lnbmFsLmMKaW5kZXggYzdiNzYzZDJmNTI2Li44
ODY3ZGRmM2U2YzcgMTAwNjQ0Ci0tLSBhL2FyY2gvY3NreS9rZXJuZWwvc2lnbmFsLmMKKysrIGIv
YXJjaC9jc2t5L2tlcm5lbC9zaWduYWwuYwpAQCAtMTM2LDcgKzEzNiw3IEBAIHN0YXRpYyBpbmxp
bmUgdm9pZCBfX3VzZXIgKmdldF9zaWdmcmFtZShzdHJ1Y3Qga3NpZ25hbCAqa3NpZywKIHN0YXRp
YyBpbnQKIHNldHVwX3J0X2ZyYW1lKHN0cnVjdCBrc2lnbmFsICprc2lnLCBzaWdzZXRfdCAqc2V0
LCBzdHJ1Y3QgcHRfcmVncyAqcmVncykKIHsKLQlzdHJ1Y3QgcnRfc2lnZnJhbWUgKmZyYW1lOwor
CXN0cnVjdCBydF9zaWdmcmFtZSBfX3VzZXIgKmZyYW1lOwogCWludCBlcnIgPSAwOwogCiAJZnJh
bWUgPSBnZXRfc2lnZnJhbWUoa3NpZywgcmVncywgc2l6ZW9mKCpmcmFtZSkpOwpkaWZmIC0tZ2l0
IGEvYXJjaC9taXBzL3NpYnl0ZS9jb21tb24vc2JfdGJwcm9mLmMgYi9hcmNoL21pcHMvc2lieXRl
L2NvbW1vbi9zYl90YnByb2YuYwppbmRleCBmODBkN2E3MTAzMzMuLjAxZDAwYjg3ZDBmNSAxMDA2
NDQKLS0tIGEvYXJjaC9taXBzL3NpYnl0ZS9jb21tb24vc2JfdGJwcm9mLmMKKysrIGIvYXJjaC9t
aXBzL3NpYnl0ZS9jb21tb24vc2JfdGJwcm9mLmMKQEAgLTQzNywxMyArNDM3LDEzIEBAIHN0YXRp
YyBpbnQgc2Jwcm9mX3RiX3JlbGVhc2Uoc3RydWN0IGlub2RlICppbm9kZSwgc3RydWN0IGZpbGUg
KmZpbHApCiAJcmV0dXJuIDA7CiB9CiAKLXN0YXRpYyBzc2l6ZV90IHNicHJvZl90Yl9yZWFkKHN0
cnVjdCBmaWxlICpmaWxwLCBjaGFyICpidWYsCitzdGF0aWMgc3NpemVfdCBzYnByb2ZfdGJfcmVh
ZChzdHJ1Y3QgZmlsZSAqZmlscCwgY2hhciBfX3VzZXIgKmJ1ZiwKIAkJCSAgICAgIHNpemVfdCBz
aXplLCBsb2ZmX3QgKm9mZnApCiB7CiAJaW50IGN1cl9zYW1wbGUsIHNhbXBsZV9vZmYsIGN1cl9j
b3VudCwgc2FtcGxlX2xlZnQ7CiAJY2hhciAqc3JjOwogCWludCAgIGNvdW50ICAgPQkgMDsKLQlj
aGFyICpkZXN0ICAgID0JIGJ1ZjsKKwljaGFyIF9fdXNlciAqZGVzdCA9IGJ1ZjsKIAlsb25nICBj
dXJfb2ZmID0gKm9mZnA7CiAKIAlpZiAoIWFjY2Vzc19vayhidWYsIHNpemUpKQpAQCAtNTEyLDcg
KzUxMiw3IEBAIHN0YXRpYyBsb25nIHNicHJvZl90Yl9pb2N0bChzdHJ1Y3QgZmlsZSAqZmlscCwK
IAkJaWYgKGVycikKIAkJCWJyZWFrOwogCi0JCWVyciA9IHB1dF91c2VyKFRCX0ZVTEwsIChpbnQg
KikgYXJnKTsKKwkJZXJyID0gcHV0X3VzZXIoVEJfRlVMTCwgKGludCBfX3VzZXIgKikgYXJnKTsK
IAkJYnJlYWs7CiAJfQogCmRpZmYgLS1naXQgYS9hcmNoL25pb3MyL2tlcm5lbC9zaWduYWwuYyBi
L2FyY2gvbmlvczIva2VybmVsL3NpZ25hbC5jCmluZGV4IDIwMDlhZTJkM2MzYi4uMzg2ZTQ2NDQz
YjYwIDEwMDY0NAotLS0gYS9hcmNoL25pb3MyL2tlcm5lbC9zaWduYWwuYworKysgYi9hcmNoL25p
b3MyL2tlcm5lbC9zaWduYWwuYwpAQCAtMzYsMTAgKzM2LDEwIEBAIHN0cnVjdCBydF9zaWdmcmFt
ZSB7CiAKIHN0YXRpYyBpbmxpbmUgaW50IHJ0X3Jlc3RvcmVfdWNvbnRleHQoc3RydWN0IHB0X3Jl
Z3MgKnJlZ3MsCiAJCQkJCXN0cnVjdCBzd2l0Y2hfc3RhY2sgKnN3LAotCQkJCQlzdHJ1Y3QgdWNv
bnRleHQgKnVjLCBpbnQgKnByMikKKwkJCQkJc3RydWN0IHVjb250ZXh0IF9fdXNlciAqdWMsIGlu
dCAqcHIyKQogewogCWludCB0ZW1wOwotCXVuc2lnbmVkIGxvbmcgKmdyZWdzID0gdWMtPnVjX21j
b250ZXh0LmdyZWdzOworCXVuc2lnbmVkIGxvbmcgX191c2VyICpncmVncyA9IHVjLT51Y19tY29u
dGV4dC5ncmVnczsKIAlpbnQgZXJyOwogCiAJLyogQWx3YXlzIG1ha2UgYW55IHBlbmRpbmcgcmVz
dGFydGVkIHN5c3RlbSBjYWxscyByZXR1cm4gLUVJTlRSICovCkBAIC0xMDIsMTAgKzEwMiwxMSBA
QCBhc21saW5rYWdlIGludCBkb19ydF9zaWdyZXR1cm4oc3RydWN0IHN3aXRjaF9zdGFjayAqc3cp
CiB7CiAJc3RydWN0IHB0X3JlZ3MgKnJlZ3MgPSAoc3RydWN0IHB0X3JlZ3MgKikoc3cgKyAxKTsK
IAkvKiBWZXJpZnksIGNhbiB3ZSBmb2xsb3cgdGhlIHN0YWNrIGJhY2sgKi8KLQlzdHJ1Y3QgcnRf
c2lnZnJhbWUgKmZyYW1lID0gKHN0cnVjdCBydF9zaWdmcmFtZSAqKSByZWdzLT5zcDsKKwlzdHJ1
Y3QgcnRfc2lnZnJhbWUgX191c2VyICpmcmFtZTsKIAlzaWdzZXRfdCBzZXQ7CiAJaW50IHJ2YWw7
CiAKKwlmcmFtZSA9IChzdHJ1Y3QgcnRfc2lnZnJhbWUgX191c2VyICopIHJlZ3MtPnNwOwogCWlm
ICghYWNjZXNzX29rKGZyYW1lLCBzaXplb2YoKmZyYW1lKSkpCiAJCWdvdG8gYmFkZnJhbWU7CiAK
QEAgLTEyNCwxMCArMTI1LDEwIEBAIGFzbWxpbmthZ2UgaW50IGRvX3J0X3NpZ3JldHVybihzdHJ1
Y3Qgc3dpdGNoX3N0YWNrICpzdykKIAlyZXR1cm4gMDsKIH0KIAotc3RhdGljIGlubGluZSBpbnQg
cnRfc2V0dXBfdWNvbnRleHQoc3RydWN0IHVjb250ZXh0ICp1Yywgc3RydWN0IHB0X3JlZ3MgKnJl
Z3MpCitzdGF0aWMgaW5saW5lIGludCBydF9zZXR1cF91Y29udGV4dChzdHJ1Y3QgdWNvbnRleHQg
X191c2VyICp1Yywgc3RydWN0IHB0X3JlZ3MgKnJlZ3MpCiB7CiAJc3RydWN0IHN3aXRjaF9zdGFj
ayAqc3cgPSAoc3RydWN0IHN3aXRjaF9zdGFjayAqKXJlZ3MgLSAxOwotCXVuc2lnbmVkIGxvbmcg
KmdyZWdzID0gdWMtPnVjX21jb250ZXh0LmdyZWdzOworCXVuc2lnbmVkIGxvbmcgX191c2VyICpn
cmVncyA9IHVjLT51Y19tY29udGV4dC5ncmVnczsKIAlpbnQgZXJyID0gMDsKIAogCWVyciB8PSBf
X3B1dF91c2VyKE1DT05URVhUX1ZFUlNJT04sICZ1Yy0+dWNfbWNvbnRleHQudmVyc2lvbik7CkBA
IC0xNjIsOCArMTYzLDkgQEAgc3RhdGljIGlubGluZSBpbnQgcnRfc2V0dXBfdWNvbnRleHQoc3Ry
dWN0IHVjb250ZXh0ICp1Yywgc3RydWN0IHB0X3JlZ3MgKnJlZ3MpCiAJcmV0dXJuIGVycjsKIH0K
IAotc3RhdGljIGlubGluZSB2b2lkICpnZXRfc2lnZnJhbWUoc3RydWN0IGtzaWduYWwgKmtzaWcs
IHN0cnVjdCBwdF9yZWdzICpyZWdzLAotCQkJCSBzaXplX3QgZnJhbWVfc2l6ZSkKK3N0YXRpYyBp
bmxpbmUgdm9pZCBfX3VzZXIgKmdldF9zaWdmcmFtZShzdHJ1Y3Qga3NpZ25hbCAqa3NpZywKKwkJ
CQkJc3RydWN0IHB0X3JlZ3MgKnJlZ3MsCisJCQkJCXNpemVfdCBmcmFtZV9zaXplKQogewogCXVu
c2lnbmVkIGxvbmcgdXNwOwogCkBAIC0xNzQsMTMgKzE3NiwxMyBAQCBzdGF0aWMgaW5saW5lIHZv
aWQgKmdldF9zaWdmcmFtZShzdHJ1Y3Qga3NpZ25hbCAqa3NpZywgc3RydWN0IHB0X3JlZ3MgKnJl
Z3MsCiAJdXNwID0gc2lnc3AodXNwLCBrc2lnKTsKIAogCS8qIFZlcmlmeSwgaXMgaXQgMzIgb3Ig
NjQgYml0IGFsaWduZWQgKi8KLQlyZXR1cm4gKHZvaWQgKikoKHVzcCAtIGZyYW1lX3NpemUpICYg
LThVTCk7CisJcmV0dXJuICh2b2lkIF9fdXNlciAqKSgodXNwIC0gZnJhbWVfc2l6ZSkgJiAtOFVM
KTsKIH0KIAogc3RhdGljIGludCBzZXR1cF9ydF9mcmFtZShzdHJ1Y3Qga3NpZ25hbCAqa3NpZywg
c2lnc2V0X3QgKnNldCwKIAkJCSAgc3RydWN0IHB0X3JlZ3MgKnJlZ3MpCiB7Ci0Jc3RydWN0IHJ0
X3NpZ2ZyYW1lICpmcmFtZTsKKwlzdHJ1Y3QgcnRfc2lnZnJhbWUgX191c2VyICpmcmFtZTsKIAlp
bnQgZXJyID0gMDsKIAogCWZyYW1lID0gZ2V0X3NpZ2ZyYW1lKGtzaWcsIHJlZ3MsIHNpemVvZigq
ZnJhbWUpKTsKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9saWIvc3N0ZXAuYyBiL2FyY2gvcG93
ZXJwYy9saWIvc3N0ZXAuYwppbmRleCBhOTRiMGNkMGJkYzUuLjAyMmQyM2FlMzAwYiAxMDA2NDQK
LS0tIGEvYXJjaC9wb3dlcnBjL2xpYi9zc3RlcC5jCisrKyBiL2FyY2gvcG93ZXJwYy9saWIvc3N0
ZXAuYwpAQCAtMTEyLDkgKzExMiw5IEBAIHN0YXRpYyBub2twcm9iZV9pbmxpbmUgbG9uZyBhZGRy
ZXNzX29rKHN0cnVjdCBwdF9yZWdzICpyZWdzLAogewogCWlmICghdXNlcl9tb2RlKHJlZ3MpKQog
CQlyZXR1cm4gMTsKLQlpZiAoX19hY2Nlc3Nfb2soZWEsIG5iKSkKKwlpZiAoYWNjZXNzX29rKCh2
b2lkIF9fdXNlciAqKWVhLCBuYikpCiAJCXJldHVybiAxOwotCWlmIChfX2FjY2Vzc19vayhlYSwg
MSkpCisJaWYgKGFjY2Vzc19vaygodm9pZCBfX3VzZXIgKillYSwgMSkpCiAJCS8qIEFjY2VzcyBv
dmVybGFwcyB0aGUgZW5kIG9mIHRoZSB1c2VyIHJlZ2lvbiAqLwogCQlyZWdzLT5kYXIgPSBUQVNL
X1NJWkVfTUFYIC0gMTsKIAllbHNlCmRpZmYgLS1naXQgYS9hcmNoL3Jpc2N2L2tlcm5lbC9wZXJm
X2NhbGxjaGFpbi5jIGIvYXJjaC9yaXNjdi9rZXJuZWwvcGVyZl9jYWxsY2hhaW4uYwppbmRleCAx
ZmMwNzViOGY3NjQuLmYwYzdiYjk4MTE5YSAxMDA2NDQKLS0tIGEvYXJjaC9yaXNjdi9rZXJuZWwv
cGVyZl9jYWxsY2hhaW4uYworKysgYi9hcmNoL3Jpc2N2L2tlcm5lbC9wZXJmX2NhbGxjaGFpbi5j
CkBAIC0xNSw3ICsxNSw3IEBAIHN0YXRpYyB1bnNpZ25lZCBsb25nIHVzZXJfYmFja3RyYWNlKHN0
cnVjdCBwZXJmX2NhbGxjaGFpbl9lbnRyeV9jdHggKmVudHJ5LAogewogCXN0cnVjdCBzdGFja2Zy
YW1lIGJ1ZnRhaWw7CiAJdW5zaWduZWQgbG9uZyByYSA9IDA7Ci0JdW5zaWduZWQgbG9uZyAqdXNl
cl9mcmFtZV90YWlsID0KKwl1bnNpZ25lZCBsb25nIF9fdXNlciAqdXNlcl9mcmFtZV90YWlsID0K
IAkJCSh1bnNpZ25lZCBsb25nICopKGZwIC0gc2l6ZW9mKHN0cnVjdCBzdGFja2ZyYW1lKSk7CiAK
IAkvKiBDaGVjayBhY2Nlc3NpYmlsaXR5IG9mIG9uZSBzdHJ1Y3QgZnJhbWVfdGFpbCBiZXlvbmQg
Ki8KZGlmZiAtLWdpdCBhL2FyY2gvc3BhcmMva2VybmVsL3NpZ25hbF8zMi5jIGIvYXJjaC9zcGFy
Yy9rZXJuZWwvc2lnbmFsXzMyLmMKaW5kZXggZmZhYjE2MzY5YmVhLi43NGY4MDQ0M2IxOTUgMTAw
NjQ0Ci0tLSBhL2FyY2gvc3BhcmMva2VybmVsL3NpZ25hbF8zMi5jCisrKyBiL2FyY2gvc3BhcmMv
a2VybmVsL3NpZ25hbF8zMi5jCkBAIC02NSw3ICs2NSw3IEBAIHN0cnVjdCBydF9zaWduYWxfZnJh
bWUgewogICovCiBzdGF0aWMgaW5saW5lIGJvb2wgaW52YWxpZF9mcmFtZV9wb2ludGVyKHZvaWQg
X191c2VyICpmcCwgaW50IGZwbGVuKQogewotCWlmICgoKCh1bnNpZ25lZCBsb25nKSBmcCkgJiAx
NSkgfHwgIV9fYWNjZXNzX29rKCh1bnNpZ25lZCBsb25nKWZwLCBmcGxlbikpCisJaWYgKCgoKHVu
c2lnbmVkIGxvbmcpIGZwKSAmIDE1KSB8fCAhYWNjZXNzX29rKGZwLCBmcGxlbikpCiAJCXJldHVy
biB0cnVlOwogCiAJcmV0dXJuIGZhbHNlOwpkaWZmIC0tZ2l0IGEvbGliL3Rlc3RfbG9ja3VwLmMg
Yi9saWIvdGVzdF9sb2NrdXAuYwppbmRleCA5MDZiNTk4NzQwYTcuLjZhMGYzMjlhNzk0YSAxMDA2
NDQKLS0tIGEvbGliL3Rlc3RfbG9ja3VwLmMKKysrIGIvbGliL3Rlc3RfbG9ja3VwLmMKQEAgLTQx
Nyw4ICs0MTcsOCBAQCBzdGF0aWMgYm9vbCB0ZXN0X2tlcm5lbF9wdHIodW5zaWduZWQgbG9uZyBh
ZGRyLCBpbnQgc2l6ZSkKIAkJcmV0dXJuIGZhbHNlOwogCiAJLyogc2hvdWxkIGJlIGF0IGxlYXN0
IHJlYWRhYmxlIGtlcm5lbCBhZGRyZXNzICovCi0JaWYgKGFjY2Vzc19vayhwdHIsIDEpIHx8Ci0J
ICAgIGFjY2Vzc19vayhwdHIgKyBzaXplIC0gMSwgMSkgfHwKKwlpZiAoYWNjZXNzX29rKCh2b2lk
IF9fdXNlciAqKXB0ciwgMSkgfHwKKwkgICAgYWNjZXNzX29rKCh2b2lkIF9fdXNlciAqKXB0ciAr
IHNpemUgLSAxLCAxKSB8fAogCSAgICBnZXRfa2VybmVsX25vZmF1bHQoYnVmLCBwdHIpIHx8CiAJ
ICAgIGdldF9rZXJuZWxfbm9mYXVsdChidWYsIHB0ciArIHNpemUgLSAxKSkgewogCQlwcl9lcnIo
ImludmFsaWQga2VybmVsIHB0cjogJSNseFxuIiwgYWRkcik7Ci0tIAoyLjI5LjIKCl9fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcg
bGlzdApPcGVuUklTQ0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29y
ZXMub3JnL2xpc3RpbmZvL29wZW5yaXNjCg==
