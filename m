Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 05E96480FA1
	for <lists+openrisc@lfdr.de>; Wed, 29 Dec 2021 05:43:12 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id DBE14242FA;
	Wed, 29 Dec 2021 05:43:11 +0100 (CET)
Received: from mail-pl1-f174.google.com (mail-pl1-f174.google.com
 [209.85.214.174])
 by mail.librecores.org (Postfix) with ESMTPS id BAF1124303
 for <openrisc@lists.librecores.org>; Wed, 29 Dec 2021 05:43:09 +0100 (CET)
Received: by mail-pl1-f174.google.com with SMTP id j13so15041313plx.4
 for <openrisc@lists.librecores.org>; Tue, 28 Dec 2021 20:43:09 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=from:to:cc:subject:date:message-id:in-reply-to:references
 :mime-version:content-transfer-encoding;
 bh=4QKUeSYkcxtirCrhvGB4A+bp7xjmM1BvPV53aH2iJ/s=;
 b=jAzl8eF3mogGuSFHBlav9u8gEO6Yb8po7IJTMRckx7bHcV4rH935nn/G7fT0SiqGF6
 5dDuv2Vnkcsmsq5hjMsworWPAfJIvyxufNydNNN/LVsXKcRBx+kXvNngmFzSllmHlIJa
 VjaY4asGKYYh1m0ioSTC+EKwctFT+ci7ledNzE/L274nB/fPGSzEHXcUGo3B6JbuXuAw
 KuHFlOxNXCkNQe9pWDgavLwE83z47OHtbOm3wS68W5CHwmS64mYJzFvDB4LDajFZkVLz
 QqD7h5b4RYpRpHyHlaRd2HPY23+xX3uzNA+1Aw4VN5NsuMhubQkSTDEbXuBwhioIJ9Nf
 tY/g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
 :references:mime-version:content-transfer-encoding;
 bh=4QKUeSYkcxtirCrhvGB4A+bp7xjmM1BvPV53aH2iJ/s=;
 b=zcEZF3NgmahaIQdGdHM5tckYbhQSPyVwSgT1BlD3WWd/Ko9qtoGfZWz2pKNes0/nkX
 wR93RSyM6LzbZ94yNCKpvBiwfpPi4zIzLC0RFeA4UGHs/qR0mxPpNk0CiyddU4KuYjSl
 fzp7mDWE3LwzJk5VEN7lZUB4aw40zw9rMi2MkdMffbdC7fJ2Dpd5jk3CwvkgBGITXOil
 YMj+gUp6cVJqtRy8C+Ml9etrhkziAO5+hmz0F22PMVXq3w95j5zA+P8VFBKPd0bOrSJh
 bR3oqriUi63iGKzKs8IOgE4VV244QDH+J+p5lS8ns8k4jtPgRBBw5S4OmqyFg9cWBUP/
 croA==
X-Gm-Message-State: AOAM530nnoovG+xPKVFfFozYTseSmXKqAclN50pi3Bgv4H5H/5i4+csC
 xBy94+jRwXn+1QPcBhyUYsB57NzgvsM=
X-Google-Smtp-Source: ABdhPJw9GtQ5KtvJXzcmS2uIvU3aW2BFB1+KJyvZiSzpEO2ymUHGkxUD18Vg+fFapMMT/p5whVdeGg==
X-Received: by 2002:a17:903:28e:b0:148:ef58:10d0 with SMTP id
 j14-20020a170903028e00b00148ef5810d0mr24786987plr.106.1640752988089; 
 Tue, 28 Dec 2021 20:43:08 -0800 (PST)
Received: from localhost ([2409:10:24a0:4700:e8ad:216a:2a9d:6d0c])
 by smtp.gmail.com with ESMTPSA id 13sm22503404pfm.161.2021.12.28.20.43.06
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Tue, 28 Dec 2021 20:43:07 -0800 (PST)
From: Stafford Horne <shorne@gmail.com>
To: GLIBC patches <libc-alpha@sourceware.org>
Date: Wed, 29 Dec 2021 13:42:42 +0900
Message-Id: <20211229044251.2203653-5-shorne@gmail.com>
X-Mailer: git-send-email 2.31.1
In-Reply-To: <20211229044251.2203653-1-shorne@gmail.com>
References: <20211229044251.2203653-1-shorne@gmail.com>
MIME-Version: 1.0
Subject: [OpenRISC] [PATCH v4 04/13] or1k: startup and dynamic linking code
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Openrisc <openrisc@lists.librecores.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

Q29kZSBmb3IgQyBydW50aW1lIHN0YXJ0dXAgYW5kIGR5bmFtaWMgbG9hZGluZyBpbmNsdWRpbmcg
UExUIGxheW91dC4KLS0tCiBzeXNkZXBzL29yMWsvYml0cy9saW5rLmggICB8ICA1NCArKysrKysr
CiBzeXNkZXBzL29yMWsvZGwtbWFjaGluZS5oICB8IDMwMCArKysrKysrKysrKysrKysrKysrKysr
KysrKysrKysrKysrKysrCiBzeXNkZXBzL29yMWsvZGwtc3RhcnQuUyAgICB8ICA5OCArKysrKysr
KysrKysKIHN5c2RlcHMvb3Ixay9sZHNvZGVmcy5oICAgIHwgIDQwICsrKysrCiBzeXNkZXBzL29y
MWsvc290cnVzcy1saWIuYyB8ICA1MSArKysrKysrCiBzeXNkZXBzL29yMWsvc3RhcnQuUyAgICAg
ICB8ICA5OSArKysrKysrKysrKysKIHN5c2RlcHMvb3Ixay90c3QtYXVkaXQuaCAgIHwgIDI0ICsr
KwogNyBmaWxlcyBjaGFuZ2VkLCA2NjYgaW5zZXJ0aW9ucygrKQogY3JlYXRlIG1vZGUgMTAwNjQ0
IHN5c2RlcHMvb3Ixay9iaXRzL2xpbmsuaAogY3JlYXRlIG1vZGUgMTAwNjQ0IHN5c2RlcHMvb3Ix
ay9kbC1tYWNoaW5lLmgKIGNyZWF0ZSBtb2RlIDEwMDY0NCBzeXNkZXBzL29yMWsvZGwtc3RhcnQu
UwogY3JlYXRlIG1vZGUgMTAwNjQ0IHN5c2RlcHMvb3Ixay9sZHNvZGVmcy5oCiBjcmVhdGUgbW9k
ZSAxMDA2NDQgc3lzZGVwcy9vcjFrL3NvdHJ1c3MtbGliLmMKIGNyZWF0ZSBtb2RlIDEwMDY0NCBz
eXNkZXBzL29yMWsvc3RhcnQuUwogY3JlYXRlIG1vZGUgMTAwNjQ0IHN5c2RlcHMvb3Ixay90c3Qt
YXVkaXQuaAoKZGlmZiAtLWdpdCBhL3N5c2RlcHMvb3Ixay9iaXRzL2xpbmsuaCBiL3N5c2RlcHMv
b3Ixay9iaXRzL2xpbmsuaApuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwLi5m
MjkxZDY2MjY5Ci0tLSAvZGV2L251bGwKKysrIGIvc3lzZGVwcy9vcjFrL2JpdHMvbGluay5oCkBA
IC0wLDAgKzEsNTQgQEAKKy8qIERlY2xhcmF0aW9ucyBmb3IgZHluYW1pYyBsaW5rZXIgaW50ZXJm
YWNlLiBPcGVuUklTQyB2ZXJzaW9uLgorICAgQ29weXJpZ2h0IChDKSAyMDIxIEZyZWUgU29mdHdh
cmUgRm91bmRhdGlvbiwgSW5jLgorICAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEdOVSBDIExp
YnJhcnkuCisKKyAgIFRoZSBHTlUgQyBMaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4g
cmVkaXN0cmlidXRlIGl0IGFuZC9vcgorICAgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0
aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYworICAgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkg
dGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyCisgICB2ZXJzaW9uIDIuMSBvZiB0
aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KKworICAg
VGhlIEdOVSBDIExpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxs
IGJlIHVzZWZ1bCwKKyAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRo
ZSBpbXBsaWVkIHdhcnJhbnR5IG9mCisgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1Ig
QSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVQorICAgTGVzc2VyIEdlbmVyYWwgUHVi
bGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KKworICAgWW91IHNob3VsZCBoYXZlIHJlY2Vp
dmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYworICAgTGljZW5zZSBh
bG9uZyB3aXRoIHRoZSBHTlUgQyBMaWJyYXJ5LiAgSWYgbm90LCBzZWUKKyAgIDxodHRwczovL3d3
dy5nbnUub3JnL2xpY2Vuc2VzLz4uICAqLworCisjaWZuZGVmIF9MSU5LX0gKKyMgZXJyb3IgIk5l
dmVyIGluY2x1ZGUgPGJpdHMvbGluay5oPiBkaXJlY3RseTsgdXNlIDxsaW5rLmg+IGluc3RlYWQu
IgorI2VuZGlmCisKKy8qIFJlZ2lzdGVycyBmb3IgZW50cnkgaW50byBQTFQuICAqLwordHlwZWRl
ZiBzdHJ1Y3QgTGFfb3Ixa19yZWdzCit7CisgIHVpbnQzMl90IGxyX3JlZ1s2XTsgLyogQXJncyBw
YXNzZWQgaW4gcjMtcjguICAqLworICB1aW50MzJfdCBscl9zcDsgICAgIC8qIFJlZ2lzdGVyIHIx
LiAgKi8KKyAgdWludDMyX3QgbHJfbHI7ICAgICAvKiBSZWdpc3RlciByOS4gICovCit9IExhX29y
MWtfcmVnczsKKworLyogUmV0dXJuIHZhbHVlcyBmb3IgY2FsbHMgZnJvbSBQTFQuICAqLwordHlw
ZWRlZiBzdHJ1Y3QgTGFfb3Ixa19yZXR2YWwKK3sKKyAgLyogVXAgdG8gdHdvIDMyLWJpdCByZWdp
c3RlcnMgdXNlZCBmb3IgYSByZXR1cm4gdmFsdWUuICAqLworICB1aW50MzJfdCBscnZfcmVnWzJd
OworfSBMYV9vcjFrX3JldHZhbDsKKworX19CRUdJTl9ERUNMUworCitleHRlcm4gRWxmVyhBZGRy
KSBsYV9vcjFrX2dudV9wbHRlbnRlciAoRWxmVyhTeW0pICpfX3N5bSwgdW5zaWduZWQgaW50IF9f
bmR4LAorCQkJCQl1aW50cHRyX3QgKl9fcmVmY29vaywKKwkJCQkJdWludHB0cl90ICpfX2RlZmNv
b2ssCisJCQkJCUxhX29yMWtfcmVncyAqX19yZWdzLAorCQkJCQl1bnNpZ25lZCBpbnQgKl9fZmxh
Z3MsCisJCQkJCWNvbnN0IGNoYXIgKl9fc3ltbmFtZSwKKwkJCQkJbG9uZyBpbnQgKl9fZnJhbWVz
aXplcCk7CitleHRlcm4gdW5zaWduZWQgaW50IGxhX29yMWtfZ251X3BsdGV4aXQgKEVsZlcoU3lt
KSAqX19zeW0sIHVuc2lnbmVkIGludCBfX25keCwKKwkJCQkJIHVpbnRwdHJfdCAqX19yZWZjb29r
LAorCQkJCQkgdWludHB0cl90ICpfX2RlZmNvb2ssCisJCQkJCSBjb25zdCBMYV9vcjFrX3JlZ3Mg
Kl9faW5yZWdzLAorCQkJCQkgTGFfb3Ixa19yZXR2YWwgKl9fb3V0cmVncywKKwkJCQkJIGNvbnN0
IGNoYXIgKl9fc3ltbmFtZSk7CisKK19fRU5EX0RFQ0xTCmRpZmYgLS1naXQgYS9zeXNkZXBzL29y
MWsvZGwtbWFjaGluZS5oIGIvc3lzZGVwcy9vcjFrL2RsLW1hY2hpbmUuaApuZXcgZmlsZSBtb2Rl
IDEwMDY0NAppbmRleCAwMDAwMDAwMDAwLi5lYzRkYjUzM2QyCi0tLSAvZGV2L251bGwKKysrIGIv
c3lzZGVwcy9vcjFrL2RsLW1hY2hpbmUuaApAQCAtMCwwICsxLDMwMCBAQAorLyogTWFjaGluZS1k
ZXBlbmRlbnQgRUxGIGR5bmFtaWMgcmVsb2NhdGlvbiBpbmxpbmUgZnVuY3Rpb25zLiAgT3BlblJJ
U0MgdmVyc2lvbi4KKyAgIENvcHlyaWdodCAoQykgMjAyMSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRp
b24sIEluYy4KKyAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBHTlUgQyBMaWJyYXJ5LgorCisg
ICBUaGUgR05VIEMgTGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0
ZSBpdCBhbmQvb3IKKyAgIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNz
ZXIgR2VuZXJhbCBQdWJsaWMKKyAgIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNv
ZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlcgorICAgdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2Us
IG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCisKKyAgIFRoZSBHTlUgQyBM
aWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWws
CisgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3
YXJyYW50eSBvZgorICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxB
UiBQVVJQT1NFLiAgU2VlIHRoZSBHTlUKKyAgIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNl
IGZvciBtb3JlIGRldGFpbHMuCisKKyAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkg
b2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKKyAgIExpY2Vuc2UgYWxvbmcgd2l0aCB0
aGUgR05VIEMgTGlicmFyeTsgaWYgbm90LCBzZWUKKyAgIDxodHRwczovL3d3dy5nbnUub3JnL2xp
Y2Vuc2VzLz4uICAqLworCisjaWZuZGVmIGRsX21hY2hpbmVfaAorI2RlZmluZSBkbF9tYWNoaW5l
X2gKKworI2RlZmluZSBFTEZfTUFDSElORV9OQU1FICJvcjFrIgorCisjaW5jbHVkZSA8c3lzL2Nk
ZWZzLmg+CisjaW5jbHVkZSA8c3lzL3BhcmFtLmg+CisjaW5jbHVkZSA8dGxzLmg+CisjaW5jbHVk
ZSA8ZGwtaXJlbC5oPgorI2luY2x1ZGUgPGRsLXN0YXRpYy10bHMuaD4KKyNpbmNsdWRlIDxkbC1t
YWNoaW5lLXJlbC5oPgorCisvKiBSZXR1cm4gbm9uemVybyBpZmYgRUxGIGhlYWRlciBpcyBjb21w
YXRpYmxlIHdpdGggdGhlIHJ1bm5pbmcgaG9zdC4gICovCitzdGF0aWMgaW5saW5lIGludCBfX2F0
dHJpYnV0ZV9fICgodW51c2VkKSkKK2VsZl9tYWNoaW5lX21hdGNoZXNfaG9zdCAoY29uc3QgRWxm
MzJfRWhkciAqZWhkcikKK3sKKyAgcmV0dXJuIGVoZHItPmVfbWFjaGluZSA9PSBFTV9PUEVOUklT
QzsKK30KKworc3RhdGljIGlubGluZSBFbGYzMl9BZGRyICoKK29yMWtfZ2V0X2dvdCAodm9pZCkK
K3sKKyAgRWxmMzJfQWRkciAqZ290OworCisgIGFzbSAoImwuamFsICAgIDB4OFxuIgorICAgICAg
ICIgbC5tb3ZoaSAlMCwgZ290cGNoaShfR0xPQkFMX09GRlNFVF9UQUJMRV8tNClcbiIKKyAgICAg
ICAibC5vcmkgICAgJTAsICUwLCBnb3RwY2xvKF9HTE9CQUxfT0ZGU0VUX1RBQkxFXyswKVxuIgor
ICAgICAgICJsLmFkZCAgICAlMCwgJTAsIHI5XG4iCisgICAgICAgOiAiPXIiIChnb3QpIDogOiAi
cjkiKTsKKworICByZXR1cm4gZ290OworfQorCisvKiBSZXR1cm4gdGhlIGxpbmstdGltZSBhZGRy
ZXNzIG9mIF9EWU5BTUlDLiAgQ29udmVuaWVudGx5LCB0aGlzIGlzIHRoZQorICAgZmlyc3QgZWxl
bWVudCBvZiB0aGUgR09ULiAgKi8KK3N0YXRpYyBpbmxpbmUgRWxmMzJfQWRkcgorZWxmX21hY2hp
bmVfZHluYW1pYyAodm9pZCkKK3sKKyAgRWxmMzJfQWRkciAqZ290ID0gb3Ixa19nZXRfZ290ICgp
OworICByZXR1cm4gKmdvdDsKK30KKworCisvKiBSZXR1cm4gdGhlIHJ1bi10aW1lIGxvYWQgYWRk
cmVzcyBvZiB0aGUgc2hhcmVkIG9iamVjdC4gICovCitzdGF0aWMgaW5saW5lIEVsZjMyX0FkZHIK
K2VsZl9tYWNoaW5lX2xvYWRfYWRkcmVzcyAodm9pZCkKK3sKKyAgLyogQ29tcHV0ZSB0aGUgZGlm
ZmVyZW5jZSBiZXR3ZWVuIHRoZSBydW50aW1lIGFkZHJlc3Mgb2YgX0RZTkFNSUMgYXMgc2Vlbgor
ICAgICBieSBhIEdPVE9GRiByZWZlcmVuY2UsIGFuZCB0aGUgbGluay10aW1lIGFkZHJlc3MgZm91
bmQgaW4gdGhlIHNwZWNpYWwKKyAgICAgdW5yZWxvY2F0ZWQgZmlyc3QgR09UIGVudHJ5LiAgKi8K
KyAgRWxmMzJfQWRkciBkeW47CisgIEVsZjMyX0FkZHIgKmdvdCA9IG9yMWtfZ2V0X2dvdCAoKTsK
KworICBhc20gKCJsLm1vdmhpICUwLCBnb3RvZmZoaShfRFlOQU1JQyk7IgorICAgICAgICJsLm9y
aSAgICUwLCAlMCwgZ290b2ZmbG8oX0RZTkFNSUMpOyIKKyAgICAgICAibC5hZGQgICAlMCwgJTAs
ICUxOyIKKyAgICAgICA6ICI9JnIiKGR5bikgOiAiciIoZ290KSk7CisKKyAgcmV0dXJuIGR5biAt
ICpnb3Q7Cit9CisKKy8qIEluaXRpYWwgZW50cnkgcG9pbnQgY29kZSBmb3IgdGhlIGR5bmFtaWMg
bGlua2VyLiAgVGhlIGZ1bmN0aW9uIF9kbF9zdGFydAorICAgaXMgdGhlIHJlYWwgZW50cnkgcG9p
bnQ7IGl0J3MgcmV0dXJuIHZhbHVlIGlzIHRoZSB1c2VyIHByb2dyYW0ncyBlbnRyeQorICAgcG9p
bnQuCisKKyAgIENvZGUgaXMgcmVhbGx5IGxvY2F0ZWQgaW4gZGwtc3RhcnQuUywganVzdCB0ZWxs
IHRoZSBsaW5rZXIgdGhhdCBpdAorICAgZXhpc3RzLiAgKi8KKyNkZWZpbmUgUlRMRF9TVEFSVCBh
c20gKCIuZ2xvYmwgX2RsX3N0YXJ0Iik7CisKKy8qIEVMRl9SVFlQRV9DTEFTU19QTFQgaWZmIFRZ
UEUgZGVzY3JpYmVzIHJlbG9jYXRpb24gb2YgYSBQTFQgZW50cnkgb3IKKyAgIFRMUyB2YXJpYWJs
ZSwgc28gdW5kZWZpbmVkIHJlZmVyZW5jZXMgc2hvdWxkIG5vdCBiZSBhbGxvd2VkIHRvCisgICBk
ZWZpbmUgdGhlIHZhbHVlLgorICAgRUxGX1JUWVBFX0NMQVNTX05PQ09QWSBpZmYgVFlQRSBzaG91
bGQgbm90IGJlIGFsbG93ZWQgdG8gcmVzb2x2ZSB0byBvbmUKKyAgIG9mIHRoZSBtYWluIGV4ZWN1
dGFibGUncyBzeW1ib2xzLCBhcyBmb3IgYSBDT1BZIHJlbG9jLiAgKi8KKworI2RlZmluZSBlbGZf
bWFjaGluZV90eXBlX2NsYXNzKHR5cGUpIFwKKyAgKCgodHlwZSkgPT0gUl9PUjFLX0pNUF9TTE9U
IFwKKyAgIHx8ICh0eXBlKSA9PSBSX09SMUtfVExTX0RUUE1PRCBcCisgICB8fCAodHlwZSkgPT0g
Ul9PUjFLX1RMU19EVFBPRkYgXAorICAgfHwgKHR5cGUpID09IFJfT1IxS19UTFNfVFBPRkYpICog
RUxGX1JUWVBFX0NMQVNTX1BMVCBcCisgICB8ICgodHlwZSkgPT0gUl9PUjFLX0NPUFkpICogRUxG
X1JUWVBFX0NMQVNTX0NPUFkpCisKKy8qIEEgcmVsb2MgdHlwZSB1c2VkIGZvciBsZC5zbyBjbWRs
aW5lIGFyZyBsb29rdXBzIHRvIHJlamVjdCBQTFQgZW50cmllcy4gICovCisjZGVmaW5lIEVMRl9N
QUNISU5FX0pNUF9TTE9UICAgIFJfT1IxS19KTVBfU0xPVAorCisjZGVmaW5lIEFSQ0hfTEFfUExU
RU5URVIgb3Ixa19nbnVfcGx0ZW50ZXIKKyNkZWZpbmUgQVJDSF9MQV9QTFRFWElUIG9yMWtfZ251
X3BsdGV4aXQKKworLyogU2V0IHVwIHRoZSBsb2FkZWQgb2JqZWN0IGRlc2NyaWJlZCBieSBMIHNv
IGl0cyB1bnJlbG9jYXRlZCBQTFQKKyAgIGVudHJpZXMgd2lsbCBqdW1wIHRvIHRoZSBvbi1kZW1h
bmQgZml4dXAgY29kZSBpbiBkbC1ydW50aW1lLmMuICAqLworc3RhdGljIGlubGluZSBpbnQgX19h
dHRyaWJ1dGVfXyAoKHVudXNlZCwgYWx3YXlzX2lubGluZSkpCitlbGZfbWFjaGluZV9ydW50aW1l
X3NldHVwIChzdHJ1Y3QgbGlua19tYXAgKmwsIHN0cnVjdCByX3Njb3BlX2VsZW0gKnNjb3BlW10s
CisJCQkgICBpbnQgbGF6eSwgaW50IHByb2ZpbGUpCit7CisgIEVsZlcoQWRkcikgKnBsdGdvdDsK
KyAgZXh0ZXJuIHZvaWQgX2RsX3J1bnRpbWVfcmVzb2x2ZSAoRWxmVyhXb3JkKSk7CisgIGV4dGVy
biB2b2lkIF9kbF9ydW50aW1lX3Byb2ZpbGUgKEVsZlcoV29yZCkpOworCisgIGlmIChsLT5sX2lu
Zm9bRFRfSk1QUkVMXSAmJiBsYXp5KQorICAgIHsKKyAgICAgIHBsdGdvdCA9IChFbGZXKEFkZHIp
ICopIERfUFRSIChsLCBsX2luZm9bRFRfUExUR09UXSk7CisKKyAgICAgIC8qIEZpbGwgaW4gaW5p
dGlhbCBlbnRyeXMgb2YgdGhlIHBsdCAqLworCisgICAgICAvKiBSZWdpc3RlciB0aGUgbGlua19t
YXAgYWRkcmVzcyBpbiB0aGUgcGx0IGF0IHBsdGdvdFsxXS4KKwkgVGhpcyB3aWxsIGFsc28gYmUg
dXNlZCBpbiB0aGUgcmVzb2x2ZXIgZm9yIGFjY2Vzc2luZyB0aGUKKwkgbGlua19tYXAgc3RydWN0
dXJlLiAgKi8KKyAgICAgIHBsdGdvdFsxXSA9IChFbGZXKEFkZHIpKSBsOworCisgICAgICAvKiBU
aGlzIGZ1bmN0aW9uIHdpbGwgZ2V0IGNhbGxlZCB0byBmaXggdXAgdGhlIEdPVCBlbnRyeSBhbmQK
KwkgdGhlbiBqdW1wIHRvIHRoZSByZXNvbHZlZCBhZGRyZXNzLiAgKi8KKyAgICAgIHBsdGdvdFsy
XSA9IChFbGZXKEFkZHIpKSAmX2RsX3J1bnRpbWVfcmVzb2x2ZTsKKworICAgIH0KKworICByZXR1
cm4gbGF6eTsKK30KKworLyogTWFzayBpZGVudGlmeWluZyBhZGRyZXNzZXMgcmVzZXJ2ZWQgZm9y
IHRoZSB1c2VyIHByb2dyYW0sCisgICB3aGVyZSB0aGUgZHluYW1pYyBsaW5rZXIgc2hvdWxkIG5v
dCBtYXAgYW55dGhpbmcuICAqLworI2RlZmluZSBFTEZfTUFDSElORV9VU0VSX0FERFJFU1NfTUFT
SyAgIDB4ZjgwMDAwMDBVTAorCisvKiBXZSBkZWZpbmUgYW4gaW5pdGlhbGl6YXRpb24gZnVuY3Rp
b25zLiAgVGhpcyBpcyBjYWxsZWQgdmVyeSBlYXJseSBpbgorICAgX2RsX3N5c2RlcF9zdGFydC4g
ICovCisjZGVmaW5lIERMX1BMQVRGT1JNX0lOSVQgZGxfcGxhdGZvcm1faW5pdCAoKQorCitzdGF0
aWMgaW5saW5lIHZvaWQgX19hdHRyaWJ1dGVfXyAoKHVudXNlZCkpCitkbF9wbGF0Zm9ybV9pbml0
ICh2b2lkKQoreworICBpZiAoR0xSTyhkbF9wbGF0Zm9ybSkgIT0gTlVMTCAmJiAqR0xSTyhkbF9w
bGF0Zm9ybSkgPT0gJ1wwJykKKyAgICAvKiBBdm9pZCBhbiBlbXB0eSBzdHJpbmcgd2hpY2ggd291
bGQgZGlzdHVyYiB1cy4gICovCisgICAgR0xSTyhkbF9wbGF0Zm9ybSkgPSBOVUxMOworfQorCitz
dGF0aWMgaW5saW5lIEVsZlcoQWRkcikKK2VsZl9tYWNoaW5lX2ZpeHVwX3BsdCAoc3RydWN0IGxp
bmtfbWFwICptYXAsIGxvb2t1cF90IHQsCisJCSAgICAgICBjb25zdCBFbGZXKFN5bSkgKnJlZnN5
bSwgY29uc3QgRWxmVyhTeW0pICpzeW0sCisJCSAgICAgICBjb25zdCBFbGZXKFJlbGEpICpyZWxv
YywKKwkJICAgICAgIEVsZlcoQWRkcikgKnJlbG9jX2FkZHIsIEVsZlcoQWRkcikgdmFsdWUpCit7
CisgIHJldHVybiAqcmVsb2NfYWRkciA9IHZhbHVlOworfQorCisvKiBSZXR1cm4gdGhlIGZpbmFs
IHZhbHVlIG9mIGEgcGx0IHJlbG9jYXRpb24uICAqLworc3RhdGljIGlubGluZSBFbGYzMl9BZGRy
CitlbGZfbWFjaGluZV9wbHRfdmFsdWUgKHN0cnVjdCBsaW5rX21hcCAqbWFwLCBjb25zdCBFbGYz
Ml9SZWxhICpyZWxvYywKKwkJICAgICAgIEVsZjMyX0FkZHIgdmFsdWUpCit7CisgIHJldHVybiB2
YWx1ZSArIHJlbG9jLT5yX2FkZGVuZDsKK30KKworCisjZW5kaWYgLyogIWRsX21hY2hpbmVfaCAq
LworCisjaWZkZWYgUkVTT0xWRV9NQVAKKworLyogUGVyZm9ybSB0aGUgcmVsb2NhdGlvbiBzcGVj
aWZpZWQgYnkgUkVMT0MgYW5kIFNZTSAod2hpY2ggaXMgZnVsbHkgcmVzb2x2ZWQpLgorICAgTUFQ
IGlzIHRoZSBvYmplY3QgY29udGFpbmluZyB0aGUgcmVsb2MuICAqLworCitzdGF0aWMgaW5saW5l
IHZvaWQKK19fYXR0cmlidXRlICgoYWx3YXlzX2lubGluZSkpCitlbGZfbWFjaGluZV9yZWxhIChz
dHJ1Y3QgbGlua19tYXAgKm1hcCwgc3RydWN0IHJfc2NvcGVfZWxlbSAqc2NvcGVbXSwKKwkJICBj
b25zdCBFbGZXKFJlbGEpICpyZWxvYywgY29uc3QgRWxmVyhTeW0pICpzeW0sCisJCSAgY29uc3Qg
c3RydWN0IHJfZm91bmRfdmVyc2lvbiAqdmVyc2lvbiwKKwkJICB2b2lkICpjb25zdCByZWxvY19h
ZGRyX2FyZywgaW50IHNraXBfaWZ1bmMpCit7CisgIEVsZjMyX0FkZHIgKmNvbnN0IHJlbG9jX2Fk
ZHIgPSByZWxvY19hZGRyX2FyZzsKKyAgY29uc3QgdW5zaWduZWQgaW50IHJfdHlwZSA9IEVMRjMy
X1JfVFlQRSAocmVsb2MtPnJfaW5mbyk7CisKKyAgaWYgKF9fZ2xpYmNfdW5saWtlbHkgKHJfdHlw
ZSA9PSBSX09SMUtfTk9ORSkpCisgICAgcmV0dXJuOworICBlbHNlCisgICAgeworIyBpZm5kZWYg
UkVTT0xWRV9DT05GTElDVF9GSU5EX01BUAorICAgICAgY29uc3QgRWxmMzJfU3ltICpjb25zdCBy
ZWZzeW0gPSBzeW07CisjIGVuZGlmCisgICAgICBzdHJ1Y3QgbGlua19tYXAgKnN5bV9tYXAgPSBS
RVNPTFZFX01BUCAobWFwLCBzY29wZSwgJnN5bSwgdmVyc2lvbiwKKwkJCQkJICAgICAgcl90eXBl
KTsKKyAgICAgIEVsZjMyX0FkZHIgdmFsdWUgPSBTWU1CT0xfQUREUkVTUyAoc3ltX21hcCwgc3lt
LCB0cnVlKTsKKworICAgICAgaWYgKHN5bSAhPSBOVUxMCisJICAmJiBfX2dsaWJjX3VubGlrZWx5
IChFTEZXKFNUX1RZUEUpIChzeW0tPnN0X2luZm8pID09IFNUVF9HTlVfSUZVTkMpCisJICAmJiBf
X2dsaWJjX2xpa2VseSAoc3ltLT5zdF9zaG5keCAhPSBTSE5fVU5ERUYpCisJICAmJiBfX2dsaWJj
X2xpa2VseSAoIXNraXBfaWZ1bmMpKQorCXZhbHVlID0gZWxmX2lmdW5jX2ludm9rZSAodmFsdWUp
OworCisgICAgICBzd2l0Y2ggKHJfdHlwZSkKKwl7CisjIGlmbmRlZiBSRVNPTFZFX0NPTkZMSUNU
X0ZJTkRfTUFQCisJICBjYXNlIFJfT1IxS19DT1BZOgorCSAgICBpZiAoc3ltID09IE5VTEwpCisJ
ICAgICAgLyogVGhpcyBjYW4gaGFwcGVuIGluIHRyYWNlIG1vZGUgaWYgYW4gb2JqZWN0IGNvdWxk
IG5vdCBiZQorCQkgZm91bmQuICAqLworCSAgICAgIGJyZWFrOworCSAgICBpZiAoX19nbGliY191
bmxpa2VseSAoc3ltLT5zdF9zaXplID4gcmVmc3ltLT5zdF9zaXplKQorCQl8fCAoX19nbGliY191
bmxpa2VseSAoc3ltLT5zdF9zaXplIDwgcmVmc3ltLT5zdF9zaXplKQorCQkgICYmIEdMUk8oZGxf
dmVyYm9zZSkpKQorCSAgICB7CisJICAgICAgY29uc3QgY2hhciAqc3RydGFiOworCisJICAgICAg
c3RydGFiID0gKGNvbnN0IGNoYXIgKikgRF9QVFIgKG1hcCwgbF9pbmZvW0RUX1NUUlRBQl0pOwor
CSAgICAgIF9kbF9lcnJvcl9wcmludGYgKCJcCislczogU3ltYm9sIGAlcycgaGFzIGRpZmZlcmVu
dCBzaXplIGluIHNoYXJlZCBvYmplY3QsIGNvbnNpZGVyIHJlLWxpbmtpbmdcbiIsCisJCSAgcnRs
ZF9wcm9nbmFtZSA/OiAiPHByb2dyYW0gbmFtZSB1bmtub3duPiIsCisJCSAgc3RydGFiICsgcmVm
c3ltLT5zdF9uYW1lKTsKKwkgICAgfQorCSAgICBtZW1jcHkgKHJlbG9jX2FkZHJfYXJnLCAodm9p
ZCAqKSB2YWx1ZSwKKwkJTUlOIChzeW0tPnN0X3NpemUsIHJlZnN5bS0+c3Rfc2l6ZSkpOworCSAg
ICBicmVhazsKKyMgZW5kaWYgLyogIVJFU09MVkVfQ09ORkxJQ1RfRklORF9NQVAgKi8KKwkgIGNh
c2UgUl9PUjFLXzMyOgorCSAgICAvKiBTdXBwb3J0IHJlbG9jYXRpb25zIG9uIG1pcy1hbGlnbmVk
IG9mZnNldHMuICAqLworCSAgICB2YWx1ZSArPSByZWxvYy0+cl9hZGRlbmQ7CisJICAgIG1lbWNw
eSAocmVsb2NfYWRkcl9hcmcsICZ2YWx1ZSwgNCk7CisJICAgIGJyZWFrOworCSAgY2FzZSBSX09S
MUtfR0xPQl9EQVQ6CisJICBjYXNlIFJfT1IxS19KTVBfU0xPVDoKKwkgICAgKnJlbG9jX2FkZHIg
PSB2YWx1ZSArIHJlbG9jLT5yX2FkZGVuZDsKKwkgICAgYnJlYWs7CisJICBjYXNlIFJfT1IxS19U
TFNfRFRQTU9EOgorIyBpZmRlZiBSVExEX0JPT1RTVFJBUAorCSAgICAvKiBEdXJpbmcgc3RhcnR1
cCB0aGUgZHluYW1pYyBsaW5rZXIgaXMgYWx3YXlzIHRoZSBtb2R1bGUKKwkgICAgICAgd2l0aCBp
bmRleCAxLiAgKi8KKwkgICAgKnJlbG9jX2FkZHIgPSAxOworIyBlbHNlCisJICAgIGlmIChzeW1f
bWFwICE9IE5VTEwpCisJICAgICAgKnJlbG9jX2FkZHIgPSBzeW1fbWFwLT5sX3Rsc19tb2RpZDsK
KyMgZW5kaWYKKwkgICAgYnJlYWs7CisJICBjYXNlIFJfT1IxS19UTFNfRFRQT0ZGOgorIyBpZm5k
ZWYgUlRMRF9CT09UU1RSQVAKKwkgICAgKnJlbG9jX2FkZHIgPSAoc3ltID09IE5VTEwgPyAwIDog
c3ltLT5zdF92YWx1ZSkgKyByZWxvYy0+cl9hZGRlbmQ7CisjIGVuZGlmCisJICAgIGJyZWFrOwor
CisJICBjYXNlIFJfT1IxS19UTFNfVFBPRkY6CisjIGlmZGVmIFJUTERfQk9PVFNUUkFQCisJICAg
ICpyZWxvY19hZGRyID0gc3ltLT5zdF92YWx1ZSArIHJlbG9jLT5yX2FkZGVuZCArCisJICAgICAg
bWFwLT5sX3Rsc19vZmZzZXQgLSBUTFNfVENCX1NJWkU7CisjIGVsc2UKKwkgICAgaWYgKHN5bV9t
YXAgIT0gTlVMTCkKKwkgICAgICB7CisJCUNIRUNLX1NUQVRJQ19UTFMgKG1hcCwgc3ltX21hcCk7
CisJCSpyZWxvY19hZGRyID0gc3ltLT5zdF92YWx1ZSArIHJlbG9jLT5yX2FkZGVuZCArCisJCSAg
c3ltX21hcC0+bF90bHNfb2Zmc2V0IC0gVExTX1RDQl9TSVpFOworCSAgICAgIH0KKyMgZW5kaWYK
KwkgICAgYnJlYWs7CisJICBkZWZhdWx0OgorCSAgICBfZGxfcmVsb2NfYmFkX3R5cGUgKG1hcCwg
cl90eXBlLCAwKTsKKwkgICAgYnJlYWs7CisJfQorICAgIH0KK30KKworc3RhdGljIGlubGluZSB2
b2lkCitfX2F0dHJpYnV0ZV9fICgoYWx3YXlzX2lubGluZSkpCitlbGZfbWFjaGluZV9yZWxhX3Jl
bGF0aXZlIChFbGYzMl9BZGRyIGxfYWRkciwgY29uc3QgRWxmMzJfUmVsYSAqcmVsb2MsCisJCQkg
ICB2b2lkICpjb25zdCByZWxvY19hZGRyX2FyZykKK3sKKyAgRWxmMzJfQWRkciAqY29uc3QgcmVs
b2NfYWRkciA9IHJlbG9jX2FkZHJfYXJnOworICAqcmVsb2NfYWRkciA9IGxfYWRkciArIHJlbG9j
LT5yX2FkZGVuZDsKK30KKworc3RhdGljIGlubGluZSB2b2lkCitfX2F0dHJpYnV0ZV9fICgoYWx3
YXlzX2lubGluZSkpCitlbGZfbWFjaGluZV9sYXp5X3JlbCAoc3RydWN0IGxpbmtfbWFwICptYXAs
IHN0cnVjdCByX3Njb3BlX2VsZW0gKnNjb3BlW10sCisJCSAgICAgIEVsZlcoQWRkcikgbF9hZGRy
LCBjb25zdCBFbGZXKFJlbGEpICpyZWxvYywKKwkJICAgICAgaW50IHNraXBfaWZ1bmMpCit7Cisg
IEVsZjMyX0FkZHIgKmNvbnN0IHJlbG9jX2FkZHIgPSAodm9pZCAqKSAobF9hZGRyICsgcmVsb2Mt
PnJfb2Zmc2V0KTsKKyAgY29uc3QgdW5zaWduZWQgaW50IHJfdHlwZSA9IEVMRjMyX1JfVFlQRSAo
cmVsb2MtPnJfaW5mbyk7CisKKyAgaWYgKF9fZ2xpYmNfbGlrZWx5IChyX3R5cGUgPT0gUl9PUjFL
X0pNUF9TTE9UKSkKKyAgICAgICpyZWxvY19hZGRyICs9IGxfYWRkcjsKKyAgZWxzZSBpZiAoX19n
bGliY191bmxpa2VseSAocl90eXBlID09IFJfT1IxS19OT05FKSkKKyAgICByZXR1cm47CisgIGVs
c2UKKyAgICBfZGxfcmVsb2NfYmFkX3R5cGUgKG1hcCwgcl90eXBlLCAxKTsKK30KKworI2VuZGlm
IC8qIFJFU09MVkVfTUFQICovCmRpZmYgLS1naXQgYS9zeXNkZXBzL29yMWsvZGwtc3RhcnQuUyBi
L3N5c2RlcHMvb3Ixay9kbC1zdGFydC5TCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAw
MDAwMDAuLmVjYjE1MDU0MjcKLS0tIC9kZXYvbnVsbAorKysgYi9zeXNkZXBzL29yMWsvZGwtc3Rh
cnQuUwpAQCAtMCwwICsxLDk4IEBACisvKiBNYWNoaW5lLWRlcGVuZGVudCBFTEYgc3RhcnR1cCBj
b2RlLiAgT3BlblJJU0MgdmVyc2lvbi4KKyAgIENvcHlyaWdodCAoQykgMjAyMSBGcmVlIFNvZnR3
YXJlIEZvdW5kYXRpb24sIEluYy4KKyAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBHTlUgQyBM
aWJyYXJ5LgorCisgICBUaGUgR05VIEMgTGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2Fu
IHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKKyAgIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2Yg
dGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKKyAgIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5
IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlcgorICAgdmVyc2lvbiAyLjEgb2Yg
dGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCisKKyAg
IFRoZSBHTlUgQyBMaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2ls
bCBiZSB1c2VmdWwsCisgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0
aGUgaW1wbGllZCB3YXJyYW50eSBvZgorICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9S
IEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZSBHTlUKKyAgIExlc3NlciBHZW5lcmFsIFB1
YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCisKKyAgIFlvdSBzaG91bGQgaGF2ZSByZWNl
aXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKKyAgIExpY2Vuc2Ug
YWxvbmcgd2l0aCB0aGUgR05VIEMgTGlicmFyeTsgaWYgbm90LCBzZWUKKyAgIDxodHRwczovL3d3
dy5nbnUub3JnL2xpY2Vuc2VzLz4uICAqLworCisjaW5jbHVkZSA8c3lzZGVwLmg+CisKKy8qIElu
aXRpYWwgZW50cnkgcG9pbnQgY29kZSBmb3IgdGhlIGR5bmFtaWMgbGlua2VyLgorICAgVGhlIGZ1
bmN0aW9uIF9kbF9zdGFydCBpcyB0aGUgcmVhbCBlbnRyeSBwb2ludDsKKyAgIGl0J3MgcmV0dXJu
IHZhbHVlIGlzIHRoZSB1c2VyIHByb2dyYW0ncyBlbnRyeSBwb2ludC4gICovCitFTlRSWSAoX3N0
YXJ0KQorCS8qIENvdW50IGFyZ3VtZW50cyBpbiByMTEgKi8KKwlsLm9yaQlyMywgcjEsIDAKKwls
Lm1vdmhpCXIxMSwgMAorMToKKwlsLmFkZGkJcjMsIHIzLCA0CisJbC5sd3oJcjEyLCAwKHIzKQor
CWwuc2ZuZWkJcjEyLCAwCisJbC5hZGRpCXIxMSwgcjExLCAxCisJbC5iZgkxYgorCSBsLm5vcAor
CWwuYWRkaQlyMTEsIHIxMSwgLTEKKwkvKiBzdG9yZSBhcmd1bWVudCBjb3VudGVyIHRvIHN0YWNr
LiAgKi8KKwlsLnN3CTAocjEpLCByMTEKKworCS8qIExvYWQgdGhlIFBJQyByZWdpc3Rlci4gICov
CisJbC5qYWwJMHg4CisJIGwubW92aGkgcjE2LCBnb3RwY2hpKF9HTE9CQUxfT0ZGU0VUX1RBQkxF
Xy00KQorCWwub3JpCXIxNiwgcjE2LCBnb3RwY2xvKF9HTE9CQUxfT0ZGU0VUX1RBQkxFXyswKQor
CWwuYWRkCXIxNiwgcjE2LCByOQorCisJbC5vcmkJcjMsIHIxLCAwCisKKwlsLmphbAlfZGxfc3Rh
cnQKKwkgbC5ub3AKKwkvKiBTYXZlIHVzZXIgZW50cnkgaW4gYSBjYWxsIHNhdmVkIHJlZy4gICov
CisJbC5vcmkJcjIyLCByMTEsIDAKKwkvKiBGYWxsIHRocm91Z2ggdG8gX2RsX3N0YXJ0X3VzZXIu
ICAqLworCitfZGxfc3RhcnRfdXNlcjoKKwkvKiBTZXQgdXAgZm9yIF9kbF9pbml0LiAgKi8KKwor
CS8qIExvYWQgX3J0bGRfbG9jYWwgKGEuay5hIF9kbF9sb2FkZWQpLiAgKi8KKwlsLmx3eglyMTIs
IGdvdChfcnRsZF9sb2NhbCkocjE2KQorCWwubHd6CXIzLCAwKHIxMikKKworCS8qIExvYWQgYXJn
YyAqLworCWwubHd6CXIxOCwgZ290KF9kbF9hcmdjKShyMTYpCisJbC5sd3oJcjQsIDAocjE4KQor
CisJLyogTG9hZCBhcmd2ICovCisJbC5sd3oJcjIwLCBnb3QoX2RsX2FyZ3YpKHIxNikKKwlsLmx3
eglyNSwgMChyMjApCisKKwkvKiBMb2FkIGVudnAgPSAmYXJndlthcmdjICsgMV0uICAqLworCWwu
c2xsaQlyNiwgcjQsIDIKKwlsLmFkZGkJcjYsIHI2LCA0CisJbC5hZGQJcjYsIHI2LCByNQorCisJ
bC5qYWwJcGx0KF9kbF9pbml0KQorCSBsLm5vcAorCisJLyogTm93IHNldCB1cCBmb3IgdXNlciBl
bnRyeS4KKwkgICBUaGUgYWxyZWFkeSBkZWZpbmVkIEFCSSBsb2FkcyBhcmdjIGFuZCBhcmd2IGZy
b20gdGhlIHN0YWNrLgorCisJICAgYXJnYyA9IDAocjEpCisJICAgYXJndiA9IHIxICsgNAorCSov
CisKKwkvKiBMb2FkIFNQIGFzIGFyZ3YgLSA0LiAgKi8KKwlsLmx3eglyMywgMChyMjApCisJbC5h
ZGRpCXIxLCByMywgLTQKKworCS8qIFNhdmUgYXJnYy4gICovCisJbC5sd3oJcjMsIDAocjE4KQor
CWwuc3cJMChyMSksIHIzCisKKwkvKiBQYXNzIF9kbF9maW5pIGZ1bmN0aW9uIGFkZHJlc3MgdG8g
X3N0YXJ0LgorCSAgIE5leHQgc3RhcnQuUyB3aWxsIHRoZW4gcGFzcyB0aGlzIGFzIHJ0bGRfZmlu
aSB0byBfX2xpYmNfc3RhcnRfbWFpbi4gICovCisJbC5sd3oJcjMsIGdvdChfZGxfZmluaSkocjE2
KQorCisJbC5qcglyMjIKKwkgbC5ub3AKKworRU5EIChfc3RhcnQpCmRpZmYgLS1naXQgYS9zeXNk
ZXBzL29yMWsvbGRzb2RlZnMuaCBiL3N5c2RlcHMvb3Ixay9sZHNvZGVmcy5oCm5ldyBmaWxlIG1v
ZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAuLjg5NzEzZmNjNzAKLS0tIC9kZXYvbnVsbAorKysg
Yi9zeXNkZXBzL29yMWsvbGRzb2RlZnMuaApAQCAtMCwwICsxLDQwIEBACisvKiBSdW4tdGltZSBk
eW5hbWljIGxpbmtlciBkYXRhIHN0cnVjdHVyZXMgZm9yIGxvYWRlZCBFTEYgc2hhcmVkIG9iamVj
dHMuCisgICBDb3B5cmlnaHQgKEMpIDIwMjEgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBJbmMu
CisgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgR05VIEMgTGlicmFyeS4KKworICAgVGhlIEdO
VSBDIExpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5k
L29yCisgICBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVy
YWwgUHVibGljCisgICBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBG
b3VuZGF0aW9uOyBlaXRoZXIKKyAgIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQg
eW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgorCisgICBUaGUgR05VIEMgTGlicmFyeSBp
cyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAorICAgYnV0
IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkg
b2YKKyAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9T
RS4gIFNlZSB0aGUgR05VCisgICBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9y
ZSBkZXRhaWxzLgorCisgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBH
TlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCisgICBMaWNlbnNlIGFsb25nIHdpdGggdGhlIEdOVSBD
IExpYnJhcnk7IGlmIG5vdCwgc2VlCisgICA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+
LiAgKi8KKworI2lmbmRlZglfT1IxS19MRFNPREVGU19ICisjZGVmaW5lCV9PUjFLX0xEU09ERUZT
X0gJMQorCisjaW5jbHVkZSA8ZWxmLmg+CisKK3N0cnVjdCBMYV9vcjFrX3JlZ3M7CitzdHJ1Y3Qg
TGFfb3Ixa19yZXR2YWw7CisKKyNkZWZpbmUgQVJDSF9QTFRFTlRFUl9NRU1CRVJTCQkJCQkJXAor
ICAgIHVpbnRwdHJfdCAoKm9yMWtfZ251X3BsdGVudGVyKSAoRWxmMzJfU3ltICosIHVuc2lnbmVk
IGludCwgdWludHB0cl90ICosIFwKKwkJCQkgIHVpbnRwdHJfdCAqLCBzdHJ1Y3QgTGFfb3Ixa19y
ZWdzICosIFwKKwkJCQkgIHVuc2lnbmVkIGludCAqLCBjb25zdCBjaGFyICpuYW1lLAlcCisJCQkJ
ICBsb25nIGludCAqZnJhbWVzaXplcCkKKworI2RlZmluZSBBUkNIX1BMVEVYSVRfTUVNQkVSUwkJ
CQkJCVwKKyAgICB1bnNpZ25lZCBpbnQgKCpvcjFrX2dudV9wbHRleGl0KSAoRWxmMzJfU3ltICos
IHVuc2lnbmVkIGludCwgdWludHB0cl90ICosIFwKKwkJCQkgICAgdWludHB0cl90ICosIGNvbnN0
IHN0cnVjdCBMYV9vcjFrX3JlZ3MgKiwgXAorCQkJCSAgICBzdHJ1Y3QgTGFfb3Ixa19yZXR2YWwg
KiwgY29uc3QgY2hhciAqKQorCisjaW5jbHVkZV9uZXh0IDxsZHNvZGVmcy5oPgorCisjZW5kaWYK
ZGlmZiAtLWdpdCBhL3N5c2RlcHMvb3Ixay9zb3RydXNzLWxpYi5jIGIvc3lzZGVwcy9vcjFrL3Nv
dHJ1c3MtbGliLmMKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMDAwMC4uMzc1NWI3
YWZkNQotLS0gL2Rldi9udWxsCisrKyBiL3N5c2RlcHMvb3Ixay9zb3RydXNzLWxpYi5jCkBAIC0w
LDAgKzEsNTEgQEAKKy8qIE92ZXJyaWRlIGdlbmVyaWMgc290cnVzcy1saWIuYyB0byBkZWZpbmUg
YWN0dWFsIGZ1bmN0aW9ucyBmb3IgT3BlblJJU0MuCisgICBDb3B5cmlnaHQgKEMpIDIwMjEgRnJl
ZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBJbmMuCisgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUg
R05VIEMgTGlicmFyeS4KKworICAgVGhlIEdOVSBDIExpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsg
eW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yCisgICBtb2RpZnkgaXQgdW5kZXIgdGhlIHRl
cm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCisgICBMaWNlbnNlIGFzIHB1Ymxp
c2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKKyAgIHZlcnNpb24g
Mi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9u
LgorCisgICBUaGUgR05VIEMgTGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0
IGl0IHdpbGwgYmUgdXNlZnVsLAorICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0
IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKKyAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRO
RVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCisgICBMZXNzZXIgR2Vu
ZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgorCisgICBZb3Ugc2hvdWxkIGhh
dmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCisgICBM
aWNlbnNlIGFsb25nIHdpdGggdGhlIEdOVSBDIExpYnJhcnkuICBJZiBub3QsIHNlZQorICAgPGh0
dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4gICovCisKKyNkZWZpbmUgSEFWRV9BUkNIX1BM
VEVOVEVSCisjZGVmaW5lIEhBVkVfQVJDSF9QTFRFWElUCisKKyNpbmNsdWRlIDxlbGYvc290cnVz
cy1saWIuYz4KKworRWxmVyhBZGRyKQorbGFfb3Ixa19nbnVfcGx0ZW50ZXIgKEVsZlcoU3ltKSAq
c3ltIF9fYXR0cmlidXRlX18gKCh1bnVzZWQpKSwKKwkJICAgICAgIHVuc2lnbmVkIGludCBuZHgg
X19hdHRyaWJ1dGVfXyAoKHVudXNlZCkpLAorCQkgICAgICAgdWludHB0cl90ICpyZWZjb29rLCB1
aW50cHRyX3QgKmRlZmNvb2ssCisJCSAgICAgICBMYV9vcjFrX3JlZ3MgKnJlZ3MsIHVuc2lnbmVk
IGludCAqZmxhZ3MsCisJCSAgICAgICBjb25zdCBjaGFyICpzeW1uYW1lLCBsb25nIGludCAqZnJh
bWVzaXplcCkKK3sKKyAgcHJpbnRfZW50ZXIgKHJlZmNvb2ssIGRlZmNvb2ssIHN5bW5hbWUsCisJ
ICAgICAgIHJlZ3MtPmxyX3JlZ1swXSwgcmVncy0+bHJfcmVnWzFdLCByZWdzLT5scl9yZWdbMl0s
CisJICAgICAgICpmbGFncyk7CisKKyAgLyogTm8gbmVlZCB0byBjb3B5IGFueXRoaW5nLCB3ZSB3
aWxsIG5vdCBuZWVkIHRoZSBwYXJhbWV0ZXJzIGluIGFueSBjYXNlLiAgKi8KKyAgKmZyYW1lc2l6
ZXAgPSAwOworCisgIHJldHVybiBzeW0tPnN0X3ZhbHVlOworfQorCit1bnNpZ25lZCBpbnQKK2xh
X29yMWtfZ251X3BsdGV4aXQgKEVsZlcoU3ltKSAqc3ltLCB1bnNpZ25lZCBpbnQgbmR4LCB1aW50
cHRyX3QgKnJlZmNvb2ssCisJCSAgICAgIHVpbnRwdHJfdCAqZGVmY29vaywKKwkJICAgICAgY29u
c3Qgc3RydWN0IExhX29yMWtfcmVncyAqaW5yZWdzLAorCQkgICAgICBzdHJ1Y3QgTGFfb3Ixa19y
ZXR2YWwgKm91dHJlZ3MsCisJCSAgICAgIGNvbnN0IGNoYXIgKnN5bW5hbWUpCit7CisgIHByaW50
X2V4aXQgKHJlZmNvb2ssIGRlZmNvb2ssIHN5bW5hbWUsIG91dHJlZ3MtPmxydl9yZWdbMF0pOwor
CisgIHJldHVybiAwOworfQpkaWZmIC0tZ2l0IGEvc3lzZGVwcy9vcjFrL3N0YXJ0LlMgYi9zeXNk
ZXBzL29yMWsvc3RhcnQuUwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwLi4w
NDI0MzU1ZjM2Ci0tLSAvZGV2L251bGwKKysrIGIvc3lzZGVwcy9vcjFrL3N0YXJ0LlMKQEAgLTAs
MCArMSw5OSBAQAorLyogc3RhcnQsIE9wZW5SSVNDIHZlcnNpb24uCisgICBDb3B5cmlnaHQgKEMp
IDIwMjEgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBJbmMuCisgICBUaGlzIGZpbGUgaXMgcGFy
dCBvZiB0aGUgR05VIEMgTGlicmFyeS4KKworICAgVGhlIEdOVSBDIExpYnJhcnkgaXMgZnJlZSBz
b2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yCisgICBtb2RpZnkgaXQgdW5k
ZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCisgICBMaWNlbnNl
IGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKKyAg
IHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRl
ciB2ZXJzaW9uLgorCisgICBUaGUgR05VIEMgTGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUg
aG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAorICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZ
OyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKKyAgIE1FUkNIQU5UQUJJTElU
WSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCisgICBM
ZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgorCisgICBZb3Ug
c2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVi
bGljCisgICBMaWNlbnNlIGFsb25nIHdpdGggdGhlIEdOVSBDIExpYnJhcnk7IGlmIG5vdCwgd3Jp
dGUgdG8gdGhlIEZyZWUKKyAgIFNvZnR3YXJlIEZvdW5kYXRpb24sIEluYy4sIDU5IFRlbXBsZSBQ
bGFjZSwgU3VpdGUgMzMwLCBCb3N0b24sIE1BCisgICAwMjExMS0xMzA3IFVTQS4gICovCisKKy8q
IFRoaXMgaXMgdGhlIGNhbm9uaWNhbCBlbnRyeSBwb2ludCwgdXN1YWxseSB0aGUgZmlyc3QgdGhp
bmcgaW4gdGhlIHRleHQKKyAgIHNlZ21lbnQuCisKKyAgIHNwICAgVGhlIHN0YWNrIGNvbnRhaW5z
IHRoZSBhcmd1bWVudHMgYW5kIGVudmlyb25tZW50OgorICAgIDAoc3ApICAgICBhcmdjCisgICAg
NChzcCkgICAgIGFyZ3ZbMF0KKyAgICAuLi4KKyAgICAoNCphcmdjKShzcCkgICAgTlVMTAorICAg
ICg0KihhcmdjKzEpKShzcCkgIGVudnBbMF0KKyAgICAuLi4KKyAgICBOVUxMCisgKi8KKworI2Rl
ZmluZSBfX0FTU0VNQkxZX18KKyNpbmNsdWRlIDxzeXNkZXAuaD4KKyNpbmNsdWRlIDxlbnRyeS5o
PgorCitFTlRSWSAoRU5UUllfUE9JTlQpCisKKwkvKiBTZXR1cCBBcmd1bWVudHMgdG8gdGhlIF9f
bGliY19zdGFydF9tYWluIGZ1bmN0aW9uLiAgKi8KKworCS8qIFRha2UgdmFsdWVzIGZvciBhcmdj
IGFuZCBhcmd2IG9mZiB0aGUgc3RhY2suCisJICAgVGhlc2Ugd2lsbCBiZSBwYXNzZWQgYXMgYXJn
dW1lbnRzIHR3byBhbmQgdGhyZWUgdG8gbWFpbgorCSAgIGFuZCB0aHVzIGdvIGluIHJlZ2lzdGVy
cyByNCBhbmQgcjUsIHJlc3BlY3RpdmVseS4gICovCisJbC5sd3oJcjQsIDAocjEpCisJbC5hZGRp
CXI1LCByMSwgNAorCisJLyogUGFzcyBpbiBydGxkX2ZpbmkgZnJvbSBkbC1zdGFydC5TLiAgKi8K
KwlsLm9yCXI4LCByMywgcjMKKworI2lmZGVmIFBJQworCS8qIE9idGFpbiBhIHBvaW50ZXIgdG8g
LmdvdCBpbiByMTYgKi8KKwlsLmphbAkweDgKKwkgbC5tb3ZoaSByMTYsIGdvdHBjaGkoX0dMT0JB
TF9PRkZTRVRfVEFCTEVfLTQpCisJbC5vcmkJcjE2LCByMTYsIGdvdHBjbG8oX0dMT0JBTF9PRkZT
RVRfVEFCTEVfKzApCisJbC5hZGQJcjE2LCByMTYsIHI5CisKKwkvKiBQYXNzIGluIHRoZSB0aGUg
bWFpbiBzeW1ib2wuICAqLworCWwubHd6CXIzLCBnb3QobWFpbikocjE2KQorI2Vsc2UKKwkvKiBQ
YXNzIGluIHRoZSB0aGUgbWFpbiBzeW1ib2wuICAqLworCWwubW92aGkgcjMsIGhpKG1haW4pCisJ
bC5vcmkJcjMsIHIzLCBsbyhtYWluKQorI2VuZGlmCisJLyogVXNlZCB0byBiZSBpbml0IGFuZCBm
aW5pLiAgKi8KKwlsLm1vdmhpCXI2LCAweDAKKwlsLm1vdmhpCXI3LCAweDAKKworCS8qIFB1c2gg
c3RhY2sgbGltaXQgb250byB0aGUgc3RhY2suCisJICAgVGhpcyBwcm92aWRlcyB0aGUgaGlnaGVz
dCBzdGFjayBhZGRyZXNzIHRvIHVzZXIgY29kZSAoYXMgc3RhY2sgZ3Jvd3MKKwkgICBkb3dud2Fy
ZHMuCisJICAgVGhpcyBpcyB0aGUgc2V2ZW50aCBhcmd1bWVudCB0byBfX2xpYmNfc3RhcnRfbWFp
biBhbmQgdGh1cyBuZWVkcyB0bworCSAgIGJlIHBhc3NlZCBvbiB0aGUgc3RhY2suICAqLworCWwu
c3cJLTQocjEpLCByMQorCisJLyogQWRqdXN0IHN0YWNrIHRvIGFjY291bnQgZm9yIGEgdG90YWwg
b2YgNyBhcmdzIChpLmUuIHRoZSBsYXN0IG9uZSBpcworCSAgIG9uIHRoZSBzdGFjay4gICovCisJ
bC5hZGRpCXIxLCByMSwgLTQKKworCS8qIENsZWFyIHRoZSBmcmFtZSBwb2ludGVyIGFuZCBsaW5r
IHJlZ2lzdGVyIHNpbmNlIHRoaXMgaXMgdGhlCisJICAgb3V0ZXJtb3N0IGZyYW1lLiAgKi8KKwls
Lm1vdmhpCXIyLCAweDAKKwlsLm1vdmhpCXI5LCAweDAKKworCS8qIExldCB0aGUgbGliYyBjYWxs
IG1haW4gYW5kIGV4aXQgd2l0aCBpdHMgcmV0dXJuIGNvZGUuICAqLworI2lmZGVmIFBJQworCWwu
aglwbHQoX19saWJjX3N0YXJ0X21haW4pCisjZWxzZQorCWwuaglfX2xpYmNfc3RhcnRfbWFpbgor
I2VuZGlmCisJIGwubm9wCitFTkQgKEVOVFJZX1BPSU5UKQorCisJLyogRGVmaW5lIGEgc3ltYm9s
IGZvciB0aGUgZmlyc3QgcGllY2Ugb2YgaW5pdGlhbGl6ZWQgZGF0YS4gICovCisJLmRhdGEKKwku
Z2xvYmwgX19kYXRhX3N0YXJ0CitfX2RhdGFfc3RhcnQ6CisJLmxvbmcgMAorCS53ZWFrIGRhdGFf
c3RhcnQKKwlkYXRhX3N0YXJ0ID0gX19kYXRhX3N0YXJ0CmRpZmYgLS1naXQgYS9zeXNkZXBzL29y
MWsvdHN0LWF1ZGl0LmggYi9zeXNkZXBzL29yMWsvdHN0LWF1ZGl0LmgKbmV3IGZpbGUgbW9kZSAx
MDA2NDQKaW5kZXggMDAwMDAwMDAwMC4uNjZjYjJlZTQ4YwotLS0gL2Rldi9udWxsCisrKyBiL3N5
c2RlcHMvb3Ixay90c3QtYXVkaXQuaApAQCAtMCwwICsxLDI0IEBACisvKiBEZWZpbml0aW9ucyBm
b3IgdGVzdGluZyBQTFQgZW50cnkvZXhpdCBhdWRpdGluZy4gIE9wZW5SSVNDIHZlcnNpb24uCisg
ICBDb3B5cmlnaHQgKEMpIDIwMjEgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBJbmMuCisKKyAg
IFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBHTlUgQyBMaWJyYXJ5LgorCisgICBUaGUgR05VIEMg
TGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IK
KyAgIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQ
dWJsaWMKKyAgIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5k
YXRpb247IGVpdGhlcgorICAgdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3Vy
IG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCisKKyAgIFRoZSBHTlUgQyBMaWJyYXJ5IGlzIGRp
c3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCisgICBidXQgV0lU
SE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgor
ICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAg
U2VlIHRoZSBHTlUKKyAgIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRl
dGFpbHMuCisKKyAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBM
ZXNzZXIgR2VuZXJhbCBQdWJsaWMKKyAgIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGUgR05VIEMgTGli
cmFyeS4gIElmIG5vdCwgc2VlCisgICA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LiAg
Ki8KKworI2RlZmluZSBwbHRlbnRlciBsYV9vcjFrX2dudV9wbHRlbnRlcgorI2RlZmluZSBwbHRl
eGl0IGxhX29yMWtfZ251X3BsdGV4aXQKKyNkZWZpbmUgTGFfcmVncyBMYV9vcjFrX3JlZ3MKKyNk
ZWZpbmUgTGFfcmV0dmFsIExhX29yMWtfcmV0dmFsCisjZGVmaW5lIGludF9yZXR2YWwgbHJ2X3Jl
Z1swXQotLSAKMi4zMS4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fXwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMubGlicmVjb3Jlcy5v
cmcKaHR0cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVucmlzYwo=
