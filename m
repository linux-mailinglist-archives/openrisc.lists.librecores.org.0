Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 72828470EC2
	for <lists+openrisc@lfdr.de>; Sat, 11 Dec 2021 00:35:20 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 58685242BF;
	Sat, 11 Dec 2021 00:35:20 +0100 (CET)
Received: from mail-pj1-f51.google.com (mail-pj1-f51.google.com
 [209.85.216.51])
 by mail.librecores.org (Postfix) with ESMTPS id 0186A20E43
 for <openrisc@lists.librecores.org>; Sat, 11 Dec 2021 00:35:17 +0100 (CET)
Received: by mail-pj1-f51.google.com with SMTP id
 gf14-20020a17090ac7ce00b001a7a2a0b5c3so10515239pjb.5
 for <openrisc@lists.librecores.org>; Fri, 10 Dec 2021 15:35:17 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=from:to:cc:subject:date:message-id:in-reply-to:references
 :mime-version:content-transfer-encoding;
 bh=EgmNltNS6hiJMeoWjuk4id/ppVpo1cCYDa5PAdswC9g=;
 b=WTuAXM6kO4DW6xBtpJUqsnwMMCajc5dpIRLfD3/hUOayXXL9YovyQ5YdowmjH5rk6Y
 Bwd9vxSnKSJXOyaC+5oUVT66b4nFouLTJqkBVzy1tk+gDW1YTUrfWwQIOLWT7waWQ6h0
 LP6Hp3Mhia2hjyJ1Y6Vf1zOXGJHM2/OBU/7nQj9blgUt3A2ALi6ffTaB0AArQaPo1xHb
 jrSsbHU3ByUMZyKJttdy7gkTG+NnZwDFNTRGnwc07a8EuJ7UB8rZs1GsMrgqmm5XfpBs
 7OxuKKRnhqLEc8tKDSoZAnOrWl0JW+kcoPD4RFIv0vmK3dvft0xq/4NKB/8lRpF1xlhX
 QDaw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
 :references:mime-version:content-transfer-encoding;
 bh=EgmNltNS6hiJMeoWjuk4id/ppVpo1cCYDa5PAdswC9g=;
 b=BZSh0LNrvYUB/UtdjfAPu82r/DljKdy3V2gEtjNk2o5uaOQu04Ag6AYpEGsBSRdETa
 3TVrQ1nN+QylmExStdbwSTnIiWwRy6NWF9U19PVCCPHnAOOat+08PiweC4ujcP9D7UtF
 EeYZgir+EDZ6Z0rnt8nST7KDY3Crdl/SgozY8FUbKOp6w16ESAJlBPXGQW3H8sD9JBZ2
 2FtkB9zdhEgPmpHFZT1gP2WuPGLE88tqHur+fWoy1fgPqLfvmoNBi3uQWT6ZJrJJgPHQ
 OIzqh8SFhGu4L1TwzECsk8ZoQPsWGZH1L+ZTRK0HyZZKAcm6+s1Yz+0cyxoFa5xNQVsY
 s8Lg==
X-Gm-Message-State: AOAM5330rLCse0qI3GREisfjpz4tmPrrRCU4XzhFAb+V4pZAkwirGfEf
 D1Pt/aJhmm+MALND3vT3y38=
X-Google-Smtp-Source: ABdhPJxpMtuppNQQqI1A18UMsDtcq1wGWAtd72A8s+qiUHxuBpvYfZ0qOB8cc5Dx1ZcluULYmFwaRQ==
X-Received: by 2002:a17:90b:11c1:: with SMTP id
 gv1mr27553648pjb.208.1639179316221; 
 Fri, 10 Dec 2021 15:35:16 -0800 (PST)
Received: from localhost ([2409:10:24a0:4700:e8ad:216a:2a9d:6d0c])
 by smtp.gmail.com with ESMTPSA id y128sm4044806pfb.181.2021.12.10.15.35.15
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Fri, 10 Dec 2021 15:35:15 -0800 (PST)
From: Stafford Horne <shorne@gmail.com>
To: GLIBC patches <libc-alpha@sourceware.org>
Date: Sat, 11 Dec 2021 08:34:47 +0900
Message-Id: <20211210233456.4146479-5-shorne@gmail.com>
X-Mailer: git-send-email 2.31.1
In-Reply-To: <20211210233456.4146479-1-shorne@gmail.com>
References: <20211210233456.4146479-1-shorne@gmail.com>
MIME-Version: 1.0
Subject: [OpenRISC] [PATCH v3 04/13] or1k: startup and dynamic linking code
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Openrisc <openrisc@lists.librecores.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

Q29kZSBmb3IgQyBydW50aW1lIHN0YXJ0dXAgYW5kIGR5bmFtaWMgbG9hZGluZyBpbmNsdWRpbmcg
UExUIGxheW91dC4KLS0tCiBzeXNkZXBzL29yMWsvYml0cy9saW5rLmggICB8ICA1MSArKysrKysK
IHN5c2RlcHMvb3Ixay9kbC1tYWNoaW5lLmggIHwgMzIzICsrKysrKysrKysrKysrKysrKysrKysr
KysrKysrKysrKysrKysKIHN5c2RlcHMvb3Ixay9kbC1zdGFydC5TICAgIHwgIDk4ICsrKysrKysr
KysrCiBzeXNkZXBzL29yMWsvbGRzb2RlZnMuaCAgICB8ICA0MCArKysrKwogc3lzZGVwcy9vcjFr
L3NvdHJ1c3MtbGliLmMgfCAgNTEgKysrKysrCiBzeXNkZXBzL29yMWsvc3RhcnQuUyAgICAgICB8
ICA5OSArKysrKysrKysrKysKIHN5c2RlcHMvb3Ixay90c3QtYXVkaXQuaCAgIHwgIDI0ICsrKwog
NyBmaWxlcyBjaGFuZ2VkLCA2ODYgaW5zZXJ0aW9ucygrKQogY3JlYXRlIG1vZGUgMTAwNjQ0IHN5
c2RlcHMvb3Ixay9iaXRzL2xpbmsuaAogY3JlYXRlIG1vZGUgMTAwNjQ0IHN5c2RlcHMvb3Ixay9k
bC1tYWNoaW5lLmgKIGNyZWF0ZSBtb2RlIDEwMDY0NCBzeXNkZXBzL29yMWsvZGwtc3RhcnQuUwog
Y3JlYXRlIG1vZGUgMTAwNjQ0IHN5c2RlcHMvb3Ixay9sZHNvZGVmcy5oCiBjcmVhdGUgbW9kZSAx
MDA2NDQgc3lzZGVwcy9vcjFrL3NvdHJ1c3MtbGliLmMKIGNyZWF0ZSBtb2RlIDEwMDY0NCBzeXNk
ZXBzL29yMWsvc3RhcnQuUwogY3JlYXRlIG1vZGUgMTAwNjQ0IHN5c2RlcHMvb3Ixay90c3QtYXVk
aXQuaAoKZGlmZiAtLWdpdCBhL3N5c2RlcHMvb3Ixay9iaXRzL2xpbmsuaCBiL3N5c2RlcHMvb3Ix
ay9iaXRzL2xpbmsuaApuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwLi5hZDE4
M2M5NjI1Ci0tLSAvZGV2L251bGwKKysrIGIvc3lzZGVwcy9vcjFrL2JpdHMvbGluay5oCkBAIC0w
LDAgKzEsNTEgQEAKKy8qIERlY2xhcmF0aW9ucyBmb3IgZHluYW1pYyBsaW5rZXIgaW50ZXJmYWNl
LiBPcGVuUklTQyB2ZXJzaW9uLgorICAgQ29weXJpZ2h0IChDKSAyMDIxIEZyZWUgU29mdHdhcmUg
Rm91bmRhdGlvbiwgSW5jLgorICAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEdOVSBDIExpYnJh
cnkuCisKKyAgIFRoZSBHTlUgQyBMaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVk
aXN0cmlidXRlIGl0IGFuZC9vcgorICAgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
R05VIExlc3NlciBHZW5lcmFsIFB1YmxpYworICAgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhl
IEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyCisgICB2ZXJzaW9uIDIuMSBvZiB0aGUg
TGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KKworICAgVGhl
IEdOVSBDIExpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJl
IHVzZWZ1bCwKKyAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBp
bXBsaWVkIHdhcnJhbnR5IG9mCisgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQ
QVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVQorICAgTGVzc2VyIEdlbmVyYWwgUHVibGlj
IExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KKworICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVk
IGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYworICAgTGljZW5zZSBhbG9u
ZyB3aXRoIHRoZSBHTlUgQyBMaWJyYXJ5LiAgSWYgbm90LCBzZWUKKyAgIDxodHRwczovL3d3dy5n
bnUub3JnL2xpY2Vuc2VzLz4uICAqLworCisjaWZuZGVmIF9MSU5LX0gKKyMgZXJyb3IgIk5ldmVy
IGluY2x1ZGUgPGJpdHMvbGluay5oPiBkaXJlY3RseTsgdXNlIDxsaW5rLmg+IGluc3RlYWQuIgor
I2VuZGlmCisKKy8qIFJlZ2lzdGVycyBmb3IgZW50cnkgaW50byBQTFQuICAqLwordHlwZWRlZiBz
dHJ1Y3QgTGFfb3Ixa19yZWdzCit7CisgIHVpbnQzMl90IGxyX3JlZ1szMV07Cit9IExhX29yMWtf
cmVnczsKKworLyogUmV0dXJuIHZhbHVlcyBmb3IgY2FsbHMgZnJvbSBQTFQuICAqLwordHlwZWRl
ZiBzdHJ1Y3QgTGFfb3Ixa19yZXR2YWwKK3sKKyAgdWludDMyX3QgbHJ2X3IzOworfSBMYV9vcjFr
X3JldHZhbDsKKworX19CRUdJTl9ERUNMUworCitleHRlcm4gRWxmVyhBZGRyKSBsYV9vcjFrX2du
dV9wbHRlbnRlciAoRWxmVyhTeW0pICpfX3N5bSwgdW5zaWduZWQgaW50IF9fbmR4LAorCQkJCQl1
aW50cHRyX3QgKl9fcmVmY29vaywKKwkJCQkJdWludHB0cl90ICpfX2RlZmNvb2ssCisJCQkJCUxh
X29yMWtfcmVncyAqX19yZWdzLAorCQkJCQl1bnNpZ25lZCBpbnQgKl9fZmxhZ3MsCisJCQkJCWNv
bnN0IGNoYXIgKl9fc3ltbmFtZSwKKwkJCQkJbG9uZyBpbnQgKl9fZnJhbWVzaXplcCk7CitleHRl
cm4gdW5zaWduZWQgaW50IGxhX29yMWtfZ251X3BsdGV4aXQgKEVsZlcoU3ltKSAqX19zeW0sIHVu
c2lnbmVkIGludCBfX25keCwKKwkJCQkJIHVpbnRwdHJfdCAqX19yZWZjb29rLAorCQkJCQkgdWlu
dHB0cl90ICpfX2RlZmNvb2ssCisJCQkJCSBjb25zdCBMYV9vcjFrX3JlZ3MgKl9faW5yZWdzLAor
CQkJCQkgTGFfb3Ixa19yZXR2YWwgKl9fb3V0cmVncywKKwkJCQkJIGNvbnN0IGNoYXIgKl9fc3lt
bmFtZSk7CisKK19fRU5EX0RFQ0xTCmRpZmYgLS1naXQgYS9zeXNkZXBzL29yMWsvZGwtbWFjaGlu
ZS5oIGIvc3lzZGVwcy9vcjFrL2RsLW1hY2hpbmUuaApuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRl
eCAwMDAwMDAwMDAwLi5kNDE1NTQ3NjllCi0tLSAvZGV2L251bGwKKysrIGIvc3lzZGVwcy9vcjFr
L2RsLW1hY2hpbmUuaApAQCAtMCwwICsxLDMyMyBAQAorLyogTWFjaGluZS1kZXBlbmRlbnQgRUxG
IGR5bmFtaWMgcmVsb2NhdGlvbiBpbmxpbmUgZnVuY3Rpb25zLiAgT3BlblJJU0MgdmVyc2lvbi4K
KyAgIENvcHlyaWdodCAoQykgMjAyMSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIEluYy4KKyAg
IFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBHTlUgQyBMaWJyYXJ5LgorCisgICBUaGUgR05VIEMg
TGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IK
KyAgIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQ
dWJsaWMKKyAgIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5k
YXRpb247IGVpdGhlcgorICAgdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3Vy
IG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCisKKyAgIFRoZSBHTlUgQyBMaWJyYXJ5IGlzIGRp
c3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCisgICBidXQgV0lU
SE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgor
ICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAg
U2VlIHRoZSBHTlUKKyAgIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRl
dGFpbHMuCisKKyAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBM
ZXNzZXIgR2VuZXJhbCBQdWJsaWMKKyAgIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGUgR05VIEMgTGli
cmFyeTsgaWYgbm90LCBzZWUKKyAgIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uICAq
LworCisjaWZuZGVmIGRsX21hY2hpbmVfaAorI2RlZmluZSBkbF9tYWNoaW5lX2gKKworI2RlZmlu
ZSBFTEZfTUFDSElORV9OQU1FICJvcjFrIgorCisjaW5jbHVkZSA8c3lzL2NkZWZzLmg+CisjaW5j
bHVkZSA8c3lzL3BhcmFtLmg+CisjaW5jbHVkZSA8dGxzLmg+CisjaW5jbHVkZSA8ZGwtaXJlbC5o
PgorI2luY2x1ZGUgPGRsLXN0YXRpYy10bHMuaD4KKyNpbmNsdWRlIDxkbC1tYWNoaW5lLXJlbC5o
PgorCisvKiBSZXR1cm4gbm9uemVybyBpZmYgRUxGIGhlYWRlciBpcyBjb21wYXRpYmxlIHdpdGgg
dGhlIHJ1bm5pbmcgaG9zdC4gICovCitzdGF0aWMgaW5saW5lIGludCBfX2F0dHJpYnV0ZV9fICgo
dW51c2VkKSkKK2VsZl9tYWNoaW5lX21hdGNoZXNfaG9zdCAoY29uc3QgRWxmMzJfRWhkciAqZWhk
cikKK3sKKyAgcmV0dXJuIGVoZHItPmVfbWFjaGluZSA9PSBFTV9PUEVOUklTQzsKK30KKworc3Rh
dGljIGlubGluZSBFbGYzMl9BZGRyICoKK29yMWtfZ2V0X2dvdCAodm9pZCkKK3sKKyAgRWxmMzJf
QWRkciAqZ290OworICByZWdpc3RlciBsb25nIGludCBsaW5rcmVnIGFzbSAoInI5Iik7CisgIGFz
bSAoImwuamFsICAgIDB4OFxuIgorICAgICAgICIgbC5tb3ZoaSAlMCwgZ290cGNoaShfR0xPQkFM
X09GRlNFVF9UQUJMRV8tNClcbiIKKyAgICAgICAibC5vcmkgICAgJTAsICUwLCBnb3RwY2xvKF9H
TE9CQUxfT0ZGU0VUX1RBQkxFXyswKVxuIgorICAgICAgICJsLmFkZCAgICAlMCwgJTAsICUxXG4i
CisgICAgICAgOiAiPXIiIChnb3QpLCAiPXIiIChsaW5rcmVnKSk7CisKKyAgcmV0dXJuIGdvdDsK
K30KKworLyogUmV0dXJuIHRoZSBsaW5rLXRpbWUgYWRkcmVzcyBvZiBfRFlOQU1JQy4gIENvbnZl
bmllbnRseSwgdGhpcyBpcyB0aGUKKyAgIGZpcnN0IGVsZW1lbnQgb2YgdGhlIEdPVC4gICovCitz
dGF0aWMgaW5saW5lIEVsZjMyX0FkZHIKK2VsZl9tYWNoaW5lX2R5bmFtaWMgKHZvaWQpCit7Cisg
IEVsZjMyX0FkZHIgKmdvdCA9IG9yMWtfZ2V0X2dvdCgpOworICByZXR1cm4gKmdvdDsKK30KKwor
CisvKiBSZXR1cm4gdGhlIHJ1bi10aW1lIGxvYWQgYWRkcmVzcyBvZiB0aGUgc2hhcmVkIG9iamVj
dC4gICovCitzdGF0aWMgaW5saW5lIEVsZjMyX0FkZHIKK2VsZl9tYWNoaW5lX2xvYWRfYWRkcmVz
cyAodm9pZCkKK3sKKyAgLyogQ29tcHV0ZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBydW50
aW1lIGFkZHJlc3Mgb2YgX0RZTkFNSUMgYXMgc2VlbgorICAgICBieSBhIEdPVE9GRiByZWZlcmVu
Y2UsIGFuZCB0aGUgbGluay10aW1lIGFkZHJlc3MgZm91bmQgaW4gdGhlIHNwZWNpYWwKKyAgICAg
dW5yZWxvY2F0ZWQgZmlyc3QgR09UIGVudHJ5LiAgKi8KKyAgRWxmMzJfQWRkciBkeW47CisgIEVs
ZjMyX0FkZHIgKmdvdCA9IG9yMWtfZ2V0X2dvdCgpOworCisgIGFzbSAoImwubW92aGkgJTAsIGdv
dG9mZmhpKF9EWU5BTUlDKTsiCisgICAgICAgImwub3JpICAgJTAsICUwLCBnb3RvZmZsbyhfRFlO
QU1JQyk7IgorICAgICAgICJsLmFkZCAgICUwLCAlMCwgJTE7IgorICAgICAgIDogIj0mciIoZHlu
KSA6ICJyIihnb3QpKTsKKworICByZXR1cm4gZHluIC0gKmdvdDsKK30KKworLyogSW5pdGlhbCBl
bnRyeSBwb2ludCBjb2RlIGZvciB0aGUgZHluYW1pYyBsaW5rZXIuICBUaGUgZnVuY3Rpb24gX2Rs
X3N0YXJ0CisgICBpcyB0aGUgcmVhbCBlbnRyeSBwb2ludDsgaXQncyByZXR1cm4gdmFsdWUgaXMg
dGhlIHVzZXIgcHJvZ3JhbSdzIGVudHJ5CisgICBwb2ludC4KKworICAgQ29kZSBpcyByZWFsbHkg
bG9jYXRlZCBpbiBkbC1zdGFydC5TLCBqdXN0IHRlbGwgdGhlIGxpbmtlciB0aGF0IGl0CisgICBl
eGlzdHMuICAqLworI2RlZmluZSBSVExEX1NUQVJUIGFzbSAoIi5nbG9ibCBfZGxfc3RhcnQiKTsK
KworLyogRUxGX1JUWVBFX0NMQVNTX1BMVCBpZmYgVFlQRSBkZXNjcmliZXMgcmVsb2NhdGlvbiBv
ZiBhIFBMVCBlbnRyeSBvcgorICAgVExTIHZhcmlhYmxlLCBzbyB1bmRlZmluZWQgcmVmZXJlbmNl
cyBzaG91bGQgbm90IGJlIGFsbG93ZWQgdG8KKyAgIGRlZmluZSB0aGUgdmFsdWUuCisgICBFTEZf
UlRZUEVfQ0xBU1NfTk9DT1BZIGlmZiBUWVBFIHNob3VsZCBub3QgYmUgYWxsb3dlZCB0byByZXNv
bHZlIHRvIG9uZQorICAgb2YgdGhlIG1haW4gZXhlY3V0YWJsZSdzIHN5bWJvbHMsIGFzIGZvciBh
IENPUFkgcmVsb2MuICAqLworCisjZGVmaW5lIGVsZl9tYWNoaW5lX3R5cGVfY2xhc3ModHlwZSkg
XAorICAoKCh0eXBlKSA9PSBSX09SMUtfSk1QX1NMT1QgXAorICAgfHwgKHR5cGUpID09IFJfT1Ix
S19UTFNfRFRQTU9EIFwKKyAgIHx8ICh0eXBlKSA9PSBSX09SMUtfVExTX0RUUE9GRiBcCisgICB8
fCAodHlwZSkgPT0gUl9PUjFLX1RMU19UUE9GRikgKiBFTEZfUlRZUEVfQ0xBU1NfUExUIFwKKyAg
IHwgKCh0eXBlKSA9PSBSX09SMUtfQ09QWSkgKiBFTEZfUlRZUEVfQ0xBU1NfQ09QWSkKKworLyog
QSByZWxvYyB0eXBlIHVzZWQgZm9yIGxkLnNvIGNtZGxpbmUgYXJnIGxvb2t1cHMgdG8gcmVqZWN0
IFBMVCBlbnRyaWVzLiAgKi8KKyNkZWZpbmUgRUxGX01BQ0hJTkVfSk1QX1NMT1QgICAgUl9PUjFL
X0pNUF9TTE9UCisKKyNkZWZpbmUgQVJDSF9MQV9QTFRFTlRFUiBvcjFrX2dudV9wbHRlbnRlcgor
I2RlZmluZSBBUkNIX0xBX1BMVEVYSVQgb3Ixa19nbnVfcGx0ZXhpdAorCisvKiBTZXQgdXAgdGhl
IGxvYWRlZCBvYmplY3QgZGVzY3JpYmVkIGJ5IEwgc28gaXRzIHVucmVsb2NhdGVkIFBMVAorICAg
ZW50cmllcyB3aWxsIGp1bXAgdG8gdGhlIG9uLWRlbWFuZCBmaXh1cCBjb2RlIGluIGRsLXJ1bnRp
bWUuYy4gICovCitzdGF0aWMgaW5saW5lIGludCBfX2F0dHJpYnV0ZV9fICgodW51c2VkLCBhbHdh
eXNfaW5saW5lKSkKK2VsZl9tYWNoaW5lX3J1bnRpbWVfc2V0dXAgKHN0cnVjdCBsaW5rX21hcCAq
bCwgc3RydWN0IHJfc2NvcGVfZWxlbSAqc2NvcGVbXSwKKwkJCSAgIGludCBsYXp5LCBpbnQgcHJv
ZmlsZSkKK3sKKyAgRWxmVyhBZGRyKSAqcGx0Z290OworICBleHRlcm4gdm9pZCBfZGxfcnVudGlt
ZV9yZXNvbHZlIChFbGZXKFdvcmQpKTsKKyAgZXh0ZXJuIHZvaWQgX2RsX3J1bnRpbWVfcHJvZmls
ZSAoRWxmVyhXb3JkKSk7CisKKyAgaWYgKGwtPmxfaW5mb1tEVF9KTVBSRUxdICYmIGxhenkpCisg
ICAgeworICAgICAgcGx0Z290ID0gKEVsZlcoQWRkcikgKikgRF9QVFIgKGwsIGxfaW5mb1tEVF9Q
TFRHT1RdKTsKKworICAgICAgLyogRmlsbCBpbiBpbml0aWFsIGVudHJ5cyBvZiB0aGUgcGx0ICov
CisKKyAgICAgIC8qIFJlZ2lzdGVyIHRoZSBsaW5rX21hcCBhZGRyZXNzIGluIHRoZSBwbHQgYXQg
cGx0Z290WzFdLgorCSBUaGlzIHdpbGwgYWxzbyBiZSB1c2VkIGluIHRoZSByZXNvbHZlciBmb3Ig
YWNjZXNzaW5nIHRoZQorCSBsaW5rX21hcCBzdHJ1Y3R1cmUuICAqLworICAgICAgcGx0Z290WzFd
ID0gKEVsZlcoQWRkcikpIGw7CisKKyAgICAgIC8qIFRoZSBwbHRnb3RbMl0gZW50cnkgY29udGFp
bnMgdGhlIGFkZHJlc3Mgb2YgYSBmdW5jdGlvbiB3aGljaCBnZXRzCisJIGNhbGxlZCB0byBnZXQg
dGhlIGFkZHJlc3Mgb2YgYSBzbyBmYXIgdW5yZXNvbHZlZCBmdW5jdGlvbiBhbmQKKwkganVtcCB0
byBpdC4gIFRoZSBwcm9maWxpbmcgZXh0ZW5zaW9uIG9mIHRoZSBkeW5hbWljIGxpbmtlciBhbGxv
d3MKKwkgdG8gaW50ZXJjZXB0IHRoZSBjYWxscyB0byBjb2xsZWN0IGluZm9ybWF0aW9uLiAgSW4g
dGhpcyBjYXNlIHdlCisJIGRvbid0IHN0b3JlIHRoZSBhZGRyZXNzIGluIHRoZSBHT1Qgc28gdGhh
dCBhbGwgZnV0dXJlIGNhbGxzIGFsc28KKwkgZW5kIGluIHRoaXMgZnVuY3Rpb24uICAqLworI2lm
IDAgLyogUHJvZmlsaW5nIG5vdCBzdXBwb3J0ZWQgaW4gT3BlblJJU0MgeWV0IChuZWVkIHRvIGlt
cGxlbWVudAorCSBfZGxfcnVudGltZV9wcm9maWxlKS4gICovCisgICAgICBpZiAoIHByb2ZpbGUp
CisJeworCSAgIHBsdGdvdFsyXSA9IChFbGZXKEFkZHIpKSAmX2RsX3J1bnRpbWVfcHJvZmlsZTsK
KworCSAgaWYgKEdMUk8oZGxfcHJvZmlsZSkgIT0gTlVMTAorCSAgICAgICYmIF9kbF9uYW1lX21h
dGNoX3AgKEdMUk8oZGxfcHJvZmlsZSksIGwpKQorCSAgICAvKiBTYXkgdGhhdCB3ZSByZWFsbHkg
d2FudCBwcm9maWxpbmcgYW5kIHRoZSB0aW1lcnMgYXJlCisJICAgICAgIHN0YXJ0ZWQuICAqLwor
CSAgICBHTChkbF9wcm9maWxlX21hcCkgPSBsOworCX0KKyAgICAgIGVsc2UKKyNlbmRpZgorCXsK
KwkgIC8qIFRoaXMgZnVuY3Rpb24gd2lsbCBnZXQgY2FsbGVkIHRvIGZpeCB1cCB0aGUgR09UIGVu
dHJ5CisJICAgICBpbmRpY2F0ZWQgYnkgdGhlIG9mZnNldCBvbiB0aGUgc3RhY2ssIGFuZCB0aGVu
IGp1bXAgdG8KKwkgICAgIHRoZSByZXNvbHZlZCBhZGRyZXNzLiAgKi8KKwkgIHBsdGdvdFsyXSA9
IChFbGZXKEFkZHIpKSAmX2RsX3J1bnRpbWVfcmVzb2x2ZTsKKwl9CisKKyAgICB9CisKKyAgcmV0
dXJuIGxhenk7Cit9CisKKy8qIE1hc2sgaWRlbnRpZnlpbmcgYWRkcmVzc2VzIHJlc2VydmVkIGZv
ciB0aGUgdXNlciBwcm9ncmFtLAorICAgd2hlcmUgdGhlIGR5bmFtaWMgbGlua2VyIHNob3VsZCBu
b3QgbWFwIGFueXRoaW5nLiAgKi8KKyNkZWZpbmUgRUxGX01BQ0hJTkVfVVNFUl9BRERSRVNTX01B
U0sgICAweGY4MDAwMDAwVUwKKworLyogV2UgZGVmaW5lIGFuIGluaXRpYWxpemF0aW9uIGZ1bmN0
aW9ucy4gIFRoaXMgaXMgY2FsbGVkIHZlcnkgZWFybHkgaW4KKyAgIF9kbF9zeXNkZXBfc3RhcnQu
ICAqLworI2RlZmluZSBETF9QTEFURk9STV9JTklUIGRsX3BsYXRmb3JtX2luaXQgKCkKKworc3Rh
dGljIGlubGluZSB2b2lkIF9fYXR0cmlidXRlX18gKCh1bnVzZWQpKQorZGxfcGxhdGZvcm1faW5p
dCAodm9pZCkKK3sKKyAgaWYgKEdMUk8oZGxfcGxhdGZvcm0pICE9IE5VTEwgJiYgKkdMUk8oZGxf
cGxhdGZvcm0pID09ICdcMCcpCisgICAgLyogQXZvaWQgYW4gZW1wdHkgc3RyaW5nIHdoaWNoIHdv
dWxkIGRpc3R1cmIgdXMuICAqLworICAgIEdMUk8oZGxfcGxhdGZvcm0pID0gTlVMTDsKK30KKwor
c3RhdGljIGlubGluZSBFbGZXKEFkZHIpCitlbGZfbWFjaGluZV9maXh1cF9wbHQgKHN0cnVjdCBs
aW5rX21hcCAqbWFwLCBsb29rdXBfdCB0LAorCQkgICAgICAgY29uc3QgRWxmVyhTeW0pICpyZWZz
eW0sIGNvbnN0IEVsZlcoU3ltKSAqc3ltLAorCQkgICAgICAgY29uc3QgRWxmVyhSZWxhKSAqcmVs
b2MsCisJCSAgICAgICBFbGZXKEFkZHIpICpyZWxvY19hZGRyLCBFbGZXKEFkZHIpIHZhbHVlKQor
eworICByZXR1cm4gKnJlbG9jX2FkZHIgPSB2YWx1ZTsKK30KKworLyogUmV0dXJuIHRoZSBmaW5h
bCB2YWx1ZSBvZiBhIHBsdCByZWxvY2F0aW9uLiAgKi8KK3N0YXRpYyBpbmxpbmUgRWxmMzJfQWRk
cgorZWxmX21hY2hpbmVfcGx0X3ZhbHVlIChzdHJ1Y3QgbGlua19tYXAgKm1hcCwgY29uc3QgRWxm
MzJfUmVsYSAqcmVsb2MsCisJCSAgICAgICBFbGYzMl9BZGRyIHZhbHVlKQoreworICByZXR1cm4g
dmFsdWUgKyByZWxvYy0+cl9hZGRlbmQ7Cit9CisKKworI2VuZGlmIC8qICFkbF9tYWNoaW5lX2gg
Ki8KKworI2lmZGVmIFJFU09MVkVfTUFQCisKKy8qIFBlcmZvcm0gdGhlIHJlbG9jYXRpb24gc3Bl
Y2lmaWVkIGJ5IFJFTE9DIGFuZCBTWU0gKHdoaWNoIGlzIGZ1bGx5IHJlc29sdmVkKS4KKyAgIE1B
UCBpcyB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlbG9jLiAgKi8KKworc3RhdGljIGlubGlu
ZSB2b2lkCitfX2F0dHJpYnV0ZSAoKGFsd2F5c19pbmxpbmUpKQorZWxmX21hY2hpbmVfcmVsYSAo
c3RydWN0IGxpbmtfbWFwICptYXAsIHN0cnVjdCByX3Njb3BlX2VsZW0gKnNjb3BlW10sCisJCSAg
Y29uc3QgRWxmVyhSZWxhKSAqcmVsb2MsIGNvbnN0IEVsZlcoU3ltKSAqc3ltLAorCQkgIGNvbnN0
IHN0cnVjdCByX2ZvdW5kX3ZlcnNpb24gKnZlcnNpb24sCisJCSAgdm9pZCAqY29uc3QgcmVsb2Nf
YWRkcl9hcmcsIGludCBza2lwX2lmdW5jKQoreworICBFbGYzMl9BZGRyICpjb25zdCByZWxvY19h
ZGRyID0gcmVsb2NfYWRkcl9hcmc7CisgIGNvbnN0IHVuc2lnbmVkIGludCByX3R5cGUgPSBFTEYz
Ml9SX1RZUEUgKHJlbG9jLT5yX2luZm8pOworCisgIGlmIChfX2dsaWJjX3VubGlrZWx5IChyX3R5
cGUgPT0gUl9PUjFLX05PTkUpKQorICAgIHJldHVybjsKKyAgZWxzZQorICAgIHsKKyMgaWZuZGVm
IFJFU09MVkVfQ09ORkxJQ1RfRklORF9NQVAKKyAgICAgIGNvbnN0IEVsZjMyX1N5bSAqY29uc3Qg
cmVmc3ltID0gc3ltOworIyBlbmRpZgorICAgICAgc3RydWN0IGxpbmtfbWFwICpzeW1fbWFwID0g
UkVTT0xWRV9NQVAgKG1hcCwgc2NvcGUsICZzeW0sIHZlcnNpb24sCisJCQkJCSAgICAgIHJfdHlw
ZSk7CisgICAgICBFbGYzMl9BZGRyIHZhbHVlID0gU1lNQk9MX0FERFJFU1MgKHN5bV9tYXAsIHN5
bSwgdHJ1ZSk7CisKKyAgICAgIGlmIChzeW0gIT0gTlVMTAorCSAgJiYgX19nbGliY191bmxpa2Vs
eSAoRUxGVyhTVF9UWVBFKSAoc3ltLT5zdF9pbmZvKSA9PSBTVFRfR05VX0lGVU5DKQorCSAgJiYg
X19nbGliY19saWtlbHkgKHN5bS0+c3Rfc2huZHggIT0gU0hOX1VOREVGKQorCSAgJiYgX19nbGli
Y19saWtlbHkgKCFza2lwX2lmdW5jKSkKKwl2YWx1ZSA9IGVsZl9pZnVuY19pbnZva2UgKHZhbHVl
KTsKKworICAgICAgc3dpdGNoIChyX3R5cGUpCisJeworIyBpZm5kZWYgUkVTT0xWRV9DT05GTElD
VF9GSU5EX01BUAorCSAgY2FzZSBSX09SMUtfQ09QWToKKwkgICAgaWYgKHN5bSA9PSBOVUxMKQor
CSAgICAgIC8qIFRoaXMgY2FuIGhhcHBlbiBpbiB0cmFjZSBtb2RlIGlmIGFuIG9iamVjdCBjb3Vs
ZCBub3QgYmUKKwkJIGZvdW5kLiAgKi8KKwkgICAgICBicmVhazsKKwkgICAgaWYgKF9fZ2xpYmNf
dW5saWtlbHkgKHN5bS0+c3Rfc2l6ZSA+IHJlZnN5bS0+c3Rfc2l6ZSkKKwkJfHwgKF9fZ2xpYmNf
dW5saWtlbHkgKHN5bS0+c3Rfc2l6ZSA8IHJlZnN5bS0+c3Rfc2l6ZSkKKwkJICAmJiBHTFJPKGRs
X3ZlcmJvc2UpKSkKKwkgICAgeworCSAgICAgIGNvbnN0IGNoYXIgKnN0cnRhYjsKKworCSAgICAg
IHN0cnRhYiA9IChjb25zdCBjaGFyICopIERfUFRSIChtYXAsIGxfaW5mb1tEVF9TVFJUQUJdKTsK
KwkgICAgICBfZGxfZXJyb3JfcHJpbnRmICgiXAorJXM6IFN5bWJvbCBgJXMnIGhhcyBkaWZmZXJl
bnQgc2l6ZSBpbiBzaGFyZWQgb2JqZWN0LCBjb25zaWRlciByZS1saW5raW5nXG4iLAorCQkgIHJ0
bGRfcHJvZ25hbWUgPzogIjxwcm9ncmFtIG5hbWUgdW5rbm93bj4iLAorCQkgIHN0cnRhYiArIHJl
ZnN5bS0+c3RfbmFtZSk7CisJICAgIH0KKwkgICAgbWVtY3B5IChyZWxvY19hZGRyX2FyZywgKHZv
aWQgKikgdmFsdWUsCisJCU1JTiAoc3ltLT5zdF9zaXplLCByZWZzeW0tPnN0X3NpemUpKTsKKwkg
ICAgYnJlYWs7CisjIGVuZGlmIC8qICFSRVNPTFZFX0NPTkZMSUNUX0ZJTkRfTUFQICovCisJICBj
YXNlIFJfT1IxS18zMjoKKwkgICAgLyogU3VwcG9ydCByZWxvY2F0aW9ucyBvbiBtaXMtYWxpZ25l
ZCBvZmZzZXRzLiAgKi8KKwkgICAgdmFsdWUgKz0gcmVsb2MtPnJfYWRkZW5kOworCSAgICBtZW1j
cHkgKHJlbG9jX2FkZHJfYXJnLCAmdmFsdWUsIDQpOworCSAgICBicmVhazsKKwkgIGNhc2UgUl9P
UjFLX0dMT0JfREFUOgorCSAgY2FzZSBSX09SMUtfSk1QX1NMT1Q6CisJICAgICpyZWxvY19hZGRy
ID0gdmFsdWUgKyByZWxvYy0+cl9hZGRlbmQ7CisJICAgIGJyZWFrOworCSAgY2FzZSBSX09SMUtf
VExTX0RUUE1PRDoKKyMgaWZkZWYgUlRMRF9CT09UU1RSQVAKKwkgICAgLyogRHVyaW5nIHN0YXJ0
dXAgdGhlIGR5bmFtaWMgbGlua2VyIGlzIGFsd2F5cyB0aGUgbW9kdWxlCisJICAgICAgIHdpdGgg
aW5kZXggMS4gICovCisJICAgICpyZWxvY19hZGRyID0gMTsKKyMgZWxzZQorCSAgICBpZiAoc3lt
X21hcCAhPSBOVUxMKQorCSAgICAgICpyZWxvY19hZGRyID0gc3ltX21hcC0+bF90bHNfbW9kaWQ7
CisjIGVuZGlmCisJICAgIGJyZWFrOworCSAgY2FzZSBSX09SMUtfVExTX0RUUE9GRjoKKyMgaWZu
ZGVmIFJUTERfQk9PVFNUUkFQCisJICAgICpyZWxvY19hZGRyID0gKHN5bSA9PSBOVUxMID8gMCA6
IHN5bS0+c3RfdmFsdWUpICsgcmVsb2MtPnJfYWRkZW5kOworIyBlbmRpZgorCSAgICBicmVhazsK
KworCSAgY2FzZSBSX09SMUtfVExTX1RQT0ZGOgorIyBpZmRlZiBSVExEX0JPT1RTVFJBUAorCSAg
ICAqcmVsb2NfYWRkciA9IHN5bS0+c3RfdmFsdWUgKyByZWxvYy0+cl9hZGRlbmQgKworCSAgICAg
IG1hcC0+bF90bHNfb2Zmc2V0IC0gVExTX1RDQl9TSVpFOworIyBlbHNlCisJICAgIGlmIChzeW1f
bWFwICE9IE5VTEwpCisJICAgICAgeworCQlDSEVDS19TVEFUSUNfVExTIChtYXAsIHN5bV9tYXAp
OworCQkqcmVsb2NfYWRkciA9IHN5bS0+c3RfdmFsdWUgKyByZWxvYy0+cl9hZGRlbmQgKworCQkg
IHN5bV9tYXAtPmxfdGxzX29mZnNldCAtIFRMU19UQ0JfU0laRTsKKwkgICAgICB9CisjIGVuZGlm
CisJICAgIGJyZWFrOworCSAgZGVmYXVsdDoKKwkgICAgX2RsX3JlbG9jX2JhZF90eXBlIChtYXAs
IHJfdHlwZSwgMCk7CisJICAgIGJyZWFrOworCX0KKyAgICB9Cit9CisKK3N0YXRpYyBpbmxpbmUg
dm9pZAorX19hdHRyaWJ1dGVfXyAoKGFsd2F5c19pbmxpbmUpKQorZWxmX21hY2hpbmVfcmVsYV9y
ZWxhdGl2ZSAoRWxmMzJfQWRkciBsX2FkZHIsIGNvbnN0IEVsZjMyX1JlbGEgKnJlbG9jLAorCQkJ
ICAgdm9pZCAqY29uc3QgcmVsb2NfYWRkcl9hcmcpCit7CisgIEVsZjMyX0FkZHIgKmNvbnN0IHJl
bG9jX2FkZHIgPSByZWxvY19hZGRyX2FyZzsKKyAgKnJlbG9jX2FkZHIgPSBsX2FkZHIgKyByZWxv
Yy0+cl9hZGRlbmQ7Cit9CisKK3N0YXRpYyBpbmxpbmUgdm9pZAorX19hdHRyaWJ1dGVfXyAoKGFs
d2F5c19pbmxpbmUpKQorZWxmX21hY2hpbmVfbGF6eV9yZWwgKHN0cnVjdCBsaW5rX21hcCAqbWFw
LCBzdHJ1Y3Qgcl9zY29wZV9lbGVtICpzY29wZVtdLAorCQkgICAgICBFbGZXKEFkZHIpIGxfYWRk
ciwgY29uc3QgRWxmVyhSZWxhKSAqcmVsb2MsCisJCSAgICAgIGludCBza2lwX2lmdW5jKQorewor
ICBFbGYzMl9BZGRyICpjb25zdCByZWxvY19hZGRyID0gKHZvaWQgKikgKGxfYWRkciArIHJlbG9j
LT5yX29mZnNldCk7CisgIGNvbnN0IHVuc2lnbmVkIGludCByX3R5cGUgPSBFTEYzMl9SX1RZUEUg
KHJlbG9jLT5yX2luZm8pOworCisgIGlmIChfX2dsaWJjX2xpa2VseSAocl90eXBlID09IFJfT1Ix
S19KTVBfU0xPVCkpCisgICAgICAqcmVsb2NfYWRkciArPSBsX2FkZHI7CisgIGVsc2UgaWYgKF9f
Z2xpYmNfdW5saWtlbHkgKHJfdHlwZSA9PSBSX09SMUtfTk9ORSkpCisgICAgcmV0dXJuOworICBl
bHNlCisgICAgX2RsX3JlbG9jX2JhZF90eXBlIChtYXAsIHJfdHlwZSwgMSk7Cit9CisKKyNlbmRp
ZiAvKiBSRVNPTFZFX01BUCAqLwpkaWZmIC0tZ2l0IGEvc3lzZGVwcy9vcjFrL2RsLXN0YXJ0LlMg
Yi9zeXNkZXBzL29yMWsvZGwtc3RhcnQuUwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAw
MDAwMDAwLi5lY2IxNTA1NDI3Ci0tLSAvZGV2L251bGwKKysrIGIvc3lzZGVwcy9vcjFrL2RsLXN0
YXJ0LlMKQEAgLTAsMCArMSw5OCBAQAorLyogTWFjaGluZS1kZXBlbmRlbnQgRUxGIHN0YXJ0dXAg
Y29kZS4gIE9wZW5SSVNDIHZlcnNpb24uCisgICBDb3B5cmlnaHQgKEMpIDIwMjEgRnJlZSBTb2Z0
d2FyZSBGb3VuZGF0aW9uLCBJbmMuCisgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgR05VIEMg
TGlicmFyeS4KKworICAgVGhlIEdOVSBDIExpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNh
biByZWRpc3RyaWJ1dGUgaXQgYW5kL29yCisgICBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9m
IHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCisgICBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBi
eSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKKyAgIHZlcnNpb24gMi4xIG9m
IHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgorCisg
ICBUaGUgR05VIEMgTGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdp
bGwgYmUgdXNlZnVsLAorICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4g
dGhlIGltcGxpZWQgd2FycmFudHkgb2YKKyAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZP
UiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCisgICBMZXNzZXIgR2VuZXJhbCBQ
dWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgorCisgICBZb3Ugc2hvdWxkIGhhdmUgcmVj
ZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCisgICBMaWNlbnNl
IGFsb25nIHdpdGggdGhlIEdOVSBDIExpYnJhcnk7IGlmIG5vdCwgc2VlCisgICA8aHR0cHM6Ly93
d3cuZ251Lm9yZy9saWNlbnNlcy8+LiAgKi8KKworI2luY2x1ZGUgPHN5c2RlcC5oPgorCisvKiBJ
bml0aWFsIGVudHJ5IHBvaW50IGNvZGUgZm9yIHRoZSBkeW5hbWljIGxpbmtlci4KKyAgIFRoZSBm
dW5jdGlvbiBfZGxfc3RhcnQgaXMgdGhlIHJlYWwgZW50cnkgcG9pbnQ7CisgICBpdCdzIHJldHVy
biB2YWx1ZSBpcyB0aGUgdXNlciBwcm9ncmFtJ3MgZW50cnkgcG9pbnQuICAqLworRU5UUlkgKF9z
dGFydCkKKwkvKiBDb3VudCBhcmd1bWVudHMgaW4gcjExICovCisJbC5vcmkJcjMsIHIxLCAwCisJ
bC5tb3ZoaQlyMTEsIDAKKzE6CisJbC5hZGRpCXIzLCByMywgNAorCWwubHd6CXIxMiwgMChyMykK
KwlsLnNmbmVpCXIxMiwgMAorCWwuYWRkaQlyMTEsIHIxMSwgMQorCWwuYmYJMWIKKwkgbC5ub3AK
KwlsLmFkZGkJcjExLCByMTEsIC0xCisJLyogc3RvcmUgYXJndW1lbnQgY291bnRlciB0byBzdGFj
ay4gICovCisJbC5zdwkwKHIxKSwgcjExCisKKwkvKiBMb2FkIHRoZSBQSUMgcmVnaXN0ZXIuICAq
LworCWwuamFsCTB4OAorCSBsLm1vdmhpIHIxNiwgZ290cGNoaShfR0xPQkFMX09GRlNFVF9UQUJM
RV8tNCkKKwlsLm9yaQlyMTYsIHIxNiwgZ290cGNsbyhfR0xPQkFMX09GRlNFVF9UQUJMRV8rMCkK
KwlsLmFkZAlyMTYsIHIxNiwgcjkKKworCWwub3JpCXIzLCByMSwgMAorCisJbC5qYWwJX2RsX3N0
YXJ0CisJIGwubm9wCisJLyogU2F2ZSB1c2VyIGVudHJ5IGluIGEgY2FsbCBzYXZlZCByZWcuICAq
LworCWwub3JpCXIyMiwgcjExLCAwCisJLyogRmFsbCB0aHJvdWdoIHRvIF9kbF9zdGFydF91c2Vy
LiAgKi8KKworX2RsX3N0YXJ0X3VzZXI6CisJLyogU2V0IHVwIGZvciBfZGxfaW5pdC4gICovCisK
KwkvKiBMb2FkIF9ydGxkX2xvY2FsIChhLmsuYSBfZGxfbG9hZGVkKS4gICovCisJbC5sd3oJcjEy
LCBnb3QoX3J0bGRfbG9jYWwpKHIxNikKKwlsLmx3eglyMywgMChyMTIpCisKKwkvKiBMb2FkIGFy
Z2MgKi8KKwlsLmx3eglyMTgsIGdvdChfZGxfYXJnYykocjE2KQorCWwubHd6CXI0LCAwKHIxOCkK
KworCS8qIExvYWQgYXJndiAqLworCWwubHd6CXIyMCwgZ290KF9kbF9hcmd2KShyMTYpCisJbC5s
d3oJcjUsIDAocjIwKQorCisJLyogTG9hZCBlbnZwID0gJmFyZ3ZbYXJnYyArIDFdLiAgKi8KKwls
LnNsbGkJcjYsIHI0LCAyCisJbC5hZGRpCXI2LCByNiwgNAorCWwuYWRkCXI2LCByNiwgcjUKKwor
CWwuamFsCXBsdChfZGxfaW5pdCkKKwkgbC5ub3AKKworCS8qIE5vdyBzZXQgdXAgZm9yIHVzZXIg
ZW50cnkuCisJICAgVGhlIGFscmVhZHkgZGVmaW5lZCBBQkkgbG9hZHMgYXJnYyBhbmQgYXJndiBm
cm9tIHRoZSBzdGFjay4KKworCSAgIGFyZ2MgPSAwKHIxKQorCSAgIGFyZ3YgPSByMSArIDQKKwkq
LworCisJLyogTG9hZCBTUCBhcyBhcmd2IC0gNC4gICovCisJbC5sd3oJcjMsIDAocjIwKQorCWwu
YWRkaQlyMSwgcjMsIC00CisKKwkvKiBTYXZlIGFyZ2MuICAqLworCWwubHd6CXIzLCAwKHIxOCkK
KwlsLnN3CTAocjEpLCByMworCisJLyogUGFzcyBfZGxfZmluaSBmdW5jdGlvbiBhZGRyZXNzIHRv
IF9zdGFydC4KKwkgICBOZXh0IHN0YXJ0LlMgd2lsbCB0aGVuIHBhc3MgdGhpcyBhcyBydGxkX2Zp
bmkgdG8gX19saWJjX3N0YXJ0X21haW4uICAqLworCWwubHd6CXIzLCBnb3QoX2RsX2ZpbmkpKHIx
NikKKworCWwuanIJcjIyCisJIGwubm9wCisKK0VORCAoX3N0YXJ0KQpkaWZmIC0tZ2l0IGEvc3lz
ZGVwcy9vcjFrL2xkc29kZWZzLmggYi9zeXNkZXBzL29yMWsvbGRzb2RlZnMuaApuZXcgZmlsZSBt
b2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwLi44OTcxM2ZjYzcwCi0tLSAvZGV2L251bGwKKysr
IGIvc3lzZGVwcy9vcjFrL2xkc29kZWZzLmgKQEAgLTAsMCArMSw0MCBAQAorLyogUnVuLXRpbWUg
ZHluYW1pYyBsaW5rZXIgZGF0YSBzdHJ1Y3R1cmVzIGZvciBsb2FkZWQgRUxGIHNoYXJlZCBvYmpl
Y3RzLgorICAgQ29weXJpZ2h0IChDKSAyMDIxIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgSW5j
LgorICAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEdOVSBDIExpYnJhcnkuCisKKyAgIFRoZSBH
TlUgQyBMaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFu
ZC9vcgorICAgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5l
cmFsIFB1YmxpYworICAgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUg
Rm91bmRhdGlvbjsgZWl0aGVyCisgICB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0
IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KKworICAgVGhlIEdOVSBDIExpYnJhcnkg
aXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKKyAgIGJ1
dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5
IG9mCisgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBP
U0UuICBTZWUgdGhlIEdOVQorICAgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1v
cmUgZGV0YWlscy4KKworICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUg
R05VIExlc3NlciBHZW5lcmFsIFB1YmxpYworICAgTGljZW5zZSBhbG9uZyB3aXRoIHRoZSBHTlUg
QyBMaWJyYXJ5OyBpZiBub3QsIHNlZQorICAgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMv
Pi4gICovCisKKyNpZm5kZWYJX09SMUtfTERTT0RFRlNfSAorI2RlZmluZQlfT1IxS19MRFNPREVG
U19ICTEKKworI2luY2x1ZGUgPGVsZi5oPgorCitzdHJ1Y3QgTGFfb3Ixa19yZWdzOworc3RydWN0
IExhX29yMWtfcmV0dmFsOworCisjZGVmaW5lIEFSQ0hfUExURU5URVJfTUVNQkVSUwkJCQkJCVwK
KyAgICB1aW50cHRyX3QgKCpvcjFrX2dudV9wbHRlbnRlcikgKEVsZjMyX1N5bSAqLCB1bnNpZ25l
ZCBpbnQsIHVpbnRwdHJfdCAqLCBcCisJCQkJICB1aW50cHRyX3QgKiwgc3RydWN0IExhX29yMWtf
cmVncyAqLCBcCisJCQkJICB1bnNpZ25lZCBpbnQgKiwgY29uc3QgY2hhciAqbmFtZSwJXAorCQkJ
CSAgbG9uZyBpbnQgKmZyYW1lc2l6ZXApCisKKyNkZWZpbmUgQVJDSF9QTFRFWElUX01FTUJFUlMJ
CQkJCQlcCisgICAgdW5zaWduZWQgaW50ICgqb3Ixa19nbnVfcGx0ZXhpdCkgKEVsZjMyX1N5bSAq
LCB1bnNpZ25lZCBpbnQsIHVpbnRwdHJfdCAqLCBcCisJCQkJICAgIHVpbnRwdHJfdCAqLCBjb25z
dCBzdHJ1Y3QgTGFfb3Ixa19yZWdzICosIFwKKwkJCQkgICAgc3RydWN0IExhX29yMWtfcmV0dmFs
ICosIGNvbnN0IGNoYXIgKikKKworI2luY2x1ZGVfbmV4dCA8bGRzb2RlZnMuaD4KKworI2VuZGlm
CmRpZmYgLS1naXQgYS9zeXNkZXBzL29yMWsvc290cnVzcy1saWIuYyBiL3N5c2RlcHMvb3Ixay9z
b3RydXNzLWxpYi5jCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAuLmVlMTZm
ODQ0NTYKLS0tIC9kZXYvbnVsbAorKysgYi9zeXNkZXBzL29yMWsvc290cnVzcy1saWIuYwpAQCAt
MCwwICsxLDUxIEBACisvKiBPdmVycmlkZSBnZW5lcmljIHNvdHJ1c3MtbGliLmMgdG8gZGVmaW5l
IGFjdHVhbCBmdW5jdGlvbnMgZm9yIE9wZW5SSVNDLgorICAgQ29weXJpZ2h0IChDKSAyMDIxIEZy
ZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgSW5jLgorICAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhl
IEdOVSBDIExpYnJhcnkuCisKKyAgIFRoZSBHTlUgQyBMaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7
IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vcgorICAgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0
ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYworICAgTGljZW5zZSBhcyBwdWJs
aXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyCisgICB2ZXJzaW9u
IDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lv
bi4KKworICAgVGhlIEdOVSBDIExpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhh
dCBpdCB3aWxsIGJlIHVzZWZ1bCwKKyAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91
dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCisgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklU
TkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVQorICAgTGVzc2VyIEdl
bmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KKworICAgWW91IHNob3VsZCBo
YXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYworICAg
TGljZW5zZSBhbG9uZyB3aXRoIHRoZSBHTlUgQyBMaWJyYXJ5LiAgSWYgbm90LCBzZWUKKyAgIDxo
dHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uICAqLworCisjZGVmaW5lIEhBVkVfQVJDSF9Q
TFRFTlRFUgorI2RlZmluZSBIQVZFX0FSQ0hfUExURVhJVAorCisjaW5jbHVkZSA8ZWxmL3NvdHJ1
c3MtbGliLmM+CisKK0VsZlcoQWRkcikKK2xhX29yMWtfZ251X3BsdGVudGVyIChFbGZXKFN5bSkg
KnN5bSBfX2F0dHJpYnV0ZV9fICgodW51c2VkKSksCisJCSAgICAgICB1bnNpZ25lZCBpbnQgbmR4
IF9fYXR0cmlidXRlX18gKCh1bnVzZWQpKSwKKwkJICAgICAgIHVpbnRwdHJfdCAqcmVmY29vaywg
dWludHB0cl90ICpkZWZjb29rLAorCQkgICAgICAgTGFfb3Ixa19yZWdzICpyZWdzLCB1bnNpZ25l
ZCBpbnQgKmZsYWdzLAorCQkgICAgICAgY29uc3QgY2hhciAqc3ltbmFtZSwgbG9uZyBpbnQgKmZy
YW1lc2l6ZXApCit7CisgIHByaW50X2VudGVyIChyZWZjb29rLCBkZWZjb29rLCBzeW1uYW1lLAor
CSAgICAgICByZWdzLT5scl9yZWdbMF0sIHJlZ3MtPmxyX3JlZ1sxXSwgcmVncy0+bHJfcmVnWzJd
LAorCSAgICAgICAqZmxhZ3MpOworCisgIC8qIE5vIG5lZWQgdG8gY29weSBhbnl0aGluZywgd2Ug
d2lsbCBub3QgbmVlZCB0aGUgcGFyYW1ldGVycyBpbiBhbnkgY2FzZS4gICovCisgICpmcmFtZXNp
emVwID0gMDsKKworICByZXR1cm4gc3ltLT5zdF92YWx1ZTsKK30KKwordW5zaWduZWQgaW50Cits
YV9vcjFrX2dudV9wbHRleGl0IChFbGZXKFN5bSkgKnN5bSwgdW5zaWduZWQgaW50IG5keCwgdWlu
dHB0cl90ICpyZWZjb29rLAorCQkgICAgICB1aW50cHRyX3QgKmRlZmNvb2ssCisJCSAgICAgIGNv
bnN0IHN0cnVjdCBMYV9vcjFrX3JlZ3MgKmlucmVncywKKwkJICAgICAgc3RydWN0IExhX29yMWtf
cmV0dmFsICpvdXRyZWdzLAorCQkgICAgICBjb25zdCBjaGFyICpzeW1uYW1lKQoreworICBwcmlu
dF9leGl0IChyZWZjb29rLCBkZWZjb29rLCBzeW1uYW1lLCBvdXRyZWdzLT5scnZfcjMpOworCisg
IHJldHVybiAwOworfQpkaWZmIC0tZ2l0IGEvc3lzZGVwcy9vcjFrL3N0YXJ0LlMgYi9zeXNkZXBz
L29yMWsvc3RhcnQuUwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwLi4wNDI0
MzU1ZjM2Ci0tLSAvZGV2L251bGwKKysrIGIvc3lzZGVwcy9vcjFrL3N0YXJ0LlMKQEAgLTAsMCAr
MSw5OSBAQAorLyogc3RhcnQsIE9wZW5SSVNDIHZlcnNpb24uCisgICBDb3B5cmlnaHQgKEMpIDIw
MjEgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBJbmMuCisgICBUaGlzIGZpbGUgaXMgcGFydCBv
ZiB0aGUgR05VIEMgTGlicmFyeS4KKworICAgVGhlIEdOVSBDIExpYnJhcnkgaXMgZnJlZSBzb2Z0
d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yCisgICBtb2RpZnkgaXQgdW5kZXIg
dGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCisgICBMaWNlbnNlIGFz
IHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKKyAgIHZl
cnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2
ZXJzaW9uLgorCisgICBUaGUgR05VIEMgTGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9w
ZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAorICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3
aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKKyAgIE1FUkNIQU5UQUJJTElUWSBv
ciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCisgICBMZXNz
ZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgorCisgICBZb3Ugc2hv
dWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGlj
CisgICBMaWNlbnNlIGFsb25nIHdpdGggdGhlIEdOVSBDIExpYnJhcnk7IGlmIG5vdCwgd3JpdGUg
dG8gdGhlIEZyZWUKKyAgIFNvZnR3YXJlIEZvdW5kYXRpb24sIEluYy4sIDU5IFRlbXBsZSBQbGFj
ZSwgU3VpdGUgMzMwLCBCb3N0b24sIE1BCisgICAwMjExMS0xMzA3IFVTQS4gICovCisKKy8qIFRo
aXMgaXMgdGhlIGNhbm9uaWNhbCBlbnRyeSBwb2ludCwgdXN1YWxseSB0aGUgZmlyc3QgdGhpbmcg
aW4gdGhlIHRleHQKKyAgIHNlZ21lbnQuCisKKyAgIHNwICAgVGhlIHN0YWNrIGNvbnRhaW5zIHRo
ZSBhcmd1bWVudHMgYW5kIGVudmlyb25tZW50OgorICAgIDAoc3ApICAgICBhcmdjCisgICAgNChz
cCkgICAgIGFyZ3ZbMF0KKyAgICAuLi4KKyAgICAoNCphcmdjKShzcCkgICAgTlVMTAorICAgICg0
KihhcmdjKzEpKShzcCkgIGVudnBbMF0KKyAgICAuLi4KKyAgICBOVUxMCisgKi8KKworI2RlZmlu
ZSBfX0FTU0VNQkxZX18KKyNpbmNsdWRlIDxzeXNkZXAuaD4KKyNpbmNsdWRlIDxlbnRyeS5oPgor
CitFTlRSWSAoRU5UUllfUE9JTlQpCisKKwkvKiBTZXR1cCBBcmd1bWVudHMgdG8gdGhlIF9fbGli
Y19zdGFydF9tYWluIGZ1bmN0aW9uLiAgKi8KKworCS8qIFRha2UgdmFsdWVzIGZvciBhcmdjIGFu
ZCBhcmd2IG9mZiB0aGUgc3RhY2suCisJICAgVGhlc2Ugd2lsbCBiZSBwYXNzZWQgYXMgYXJndW1l
bnRzIHR3byBhbmQgdGhyZWUgdG8gbWFpbgorCSAgIGFuZCB0aHVzIGdvIGluIHJlZ2lzdGVycyBy
NCBhbmQgcjUsIHJlc3BlY3RpdmVseS4gICovCisJbC5sd3oJcjQsIDAocjEpCisJbC5hZGRpCXI1
LCByMSwgNAorCisJLyogUGFzcyBpbiBydGxkX2ZpbmkgZnJvbSBkbC1zdGFydC5TLiAgKi8KKwls
Lm9yCXI4LCByMywgcjMKKworI2lmZGVmIFBJQworCS8qIE9idGFpbiBhIHBvaW50ZXIgdG8gLmdv
dCBpbiByMTYgKi8KKwlsLmphbAkweDgKKwkgbC5tb3ZoaSByMTYsIGdvdHBjaGkoX0dMT0JBTF9P
RkZTRVRfVEFCTEVfLTQpCisJbC5vcmkJcjE2LCByMTYsIGdvdHBjbG8oX0dMT0JBTF9PRkZTRVRf
VEFCTEVfKzApCisJbC5hZGQJcjE2LCByMTYsIHI5CisKKwkvKiBQYXNzIGluIHRoZSB0aGUgbWFp
biBzeW1ib2wuICAqLworCWwubHd6CXIzLCBnb3QobWFpbikocjE2KQorI2Vsc2UKKwkvKiBQYXNz
IGluIHRoZSB0aGUgbWFpbiBzeW1ib2wuICAqLworCWwubW92aGkgcjMsIGhpKG1haW4pCisJbC5v
cmkJcjMsIHIzLCBsbyhtYWluKQorI2VuZGlmCisJLyogVXNlZCB0byBiZSBpbml0IGFuZCBmaW5p
LiAgKi8KKwlsLm1vdmhpCXI2LCAweDAKKwlsLm1vdmhpCXI3LCAweDAKKworCS8qIFB1c2ggc3Rh
Y2sgbGltaXQgb250byB0aGUgc3RhY2suCisJICAgVGhpcyBwcm92aWRlcyB0aGUgaGlnaGVzdCBz
dGFjayBhZGRyZXNzIHRvIHVzZXIgY29kZSAoYXMgc3RhY2sgZ3Jvd3MKKwkgICBkb3dud2FyZHMu
CisJICAgVGhpcyBpcyB0aGUgc2V2ZW50aCBhcmd1bWVudCB0byBfX2xpYmNfc3RhcnRfbWFpbiBh
bmQgdGh1cyBuZWVkcyB0bworCSAgIGJlIHBhc3NlZCBvbiB0aGUgc3RhY2suICAqLworCWwuc3cJ
LTQocjEpLCByMQorCisJLyogQWRqdXN0IHN0YWNrIHRvIGFjY291bnQgZm9yIGEgdG90YWwgb2Yg
NyBhcmdzIChpLmUuIHRoZSBsYXN0IG9uZSBpcworCSAgIG9uIHRoZSBzdGFjay4gICovCisJbC5h
ZGRpCXIxLCByMSwgLTQKKworCS8qIENsZWFyIHRoZSBmcmFtZSBwb2ludGVyIGFuZCBsaW5rIHJl
Z2lzdGVyIHNpbmNlIHRoaXMgaXMgdGhlCisJICAgb3V0ZXJtb3N0IGZyYW1lLiAgKi8KKwlsLm1v
dmhpCXIyLCAweDAKKwlsLm1vdmhpCXI5LCAweDAKKworCS8qIExldCB0aGUgbGliYyBjYWxsIG1h
aW4gYW5kIGV4aXQgd2l0aCBpdHMgcmV0dXJuIGNvZGUuICAqLworI2lmZGVmIFBJQworCWwuaglw
bHQoX19saWJjX3N0YXJ0X21haW4pCisjZWxzZQorCWwuaglfX2xpYmNfc3RhcnRfbWFpbgorI2Vu
ZGlmCisJIGwubm9wCitFTkQgKEVOVFJZX1BPSU5UKQorCisJLyogRGVmaW5lIGEgc3ltYm9sIGZv
ciB0aGUgZmlyc3QgcGllY2Ugb2YgaW5pdGlhbGl6ZWQgZGF0YS4gICovCisJLmRhdGEKKwkuZ2xv
YmwgX19kYXRhX3N0YXJ0CitfX2RhdGFfc3RhcnQ6CisJLmxvbmcgMAorCS53ZWFrIGRhdGFfc3Rh
cnQKKwlkYXRhX3N0YXJ0ID0gX19kYXRhX3N0YXJ0CmRpZmYgLS1naXQgYS9zeXNkZXBzL29yMWsv
dHN0LWF1ZGl0LmggYi9zeXNkZXBzL29yMWsvdHN0LWF1ZGl0LmgKbmV3IGZpbGUgbW9kZSAxMDA2
NDQKaW5kZXggMDAwMDAwMDAwMC4uNzllZTFiN2IwMgotLS0gL2Rldi9udWxsCisrKyBiL3N5c2Rl
cHMvb3Ixay90c3QtYXVkaXQuaApAQCAtMCwwICsxLDI0IEBACisvKiBEZWZpbml0aW9ucyBmb3Ig
dGVzdGluZyBQTFQgZW50cnkvZXhpdCBhdWRpdGluZy4gIE9wZW5SSVNDIHZlcnNpb24uCisgICBD
b3B5cmlnaHQgKEMpIDIwMjEgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBJbmMuCisKKyAgIFRo
aXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBHTlUgQyBMaWJyYXJ5LgorCisgICBUaGUgR05VIEMgTGli
cmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKKyAg
IG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJs
aWMKKyAgIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRp
b247IGVpdGhlcgorICAgdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9w
dGlvbikgYW55IGxhdGVyIHZlcnNpb24uCisKKyAgIFRoZSBHTlUgQyBMaWJyYXJ5IGlzIGRpc3Ry
aWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCisgICBidXQgV0lUSE9V
VCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgorICAg
TUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2Vl
IHRoZSBHTlUKKyAgIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFp
bHMuCisKKyAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNz
ZXIgR2VuZXJhbCBQdWJsaWMKKyAgIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGUgR05VIEMgTGlicmFy
eS4gIElmIG5vdCwgc2VlCisgICA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LiAgKi8K
KworI2RlZmluZSBwbHRlbnRlciBsYV9vcjFrX2dudV9wbHRlbnRlcgorI2RlZmluZSBwbHRleGl0
IGxhX29yMWtfZ251X3BsdGV4aXQKKyNkZWZpbmUgTGFfcmVncyBMYV9vcjFrX3JlZ3MKKyNkZWZp
bmUgTGFfcmV0dmFsIExhX29yMWtfcmV0dmFsCisjZGVmaW5lIGludF9yZXR2YWwgbHJ2X3IzCi0t
IAoyLjMxLjEKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
Ck9wZW5SSVNDIG1haWxpbmcgbGlzdApPcGVuUklTQ0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRw
czovL2xpc3RzLmxpYnJlY29yZXMub3JnL2xpc3RpbmZvL29wZW5yaXNjCg==
