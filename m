Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 2A54C20DCDF
	for <lists+openrisc@lfdr.de>; Mon, 29 Jun 2020 22:45:04 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id E866920D18;
	Mon, 29 Jun 2020 22:45:03 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 06FDD20CB3
 for <openrisc@lists.librecores.org>; Sat, 27 Jun 2020 16:35:41 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id D816420757;
 Sat, 27 Jun 2020 14:35:31 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1593268539;
 bh=j5xZgcFfVTDxdq8ek7evbbCRwziPSxC5JN7pXp1Ub14=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=IubaLiwxkYxVnX9ncXuZNkotQ5Sy0iy0AbkVzMsj3Hja3T1qb8aMO2mz6b1Mfc9ow
 cdHmfpTYNUSXleIP/cXyBxeSzcyWvj00xb/snuyWSZjho5Y/wHAu+Oi5FOEtbuN/PM
 fLrpGjpAltlgtqn1F/Cv0pYDHNRLBxMmFkMavFSQ=
From: Mike Rapoport <rppt@kernel.org>
To: linux-kernel@vger.kernel.org
Date: Sat, 27 Jun 2020 17:34:49 +0300
Message-Id: <20200627143453.31835-5-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200627143453.31835-1-rppt@kernel.org>
References: <20200627143453.31835-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Mon, 29 Jun 2020 22:44:54 +0200
Subject: [OpenRISC] [PATCH 4/8] asm-generic: pgalloc: provide generic
 pmd_alloc_one() and pmd_free_one()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: linux-ia64@vger.kernel.org, linux-sh@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>, Max Filippov <jcmvbkbc@gmail.com>,
 Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>, linux-csky@vger.kernel.org,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 linux-arch@vger.kernel.org, Stephen Rothwell <sfr@canb.auug.org.au>,
 linux-hexagon@vger.kernel.org, Joerg Roedel <joro@8bytes.org>,
 Christophe Leroy <christophe.leroy@csgroup.eu>,
 Mike Rapoport <rppt@linux.ibm.com>, Abdul Haleem <abdhalee@linux.vnet.ibm.com>,
 linux-snps-arc@lists.infradead.org, linux-xtensa@linux-xtensa.org,
 Arnd Bergmann <arnd@arndb.de>, linux-s390@vger.kernel.org,
 linux-um@lists.infradead.org, Steven Rostedt <rostedt@goodmis.org>,
 linux-m68k@lists.linux-m68k.org, openrisc@lists.librecores.org,
 Andy Lutomirski <luto@kernel.org>, linux-arm-kernel@lists.infradead.org,
 linux-parisc@vger.kernel.org, linux-mm@kvack.org, linux-mips@vger.kernel.org,
 linux-alpha@vger.kernel.org, Andrew Morton <akpm@linux-foundation.org>,
 linuxppc-dev@lists.ozlabs.org, Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKRm9yIG1vc3QgYXJjaGl0
ZWN0dXJlcyB0aGF0IHN1cHBvcnQgPjIgbGV2ZWxzIG9mIHBhZ2UgdGFibGVzLApwbWRfYWxsb2Nf
b25lKCkgaXMgYSB3cmFwcGVyIGZvciBfX2dldF9mcmVlX3BhZ2VzKCksIHNvbWV0aW1lcyB3aXRo
Cl9fR0ZQX1pFUk8gYW5kIHNvbWV0aW1lcyBmb2xsb3dlZCBieSBtZW1zZXQoMCkgaW5zdGVhZC4K
Ck1vcmUgZWxhYm9yYXRlIHZlcnNpb25zIG9uIGFybTY0IGFuZCB4ODYgYWNjb3VudCBtZW1vcnkg
Zm9yIHRoZSB1c2VyIHBhZ2UKdGFibGVzIGFuZCBjYWxsIHRvIHBndGFibGVfcG1kX3BhZ2VfY3Rv
cigpIGFzIHRoZSBwYXJ0IG9mIFBNRCBwYWdlCmluaXRpYWxpemF0aW9uLgoKTW92ZSB0aGUgYXJt
NjQgdmVyc2lvbiB0byBpbmNsdWRlL2FzbS1nZW5lcmljL3BnYWxsb2MuaCBhbmQgdXNlIHRoZSBn
ZW5lcmljCnZlcnNpb24gb24gc2V2ZXJhbCBhcmNoaXRlY3R1cmVzLgoKVGhlIHBndGFibGVfcG1k
X3BhZ2VfY3RvcigpIGlzIGEgTk9QIHdoZW4gQVJDSF9FTkFCTEVfU1BMSVRfUE1EX1BUTE9DSyBp
cwpub3QgZW5hYmxlZCwgc28gdGhlcmUgaXMgbm8gZnVuY3Rpb25hbCBjaGFuZ2UgZm9yIG1vc3Qg
YXJjaGl0ZWN0dXJlcyBleGNlcHQKb2YgdGhlIGFkZGl0aW9uIG9mIF9fR0ZQX0FDQ09VTlQgZm9y
IGFsbG9jYXRpb24gb2YgdXNlciBwYWdlIHRhYmxlcy4KClRoZSBwbWRfZnJlZSgpIGlzIGEgd3Jh
cHBlciBmb3IgZnJlZV9wYWdlKCkgaW4gYWxsIHRoZSBjYXNlcywgc28gbm8KZnVuY3Rpb25hbCBj
aGFuZ2UgaGVyZS4KClNpZ25lZC1vZmYtYnk6IE1pa2UgUmFwb3BvcnQgPHJwcHRAbGludXguaWJt
LmNvbT4KLS0tCiBhcmNoL2FscGhhL2luY2x1ZGUvYXNtL3BnYWxsb2MuaCAgICAgfCAxNSArLS0t
LS0tLS0tCiBhcmNoL2FybS9pbmNsdWRlL2FzbS9wZ2FsbG9jLmggICAgICAgfCAxMSAtLS0tLS0t
CiBhcmNoL2FybTY0L2luY2x1ZGUvYXNtL3BnYWxsb2MuaCAgICAgfCAyNyArLS0tLS0tLS0tLS0t
LS0tLQogYXJjaC9pYTY0L2luY2x1ZGUvYXNtL3BnYWxsb2MuaCAgICAgIHwgMTAgLS0tLS0tLQog
YXJjaC9taXBzL2luY2x1ZGUvYXNtL3BnYWxsb2MuaCAgICAgIHwgIDggKystLS0tCiBhcmNoL3Bh
cmlzYy9pbmNsdWRlL2FzbS9wZ2FsbG9jLmggICAgfCAxMSArKy0tLS0tCiBhcmNoL3Jpc2N2L2lu
Y2x1ZGUvYXNtL3BnYWxsb2MuaCAgICAgfCAxMyArLS0tLS0tLS0KIGFyY2gvc2gvaW5jbHVkZS9h
c20vcGdhbGxvYy5oICAgICAgICB8ICAzICsrCiBhcmNoL3VtL2luY2x1ZGUvYXNtL3BnYWxsb2Mu
aCAgICAgICAgfCAgOCArLS0tLS0KIGFyY2gvdW0vaW5jbHVkZS9hc20vcGd0YWJsZS0zbGV2ZWwu
aCB8ICAzIC0tCiBhcmNoL3VtL2tlcm5lbC9tZW0uYyAgICAgICAgICAgICAgICAgfCAxMiAtLS0t
LS0tLQogYXJjaC94ODYvaW5jbHVkZS9hc20vcGdhbGxvYy5oICAgICAgIHwgMjYgKy0tLS0tLS0t
LS0tLS0tLS0KIGluY2x1ZGUvYXNtLWdlbmVyaWMvcGdhbGxvYy5oICAgICAgICB8IDQzICsrKysr
KysrKysrKysrKysrKysrKysrKysrKysKIDEzIGZpbGVzIGNoYW5nZWQsIDU1IGluc2VydGlvbnMo
KyksIDEzNSBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9hcmNoL2FscGhhL2luY2x1ZGUvYXNt
L3BnYWxsb2MuaCBiL2FyY2gvYWxwaGEvaW5jbHVkZS9hc20vcGdhbGxvYy5oCmluZGV4IGExYTI5
ZjYwOTM0Yy4uNDgzNGNkNTJlOWQwIDEwMDY0NAotLS0gYS9hcmNoL2FscGhhL2luY2x1ZGUvYXNt
L3BnYWxsb2MuaAorKysgYi9hcmNoL2FscGhhL2luY2x1ZGUvYXNtL3BnYWxsb2MuaApAQCAtNSw3
ICs1LDcgQEAKICNpbmNsdWRlIDxsaW51eC9tbS5oPgogI2luY2x1ZGUgPGxpbnV4L21tem9uZS5o
PgogCi0jaW5jbHVkZSA8YXNtLWdlbmVyaWMvcGdhbGxvYy5oPgkvKiBmb3IgcHRlX3thbGxvYyxm
cmVlfV9vbmUgKi8KKyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9wZ2FsbG9jLmg+CiAKIC8qICAgICAg
CiAgKiBBbGxvY2F0ZSBhbmQgZnJlZSBwYWdlIHRhYmxlcy4gVGhlIHh4eF9rZXJuZWwoKSB2ZXJz
aW9ucyBhcmUKQEAgLTQwLDE3ICs0MCw0IEBAIHBnZF9mcmVlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1t
LCBwZ2RfdCAqcGdkKQogCWZyZWVfcGFnZSgodW5zaWduZWQgbG9uZylwZ2QpOwogfQogCi1zdGF0
aWMgaW5saW5lIHBtZF90ICoKLXBtZF9hbGxvY19vbmUoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVu
c2lnbmVkIGxvbmcgYWRkcmVzcykKLXsKLQlwbWRfdCAqcmV0ID0gKHBtZF90ICopX19nZXRfZnJl
ZV9wYWdlKEdGUF9QR1RBQkxFX1VTRVIpOwotCXJldHVybiByZXQ7Ci19Ci0KLXN0YXRpYyBpbmxp
bmUgdm9pZAotcG1kX2ZyZWUoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHBtZF90ICpwbWQpCi17Ci0J
ZnJlZV9wYWdlKCh1bnNpZ25lZCBsb25nKXBtZCk7Ci19Ci0KICNlbmRpZiAvKiBfQUxQSEFfUEdB
TExPQ19IICovCmRpZmYgLS1naXQgYS9hcmNoL2FybS9pbmNsdWRlL2FzbS9wZ2FsbG9jLmggYi9h
cmNoL2FybS9pbmNsdWRlL2FzbS9wZ2FsbG9jLmgKaW5kZXggMDY5ZGEzOTMxMTBjLi5jNWJkZmQ0
MDRlYTUgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtL2luY2x1ZGUvYXNtL3BnYWxsb2MuaAorKysgYi9h
cmNoL2FybS9pbmNsdWRlL2FzbS9wZ2FsbG9jLmgKQEAgLTIyLDE3ICsyMiw2IEBACiAKICNpZmRl
ZiBDT05GSUdfQVJNX0xQQUUKIAotc3RhdGljIGlubGluZSBwbWRfdCAqcG1kX2FsbG9jX29uZShz
dHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyKQotewotCXJldHVybiAocG1k
X3QgKilnZXRfemVyb2VkX3BhZ2UoR0ZQX0tFUk5FTCk7Ci19Ci0KLXN0YXRpYyBpbmxpbmUgdm9p
ZCBwbWRfZnJlZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgcG1kX3QgKnBtZCkKLXsKLQlCVUdfT04o
KHVuc2lnbmVkIGxvbmcpcG1kICYgKFBBR0VfU0laRS0xKSk7Ci0JZnJlZV9wYWdlKCh1bnNpZ25l
ZCBsb25nKXBtZCk7Ci19Ci0KIHN0YXRpYyBpbmxpbmUgdm9pZCBwdWRfcG9wdWxhdGUoc3RydWN0
IG1tX3N0cnVjdCAqbW0sIHB1ZF90ICpwdWQsIHBtZF90ICpwbWQpCiB7CiAJc2V0X3B1ZChwdWQs
IF9fcHVkKF9fcGEocG1kKSB8IFBNRF9UWVBFX1RBQkxFKSk7CmRpZmYgLS1naXQgYS9hcmNoL2Fy
bTY0L2luY2x1ZGUvYXNtL3BnYWxsb2MuaCBiL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20vcGdhbGxv
Yy5oCmluZGV4IDU4ZTkzNTgzZGRiNi4uNzI0NmQwYTY2MmUxIDEwMDY0NAotLS0gYS9hcmNoL2Fy
bTY0L2luY2x1ZGUvYXNtL3BnYWxsb2MuaAorKysgYi9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3Bn
YWxsb2MuaApAQCAtMTMsMzcgKzEzLDEyIEBACiAjaW5jbHVkZSA8YXNtL2NhY2hlZmx1c2guaD4K
ICNpbmNsdWRlIDxhc20vdGxiZmx1c2guaD4KIAotI2luY2x1ZGUgPGFzbS1nZW5lcmljL3BnYWxs
b2MuaD4JLyogZm9yIHB0ZV97YWxsb2MsZnJlZX1fb25lICovCisjaW5jbHVkZSA8YXNtLWdlbmVy
aWMvcGdhbGxvYy5oPgogCiAjZGVmaW5lIFBHRF9TSVpFCShQVFJTX1BFUl9QR0QgKiBzaXplb2Yo
cGdkX3QpKQogCiAjaWYgQ09ORklHX1BHVEFCTEVfTEVWRUxTID4gMgogCi1zdGF0aWMgaW5saW5l
IHBtZF90ICpwbWRfYWxsb2Nfb25lKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25n
IGFkZHIpCi17Ci0JZ2ZwX3QgZ2ZwID0gR0ZQX1BHVEFCTEVfVVNFUjsKLQlzdHJ1Y3QgcGFnZSAq
cGFnZTsKLQotCWlmIChtbSA9PSAmaW5pdF9tbSkKLQkJZ2ZwID0gR0ZQX1BHVEFCTEVfS0VSTkVM
OwotCi0JcGFnZSA9IGFsbG9jX3BhZ2UoZ2ZwKTsKLQlpZiAoIXBhZ2UpCi0JCXJldHVybiBOVUxM
OwotCWlmICghcGd0YWJsZV9wbWRfcGFnZV9jdG9yKHBhZ2UpKSB7Ci0JCV9fZnJlZV9wYWdlKHBh
Z2UpOwotCQlyZXR1cm4gTlVMTDsKLQl9Ci0JcmV0dXJuIHBhZ2VfYWRkcmVzcyhwYWdlKTsKLX0K
LQotc3RhdGljIGlubGluZSB2b2lkIHBtZF9mcmVlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBwbWRf
dCAqcG1kcCkKLXsKLQlCVUdfT04oKHVuc2lnbmVkIGxvbmcpcG1kcCAmIChQQUdFX1NJWkUtMSkp
OwotCXBndGFibGVfcG1kX3BhZ2VfZHRvcih2aXJ0X3RvX3BhZ2UocG1kcCkpOwotCWZyZWVfcGFn
ZSgodW5zaWduZWQgbG9uZylwbWRwKTsKLX0KLQogc3RhdGljIGlubGluZSB2b2lkIF9fcHVkX3Bv
cHVsYXRlKHB1ZF90ICpwdWRwLCBwaHlzX2FkZHJfdCBwbWRwLCBwdWR2YWxfdCBwcm90KQogewog
CXNldF9wdWQocHVkcCwgX19wdWQoX19waHlzX3RvX3B1ZF92YWwocG1kcCkgfCBwcm90KSk7CmRp
ZmYgLS1naXQgYS9hcmNoL2lhNjQvaW5jbHVkZS9hc20vcGdhbGxvYy5oIGIvYXJjaC9pYTY0L2lu
Y2x1ZGUvYXNtL3BnYWxsb2MuaAppbmRleCAyYTMwNTAzNDUwOTkuLjVkYTFmYzc2NDc3YiAxMDA2
NDQKLS0tIGEvYXJjaC9pYTY0L2luY2x1ZGUvYXNtL3BnYWxsb2MuaAorKysgYi9hcmNoL2lhNjQv
aW5jbHVkZS9hc20vcGdhbGxvYy5oCkBAIC01OSwxNiArNTksNiBAQCBwdWRfcG9wdWxhdGUoc3Ry
dWN0IG1tX3N0cnVjdCAqbW0sIHB1ZF90ICogcHVkX2VudHJ5LCBwbWRfdCAqIHBtZCkKIAlwdWRf
dmFsKCpwdWRfZW50cnkpID0gX19wYShwbWQpOwogfQogCi1zdGF0aWMgaW5saW5lIHBtZF90ICpw
bWRfYWxsb2Nfb25lKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHIpCi17
Ci0JcmV0dXJuIChwbWRfdCAqKV9fZ2V0X2ZyZWVfcGFnZShHRlBfS0VSTkVMIHwgX19HRlBfWkVS
Tyk7Ci19Ci0KLXN0YXRpYyBpbmxpbmUgdm9pZCBwbWRfZnJlZShzdHJ1Y3QgbW1fc3RydWN0ICpt
bSwgcG1kX3QgKnBtZCkKLXsKLQlmcmVlX3BhZ2UoKHVuc2lnbmVkIGxvbmcpcG1kKTsKLX0KLQog
I2RlZmluZSBfX3BtZF9mcmVlX3RsYih0bGIsIHBtZCwgYWRkcmVzcykJcG1kX2ZyZWUoKHRsYikt
Pm1tLCBwbWQpCiAKIHN0YXRpYyBpbmxpbmUgdm9pZApkaWZmIC0tZ2l0IGEvYXJjaC9taXBzL2lu
Y2x1ZGUvYXNtL3BnYWxsb2MuaCBiL2FyY2gvbWlwcy9pbmNsdWRlL2FzbS9wZ2FsbG9jLmgKaW5k
ZXggZmE3N2NiNzFmMzAzLi5lZWQxYjNlOGM2NDIgMTAwNjQ0Ci0tLSBhL2FyY2gvbWlwcy9pbmNs
dWRlL2FzbS9wZ2FsbG9jLmgKKysrIGIvYXJjaC9taXBzL2luY2x1ZGUvYXNtL3BnYWxsb2MuaApA
QCAtMTMsNyArMTMsOCBAQAogI2luY2x1ZGUgPGxpbnV4L21tLmg+CiAjaW5jbHVkZSA8bGludXgv
c2NoZWQuaD4KIAotI2luY2x1ZGUgPGFzbS1nZW5lcmljL3BnYWxsb2MuaD4JLyogZm9yIHB0ZV97
YWxsb2MsZnJlZX1fb25lICovCisjZGVmaW5lIF9fSEFWRV9BUkNIX1BNRF9BTExPQ19PTkUKKyNp
bmNsdWRlIDxhc20tZ2VuZXJpYy9wZ2FsbG9jLmg+CiAKIHN0YXRpYyBpbmxpbmUgdm9pZCBwbWRf
cG9wdWxhdGVfa2VybmVsKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBwbWRfdCAqcG1kLAogCXB0ZV90
ICpwdGUpCkBAIC03MCwxMSArNzEsNiBAQCBzdGF0aWMgaW5saW5lIHBtZF90ICpwbWRfYWxsb2Nf
b25lKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MpCiAJcmV0dXJu
IHBtZDsKIH0KIAotc3RhdGljIGlubGluZSB2b2lkIHBtZF9mcmVlKHN0cnVjdCBtbV9zdHJ1Y3Qg
Km1tLCBwbWRfdCAqcG1kKQotewotCWZyZWVfcGFnZXMoKHVuc2lnbmVkIGxvbmcpcG1kLCBQTURf
T1JERVIpOwotfQotCiAjZGVmaW5lIF9fcG1kX2ZyZWVfdGxiKHRsYiwgeCwgYWRkcikJcG1kX2Zy
ZWUoKHRsYiktPm1tLCB4KQogCiAjZW5kaWYKZGlmZiAtLWdpdCBhL2FyY2gvcGFyaXNjL2luY2x1
ZGUvYXNtL3BnYWxsb2MuaCBiL2FyY2gvcGFyaXNjL2luY2x1ZGUvYXNtL3BnYWxsb2MuaAppbmRl
eCA5YWM3NGRhMjU2YjguLjY4OTc2NmI5MTRlZCAxMDA2NDQKLS0tIGEvYXJjaC9wYXJpc2MvaW5j
bHVkZS9hc20vcGdhbGxvYy5oCisrKyBiL2FyY2gvcGFyaXNjL2luY2x1ZGUvYXNtL3BnYWxsb2Mu
aApAQCAtMTAsNyArMTAsOCBAQAogCiAjaW5jbHVkZSA8YXNtL2NhY2hlLmg+CiAKLSNpbmNsdWRl
IDxhc20tZ2VuZXJpYy9wZ2FsbG9jLmg+CS8qIGZvciBwdGVfe2FsbG9jLGZyZWV9X29uZSAqLwor
I2RlZmluZSBfX0hBVkVfQVJDSF9QTURfRlJFRQorI2luY2x1ZGUgPGFzbS1nZW5lcmljL3BnYWxs
b2MuaD4KIAogLyogQWxsb2NhdGUgdGhlIHRvcCBsZXZlbCBwZ2QgKHBhZ2UgZGlyZWN0b3J5KQog
ICoKQEAgLTY1LDE0ICs2Niw2IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBwdWRfcG9wdWxhdGUoc3Ry
dWN0IG1tX3N0cnVjdCAqbW0sIHB1ZF90ICpwdWQsIHBtZF90ICpwbWQpCiAJCQkoX191MzIpKF9f
cGEoKHVuc2lnbmVkIGxvbmcpcG1kKSA+PiBQeERfVkFMVUVfU0hJRlQpKSk7CiB9CiAKLXN0YXRp
YyBpbmxpbmUgcG1kX3QgKnBtZF9hbGxvY19vbmUoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2ln
bmVkIGxvbmcgYWRkcmVzcykKLXsKLQlwbWRfdCAqcG1kID0gKHBtZF90ICopX19nZXRfZnJlZV9w
YWdlcyhHRlBfS0VSTkVMLCBQTURfT1JERVIpOwotCWlmIChwbWQpCi0JCW1lbXNldChwbWQsIDAs
IFBBR0VfU0laRTw8UE1EX09SREVSKTsKLQlyZXR1cm4gcG1kOwotfQotCiBzdGF0aWMgaW5saW5l
IHZvaWQgcG1kX2ZyZWUoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHBtZF90ICpwbWQpCiB7CiAJaWYg
KHBtZF9mbGFnKCpwbWQpICYgUHhEX0ZMQUdfQVRUQUNIRUQpIHsKZGlmZiAtLWdpdCBhL2FyY2gv
cmlzY3YvaW5jbHVkZS9hc20vcGdhbGxvYy5oIGIvYXJjaC9yaXNjdi9pbmNsdWRlL2FzbS9wZ2Fs
bG9jLmgKaW5kZXggM2Y2MDFlZTgyMzNmLi44ZDMxMzVmMDViOGUgMTAwNjQ0Ci0tLSBhL2FyY2gv
cmlzY3YvaW5jbHVkZS9hc20vcGdhbGxvYy5oCisrKyBiL2FyY2gvcmlzY3YvaW5jbHVkZS9hc20v
cGdhbGxvYy5oCkBAIC0xMSw3ICsxMSw3IEBACiAjaW5jbHVkZSA8YXNtL3RsYi5oPgogCiAjaWZk
ZWYgQ09ORklHX01NVQotI2luY2x1ZGUgPGFzbS1nZW5lcmljL3BnYWxsb2MuaD4JLyogZm9yIHB0
ZV97YWxsb2MsZnJlZX1fb25lICovCisjaW5jbHVkZSA8YXNtLWdlbmVyaWMvcGdhbGxvYy5oPgog
CiBzdGF0aWMgaW5saW5lIHZvaWQgcG1kX3BvcHVsYXRlX2tlcm5lbChzdHJ1Y3QgbW1fc3RydWN0
ICptbSwKIAlwbWRfdCAqcG1kLCBwdGVfdCAqcHRlKQpAQCAtNjIsMTcgKzYyLDYgQEAgc3RhdGlj
IGlubGluZSB2b2lkIHBnZF9mcmVlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBwZ2RfdCAqcGdkKQog
CiAjaWZuZGVmIF9fUEFHRVRBQkxFX1BNRF9GT0xERUQKIAotc3RhdGljIGlubGluZSBwbWRfdCAq
cG1kX2FsbG9jX29uZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyKQot
ewotCXJldHVybiAocG1kX3QgKilfX2dldF9mcmVlX3BhZ2UoCi0JCUdGUF9LRVJORUwgfCBfX0dG
UF9SRVRSWV9NQVlGQUlMIHwgX19HRlBfWkVSTyk7Ci19Ci0KLXN0YXRpYyBpbmxpbmUgdm9pZCBw
bWRfZnJlZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgcG1kX3QgKnBtZCkKLXsKLQlmcmVlX3BhZ2Uo
KHVuc2lnbmVkIGxvbmcpcG1kKTsKLX0KLQogI2RlZmluZSBfX3BtZF9mcmVlX3RsYih0bGIsIHBt
ZCwgYWRkcikgIHBtZF9mcmVlKCh0bGIpLT5tbSwgcG1kKQogCiAjZW5kaWYgLyogX19QQUdFVEFC
TEVfUE1EX0ZPTERFRCAqLwpkaWZmIC0tZ2l0IGEvYXJjaC9zaC9pbmNsdWRlL2FzbS9wZ2FsbG9j
LmggYi9hcmNoL3NoL2luY2x1ZGUvYXNtL3BnYWxsb2MuaAppbmRleCAyMmQ5NjhiZmU5YmIuLjU5
MjYzZGY3NmY1MSAxMDA2NDQKLS0tIGEvYXJjaC9zaC9pbmNsdWRlL2FzbS9wZ2FsbG9jLmgKKysr
IGIvYXJjaC9zaC9pbmNsdWRlL2FzbS9wZ2FsbG9jLmgKQEAgLTMsNiArMyw5IEBACiAjZGVmaW5l
IF9fQVNNX1NIX1BHQUxMT0NfSAogCiAjaW5jbHVkZSA8YXNtL3BhZ2UuaD4KKworI2RlZmluZSBf
X0hBVkVfQVJDSF9QTURfQUxMT0NfT05FCisjZGVmaW5lIF9fSEFWRV9BUkNIX1BNRF9GUkVFCiAj
aW5jbHVkZSA8YXNtLWdlbmVyaWMvcGdhbGxvYy5oPgogCiBleHRlcm4gcGdkX3QgKnBnZF9hbGxv
YyhzdHJ1Y3QgbW1fc3RydWN0ICopOwpkaWZmIC0tZ2l0IGEvYXJjaC91bS9pbmNsdWRlL2FzbS9w
Z2FsbG9jLmggYi9hcmNoL3VtL2luY2x1ZGUvYXNtL3BnYWxsb2MuaAppbmRleCA4ODFlNzZkYTE5
MzguLmJkZGU0MzNkYmRlYyAxMDA2NDQKLS0tIGEvYXJjaC91bS9pbmNsdWRlL2FzbS9wZ2FsbG9j
LmgKKysrIGIvYXJjaC91bS9pbmNsdWRlL2FzbS9wZ2FsbG9jLmgKQEAgLTEwLDcgKzEwLDcgQEAK
IAogI2luY2x1ZGUgPGxpbnV4L21tLmg+CiAKLSNpbmNsdWRlIDxhc20tZ2VuZXJpYy9wZ2FsbG9j
Lmg+CS8qIGZvciBwdGVfe2FsbG9jLGZyZWV9X29uZSAqLworI2luY2x1ZGUgPGFzbS1nZW5lcmlj
L3BnYWxsb2MuaD4KIAogI2RlZmluZSBwbWRfcG9wdWxhdGVfa2VybmVsKG1tLCBwbWQsIHB0ZSkg
XAogCXNldF9wbWQocG1kLCBfX3BtZChfUEFHRV9UQUJMRSArICh1bnNpZ25lZCBsb25nKSBfX3Bh
KHB0ZSkpKQpAQCAtMzQsMTIgKzM0LDYgQEAgZG8gewkJCQkJCQlcCiB9IHdoaWxlICgwKQogCiAj
aWZkZWYgQ09ORklHXzNfTEVWRUxfUEdUQUJMRVMKLQotc3RhdGljIGlubGluZSB2b2lkIHBtZF9m
cmVlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBwbWRfdCAqcG1kKQotewotCWZyZWVfcGFnZSgodW5z
aWduZWQgbG9uZylwbWQpOwotfQotCiAjZGVmaW5lIF9fcG1kX2ZyZWVfdGxiKHRsYix4LCBhZGRy
ZXNzKSAgIHRsYl9yZW1vdmVfcGFnZSgodGxiKSx2aXJ0X3RvX3BhZ2UoeCkpCiAjZW5kaWYKIApk
aWZmIC0tZ2l0IGEvYXJjaC91bS9pbmNsdWRlL2FzbS9wZ3RhYmxlLTNsZXZlbC5oIGIvYXJjaC91
bS9pbmNsdWRlL2FzbS9wZ3RhYmxlLTNsZXZlbC5oCmluZGV4IDM2ZjQ1Mjk1N2NlZi4uN2U2YTQx
ODBkYjlkIDEwMDY0NAotLS0gYS9hcmNoL3VtL2luY2x1ZGUvYXNtL3BndGFibGUtM2xldmVsLmgK
KysrIGIvYXJjaC91bS9pbmNsdWRlL2FzbS9wZ3RhYmxlLTNsZXZlbC5oCkBAIC03OCw5ICs3OCw2
IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBwZ2RfbWt1cHRvZGF0ZShwZ2RfdCBwZ2QpIHsgcGdkX3Zh
bChwZ2QpICY9IH5fUEFHRV9ORVdQQUdFOyB9CiAjZGVmaW5lIHNldF9wbWQocG1kcHRyLCBwbWR2
YWwpICgqKHBtZHB0cikgPSAocG1kdmFsKSkKICNlbmRpZgogCi1zdHJ1Y3QgbW1fc3RydWN0Owot
ZXh0ZXJuIHBtZF90ICpwbWRfYWxsb2Nfb25lKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25l
ZCBsb25nIGFkZHJlc3MpOwotCiBzdGF0aWMgaW5saW5lIHZvaWQgcHVkX2NsZWFyIChwdWRfdCAq
cHVkKQogewogCXNldF9wdWQocHVkLCBfX3B1ZChfUEFHRV9ORVdQQUdFKSk7CmRpZmYgLS1naXQg
YS9hcmNoL3VtL2tlcm5lbC9tZW0uYyBiL2FyY2gvdW0va2VybmVsL21lbS5jCmluZGV4IGMyZmY3
NmM4OTgxZS4uYTRhY2NiMTRjYmQ1IDEwMDY0NAotLS0gYS9hcmNoL3VtL2tlcm5lbC9tZW0uYwor
KysgYi9hcmNoL3VtL2tlcm5lbC9tZW0uYwpAQCAtMjAxLDE4ICsyMDEsNiBAQCB2b2lkIHBnZF9m
cmVlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBwZ2RfdCAqcGdkKQogCWZyZWVfcGFnZSgodW5zaWdu
ZWQgbG9uZykgcGdkKTsKIH0KIAotI2lmZGVmIENPTkZJR18zX0xFVkVMX1BHVEFCTEVTCi1wbWRf
dCAqcG1kX2FsbG9jX29uZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRy
ZXNzKQotewotCXBtZF90ICpwbWQgPSAocG1kX3QgKikgX19nZXRfZnJlZV9wYWdlKEdGUF9LRVJO
RUwpOwotCi0JaWYgKHBtZCkKLQkJbWVtc2V0KHBtZCwgMCwgUEFHRV9TSVpFKTsKLQotCXJldHVy
biBwbWQ7Ci19Ci0jZW5kaWYKLQogdm9pZCAqdW1sX2ttYWxsb2MoaW50IHNpemUsIGludCBmbGFn
cykKIHsKIAlyZXR1cm4ga21hbGxvYyhzaXplLCBmbGFncyk7CmRpZmYgLS1naXQgYS9hcmNoL3g4
Ni9pbmNsdWRlL2FzbS9wZ2FsbG9jLmggYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9wZ2FsbG9jLmgK
aW5kZXggMjlhYTc4NTliZGVlLi4yNWZlYWExMTdjNDAgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2lu
Y2x1ZGUvYXNtL3BnYWxsb2MuaAorKysgYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9wZ2FsbG9jLmgK
QEAgLTcsNyArNyw3IEBACiAjaW5jbHVkZSA8bGludXgvcGFnZW1hcC5oPgogCiAjZGVmaW5lIF9f
SEFWRV9BUkNIX1BURV9BTExPQ19PTkUKLSNpbmNsdWRlIDxhc20tZ2VuZXJpYy9wZ2FsbG9jLmg+
CS8qIGZvciBwdGVfe2FsbG9jLGZyZWV9X29uZSAqLworI2luY2x1ZGUgPGFzbS1nZW5lcmljL3Bn
YWxsb2MuaD4KIAogc3RhdGljIGlubGluZSBpbnQgIF9fcGFyYXZpcnRfcGdkX2FsbG9jKHN0cnVj
dCBtbV9zdHJ1Y3QgKm1tKSB7IHJldHVybiAwOyB9CiAKQEAgLTg2LDMwICs4Niw2IEBAIHN0YXRp
YyBpbmxpbmUgdm9pZCBwbWRfcG9wdWxhdGUoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHBtZF90ICpw
bWQsCiAjZGVmaW5lIHBtZF9wZ3RhYmxlKHBtZCkgcG1kX3BhZ2UocG1kKQogCiAjaWYgQ09ORklH
X1BHVEFCTEVfTEVWRUxTID4gMgotc3RhdGljIGlubGluZSBwbWRfdCAqcG1kX2FsbG9jX29uZShz
dHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyKQotewotCXN0cnVjdCBwYWdl
ICpwYWdlOwotCWdmcF90IGdmcCA9IEdGUF9LRVJORUxfQUNDT1VOVCB8IF9fR0ZQX1pFUk87Ci0K
LQlpZiAobW0gPT0gJmluaXRfbW0pCi0JCWdmcCAmPSB+X19HRlBfQUNDT1VOVDsKLQlwYWdlID0g
YWxsb2NfcGFnZXMoZ2ZwLCAwKTsKLQlpZiAoIXBhZ2UpCi0JCXJldHVybiBOVUxMOwotCWlmICgh
cGd0YWJsZV9wbWRfcGFnZV9jdG9yKHBhZ2UpKSB7Ci0JCV9fZnJlZV9wYWdlcyhwYWdlLCAwKTsK
LQkJcmV0dXJuIE5VTEw7Ci0JfQotCXJldHVybiAocG1kX3QgKilwYWdlX2FkZHJlc3MocGFnZSk7
Ci19Ci0KLXN0YXRpYyBpbmxpbmUgdm9pZCBwbWRfZnJlZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwg
cG1kX3QgKnBtZCkKLXsKLQlCVUdfT04oKHVuc2lnbmVkIGxvbmcpcG1kICYgKFBBR0VfU0laRS0x
KSk7Ci0JcGd0YWJsZV9wbWRfcGFnZV9kdG9yKHZpcnRfdG9fcGFnZShwbWQpKTsKLQlmcmVlX3Bh
Z2UoKHVuc2lnbmVkIGxvbmcpcG1kKTsKLX0KLQogZXh0ZXJuIHZvaWQgX19fcG1kX2ZyZWVfdGxi
KHN0cnVjdCBtbXVfZ2F0aGVyICp0bGIsIHBtZF90ICpwbWQpOwogCiBzdGF0aWMgaW5saW5lIHZv
aWQgX19wbWRfZnJlZV90bGIoc3RydWN0IG1tdV9nYXRoZXIgKnRsYiwgcG1kX3QgKnBtZCwKZGlm
ZiAtLWdpdCBhL2luY2x1ZGUvYXNtLWdlbmVyaWMvcGdhbGxvYy5oIGIvaW5jbHVkZS9hc20tZ2Vu
ZXJpYy9wZ2FsbG9jLmgKaW5kZXggNzNmNzQyMTQxM2NiLi4xYmMwMjc4OTFhMDAgMTAwNjQ0Ci0t
LSBhL2luY2x1ZGUvYXNtLWdlbmVyaWMvcGdhbGxvYy5oCisrKyBiL2luY2x1ZGUvYXNtLWdlbmVy
aWMvcGdhbGxvYy5oCkBAIC0xMDIsNiArMTAyLDQ5IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBwdGVf
ZnJlZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgc3RydWN0IHBhZ2UgKnB0ZV9wYWdlKQogCV9fZnJl
ZV9wYWdlKHB0ZV9wYWdlKTsKIH0KIAorCisjaWYgQ09ORklHX1BHVEFCTEVfTEVWRUxTID4gMgor
CisjaWZuZGVmIF9fSEFWRV9BUkNIX1BNRF9BTExPQ19PTkUKKy8qKgorICogcG1kX2FsbG9jX29u
ZSAtIGFsbG9jYXRlIGEgcGFnZSBmb3IgUE1ELWxldmVsIHBhZ2UgdGFibGUKKyAqIEBtbTogdGhl
IG1tX3N0cnVjdCBvZiB0aGUgY3VycmVudCBjb250ZXh0CisgKgorICogQWxsb2NhdGVzIGEgcGFn
ZSBhbmQgcnVucyB0aGUgcGd0YWJsZV9wbWRfcGFnZV9jdG9yKCkuCisgKiBBbGxvY2F0aW9ucyB1
c2UgJUdGUF9QR1RBQkxFX1VTRVIgaW4gdXNlciBjb250ZXh0IGFuZAorICogJUdGUF9QR1RBQkxF
X0tFUk5FTCBpbiBrZXJuZWwgY29udGV4dC4KKyAqCisgKiBSZXR1cm46IHBvaW50ZXIgdG8gdGhl
IGFsbG9jYXRlZCBtZW1vcnkgb3IgJU5VTEwgb24gZXJyb3IKKyAqLworc3RhdGljIGlubGluZSBw
bWRfdCAqcG1kX2FsbG9jX29uZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBh
ZGRyKQoreworCXN0cnVjdCBwYWdlICpwYWdlOworCWdmcF90IGdmcCA9IEdGUF9QR1RBQkxFX1VT
RVI7CisKKwlpZiAobW0gPT0gJmluaXRfbW0pCisJCWdmcCA9IEdGUF9QR1RBQkxFX0tFUk5FTDsK
KwlwYWdlID0gYWxsb2NfcGFnZXMoZ2ZwLCAwKTsKKwlpZiAoIXBhZ2UpCisJCXJldHVybiBOVUxM
OworCWlmICghcGd0YWJsZV9wbWRfcGFnZV9jdG9yKHBhZ2UpKSB7CisJCV9fZnJlZV9wYWdlcyhw
YWdlLCAwKTsKKwkJcmV0dXJuIE5VTEw7CisJfQorCXJldHVybiAocG1kX3QgKilwYWdlX2FkZHJl
c3MocGFnZSk7Cit9CisjZW5kaWYKKworI2lmbmRlZiBfX0hBVkVfQVJDSF9QTURfRlJFRQorc3Rh
dGljIGlubGluZSB2b2lkIHBtZF9mcmVlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBwbWRfdCAqcG1k
KQoreworCUJVR19PTigodW5zaWduZWQgbG9uZylwbWQgJiAoUEFHRV9TSVpFLTEpKTsKKwlwZ3Rh
YmxlX3BtZF9wYWdlX2R0b3IodmlydF90b19wYWdlKHBtZCkpOworCWZyZWVfcGFnZSgodW5zaWdu
ZWQgbG9uZylwbWQpOworfQorI2VuZGlmCisKKyNlbmRpZiAvKiBDT05GSUdfUEdUQUJMRV9MRVZF
TFMgPiAyICovCisKICNlbmRpZiAvKiBDT05GSUdfTU1VICovCiAKICNlbmRpZiAvKiBfX0FTTV9H
RU5FUklDX1BHQUxMT0NfSCAqLwotLSAKMi4yNi4yCgpfX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fXwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3BlblJJU0NAbGlz
dHMubGlicmVjb3Jlcy5vcmcKaHR0cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9saXN0aW5mby9v
cGVucmlzYwo=
