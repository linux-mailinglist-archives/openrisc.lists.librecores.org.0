Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 814D11DF128
	for <lists+openrisc@lfdr.de>; Fri, 22 May 2020 23:31:30 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 2153920BBB;
	Fri, 22 May 2020 23:31:30 +0200 (CEST)
Received: from mail-pl1-f194.google.com (mail-pl1-f194.google.com
 [209.85.214.194])
 by mail.librecores.org (Postfix) with ESMTPS id 21B4220AD5
 for <openrisc@lists.librecores.org>; Fri, 22 May 2020 23:31:28 +0200 (CEST)
Received: by mail-pl1-f194.google.com with SMTP id x11so3927155plv.9
 for <openrisc@lists.librecores.org>; Fri, 22 May 2020 14:31:28 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=date:from:to:cc:subject:message-id:references:mime-version
 :content-disposition:in-reply-to;
 bh=bRfbPO+ta/vZnEkTpA5bLvBM24SmgzIK6q0gmBSLetQ=;
 b=QzZCO3rVzBUVhBqWHb0finjcNyr62jTEIxKVzqP+7gKe2nk3O8Jme8uH8O2edCK6kz
 KolY+k+z7VM2GAe/rfBqBBqLGDHsUkCCFUp2gPGhG5F2IYEDZ/ay7z/Bu7GtBnKlBQoH
 lEcX1B0spLfzPpNUp0bMA2/8XkWaawogz4FLnTlzGf9Scduf3F4si9IH56Fa/MZiVmwD
 E/NAJI3x1NFpFYoQ7yEj8F3M4nb3Bv3n30gw5/btILWY4Nim1j75sDnXkT9SwojJGDh4
 HD9ciVj49Xc8DKMBY3ULG5Wc9+K8H+E+SDgo4JeyKeZ+yeap99g+YrnuTjNWimU/KmGw
 RfBA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:date:from:to:cc:subject:message-id:references
 :mime-version:content-disposition:in-reply-to;
 bh=bRfbPO+ta/vZnEkTpA5bLvBM24SmgzIK6q0gmBSLetQ=;
 b=YfkvBMd4/5lttwxK8VU1OXSTWKIw9Chq6Gm4Ezi581uBU6EJhaM7fwzZuBBBIjaJ1M
 0leobqjBT9cFN/gLZC98WUvZigF0fN/6loVlCmrfH/HnKb26NwM0TlvxtUqvUJ7egV8k
 b7lvtIX+TqLjodkO1kzVHyy54jaA7w1IKxhCg5lItzJvfPPtbjCB0o5FetTIcEI89dcn
 JbCXDjCivsdTDG0CCoiFnc6Eq4QX0mei7PB3CDqQU3mWPH2nypSeNp99zKJMhlnoLaWi
 DwasUgxsNXgQVMaEMjGaIz3zsey929v1mczP6zFkBGcqAWUf7BDzSs8UaXF0fpegPZLr
 IEtw==
X-Gm-Message-State: AOAM5304LIK3xrQWcGDSXdSSJVM9N3OHla8Ks7oTBCfGCk0g6hbeoBuU
 3WVShAVnwbWAuiYNTPT8dd0=
X-Google-Smtp-Source: ABdhPJxZSOhsmi5sDlk5y7pUVcDtK6iLzJ2aeU8AXHkyg9UShH9QPORcah/bbTfJUbcy5aSu5qVJGw==
X-Received: by 2002:a17:902:bb85:: with SMTP id
 m5mr16260447pls.23.1590183086550; 
 Fri, 22 May 2020 14:31:26 -0700 (PDT)
Received: from localhost (g228.115-65-196.ppp.wakwak.ne.jp. [115.65.196.228])
 by smtp.gmail.com with ESMTPSA id
 i128sm7541403pfc.149.2020.05.22.14.31.25
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Fri, 22 May 2020 14:31:25 -0700 (PDT)
Date: Sat, 23 May 2020 06:31:23 +0900
From: Stafford Horne <shorne@gmail.com>
To: Joseph Myers <joseph@codesourcery.com>
Message-ID: <20200522213123.GB75760@lianli.shorne-pla.net>
References: <20200522113633.209664-1-shorne@gmail.com>
 <20200522113633.209664-2-shorne@gmail.com>
 <alpine.DEB.2.21.2005222027180.10437@digraph.polyomino.org.uk>
MIME-Version: 1.0
Content-Disposition: inline
In-Reply-To: <alpine.DEB.2.21.2005222027180.10437@digraph.polyomino.org.uk>
Subject: Re: [OpenRISC] [PATCH 1/1] Initial support for OpenRISC
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Openrisc <openrisc@lists.librecores.org>,
 GLIBC patches <libc-alpha@sourceware.org>, Christian Svensson <blue@cmd.nu>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

SGVsbG8sCgpUaGFua3MgZm9yIHRoZSByZXZpZXcuCgpPbiBGcmksIE1heSAyMiwgMjAyMCBhdCAw
ODo1NjowOFBNICswMDAwLCBKb3NlcGggTXllcnMgd3JvdGU6Cj4gT24gRnJpLCAyMiBNYXkgMjAy
MCwgU3RhZmZvcmQgSG9ybmUgdmlhIExpYmMtYWxwaGEgd3JvdGU6Cj4gCj4gPiBUaGlzIHBhdGNo
IGluY2x1ZGVzIHRoZSBPcGVuUklTQyBnbGliYyBzdXBwb3J0IGZvciBsaW51eC4KPiAKPiBUaGlz
IGlzIG1pc3NpbmcgYSBidWlsZC1tYW55LWdsaWJjcy5weSB1cGRhdGUuICBZb3UgYWx3YXlzIG5l
ZWQgdG8gaW5jbHVkZSAKPiBzdWNoIGFuIHVwZGF0ZSB3aXRoIGEgbmV3IHBvcnQsIHdoaWNoIG11
c3QgYnVpbGQgYXQgbGVhc3Qgb25lIAo+IGNvbmZpZ3VyYXRpb24gZm9yIGVhY2ggQUJJIHN1cHBv
cnRlZCBieSB0aGUgcG9ydCAoYW5kIG1heSBidWlsZCBhbnkgbWFqb3IgCj4gbm9uLUFCSSB2YXJp
YW50cyB0aGF0IHNlZW0gcmVsZXZhbnQpLiAgYnVpbGQtbWFueS1nbGliY3MucHkgcmVzdWx0cyBm
b3IgCj4gdGhlIHBvcnQgbXVzdCBiZSBjbGVhbiAoaS5lLiBubyBmYWlsdXJlcyBpbiB0aGUgY29t
cGlsYXRpb24gcGFydCBvZiB0aGUgCj4gdGVzdHN1aXRlKSwgYXQgbGVhc3Qgd2hlbiBidWlsZGlu
ZyB3aXRoIEdDQyBhbmQgYmludXRpbHMgbWFzdGVyIChpdCdzIE9LIAo+IGlmIHlvdSBuZWVkIGZl
YXR1cmVzIG9yIGJ1ZyBmaXhlcyBub3QgaW4gdGhlIG1vc3QgcmVjZW50IHJlbGVhc2UgYnJhbmNo
ZXMsIAo+IGFsdGhvdWdoIGRpc3RyaWJ1dG9ycyBtaWdodCBwcmVmZXIgc3VjaCBmaXhlcyB0byBi
ZSBiYWNrcG9ydGVkKS4gIAo+IFNpbWlsYXJseSwgdGhlcmUgc2hvdWxkIGJlIE5FV1MgYW5kIFJF
QURNRSB1cGRhdGVzLgoKT0suCgo+IE5ldyAzMi1iaXQgcG9ydHMgc2hvdWxkIHByZWZlcmFibHkg
YmUgc2V0IHVwIHRvIHN1cHBvcnQgb25seSA2NC1iaXQgdGltZSAKPiBhbmQgNjQtYml0IG9mZnNl
dHMgKHNlZSBBUkMgYW5kIFJWMzIgcGF0Y2ggcG9zdGluZ3MgZm9yIGV4YW1wbGVzKS4KCk9LLgoK
PiA+IGRpZmYgLS1naXQgYS9zeXNkZXBzL29yMWsvYml0cy9hdG9taWMuaCBiL3N5c2RlcHMvb3Ix
ay9iaXRzL2F0b21pYy5oCj4gCj4gVGhlcmUgc2hvdWxkIGJlIG5vIHN1Y2ggZmlsZS4gIGJpdHMv
IGlzIG9ubHkgZm9yIGluc3RhbGxlZCBoZWFkZXJzLCBub3QgCj4gaW50ZXJuYWwgb25lcy4gIFNl
ZSBjb21taXQgZGUwNzFkMTk5YTg1NzgwNTVlZGYyNzIyMTE0Nzg4YWU3NDk4MjNhYSAoIk1vdmUg
Cj4gYml0cy9hdG9taWMuaCB0byBhdG9taWMtbWFjaGluZS5oIChidWcgMTQ5MTIpLiIsIDExIFNl
cCAyMDE1KS4KCk9LLgoKPiA+IGRpZmYgLS1naXQgYS9zeXNkZXBzL29yMWsvbnB0bC9iaXRzL3Nl
bWFwaG9yZS5oIGIvc3lzZGVwcy9vcjFrL25wdGwvYml0cy9zZW1hcGhvcmUuaAo+IAo+IERvIHlv
dSByZWFsbHkgbmVlZCB0aGlzIGZpbGU/ICBTZWUgY29tbWl0IAo+IDEyNzBmYmFhZWViZTY0MmRi
MzM1ZmNjYWFmOThjODJlNjY0N2NjMGQgKCJzZW1hcGhvcmU6IGNvbnNvbGlkYXRlIGFyY2ggCj4g
aGVhZGVycyBpbnRvIGEgZ2VuZXJpYyBvbmUiLCA1IE1heSAyMDIwKS4KCkxpa2VseSwgbm90LCBJ
IHdpbGwgcmV2aWV3LgoKPiA+ICsgICMgTmVlZGVkIGZvciByZWxybyBkZXRlY3Rpb24KPiA+ICsg
IGxpYmNfY29tbW9ucGFnZXNpemU9MHgyMDAwCj4gPiArICBsaWJjX3JlbHJvX3JlcXVpcmVkPXll
cwo+IAo+IFNlZSBjb21taXQgY2I0MDNjMzRjNmY2ZTFjY2U1MDE4ODY0NDg1OTU4Y2ZjMmUyODkw
NiAoIlJlbW92ZSByZWxybyAKPiBjb25maWd1cmUgdGVzdC4iLCAyNyBKdW4gMjAxNCkuCgpPSy4K
Cj4gV2hlbiB5b3UgaGF2ZSBhbiBvbGQgb3V0LW9mLXRyZWUgcG9ydCwgaXQncyBhIGdvb2QgaWRl
YSB0byBnbyB0aHJvdWdoIAo+IGNyb3NzLWFyY2hpdGVjdHVyZSBjb21taXRzIGZyb20gd2hlbiB0
aGUgcG9ydCB3YXMgZmlyc3QgY3JlYXRlZCBvbndhcmRzIHRvIAo+IGlkZW50aWZ5IHN1Y2ggZ2xv
YmFsIGNoYW5nZXMgdGhhdCBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gdGhhdCBwb3J0LgoKSSBkaWQg
dHJ5IHRvIGRvIHRoaXMsIGJ1dCBpdCBzdGFydGVkIGluIDIwMTQgaXQgd2FzIGhhcmQgdG8gcGlj
ayB1cCBldmVyeXRoaW5nLgpJIGFsc28gcGF5ZWQgY2xvc2UgYXR0ZW50aW9uIHRvIHRoZSByaXNj
diBhbmQgY3NreSBwb3J0cy4KCj4gPiBkaWZmIC0tZ2l0IGEvc3lzZGVwcy91bml4L3N5c3YvbGlu
dXgvb3Ixay9iaXRzL21tYW4uaCBiL3N5c2RlcHMvdW5peC9zeXN2L2xpbnV4L29yMWsvYml0cy9t
bWFuLmgKPiAKPiBZb3Ugc2hvdWxkbid0IGhhdmUgdGhpcyBmaWxlLiAgU2VlIHRoZSBjb21tZW50
IGluIAo+IHN5c2RlcHMvdW5peC9zeXN2L2xpbnV4L2JpdHMvbW1hbi5oIChhbmQgY29tbWl0IAo+
IGQzYTQzZTQ5ZjM0MmM0NjYzYWYwZmZmOWQ5NTAwMGNmZTI2ODY3YzMsICJVbmlmeSBtYW55IGJp
dHMvbW1hbi5oIAo+IGhlYWRlcnMuIiwgMTggU2VwIDIwMTgsIGFuZCBjb21taXQgCj4gNjFkOGI1
ZmVlZWQzNmUyNDJhMDQzYmVmZTliMTFmN2Y4YzI5NGY1OCwgIlNoYXJlIE1BUF8qIGZsYWdzIGJl
dHdlZW4gbW9yZSAKPiBhcmNoaXRlY3R1cmVzLiIsIDI2IFNlcCAyMDE4KToKPiAKPiAvKiBUaGVz
ZSBkZWZpbml0aW9ucyBhcmUgYXBwcm9wcmlhdGUgZm9yIGFyY2hpdGVjdHVyZXMgdGhhdCwgaW4g
dGhlCj4gICAgTGludXgga2VybmVsLCBlaXRoZXIgaGF2ZSBubyB1YXBpL2FzbS9tbWFuLmgsIG9y
IGhhdmUgb25lIHRoYXQKPiAgICBpbmNsdWRlcyBhc20tZ2VuZXJpYy9tbWFuLmggd2l0aG91dCBh
bnkgY2hhbmdlcyBvciBhZGRpdGlvbnMKPiAgICByZWxldmFudCB0byBnbGliYy4gIElmIHRoZXJl
IGFyZSBhZGRpdGlvbnMgcmVsZXZhbnQgdG8gZ2xpYmMsIGFuCj4gICAgYXJjaGl0ZWN0dXJlLXNw
ZWNpZmljIGJpdHMvbW1hbi5oIGlzIG5lZWRlZC4gICovCgpPSy4KCj4gPiBkaWZmIC0tZ2l0IGEv
c3lzZGVwcy91bml4L3N5c3YvbGludXgvb3Ixay9jb25maWd1cmUuYWMgYi9zeXNkZXBzL3VuaXgv
c3lzdi9saW51eC9vcjFrL2NvbmZpZ3VyZS5hYwo+ID4gbmV3IGZpbGUgbW9kZSAxMDA2NDQKPiA+
IGluZGV4IDAwMDAwMDAwMDAuLjUwNTUzMGQ1YzMKPiA+IC0tLSAvZGV2L251bGwKPiA+ICsrKyBi
L3N5c2RlcHMvdW5peC9zeXN2L2xpbnV4L29yMWsvY29uZmlndXJlLmFjCj4gPiBAQCAtMCwwICsx
LDQgQEAKPiA+ICtHTElCQ19QUk9WSURFUyBkbmwgU2VlIGFjbG9jYWwubTQgaW4gdGhlIHRvcCBs
ZXZlbCBzb3VyY2UgZGlyZWN0b3J5Lgo+ID4gKyMgTG9jYWwgY29uZmlndXJlIGZyYWdtZW50IGZv
ciBzeXNkZXBzL3VuaXgvc3lzdi9saW51eC9vcjFrLgo+ID4gKwo+ID4gK2FyY2hfbWluaW11bV9r
ZXJuZWw9My40LjAKPiAKPiBZb3UnbGwgcHJvYmFibHkgbmVlZCBhIG5ld2VyIG1pbmltdW0ga2Vy
bmVsIHdoZW4gcmVxdWlyaW5nIDY0LWJpdCB0aW1lIAo+IHN1cHBvcnQsIHVudGlsIGFsbCB0aGUg
ZmFsbGJhY2sgZm9yIDY0LWJpdCB0aW1lIG9uIDMyLWJpdCBrZXJuZWxzIHdpdGhvdXQgCj4gdGhl
IDY0LWJpdC10aW1lIHN5c2NhbGxzIGlzIGltcGxlbWVudGVkLgoKT0ssIG5vdGVkLgoKPiA+ICsj
dW5kZWYgX19BU1NVTUVfU0VUX1JPQlVTVF9MSVNUCj4gCj4gQXJlIHlvdSBzdXJlIHRoaXMgaXMg
bmV2ZXIgc3VwcG9ydGVkIG9uIHRoaXMgYXJjaGl0ZWN0dXJlPyAgCj4gYXJjaC9vcGVucmlzYy9p
bmNsdWRlL2FzbS9mdXRleC5oIGFwcGVhcnMgdG8gaGF2ZSBnYWluZWQgCj4gZnV0ZXhfYXRvbWlj
X2NtcHhjaGdfaW5hdG9taWMgaW4gNC4xMSwgc28gSSdkIGV4cGVjdCB0aGUgI3VuZGVmIG9ubHkg
dG8gYmUgCj4gZm9yIGtlcm5lbHMgb2xkZXIgdGhhbiB0aGF0LgoKU29ycnksIEkgb3Zlcmxvb2tl
ZCB0aGlzIHRoYW5rcyBmb3IgY2F0Y2hpbmcuICBJIGFkZGVkIHRoZSBhdG9taWMgc3VwcG9ydCB0
byB0aGUKa2VybmVsLgoKPiA+IGRpZmYgLS1naXQgYS9zeXNkZXBzL3VuaXgvc3lzdi9saW51eC9v
cjFrL3N5cy9wcm9jZnMuaCBiL3N5c2RlcHMvdW5peC9zeXN2L2xpbnV4L29yMWsvc3lzL3Byb2Nm
cy5oCj4gCj4gU2VlIGNvbW1pdCBkNjJmOWVjMGNjZTI2YTI3NWVjNjhmNDU2NDgxNDA0MWEzMzM5
NWIxICgiQ29tcGxldGUgCj4gc3lzL3Byb2Nmcy5oIHVuaWZpY2F0aW9uLiIsIDI1IFNlcCAyMDE4
KS4gIFlvdSBzaG91bGRuJ3QgaGF2ZSBhbiAKPiBhcmNoaXRlY3R1cmUtc3BlY2lmaWMgdmVyc2lv
biBvZiB0aGlzIGZpbGU7IGFkZCB3aGF0ZXZlciBiaXRzLyBoZWFkZXJzIGFyZSAKPiBuZWVkZWQg
aW5zdGVhZC4KCk9LLgoKPiBJbiBnZW5lcmFsLCBlYWNoIGFyY2hpdGVjdHVyZS1zcGVjaWZpYyBm
aWxlIG5lZWRzIGEganVzdGlmaWNhdGlvbiB0aGF0IAo+IGVpdGhlciBubyBnZW5lcmljIHZlcnNp
b24gZXhpc3RzIG9yIHRoZSBnZW5lcmljIG9uZSBpcyB1bnN1aXRhYmxlIG9yIAo+IHN1Ym9wdGlt
YWwgZm9yIHRoaXMgYXJjaGl0ZWN0dXJlOyB0aGUgZGVmYXVsdCBpcyB0aGF0IHdlIHdhbnQgdG8g
dXNlIAo+IHVuaWZpZWQgaW1wbGVtZW50YXRpb25zIG9mIGFzIG1hbnkgZmlsZXMgYXMgcG9zc2li
bGUuCgpUaGlzIGhhcyBhbHNvIGJlZW4gbXkgZ29hbCBmb3IgT3BlblJJU0MgKHVzZSBhcyBtdWNo
IGdlbmVyaWMgY29kZSBhcyBwb3NzaWJsZSksCmJ1dCB3aGVuIGdvaW5nIG92ZXIgdGhlIG9yaWdp
bmFsIHBvcnQgSSBtaXNzZWQgc29tZSBvZiB0aGVzZS4gIEkgbm90aWNlZCBpbiB0aGUKbGFzdCBm
ZXcgbW9udGhzIHNpbmNlIEkgc3RhcnRlZCBmaXhpbmcgdXAgdGhlIHBvcnQgdGhhdCBtYW55IG1v
cmUgYXJjaGl0ZWN0dXJlCnNwZWNpZmljIHBhcnRzIHdlcmUgbW92ZWQgdG8gZ2VuZXJpYyBjb2Rl
IGFuZCBJIGRpZCB0aG9zZSBtb3Zlcy4gIEkgc2VlbSB0bwptaXNzZWQgZXZlcnl0aGluZyBmcm9t
IGJlZm9yZSAyMDE5IHdoZW4gSSBzdGFydGVkIHRoZSBwb3J0LgoKVGhhbmsgeW91IGZvciBwb2lu
dGluZyB0aGVzZSBvdXQuCgpJIHdpbGwgd29yayBvbiBjbGVhbmluZyB0aGlzIHVwLCB0ZXN0aW5n
IGFuZCBwb3N0aW5nIGEgbmV3IHZlcnNpb24gaW4gYSB3ZWVrIG9yCnR3by4KCi1TdGFmZm9yZApf
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpPcGVuUklTQyBt
YWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMubGlicmVjb3Jlcy5vcmcKaHR0cHM6Ly9saXN0cy5s
aWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVucmlzYwo=
