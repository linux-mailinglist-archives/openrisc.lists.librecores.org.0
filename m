Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 7D09D2460BD
	for <lists+openrisc@lfdr.de>; Mon, 17 Aug 2020 10:46:23 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 29F5F20E63;
	Mon, 17 Aug 2020 10:46:23 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 034F320CDE
 for <openrisc@lists.librecores.org>; Tue, 28 Jul 2020 07:14:43 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 7F8F021D95;
 Tue, 28 Jul 2020 05:14:32 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1595913281;
 bh=hyYCib2EzOYupEpjqTA02kWUy84POJABcJ/qGLZac04=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=XDqolARt7JP4OTgvgXGBzFyeZRytmbAFbtGJaFk1lZHBHYKYmJhZtfCfKN9tIFvku
 TKBPHHtbHVB/wUBdRDOwh8QsDOP2utFTiOILOl0mq07BFNqNdrKi5EMjqjtlAYe4x4
 ixC0LlEffXTqoengolg1jQ37jbrs/aEBEQqXuFZs=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Tue, 28 Jul 2020 08:11:53 +0300
Message-Id: <20200728051153.1590-16-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200728051153.1590-1-rppt@kernel.org>
References: <20200728051153.1590-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Mon, 17 Aug 2020 10:45:37 +0200
Subject: [OpenRISC] [PATCH 15/15] memblock: remove 'type' parameter from
 for_each_memblock()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: linux-sh@vger.kernel.org, Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Marek Szyprowski <m.szyprowski@samsung.com>,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Yoshinori Sato <ysato@users.sourceforge.jp>,
 Michael Ellerman <mpe@ellerman.id.au>, x86@kernel.org,
 Russell King <linux@armlinux.org.uk>, Mike Rapoport <rppt@linux.ibm.com>,
 clang-built-linux@googlegroups.com, Ingo Molnar <mingo@redhat.com>,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Thomas Gleixner <tglx@linutronix.de>, linux-arm-kernel@lists.infradead.org,
 Michal Simek <monstr@monstr.eu>, linux-mm@kvack.org,
 linuxppc-dev@lists.ozlabs.org, linux-kernel@vger.kernel.org,
 iommu@lists.linux-foundation.org, Palmer Dabbelt <palmer@dabbelt.com>,
 Christoph Hellwig <hch@lst.de>, Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKZm9yX2VhY2hfbWVtYmxv
Y2soKSBpcyB1c2VkIGV4Y2x1c2l2ZWx5IHRvIGl0ZXJhdGUgb3ZlciBtZW1ibG9jay5tZW1vcnkg
aW4KYSBmZXcgcGxhY2VzIHRoYXQgdXNlIGRhdGEgZnJvbSBtZW1ibG9ja19yZWdpb24gcmF0aGVy
IHRoYW4gdGhlIG1lbW9yeQpyYW5nZXMuCgpSZW1vdmUgdHlwZSBwYXJhbWV0ZXIgZnJvbSB0aGUg
Zm9yX2VhY2hfbWVtYmxvY2soKSBpdGVyYXRvciB0byBpbXByb3ZlCmVuY2Fwc3VsYXRpb24gb2Yg
bWVtYmxvY2sgaW50ZXJuYWxzIGZyb20gaXRzIHVzZXJzLgoKU2lnbmVkLW9mZi1ieTogTWlrZSBS
YXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgotLS0KIGFyY2gvYXJtNjQva2VybmVsL3NldHVw
LmMgICAgICB8ICAyICstCiBhcmNoL2FybTY0L21tL251bWEuYyAgICAgICAgICAgfCAgMiArLQog
YXJjaC9taXBzL25ldGxvZ2ljL3hscC9zZXR1cC5jIHwgIDIgKy0KIGluY2x1ZGUvbGludXgvbWVt
YmxvY2suaCAgICAgICB8IDEwICsrKysrKystLS0KIG1tL21lbWJsb2NrLmMgICAgICAgICAgICAg
ICAgICB8ICA0ICsrLS0KIG1tL3BhZ2VfYWxsb2MuYyAgICAgICAgICAgICAgICB8ICA4ICsrKyst
LS0tCiA2IGZpbGVzIGNoYW5nZWQsIDE2IGluc2VydGlvbnMoKyksIDEyIGRlbGV0aW9ucygtKQoK
ZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQva2VybmVsL3NldHVwLmMgYi9hcmNoL2FybTY0L2tlcm5l
bC9zZXR1cC5jCmluZGV4IDkzYjM4NDRjZjQ0Mi4uMjNkYTc5MDhjYmVkIDEwMDY0NAotLS0gYS9h
cmNoL2FybTY0L2tlcm5lbC9zZXR1cC5jCisrKyBiL2FyY2gvYXJtNjQva2VybmVsL3NldHVwLmMK
QEAgLTIxNyw3ICsyMTcsNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgcmVxdWVzdF9zdGFuZGFyZF9y
ZXNvdXJjZXModm9pZCkKIAlpZiAoIXN0YW5kYXJkX3Jlc291cmNlcykKIAkJcGFuaWMoIiVzOiBG
YWlsZWQgdG8gYWxsb2NhdGUgJXp1IGJ5dGVzXG4iLCBfX2Z1bmNfXywgcmVzX3NpemUpOwogCi0J
Zm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWdpb24pIHsKKwlmb3JfZWFjaF9tZW1ibG9jayhy
ZWdpb24pIHsKIAkJcmVzID0gJnN0YW5kYXJkX3Jlc291cmNlc1tpKytdOwogCQlpZiAobWVtYmxv
Y2tfaXNfbm9tYXAocmVnaW9uKSkgewogCQkJcmVzLT5uYW1lICA9ICJyZXNlcnZlZCI7CmRpZmYg
LS1naXQgYS9hcmNoL2FybTY0L21tL251bWEuYyBiL2FyY2gvYXJtNjQvbW0vbnVtYS5jCmluZGV4
IDBjYmRiY2M4ODVmYi4uMDg3MjFkMmMwYjc5IDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L21tL251
bWEuYworKysgYi9hcmNoL2FybTY0L21tL251bWEuYwpAQCAtMzUwLDcgKzM1MCw3IEBAIHN0YXRp
YyBpbnQgX19pbml0IG51bWFfcmVnaXN0ZXJfbm9kZXModm9pZCkKIAlzdHJ1Y3QgbWVtYmxvY2tf
cmVnaW9uICptYmxrOwogCiAJLyogQ2hlY2sgdGhhdCB2YWxpZCBuaWQgaXMgc2V0IHRvIG1lbWJs
a3MgKi8KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIG1ibGspIHsKKwlmb3JfZWFjaF9tZW1i
bG9jayhtYmxrKSB7CiAJCWludCBtYmxrX25pZCA9IG1lbWJsb2NrX2dldF9yZWdpb25fbm9kZSht
YmxrKTsKIAogCQlpZiAobWJsa19uaWQgPT0gTlVNQV9OT19OT0RFIHx8IG1ibGtfbmlkID49IE1B
WF9OVU1OT0RFUykgewpkaWZmIC0tZ2l0IGEvYXJjaC9taXBzL25ldGxvZ2ljL3hscC9zZXR1cC5j
IGIvYXJjaC9taXBzL25ldGxvZ2ljL3hscC9zZXR1cC5jCmluZGV4IDFhMGZjNWI2MmJhNC4uZTY5
ZDlmYzQ2OGNmIDEwMDY0NAotLS0gYS9hcmNoL21pcHMvbmV0bG9naWMveGxwL3NldHVwLmMKKysr
IGIvYXJjaC9taXBzL25ldGxvZ2ljL3hscC9zZXR1cC5jCkBAIC03MCw3ICs3MCw3IEBAIHN0YXRp
YyB2b2lkIG5sbV9maXh1cF9tZW0odm9pZCkKIAljb25zdCBpbnQgcHJlZl9iYWNrdXAgPSA1MTI7
CiAJc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqbWVtOwogCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVt
b3J5LCBtZW0pIHsKKwlmb3JfZWFjaF9tZW1ibG9jayhtZW0pIHsKIAkJbWVtYmxvY2tfcmVtb3Zl
KG1lbS0+YmFzZSArIG1lbS0+c2l6ZSAtIHByZWZfYmFja3VwLAogCQkJcHJlZl9iYWNrdXApOwog
CX0KZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvbWVtYmxvY2suaCBiL2luY2x1ZGUvbGludXgv
bWVtYmxvY2suaAppbmRleCBkNzBjMjgzNWU5MTMuLmM5MDFjYjhlY2Y5MiAxMDA2NDQKLS0tIGEv
aW5jbHVkZS9saW51eC9tZW1ibG9jay5oCisrKyBiL2luY2x1ZGUvbGludXgvbWVtYmxvY2suaApA
QCAtNTI3LDkgKzUyNywxMyBAQCBzdGF0aWMgaW5saW5lIHVuc2lnbmVkIGxvbmcgbWVtYmxvY2tf
cmVnaW9uX3Jlc2VydmVkX2VuZF9wZm4oY29uc3Qgc3RydWN0IG1lbWJsbwogCXJldHVybiBQRk5f
VVAocmVnLT5iYXNlICsgcmVnLT5zaXplKTsKIH0KIAotI2RlZmluZSBmb3JfZWFjaF9tZW1ibG9j
ayhtZW1ibG9ja190eXBlLCByZWdpb24pCQkJCQlcCi0JZm9yIChyZWdpb24gPSBtZW1ibG9jay5t
ZW1ibG9ja190eXBlLnJlZ2lvbnM7CQkJCQlcCi0JICAgICByZWdpb24gPCAobWVtYmxvY2subWVt
YmxvY2tfdHlwZS5yZWdpb25zICsgbWVtYmxvY2subWVtYmxvY2tfdHlwZS5jbnQpOwlcCisvKioK
KyAqIGZvcl9lYWNoX21lbWJsb2NrIC0gaXRlcmVhdGUgb3ZlciByZWdpc3RlcmVkIG1lbW9yeSBy
ZWdpb25zCisgKiBAcmVnaW9uOiBsb29wIHZhcmlhYmxlCisgKi8KKyNkZWZpbmUgZm9yX2VhY2hf
bWVtYmxvY2socmVnaW9uKQkJCQkJXAorCWZvciAocmVnaW9uID0gbWVtYmxvY2subWVtb3J5LnJl
Z2lvbnM7CQkJCVwKKwkgICAgIHJlZ2lvbiA8IChtZW1ibG9jay5tZW1vcnkucmVnaW9ucyArIG1l
bWJsb2NrLm1lbW9yeS5jbnQpOwlcCiAJICAgICByZWdpb24rKykKIAogZXh0ZXJuIHZvaWQgKmFs
bG9jX2xhcmdlX3N5c3RlbV9oYXNoKGNvbnN0IGNoYXIgKnRhYmxlbmFtZSwKZGlmZiAtLWdpdCBh
L21tL21lbWJsb2NrLmMgYi9tbS9tZW1ibG9jay5jCmluZGV4IDJhZDVlNmU0NzIxNS4uNTUwYmI3
MmNmNmNiIDEwMDY0NAotLS0gYS9tbS9tZW1ibG9jay5jCisrKyBiL21tL21lbWJsb2NrLmMKQEAg
LTE2OTQsNyArMTY5NCw3IEBAIHN0YXRpYyBwaHlzX2FkZHJfdCBfX2luaXRfbWVtYmxvY2sgX19m
aW5kX21heF9hZGRyKHBoeXNfYWRkcl90IGxpbWl0KQogCSAqIHRoZSBtZW1vcnkgbWVtYmxvY2sg
cmVnaW9ucywgaWYgdGhlIEBsaW1pdCBleGNlZWRzIHRoZSB0b3RhbCBzaXplCiAJICogb2YgdGhv
c2UgcmVnaW9ucywgbWF4X2FkZHIgd2lsbCBrZWVwIG9yaWdpbmFsIHZhbHVlIFBIWVNfQUREUl9N
QVgKIAkgKi8KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHIpIHsKKwlmb3JfZWFjaF9tZW1i
bG9jayhyKSB7CiAJCWlmIChsaW1pdCA8PSByLT5zaXplKSB7CiAJCQltYXhfYWRkciA9IHItPmJh
c2UgKyBsaW1pdDsKIAkJCWJyZWFrOwpAQCAtMTg2NCw3ICsxODY0LDcgQEAgdm9pZCBfX2luaXRf
bWVtYmxvY2sgbWVtYmxvY2tfdHJpbV9tZW1vcnkocGh5c19hZGRyX3QgYWxpZ24pCiAJcGh5c19h
ZGRyX3Qgc3RhcnQsIGVuZCwgb3JpZ19zdGFydCwgb3JpZ19lbmQ7CiAJc3RydWN0IG1lbWJsb2Nr
X3JlZ2lvbiAqcjsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcikgeworCWZvcl9lYWNo
X21lbWJsb2NrKHIpIHsKIAkJb3JpZ19zdGFydCA9IHItPmJhc2U7CiAJCW9yaWdfZW5kID0gci0+
YmFzZSArIHItPnNpemU7CiAJCXN0YXJ0ID0gcm91bmRfdXAob3JpZ19zdGFydCwgYWxpZ24pOwpk
aWZmIC0tZ2l0IGEvbW0vcGFnZV9hbGxvYy5jIGIvbW0vcGFnZV9hbGxvYy5jCmluZGV4IDk1YWYx
MTFkNjlkMy4uOGExOWY0NmRjODZlIDEwMDY0NAotLS0gYS9tbS9wYWdlX2FsbG9jLmMKKysrIGIv
bW0vcGFnZV9hbGxvYy5jCkBAIC01OTI3LDcgKzU5MjcsNyBAQCBvdmVybGFwX21lbW1hcF9pbml0
KHVuc2lnbmVkIGxvbmcgem9uZSwgdW5zaWduZWQgbG9uZyAqcGZuKQogCiAJaWYgKG1pcnJvcmVk
X2tlcm5lbGNvcmUgJiYgem9uZSA9PSBaT05FX01PVkFCTEUpIHsKIAkJaWYgKCFyIHx8ICpwZm4g
Pj0gbWVtYmxvY2tfcmVnaW9uX21lbW9yeV9lbmRfcGZuKHIpKSB7Ci0JCQlmb3JfZWFjaF9tZW1i
bG9jayhtZW1vcnksIHIpIHsKKwkJCWZvcl9lYWNoX21lbWJsb2NrKHIpIHsKIAkJCQlpZiAoKnBm
biA8IG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfZW5kX3BmbihyKSkKIAkJCQkJYnJlYWs7CiAJCQl9
CkBAIC02NTI4LDcgKzY1MjgsNyBAQCBzdGF0aWMgdW5zaWduZWQgbG9uZyBfX2luaXQgem9uZV9h
YnNlbnRfcGFnZXNfaW5fbm9kZShpbnQgbmlkLAogCQl1bnNpZ25lZCBsb25nIHN0YXJ0X3Bmbiwg
ZW5kX3BmbjsKIAkJc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcjsKIAotCQlmb3JfZWFjaF9tZW1i
bG9jayhtZW1vcnksIHIpIHsKKwkJZm9yX2VhY2hfbWVtYmxvY2socikgewogCQkJc3RhcnRfcGZu
ID0gY2xhbXAobWVtYmxvY2tfcmVnaW9uX21lbW9yeV9iYXNlX3BmbihyKSwKIAkJCQkJICB6b25l
X3N0YXJ0X3Bmbiwgem9uZV9lbmRfcGZuKTsKIAkJCWVuZF9wZm4gPSBjbGFtcChtZW1ibG9ja19y
ZWdpb25fbWVtb3J5X2VuZF9wZm4ociksCkBAIC03MTIyLDcgKzcxMjIsNyBAQCBzdGF0aWMgdm9p
ZCBfX2luaXQgZmluZF96b25lX21vdmFibGVfcGZuc19mb3Jfbm9kZXModm9pZCkKIAkgKiBvcHRp
b25zLgogCSAqLwogCWlmIChtb3ZhYmxlX25vZGVfaXNfZW5hYmxlZCgpKSB7Ci0JCWZvcl9lYWNo
X21lbWJsb2NrKG1lbW9yeSwgcikgeworCQlmb3JfZWFjaF9tZW1ibG9jayhyKSB7CiAJCQlpZiAo
IW1lbWJsb2NrX2lzX2hvdHBsdWdnYWJsZShyKSkKIAkJCQljb250aW51ZTsKIApAQCAtNzE0Myw3
ICs3MTQzLDcgQEAgc3RhdGljIHZvaWQgX19pbml0IGZpbmRfem9uZV9tb3ZhYmxlX3BmbnNfZm9y
X25vZGVzKHZvaWQpCiAJaWYgKG1pcnJvcmVkX2tlcm5lbGNvcmUpIHsKIAkJYm9vbCBtZW1fYmVs
b3dfNGdiX25vdF9taXJyb3JlZCA9IGZhbHNlOwogCi0JCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9y
eSwgcikgeworCQlmb3JfZWFjaF9tZW1ibG9jayhyKSB7CiAJCQlpZiAobWVtYmxvY2tfaXNfbWly
cm9yKHIpKQogCQkJCWNvbnRpbnVlOwogCi0tIAoyLjI2LjIKCl9fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcgbGlzdApPcGVuUklT
Q0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29yZXMub3JnL2xpc3Rp
bmZvL29wZW5yaXNjCg==
