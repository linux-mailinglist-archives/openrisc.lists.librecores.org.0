Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 783CC1D2011
	for <lists+openrisc@lfdr.de>; Wed, 13 May 2020 22:17:53 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 29F7920B5C;
	Wed, 13 May 2020 22:17:53 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 93FD820ADE
 for <openrisc@lists.librecores.org>; Tue, 12 May 2020 20:47:39 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 20A2B207BC;
 Tue, 12 May 2020 18:47:24 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1589309258;
 bh=MLPizAiCpkFLl3dWNUKDF8SLs7N0qcQkEfim3kCjkhc=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=CVwdAT1OcB07ZfxB0lXpq1Rz6WicrbVeI94PpGKrrczmSs0WHaqcDiNaWjL5rvOpq
 n8jvxTS7CWFc/Uv04BUu53gvjZn9uqIGC+SOjXrIJVCP7K5rZg3Tl/NW0N0+75/T+y
 Izx/hF5X/e5eeDT5TtZ3AG0+yP4Mm01OqVR09JCE=
From: Mike Rapoport <rppt@kernel.org>
To: linux-kernel@vger.kernel.org
Date: Tue, 12 May 2020 21:44:22 +0300
Message-Id: <20200512184422.12418-13-rppt@kernel.org>
X-Mailer: git-send-email 2.26.1
In-Reply-To: <20200512184422.12418-1-rppt@kernel.org>
References: <20200512184422.12418-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Wed, 13 May 2020 22:17:32 +0200
Subject: [OpenRISC] [PATCH 12/12] mm: consolidate pgd_index() and
 pgd_offset{_k}() definitions
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 linux-sh@vger.kernel.org, Catalin Marinas <catalin.marinas@arm.com>,
 Heiko Carstens <heiko.carstens@de.ibm.com>, Max Filippov <jcmvbkbc@gmail.com>,
 Guo Ren <guoren@kernel.org>, linux-csky@vger.kernel.org,
 sparclinux@vger.kernel.org, linux-hexagon@vger.kernel.org,
 linux-riscv@lists.infradead.org, Vincent Chen <deanbo422@gmail.com>,
 Will Deacon <will@kernel.org>, Greg Ungerer <gerg@linux-m68k.org>,
 linux-arch@vger.kernel.org, linux-s390@vger.kernel.org,
 linux-c6x-dev@linux-c6x.org, Brian Cain <bcain@codeaurora.org>,
 Michael Ellerman <mpe@ellerman.id.au>, Helge Deller <deller@gmx.de>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Ley Foon Tan <ley.foon.tan@intel.com>, Mike Rapoport <rppt@linux.ibm.com>,
 Ingo Molnar <mingo@redhat.com>, linux-parisc@vger.kernel.org,
 Mark Salter <msalter@redhat.com>, Matt Turner <mattst88@gmail.com>,
 linux-snps-arc@lists.infradead.org, linux-xtensa@linux-xtensa.org,
 Arnd Bergmann <arnd@arndb.de>, linux-alpha@vger.kernel.org,
 linux-um@lists.infradead.org, linux-m68k@lists.linux-m68k.org,
 Tony Luck <tony.luck@intel.com>, Borislav Petkov <bp@alien8.de>,
 Greentime Hu <green.hu@gmail.com>, Paul Walmsley <paul.walmsley@sifive.com>,
 Guan Xuetao <gxt@pku.edu.cn>, linux-arm-kernel@lists.infradead.org,
 Chris Zankel <chris@zankel.net>, Michal Simek <monstr@monstr.eu>,
 Thomas Bogendoerfer <tsbogend@alpha.franken.de>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, Nick Hu <nickhu@andestech.com>,
 linux-mm@kvack.org, Vineet Gupta <vgupta@synopsys.com>,
 linux-mips@vger.kernel.org, openrisc@lists.librecores.org,
 Thomas Gleixner <tglx@linutronix.de>, Richard Weinberger <richard@nod.at>,
 Andrew Morton <akpm@linux-foundation.org>, linuxppc-dev@lists.ozlabs.org,
 "David S. Miller" <davem@davemloft.net>, Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKQWxsIGFyY2hpdGVjdHVy
ZXMgdGFibGVzIGRlZmluZSBwZ2Rfb2Zmc2V0KCkgYXMgYW4gZW50cnkgaW4gdGhlIGFycmF5IG9m
ClBHRHMgaW5kZXhlZCBieSB0aGUgcGdkX2luZGV4KCksIHdoZXJlIHBnZF9pbmRleCgpIGlzCgoJ
KGFkZHJlc3MgPj4gUEdEX1NISUZUKSAmIChQVFJTX1BFUl9QR0QgLSAxKQoKRm9yIHRoZSBtb3N0
IGNhc2VzLCB0aGUgcGdkX29mZnNldCgpIHVzZXMgbW0tPnBnZCBhcyB0aGUgcG9pbnRlciB0byB0
aGUKdG9wLWxldmVsIHBhZ2UgZGlyZWN0b3J5IGFuZCB0aGUgcGdkX29mZnNldF9rKCkgaXMgYSBo
ZWxwZXIgdGhhdCBwcmVzdW1lcwp0aGF0IG1tID09ICZpbml0X21tLgoKVXNlIHg4NiBpbXBsZW1l
bnRhdGlvbiBhcyB0aGUgZ2VuZXJpYyBvbmUgYW5kIHJlbW92ZSByZWR1bmRhbnQgZGVmaW5pdGlv
bnMKb2YgUEdEIGFjY2Vzc29ycyBpbiBtb3N0IG9mIGFyY2gvKi9pbmNsdWRlL2FzbS9wZ3RhYmxl
LmgKClRoZSBnZW5lcmljIGltcGxlbWVudGF0aW9uIGNhbiBiZSBvdmVycmlkZGVuIGJ5IGFuIGFy
Y2hpdGVjdHVyZSBhbmQgdGhpcwphYmlsaXR5IGlzIGN1cnJlbnRseSBpbiB1c2UgYnkgdGhlcmUg
YXJjaGl0ZWN0dXJlczoKKiBpYTY0IGhhcyBjdXN0b20gaW1wbGVtZW50YXRpb24gb2YgcGdkX2lu
ZGV4KCkKKiBzMzkwIGhhcyBjdXN0b20gZGVmaW5pdGlvbnMgb2YgYWxsIHBhZ2UgdGFibGUgYWNj
ZXNzb3JzCgpTaWduZWQtb2ZmLWJ5OiBNaWtlIFJhcG9wb3J0IDxycHB0QGxpbnV4LmlibS5jb20+
Ci0tLQogYXJjaC9hbHBoYS9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggICAgICAgICAgICAgfCAgOSAt
LS0tCiBhcmNoL2FyYy9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggICAgICAgICAgICAgICB8ICA3IC0t
LQogYXJjaC9hcm0vaW5jbHVkZS9hc20vcGd0YWJsZS5oICAgICAgICAgICAgICAgfCAgOCAtLS0t
CiBhcmNoL2FybTY0L2luY2x1ZGUvYXNtL3BndGFibGUuaCAgICAgICAgICAgICB8IDEwIC0tLS0K
IGFyY2gvYXJtNjQva2VybmVsL2hpYmVybmF0ZS5jICAgICAgICAgICAgICAgIHwgIDQgKy0KIGFy
Y2gvYXJtNjQvbW0va2FzYW5faW5pdC5jICAgICAgICAgICAgICAgICAgIHwgIDIgKy0KIGFyY2gv
YXJtNjQvbW0vbW11LmMgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDggKystLQogYXJjaC9j
c2t5L2luY2x1ZGUvYXNtL3BndGFibGUuaCAgICAgICAgICAgICAgfCAxMSAtLS0tLQogYXJjaC9o
ZXhhZ29uL2luY2x1ZGUvYXNtL3BndGFibGUuaCAgICAgICAgICAgfCAxOCAtLS0tLS0tCiBhcmNo
L2lhNjQvaW5jbHVkZS9hc20vcGd0YWJsZS5oICAgICAgICAgICAgICB8IDE0ICstLS0tLQogYXJj
aC9tNjhrL2luY2x1ZGUvYXNtL21jZl9wZ3RhYmxlLmggICAgICAgICAgfCAxMSAtLS0tLQogYXJj
aC9tNjhrL2luY2x1ZGUvYXNtL21vdG9yb2xhX3BndGFibGUuaCAgICAgfCAxNiAtLS0tLS0tCiBh
cmNoL202OGsvaW5jbHVkZS9hc20vc3VuM19wZ3RhYmxlLmggICAgICAgICB8ICA5IC0tLS0KIGFy
Y2gvbWljcm9ibGF6ZS9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggICAgICAgIHwgIDcgLS0tCiBhcmNo
L21pcHMvaW5jbHVkZS9hc20vcGd0YWJsZS0zMi5oICAgICAgICAgICB8ICA4IC0tLS0KIGFyY2gv
bWlwcy9pbmNsdWRlL2FzbS9wZ3RhYmxlLTY0LmggICAgICAgICAgIHwgIDggLS0tLQogYXJjaC9u
ZHMzMi9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggICAgICAgICAgICAgfCAgNiAtLS0KIGFyY2gvbmlv
czIvaW5jbHVkZS9hc20vcGd0YWJsZS5oICAgICAgICAgICAgIHwgIDggLS0tLQogYXJjaC9vcGVu
cmlzYy9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggICAgICAgICAgfCAxMCAtLS0tCiBhcmNoL3Bhcmlz
Yy9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggICAgICAgICAgICB8ICA5IC0tLS0KIGFyY2gvcG93ZXJw
Yy9pbmNsdWRlL2FzbS9ib29rM3MvMzIvcGd0YWJsZS5oIHwgIDcgLS0tCiBhcmNoL3Bvd2VycGMv
aW5jbHVkZS9hc20vYm9vazNzLzY0L3BndGFibGUuaCB8IDEzIC0tLS0tCiBhcmNoL3Bvd2VycGMv
aW5jbHVkZS9hc20vbm9oYXNoLzMyL3BndGFibGUuaCB8ICA3IC0tLQogYXJjaC9wb3dlcnBjL2lu
Y2x1ZGUvYXNtL25vaGFzaC82NC9wZ3RhYmxlLmggfCAxMiAtLS0tLQogYXJjaC9yaXNjdi9pbmNs
dWRlL2FzbS9wZ3RhYmxlLmggICAgICAgICAgICAgfCAxMCAtLS0tCiBhcmNoL3Jpc2N2L21tL2lu
aXQuYyAgICAgICAgICAgICAgICAgICAgICAgICB8IDEyICsrLS0tCiBhcmNoL3MzOTAvaW5jbHVk
ZS9hc20vcGd0YWJsZS5oICAgICAgICAgICAgICB8ICAxIC0KIGFyY2gvc2gvaW5jbHVkZS9hc20v
cGd0YWJsZV8zMi5oICAgICAgICAgICAgIHwgIDcgLS0tCiBhcmNoL3NoL2luY2x1ZGUvYXNtL3Bn
dGFibGVfNjQuaCAgICAgICAgICAgICB8IDExIC0tLS0tCiBhcmNoL3NwYXJjL2luY2x1ZGUvYXNt
L3BndGFibGVfMzIuaCAgICAgICAgICB8ICA4IC0tLS0KIGFyY2gvc3BhcmMvaW5jbHVkZS9hc20v
cGd0YWJsZV82NC5oICAgICAgICAgIHwgIDcgLS0tCiBhcmNoL3VtL2luY2x1ZGUvYXNtL3BndGFi
bGUuaCAgICAgICAgICAgICAgICB8IDUwICsrKysrKy0tLS0tLS0tLS0tLS0tCiBhcmNoL3VuaWNv
cmUzMi9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggICAgICAgICB8ICA4IC0tLS0KIGFyY2gveDg2L2lu
Y2x1ZGUvYXNtL3BndGFibGUuaCAgICAgICAgICAgICAgIHwgMjQgLS0tLS0tLS0tLQogYXJjaC94
dGVuc2EvaW5jbHVkZS9hc20vcGd0YWJsZS5oICAgICAgICAgICAgfCAgOCAtLS0tCiBpbmNsdWRl
L2xpbnV4L3BndGFibGUuaCAgICAgICAgICAgICAgICAgICAgICB8IDI2ICsrKysrKysrKysKIDM2
IGZpbGVzIGNoYW5nZWQsIDU1IGluc2VydGlvbnMoKyksIDMzOSBkZWxldGlvbnMoLSkKCmRpZmYg
LS1naXQgYS9hcmNoL2FscGhhL2luY2x1ZGUvYXNtL3BndGFibGUuaCBiL2FyY2gvYWxwaGEvaW5j
bHVkZS9hc20vcGd0YWJsZS5oCmluZGV4IDMxNDk3M2QyODEwZC4uMTYyYzE3YjI2MzFmIDEwMDY0
NAotLS0gYS9hcmNoL2FscGhhL2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNoL2FscGhh
L2luY2x1ZGUvYXNtL3BndGFibGUuaApAQCAtMjc2LDE1ICsyNzYsNiBAQCBleHRlcm4gaW5saW5l
IHB0ZV90IHB0ZV9ta3dyaXRlKHB0ZV90IHB0ZSkJeyBwdGVfdmFsKHB0ZSkgJj0gfl9QQUdFX0ZP
VzsgcmV0dXJuCiBleHRlcm4gaW5saW5lIHB0ZV90IHB0ZV9ta2RpcnR5KHB0ZV90IHB0ZSkJeyBw
dGVfdmFsKHB0ZSkgfD0gX19ESVJUWV9CSVRTOyByZXR1cm4gcHRlOyB9CiBleHRlcm4gaW5saW5l
IHB0ZV90IHB0ZV9ta3lvdW5nKHB0ZV90IHB0ZSkJeyBwdGVfdmFsKHB0ZSkgfD0gX19BQ0NFU1Nf
QklUUzsgcmV0dXJuIHB0ZTsgfQogCi0jZGVmaW5lIFBBR0VfRElSX09GRlNFVCh0c2ssYWRkcmVz
cykgcGdkX29mZnNldCgodHNrKSwoYWRkcmVzcykpCi0KLS8qIHRvIGZpbmQgYW4gZW50cnkgaW4g
YSBrZXJuZWwgcGFnZS10YWJsZS1kaXJlY3RvcnkgKi8KLSNkZWZpbmUgcGdkX29mZnNldF9rKGFk
ZHJlc3MpIHBnZF9vZmZzZXQoJmluaXRfbW0sIChhZGRyZXNzKSkKLQotLyogdG8gZmluZCBhbiBl
bnRyeSBpbiBhIHBhZ2UtdGFibGUtZGlyZWN0b3J5LiAqLwotI2RlZmluZSBwZ2RfaW5kZXgoYWRk
cmVzcykJKCgoYWRkcmVzcykgPj4gUEdESVJfU0hJRlQpICYgKFBUUlNfUEVSX1BHRC0xKSkKLSNk
ZWZpbmUgcGdkX29mZnNldChtbSwgYWRkcmVzcykJKChtbSktPnBnZCtwZ2RfaW5kZXgoYWRkcmVz
cykpCi0KIC8qCiAgKiBUaGUgc21wX3JlYWRfYmFycmllcl9kZXBlbmRzKCkgaW4gdGhlIGZvbGxv
d2luZyBmdW5jdGlvbnMgYXJlIHJlcXVpcmVkIHRvCiAgKiBvcmRlciB0aGUgbG9hZCBvZiAqZGly
ICh0aGUgcG9pbnRlciBpbiB0aGUgdG9wIGxldmVsIHBhZ2UgdGFibGUpIHdpdGggYW55CmRpZmYg
LS1naXQgYS9hcmNoL2FyYy9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggYi9hcmNoL2FyYy9pbmNsdWRl
L2FzbS9wZ3RhYmxlLmgKaW5kZXggMTE0NjkwNWY1OTRiLi5mMWVkMTdlZGIwODUgMTAwNjQ0Ci0t
LSBhL2FyY2gvYXJjL2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNoL2FyYy9pbmNsdWRl
L2FzbS9wZ3RhYmxlLmgKQEAgLTMxNiwxMyArMzE2LDYgQEAgc3RhdGljIGlubGluZSB2b2lkIHNl
dF9wdGVfYXQoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkciwKIAlzZXRf
cHRlKHB0ZXAsIHB0ZXZhbCk7CiB9CiAKLS8qCi0gKiBBbGwga2VybmVsIHJlbGF0ZWQgVk0gcGFn
ZXMgYXJlIGluIGluaXQncyBtbS4KLSAqLwotI2RlZmluZSBwZ2Rfb2Zmc2V0X2soYWRkcmVzcykJ
cGdkX29mZnNldCgmaW5pdF9tbSwgYWRkcmVzcykKLSNkZWZpbmUgcGdkX2luZGV4KGFkZHIpCQko
KGFkZHIpID4+IFBHRElSX1NISUZUKQotI2RlZmluZSBwZ2Rfb2Zmc2V0KG1tLCBhZGRyKQkoKCht
bSktPnBnZCkrcGdkX2luZGV4KGFkZHIpKQotCiAvKgogICogTWFjcm8gdG8gcXVpY2tseSBhY2Nl
c3MgdGhlIFBHRCBlbnRyeSwgdXRsaXNpbmcgdGhlIGZhY3QgdGhhdCBzb21lCiAgKiBhcmNoIG1h
eSBjYWNoZSB0aGUgcG9pbnRlciB0byBQYWdlIERpcmVjdG9yeSBvZiAiY3VycmVudCIgdGFzawpk
aWZmIC0tZ2l0IGEvYXJjaC9hcm0vaW5jbHVkZS9hc20vcGd0YWJsZS5oIGIvYXJjaC9hcm0vaW5j
bHVkZS9hc20vcGd0YWJsZS5oCmluZGV4IDQxNTQzYmM0NzY2MC4uYzAyZjI0NDAwMzY5IDEwMDY0
NAotLS0gYS9hcmNoL2FybS9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKKysrIGIvYXJjaC9hcm0vaW5j
bHVkZS9hc20vcGd0YWJsZS5oCkBAIC0xNjYsMTQgKzE2Niw2IEBAIGV4dGVybiBzdHJ1Y3QgcGFn
ZSAqZW1wdHlfemVyb19wYWdlOwogCiBleHRlcm4gcGdkX3Qgc3dhcHBlcl9wZ19kaXJbUFRSU19Q
RVJfUEdEXTsKIAotLyogdG8gZmluZCBhbiBlbnRyeSBpbiBhIHBhZ2UtdGFibGUtZGlyZWN0b3J5
ICovCi0jZGVmaW5lIHBnZF9pbmRleChhZGRyKQkJKChhZGRyKSA+PiBQR0RJUl9TSElGVCkKLQot
I2RlZmluZSBwZ2Rfb2Zmc2V0KG1tLCBhZGRyKQkoKG1tKS0+cGdkICsgcGdkX2luZGV4KGFkZHIp
KQotCi0vKiB0byBmaW5kIGFuIGVudHJ5IGluIGEga2VybmVsIHBhZ2UtdGFibGUtZGlyZWN0b3J5
ICovCi0jZGVmaW5lIHBnZF9vZmZzZXRfayhhZGRyKQlwZ2Rfb2Zmc2V0KCZpbml0X21tLCBhZGRy
KQotCiAjZGVmaW5lIHBtZF9ub25lKHBtZCkJCSghcG1kX3ZhbChwbWQpKQogCiBzdGF0aWMgaW5s
aW5lIHB0ZV90ICpwbWRfcGFnZV92YWRkcihwbWRfdCBwbWQpCmRpZmYgLS1naXQgYS9hcmNoL2Fy
bTY0L2luY2x1ZGUvYXNtL3BndGFibGUuaCBiL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20vcGd0YWJs
ZS5oCmluZGV4IGMwMTU1ODE0YjM3NC4uNmRiZDI2N2FiOTMxIDEwMDY0NAotLS0gYS9hcmNoL2Fy
bTY0L2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3Bn
dGFibGUuaApAQCAtNjU5LDE2ICs2NTksNiBAQCBzdGF0aWMgaW5saW5lIHVuc2lnbmVkIGxvbmcg
cDRkX3BhZ2VfdmFkZHIocDRkX3QgcDRkKQogCiAjZGVmaW5lIHBnZF9FUlJPUihwZ2QpCQlfX3Bn
ZF9lcnJvcihfX0ZJTEVfXywgX19MSU5FX18sIHBnZF92YWwocGdkKSkKIAotLyogdG8gZmluZCBh
biBlbnRyeSBpbiBhIHBhZ2UtdGFibGUtZGlyZWN0b3J5ICovCi0jZGVmaW5lIHBnZF9pbmRleChh
ZGRyKQkJKCgoYWRkcikgPj4gUEdESVJfU0hJRlQpICYgKFBUUlNfUEVSX1BHRCAtIDEpKQotCi0j
ZGVmaW5lIHBnZF9vZmZzZXRfcmF3KHBnZCwgYWRkcikJKChwZ2QpICsgcGdkX2luZGV4KGFkZHIp
KQotCi0jZGVmaW5lIHBnZF9vZmZzZXQobW0sIGFkZHIpCShwZ2Rfb2Zmc2V0X3JhdygobW0pLT5w
Z2QsIChhZGRyKSkpCi0KLS8qIHRvIGZpbmQgYW4gZW50cnkgaW4gYSBrZXJuZWwgcGFnZS10YWJs
ZS1kaXJlY3RvcnkgKi8KLSNkZWZpbmUgcGdkX29mZnNldF9rKGFkZHIpCXBnZF9vZmZzZXQoJmlu
aXRfbW0sIGFkZHIpCi0KICNkZWZpbmUgcGdkX3NldF9maXhtYXAoYWRkcikJKChwZ2RfdCAqKXNl
dF9maXhtYXBfb2Zmc2V0KEZJWF9QR0QsIGFkZHIpKQogI2RlZmluZSBwZ2RfY2xlYXJfZml4bWFw
KCkJY2xlYXJfZml4bWFwKEZJWF9QR0QpCiAKZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQva2VybmVs
L2hpYmVybmF0ZS5jIGIvYXJjaC9hcm02NC9rZXJuZWwvaGliZXJuYXRlLmMKaW5kZXggNjY4OTAz
Yzk0YTJiLi42OGUxNDE1MmQ2ZTkgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtNjQva2VybmVsL2hpYmVy
bmF0ZS5jCisrKyBiL2FyY2gvYXJtNjQva2VybmVsL2hpYmVybmF0ZS5jCkBAIC0xODgsNyArMTg4
LDcgQEAgc3RhdGljIGludCB0cmFuc19wZ2RfbWFwX3BhZ2UocGdkX3QgKnRyYW5zX3BnZCwgdm9p
ZCAqcGFnZSwKIAlwbWRfdCAqcG1kcDsKIAlwdGVfdCAqcHRlcDsKIAotCXBnZHAgPSBwZ2Rfb2Zm
c2V0X3Jhdyh0cmFuc19wZ2QsIGRzdF9hZGRyKTsKKwlwZ2RwID0gcGdkX29mZnNldF9wZ2QodHJh
bnNfcGdkLCBkc3RfYWRkcik7CiAJaWYgKHBnZF9ub25lKFJFQURfT05DRSgqcGdkcCkpKSB7CiAJ
CXB1ZHAgPSAodm9pZCAqKWdldF9zYWZlX3BhZ2UoR0ZQX0FUT01JQyk7CiAJCWlmICghcHVkcCkK
QEAgLTQ5MCw3ICs0OTAsNyBAQCBzdGF0aWMgaW50IGNvcHlfcGFnZV90YWJsZXMocGdkX3QgKmRz
dF9wZ2RwLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAogCXVuc2lnbmVkIGxvbmcgYWRkciA9IHN0YXJ0
OwogCXBnZF90ICpzcmNfcGdkcCA9IHBnZF9vZmZzZXRfayhzdGFydCk7CiAKLQlkc3RfcGdkcCA9
IHBnZF9vZmZzZXRfcmF3KGRzdF9wZ2RwLCBzdGFydCk7CisJZHN0X3BnZHAgPSBwZ2Rfb2Zmc2V0
X3BnZChkc3RfcGdkcCwgc3RhcnQpOwogCWRvIHsKIAkJbmV4dCA9IHBnZF9hZGRyX2VuZChhZGRy
LCBlbmQpOwogCQlpZiAocGdkX25vbmUoUkVBRF9PTkNFKCpzcmNfcGdkcCkpKQpkaWZmIC0tZ2l0
IGEvYXJjaC9hcm02NC9tbS9rYXNhbl9pbml0LmMgYi9hcmNoL2FybTY0L21tL2thc2FuX2luaXQu
YwppbmRleCBjYTc3ZWI4YTBjY2QuLjcyOTFiMjZjZTc4OCAxMDA2NDQKLS0tIGEvYXJjaC9hcm02
NC9tbS9rYXNhbl9pbml0LmMKKysrIGIvYXJjaC9hcm02NC9tbS9rYXNhbl9pbml0LmMKQEAgLTE5
MCw3ICsxOTAsNyBAQCB2b2lkIF9faW5pdCBrYXNhbl9jb3B5X3NoYWRvdyhwZ2RfdCAqcGdkaXIp
CiAKIAlwZ2RwID0gcGdkX29mZnNldF9rKEtBU0FOX1NIQURPV19TVEFSVCk7CiAJcGdkcF9lbmQg
PSBwZ2Rfb2Zmc2V0X2soS0FTQU5fU0hBRE9XX0VORCk7Ci0JcGdkcF9uZXcgPSBwZ2Rfb2Zmc2V0
X3JhdyhwZ2RpciwgS0FTQU5fU0hBRE9XX1NUQVJUKTsKKwlwZ2RwX25ldyA9IHBnZF9vZmZzZXRf
cGdkKHBnZGlyLCBLQVNBTl9TSEFET1dfU1RBUlQpOwogCWRvIHsKIAkJc2V0X3BnZChwZ2RwX25l
dywgUkVBRF9PTkNFKCpwZ2RwKSk7CiAJfSB3aGlsZSAocGdkcCsrLCBwZ2RwX25ldysrLCBwZ2Rw
ICE9IHBnZHBfZW5kKTsKZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQvbW0vbW11LmMgYi9hcmNoL2Fy
bTY0L21tL21tdS5jCmluZGV4IGU3ZmJjNjI3NTMyOS4uOTkwOTI5Yzg4MzdlIDEwMDY0NAotLS0g
YS9hcmNoL2FybTY0L21tL21tdS5jCisrKyBiL2FyY2gvYXJtNjQvbW0vbW11LmMKQEAgLTM0MSw3
ICszNDEsNyBAQCBzdGF0aWMgdm9pZCBfX2NyZWF0ZV9wZ2RfbWFwcGluZyhwZ2RfdCAqcGdkaXIs
IHBoeXNfYWRkcl90IHBoeXMsCiAJCQkJIGludCBmbGFncykKIHsKIAl1bnNpZ25lZCBsb25nIGFk
ZHIsIGVuZCwgbmV4dDsKLQlwZ2RfdCAqcGdkcCA9IHBnZF9vZmZzZXRfcmF3KHBnZGlyLCB2aXJ0
KTsKKwlwZ2RfdCAqcGdkcCA9IHBnZF9vZmZzZXRfcGdkKHBnZGlyLCB2aXJ0KTsKIAogCS8qCiAJ
ICogSWYgdGhlIHZpcnR1YWwgYW5kIHBoeXNpY2FsIGFkZHJlc3MgZG9uJ3QgaGF2ZSB0aGUgc2Ft
ZSBvZmZzZXQKQEAgLTY2MywxMyArNjYzLDEzIEBAIHN0YXRpYyB2b2lkIF9faW5pdCBtYXBfa2Vy
bmVsKHBnZF90ICpwZ2RwKQogCQkJICAgJnZtbGludXhfaW5pdGRhdGEsIDAsIFZNX05PX0dVQVJE
KTsKIAltYXBfa2VybmVsX3NlZ21lbnQocGdkcCwgX2RhdGEsIF9lbmQsIFBBR0VfS0VSTkVMLCAm
dm1saW51eF9kYXRhLCAwLCAwKTsKIAotCWlmICghUkVBRF9PTkNFKHBnZF92YWwoKnBnZF9vZmZz
ZXRfcmF3KHBnZHAsIEZJWEFERFJfU1RBUlQpKSkpIHsKKwlpZiAoIVJFQURfT05DRShwZ2RfdmFs
KCpwZ2Rfb2Zmc2V0X3BnZChwZ2RwLCBGSVhBRERSX1NUQVJUKSkpKSB7CiAJCS8qCiAJCSAqIFRo
ZSBmaXhtYXAgZmFsbHMgaW4gYSBzZXBhcmF0ZSBwZ2QgdG8gdGhlIGtlcm5lbCwgYW5kIGRvZXNu
J3QKIAkJICogbGl2ZSBpbiB0aGUgY2FydmVvdXQgZm9yIHRoZSBzd2FwcGVyX3BnX2Rpci4gV2Ug
Y2FuIHNpbXBseQogCQkgKiByZS11c2UgdGhlIGV4aXN0aW5nIGRpciBmb3IgdGhlIGZpeG1hcC4K
IAkJICovCi0JCXNldF9wZ2QocGdkX29mZnNldF9yYXcocGdkcCwgRklYQUREUl9TVEFSVCksCisJ
CXNldF9wZ2QocGdkX29mZnNldF9wZ2QocGdkcCwgRklYQUREUl9TVEFSVCksCiAJCQlSRUFEX09O
Q0UoKnBnZF9vZmZzZXRfayhGSVhBRERSX1NUQVJUKSkpOwogCX0gZWxzZSBpZiAoQ09ORklHX1BH
VEFCTEVfTEVWRUxTID4gMykgewogCQlwZ2RfdCAqYm1fcGdkcDsKQEAgLTY4Miw3ICs2ODIsNyBA
QCBzdGF0aWMgdm9pZCBfX2luaXQgbWFwX2tlcm5lbChwZ2RfdCAqcGdkcCkKIAkJICogZW50cnkg
aW5zdGVhZC4KIAkJICovCiAJCUJVR19PTighSVNfRU5BQkxFRChDT05GSUdfQVJNNjRfMTZLX1BB
R0VTKSk7Ci0JCWJtX3BnZHAgPSBwZ2Rfb2Zmc2V0X3JhdyhwZ2RwLCBGSVhBRERSX1NUQVJUKTsK
KwkJYm1fcGdkcCA9IHBnZF9vZmZzZXRfcGdkKHBnZHAsIEZJWEFERFJfU1RBUlQpOwogCQlibV9w
NGRwID0gcDRkX29mZnNldChibV9wZ2RwLCBGSVhBRERSX1NUQVJUKTsKIAkJYm1fcHVkcCA9IHB1
ZF9zZXRfZml4bWFwX29mZnNldChibV9wNGRwLCBGSVhBRERSX1NUQVJUKTsKIAkJcHVkX3BvcHVs
YXRlKCZpbml0X21tLCBibV9wdWRwLCBsbV9hbGlhcyhibV9wbWQpKTsKZGlmZiAtLWdpdCBhL2Fy
Y2gvY3NreS9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggYi9hcmNoL2Nza3kvaW5jbHVkZS9hc20vcGd0
YWJsZS5oCmluZGV4IGM1YWIyMDk3MDg1Ny4uMjAwMmNiN2YxMDUzIDEwMDY0NAotLS0gYS9hcmNo
L2Nza3kvaW5jbHVkZS9hc20vcGd0YWJsZS5oCisrKyBiL2FyY2gvY3NreS9pbmNsdWRlL2FzbS9w
Z3RhYmxlLmgKQEAgLTIyMCwxMSArMjIwLDYgQEAgc3RhdGljIGlubGluZSBwdGVfdCBwdGVfbWt5
b3VuZyhwdGVfdCBwdGUpCiAJcmV0dXJuIHB0ZTsKIH0KIAotLyogdG8gZmluZCBhbiBlbnRyeSBp
biBhIGtlcm5lbCBwYWdlLXRhYmxlLWRpcmVjdG9yeSAqLwotI2RlZmluZSBwZ2Rfb2Zmc2V0X2so
YWRkcmVzcykJcGdkX29mZnNldCgmaW5pdF9tbSwgYWRkcmVzcykKLQotI2RlZmluZSBwZ2RfaW5k
ZXgoYWRkcmVzcykJKChhZGRyZXNzKSA+PiBQR0RJUl9TSElGVCkKLQogI2RlZmluZSBfX0hBVkVf
UEhZU19NRU1fQUNDRVNTX1BST1QKIHN0cnVjdCBmaWxlOwogZXh0ZXJuIHBncHJvdF90IHBoeXNf
bWVtX2FjY2Vzc19wcm90KHN0cnVjdCBmaWxlICpmaWxlLCB1bnNpZ25lZCBsb25nIHBmbiwKQEAg
LTI2OCwxMiArMjYzLDYgQEAgc3RhdGljIGlubGluZSBwdGVfdCBwdGVfbW9kaWZ5KHB0ZV90IHB0
ZSwgcGdwcm90X3QgbmV3cHJvdCkKIAkJICAgICAocGdwcm90X3ZhbChuZXdwcm90KSkpOwogfQog
Ci0vKiB0byBmaW5kIGFuIGVudHJ5IGluIGEgcGFnZS10YWJsZS1kaXJlY3RvcnkgKi8KLXN0YXRp
YyBpbmxpbmUgcGdkX3QgKnBnZF9vZmZzZXQoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVk
IGxvbmcgYWRkcmVzcykKLXsKLQlyZXR1cm4gbW0tPnBnZCArIHBnZF9pbmRleChhZGRyZXNzKTsK
LX0KLQogZXh0ZXJuIHBnZF90IHN3YXBwZXJfcGdfZGlyW1BUUlNfUEVSX1BHRF07CiBleHRlcm4g
dm9pZCBwYWdpbmdfaW5pdCh2b2lkKTsKIApkaWZmIC0tZ2l0IGEvYXJjaC9oZXhhZ29uL2luY2x1
ZGUvYXNtL3BndGFibGUuaCBiL2FyY2gvaGV4YWdvbi9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKaW5k
ZXggZWI5NWU5ZjYwY2YwLi5kYmIyMmI4MGI4YzQgMTAwNjQ0Ci0tLSBhL2FyY2gvaGV4YWdvbi9p
bmNsdWRlL2FzbS9wZ3RhYmxlLmgKKysrIGIvYXJjaC9oZXhhZ29uL2luY2x1ZGUvYXNtL3BndGFi
bGUuaApAQCAtMjA2LDI0ICsyMDYsNiBAQCBzdGF0aWMgaW5saW5lIHZvaWQgcHRlX2NsZWFyKHN0
cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJcHRlX3ZhbCgqcHRlcCkg
PSBfTlVMTF9QVEU7CiB9CiAKLS8qKgotICogcGdkX2luZGV4IC0gcmV0dXJucyB0aGUgaW5kZXgg
b2YgdGhlIGVudHJ5IGluIHRoZSBQR0QgcGFnZQotICogd2hpY2ggd291bGQgY29udHJvbCB0aGUg
Z2l2ZW4gdmlydHVhbCBhZGRyZXNzCi0gKgotICogVGhpcyByZXR1cm5zIHRoZSAqaW5kZXgqIGZv
ciB0aGUgYWRkcmVzcyBpbiB0aGUgcGdkX3QKLSAqLwotI2RlZmluZSBwZ2RfaW5kZXgoYWRkcmVz
cykgKCgoYWRkcmVzcykgPj4gUEdESVJfU0hJRlQpICYgKFBUUlNfUEVSX1BHRC0xKSkKLQotLyoK
LSAqIHBnZF9vZmZzZXQgLSBmaW5kIGFuIG9mZnNldCBpbiBhIHBhZ2UtdGFibGUtZGlyZWN0b3J5
Ci0gKi8KLSNkZWZpbmUgcGdkX29mZnNldChtbSwgYWRkcikgKChtbSktPnBnZCArIHBnZF9pbmRl
eChhZGRyKSkKLQotLyoKLSAqIHBnZF9vZmZzZXRfayAtIGdldCBrZXJuZWwgKGluaXRfbW0pIHBn
ZCBlbnRyeSBwb2ludGVyIGZvciBhZGRyCi0gKi8KLSNkZWZpbmUgcGdkX29mZnNldF9rKGFkZHJl
c3MpIHBnZF9vZmZzZXQoJmluaXRfbW0sIGFkZHJlc3MpCi0KIC8qKgogICogcG1kX25vbmUgLSBj
aGVjayBpZiBwbWRfZW50cnkgaXMgbWFwcGVkCiAgKiBAcG1kX2VudHJ5OiAgcG1kIGVudHJ5CmRp
ZmYgLS1naXQgYS9hcmNoL2lhNjQvaW5jbHVkZS9hc20vcGd0YWJsZS5oIGIvYXJjaC9pYTY0L2lu
Y2x1ZGUvYXNtL3BndGFibGUuaAppbmRleCA0YzI0ZTVlMThiZmYuLjEwODUwODk3YTkxYyAxMDA2
NDQKLS0tIGEvYXJjaC9pYTY0L2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNoL2lhNjQv
aW5jbHVkZS9hc20vcGd0YWJsZS5oCkBAIC0zNjQsMTkgKzM2NCw3IEBAIHBnZF9pbmRleCAodW5z
aWduZWQgbG9uZyBhZGRyZXNzKQogCiAJcmV0dXJuIChyZWdpb24gPDwgKFBBR0VfU0hJRlQgLSA2
KSkgfCBsMWluZGV4OwogfQotCi0vKiBUaGUgb2Zmc2V0IGluIHRoZSAxLWxldmVsIGRpcmVjdG9y
eSBpcyBnaXZlbiBieSB0aGUgMyByZWdpb24gYml0cwotICAgKDYxLi42MykgYW5kIHRoZSBsZXZl
bC0xIGJpdHMuICAqLwotc3RhdGljIGlubGluZSBwZ2RfdCoKLXBnZF9vZmZzZXQgKGNvbnN0IHN0
cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MpCi17Ci0JcmV0dXJuIG1t
LT5wZ2QgKyBwZ2RfaW5kZXgoYWRkcmVzcyk7Ci19Ci0KLS8qIEluIHRoZSBrZXJuZWwncyBtYXBw
ZWQgcmVnaW9uIHdlIGNvbXBsZXRlbHkgaWdub3JlIHRoZSByZWdpb24gbnVtYmVyCi0gICAoc2lu
Y2Ugd2Uga25vdyBpdCdzIGluIHJlZ2lvbiBudW1iZXIgNSkuICovCi0jZGVmaW5lIHBnZF9vZmZz
ZXRfayhhZGRyKSBcCi0JKGluaXRfbW0ucGdkICsgKCgoYWRkcikgPj4gUEdESVJfU0hJRlQpICYg
KFBUUlNfUEVSX1BHRCAtIDEpKSkKKyNkZWZpbmUgcGdkX2luZGV4IHBnZF9pbmRleAogCiAvKiBM
b29rIHVwIGEgcGdkIGVudHJ5IGluIHRoZSBnYXRlIGFyZWEuICBPbiBJQS02NCwgdGhlIGdhdGUt
YXJlYQogICAgcmVzaWRlcyBpbiB0aGUga2VybmVsLW1hcHBlZCBzZWdtZW50LCBoZW5jZSB3ZSB1
c2UgcGdkX29mZnNldF9rKCkKZGlmZiAtLWdpdCBhL2FyY2gvbTY4ay9pbmNsdWRlL2FzbS9tY2Zf
cGd0YWJsZS5oIGIvYXJjaC9tNjhrL2luY2x1ZGUvYXNtL21jZl9wZ3RhYmxlLmgKaW5kZXggNTlm
N2Q1ZmNhMzc4Li44ZDRlYzA1OTk2YzUgMTAwNjQ0Ci0tLSBhL2FyY2gvbTY4ay9pbmNsdWRlL2Fz
bS9tY2ZfcGd0YWJsZS5oCisrKyBiL2FyY2gvbTY4ay9pbmNsdWRlL2FzbS9tY2ZfcGd0YWJsZS5o
CkBAIC0zMTAsMTcgKzMxMCw2IEBAIHN0YXRpYyBpbmxpbmUgcHRlX3QgcHRlX21rY2FjaGUocHRl
X3QgcHRlKQogI2RlZmluZSBzd2FwcGVyX3BnX2RpciBrZXJuZWxfcGdfZGlyCiBleHRlcm4gcGdk
X3Qga2VybmVsX3BnX2RpcltQVFJTX1BFUl9QR0RdOwogCi0vKgotICogRmluZCBhbiBlbnRyeSBp
biBhIHBhZ2V0YWJsZSBkaXJlY3RvcnkuCi0gKi8KLSNkZWZpbmUgcGdkX2luZGV4KGFkZHJlc3Mp
CSgoYWRkcmVzcykgPj4gUEdESVJfU0hJRlQpCi0jZGVmaW5lIHBnZF9vZmZzZXQobW0sIGFkZHJl
c3MpCSgobW0pLT5wZ2QgKyBwZ2RfaW5kZXgoYWRkcmVzcykpCi0KLS8qCi0gKiBGaW5kIGFuIGVu
dHJ5IGluIGEga2VybmVsIHBhZ2V0YWJsZSBkaXJlY3RvcnkuCi0gKi8KLSNkZWZpbmUgcGdkX29m
ZnNldF9rKGFkZHJlc3MpCXBnZF9vZmZzZXQoJmluaXRfbW0sIGFkZHJlc3MpCi0KIC8qCiAgKiBF
bmNvZGUgYW5kIGRlLWNvZGUgYSBzd2FwIGVudHJ5IChtdXN0IGJlICFwdGVfbm9uZShlKSAmJiAh
cHRlX3ByZXNlbnQoZSkpCiAgKi8KZGlmZiAtLWdpdCBhL2FyY2gvbTY4ay9pbmNsdWRlL2FzbS9t
b3Rvcm9sYV9wZ3RhYmxlLmggYi9hcmNoL202OGsvaW5jbHVkZS9hc20vbW90b3JvbGFfcGd0YWJs
ZS5oCmluZGV4IGViOTdlYTcwODg2ZS4uODA3NjQ2N2VmZjRiIDEwMDY0NAotLS0gYS9hcmNoL202
OGsvaW5jbHVkZS9hc20vbW90b3JvbGFfcGd0YWJsZS5oCisrKyBiL2FyY2gvbTY4ay9pbmNsdWRl
L2FzbS9tb3Rvcm9sYV9wZ3RhYmxlLmgKQEAgLTE5MiwyNSArMTkyLDkgQEAgc3RhdGljIGlubGlu
ZSBwdGVfdCBwdGVfbWtjYWNoZShwdGVfdCBwdGUpCiAJcmV0dXJuIHB0ZTsKIH0KIAotI2RlZmlu
ZSBQQUdFX0RJUl9PRkZTRVQodHNrLGFkZHJlc3MpIHBnZF9vZmZzZXQoKHRzayksKGFkZHJlc3Mp
KQotCi0jZGVmaW5lIHBnZF9pbmRleChhZGRyZXNzKSAgICAgKChhZGRyZXNzKSA+PiBQR0RJUl9T
SElGVCkKLQotLyogdG8gZmluZCBhbiBlbnRyeSBpbiBhIHBhZ2UtdGFibGUtZGlyZWN0b3J5ICov
Ci1zdGF0aWMgaW5saW5lIHBnZF90ICpwZ2Rfb2Zmc2V0KGNvbnN0IHN0cnVjdCBtbV9zdHJ1Y3Qg
Km1tLAotCQkJCXVuc2lnbmVkIGxvbmcgYWRkcmVzcykKLXsKLQlyZXR1cm4gbW0tPnBnZCArIHBn
ZF9pbmRleChhZGRyZXNzKTsKLX0KLQogI2RlZmluZSBzd2FwcGVyX3BnX2RpciBrZXJuZWxfcGdf
ZGlyCiBleHRlcm4gcGdkX3Qga2VybmVsX3BnX2RpclsxMjhdOwogCi1zdGF0aWMgaW5saW5lIHBn
ZF90ICpwZ2Rfb2Zmc2V0X2sodW5zaWduZWQgbG9uZyBhZGRyZXNzKQotewotCXJldHVybiBrZXJu
ZWxfcGdfZGlyICsgKGFkZHJlc3MgPj4gUEdESVJfU0hJRlQpOwotfQotCiAvKiBFbmNvZGUgYW5k
IGRlLWNvZGUgYSBzd2FwIGVudHJ5IChtdXN0IGJlICFwdGVfbm9uZShlKSAmJiAhcHRlX3ByZXNl
bnQoZSkpICovCiAjZGVmaW5lIF9fc3dwX3R5cGUoeCkJCSgoKHgpLnZhbCA+PiA0KSAmIDB4ZmYp
CiAjZGVmaW5lIF9fc3dwX29mZnNldCh4KQkJKCh4KS52YWwgPj4gMTIpCmRpZmYgLS1naXQgYS9h
cmNoL202OGsvaW5jbHVkZS9hc20vc3VuM19wZ3RhYmxlLmggYi9hcmNoL202OGsvaW5jbHVkZS9h
c20vc3VuM19wZ3RhYmxlLmgKaW5kZXggMTQxNGZjMzYzNzQzLi41YjI0MjgzYTBhNDIgMTAwNjQ0
Ci0tLSBhL2FyY2gvbTY4ay9pbmNsdWRlL2FzbS9zdW4zX3BndGFibGUuaAorKysgYi9hcmNoL202
OGsvaW5jbHVkZS9hc20vc3VuM19wZ3RhYmxlLmgKQEAgLTE3NCwxNSArMTc0LDYgQEAgc3RhdGlj
IGlubGluZSBwdGVfdCBwdGVfbWtjYWNoZShwdGVfdCBwdGUpCXsgcmV0dXJuIHB0ZTsgfQogZXh0
ZXJuIHBnZF90IHN3YXBwZXJfcGdfZGlyW1BUUlNfUEVSX1BHRF07CiBleHRlcm4gcGdkX3Qga2Vy
bmVsX3BnX2RpcltQVFJTX1BFUl9QR0RdOwogCi0vKiBGaW5kIGFuIGVudHJ5IGluIGEgcGFnZXRh
YmxlIGRpcmVjdG9yeS4gKi8KLSNkZWZpbmUgcGdkX2luZGV4KGFkZHJlc3MpICAgICAoKGFkZHJl
c3MpID4+IFBHRElSX1NISUZUKQotCi0jZGVmaW5lIHBnZF9vZmZzZXQobW0sIGFkZHJlc3MpIFwK
LSgobW0pLT5wZ2QgKyBwZ2RfaW5kZXgoYWRkcmVzcykpCi0KLS8qIEZpbmQgYW4gZW50cnkgaW4g
YSBrZXJuZWwgcGFnZXRhYmxlIGRpcmVjdG9yeS4gKi8KLSNkZWZpbmUgcGdkX29mZnNldF9rKGFk
ZHJlc3MpIHBnZF9vZmZzZXQoJmluaXRfbW0sIGFkZHJlc3MpCi0KIC8qIE1hY3JvcyB0byAoZGUp
Y29uc3RydWN0IHRoZSBmYWtlIFBURXMgcmVwcmVzZW50aW5nIHN3YXAgcGFnZXMuICovCiAjZGVm
aW5lIF9fc3dwX3R5cGUoeCkJCSgoeCkudmFsICYgMHg3RikKICNkZWZpbmUgX19zd3Bfb2Zmc2V0
KHgpCQkoKCh4KS52YWwpID4+IDcpCmRpZmYgLS1naXQgYS9hcmNoL21pY3JvYmxhemUvaW5jbHVk
ZS9hc20vcGd0YWJsZS5oIGIvYXJjaC9taWNyb2JsYXplL2luY2x1ZGUvYXNtL3BndGFibGUuaApp
bmRleCA5MjdjY2JhMTYxZWMuLjNmYTFkZjkwOTI1ZSAxMDA2NDQKLS0tIGEvYXJjaC9taWNyb2Js
YXplL2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNoL21pY3JvYmxhemUvaW5jbHVkZS9h
c20vcGd0YWJsZS5oCkBAIC00NDUsMTMgKzQ0NSw2IEBAIHN0YXRpYyBpbmxpbmUgdW5zaWduZWQg
bG9uZyBwbWRfcGFnZV92YWRkcihwbWRfdCBwbWQpCiAvKiByZXR1cm5zIHN0cnVjdCAqcGFnZSBv
ZiB0aGUgcG1kIGVudHJ5Ki8KICNkZWZpbmUgcG1kX3BhZ2UocG1kKQkocGZuX3RvX3BhZ2UoX19w
YShwbWRfdmFsKHBtZCkpID4+IFBBR0VfU0hJRlQpKQogCi0vKiB0byBmaW5kIGFuIGVudHJ5IGlu
IGEga2VybmVsIHBhZ2UtdGFibGUtZGlyZWN0b3J5ICovCi0jZGVmaW5lIHBnZF9vZmZzZXRfayhh
ZGRyZXNzKSBwZ2Rfb2Zmc2V0KCZpbml0X21tLCBhZGRyZXNzKQotCi0vKiB0byBmaW5kIGFuIGVu
dHJ5IGluIGEgcGFnZS10YWJsZS1kaXJlY3RvcnkgKi8KLSNkZWZpbmUgcGdkX2luZGV4KGFkZHJl
c3MpCSAoKGFkZHJlc3MpID4+IFBHRElSX1NISUZUKQotI2RlZmluZSBwZ2Rfb2Zmc2V0KG1tLCBh
ZGRyZXNzKQkgKChtbSktPnBnZCArIHBnZF9pbmRleChhZGRyZXNzKSkKLQogLyogRmluZCBhbiBl
bnRyeSBpbiB0aGUgdGhpcmQtbGV2ZWwgcGFnZSB0YWJsZS4uICovCiAKIGV4dGVybiBwZ2RfdCBz
d2FwcGVyX3BnX2RpcltQVFJTX1BFUl9QR0RdOwpkaWZmIC0tZ2l0IGEvYXJjaC9taXBzL2luY2x1
ZGUvYXNtL3BndGFibGUtMzIuaCBiL2FyY2gvbWlwcy9pbmNsdWRlL2FzbS9wZ3RhYmxlLTMyLmgK
aW5kZXggOWMwZTdhNWZmYzc1Li5hOTUwZmMxZGRiNGQgMTAwNjQ0Ci0tLSBhL2FyY2gvbWlwcy9p
bmNsdWRlL2FzbS9wZ3RhYmxlLTMyLmgKKysrIGIvYXJjaC9taXBzL2luY2x1ZGUvYXNtL3BndGFi
bGUtMzIuaApAQCAtMTk1LDE0ICsxOTUsNiBAQCBzdGF0aWMgaW5saW5lIHB0ZV90IHBmbl9wdGUo
dW5zaWduZWQgbG9uZyBwZm4sIHBncHJvdF90IHByb3QpCiAKICNkZWZpbmUgcHRlX3BhZ2UoeCkJ
CXBmbl90b19wYWdlKHB0ZV9wZm4oeCkpCiAKLS8qIHRvIGZpbmQgYW4gZW50cnkgaW4gYSBrZXJu
ZWwgcGFnZS10YWJsZS1kaXJlY3RvcnkgKi8KLSNkZWZpbmUgcGdkX29mZnNldF9rKGFkZHJlc3Mp
IHBnZF9vZmZzZXQoJmluaXRfbW0sIGFkZHJlc3MpCi0KLSNkZWZpbmUgcGdkX2luZGV4KGFkZHJl
c3MpCSgoKGFkZHJlc3MpID4+IFBHRElSX1NISUZUKSAmIChQVFJTX1BFUl9QR0QtMSkpCi0KLS8q
IHRvIGZpbmQgYW4gZW50cnkgaW4gYSBwYWdlLXRhYmxlLWRpcmVjdG9yeSAqLwotI2RlZmluZSBw
Z2Rfb2Zmc2V0KG1tLCBhZGRyKQkoKG1tKS0+cGdkICsgcGdkX2luZGV4KGFkZHIpKQotCiAjaWYg
ZGVmaW5lZChDT05GSUdfQ1BVX1IzS19UTEIpCiAKIC8qIFN3YXAgZW50cmllcyBtdXN0IGhhdmUg
VkFMSUQgYml0IGNsZWFyZWQuICovCmRpZmYgLS1naXQgYS9hcmNoL21pcHMvaW5jbHVkZS9hc20v
cGd0YWJsZS02NC5oIGIvYXJjaC9taXBzL2luY2x1ZGUvYXNtL3BndGFibGUtNjQuaAppbmRleCAz
ODE3MGZkYWM1YmYuLjFlN2Q2Y2U5ZDhkNiAxMDA2NDQKLS0tIGEvYXJjaC9taXBzL2luY2x1ZGUv
YXNtL3BndGFibGUtNjQuaAorKysgYi9hcmNoL21pcHMvaW5jbHVkZS9hc20vcGd0YWJsZS02NC5o
CkBAIC0zMTMsMTQgKzMxMyw2IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBwdWRfY2xlYXIocHVkX3Qg
KnB1ZHApCiAjZGVmaW5lIHBmbl9wbWQocGZuLCBwcm90KQlfX3BtZCgoKHBmbikgPDwgX1BGTl9T
SElGVCkgfCBwZ3Byb3RfdmFsKHByb3QpKQogI2VuZGlmCiAKLS8qIHRvIGZpbmQgYW4gZW50cnkg
aW4gYSBrZXJuZWwgcGFnZS10YWJsZS1kaXJlY3RvcnkgKi8KLSNkZWZpbmUgcGdkX29mZnNldF9r
KGFkZHJlc3MpIHBnZF9vZmZzZXQoJmluaXRfbW0sIGFkZHJlc3MpCi0KLSNkZWZpbmUgcGdkX2lu
ZGV4KGFkZHJlc3MpCSgoKGFkZHJlc3MpID4+IFBHRElSX1NISUZUKSAmIChQVFJTX1BFUl9QR0Qt
MSkpCi0KLS8qIHRvIGZpbmQgYW4gZW50cnkgaW4gYSBwYWdlLXRhYmxlLWRpcmVjdG9yeSAqLwot
I2RlZmluZSBwZ2Rfb2Zmc2V0KG1tLCBhZGRyKQkoKG1tKS0+cGdkICsgcGdkX2luZGV4KGFkZHIp
KQotCiAjaWZuZGVmIF9fUEFHRVRBQkxFX1BNRF9GT0xERUQKIHN0YXRpYyBpbmxpbmUgdW5zaWdu
ZWQgbG9uZyBwdWRfcGFnZV92YWRkcihwdWRfdCBwdWQpCiB7CmRpZmYgLS1naXQgYS9hcmNoL25k
czMyL2luY2x1ZGUvYXNtL3BndGFibGUuaCBiL2FyY2gvbmRzMzIvaW5jbHVkZS9hc20vcGd0YWJs
ZS5oCmluZGV4IGZjOTc0ODBjYmRkNS4uNDE5Zjk4NGVlZjcwIDEwMDY0NAotLS0gYS9hcmNoL25k
czMyL2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNoL25kczMyL2luY2x1ZGUvYXNtL3Bn
dGFibGUuaApAQCAtMzQwLDEyICszNDAsNiBAQCBzdGF0aWMgaW5saW5lIHBtZF90IF9fbWtfcG1k
KHB0ZV90ICogcHRlcCwgdW5zaWduZWQgbG9uZyBwcm90KQogICoKICovCiAKLS8qIHRvIGZpbmQg
YW4gZW50cnkgaW4gYSBwYWdlLXRhYmxlLWRpcmVjdG9yeSAqLwotI2RlZmluZSBwZ2RfaW5kZXgo
YWRkcmVzcykgICAgICAoKChhZGRyZXNzKSA+PiBQR0RJUl9TSElGVCkgJiAoUFRSU19QRVJfUEdE
IC0gMSkpCi0jZGVmaW5lIHBnZF9vZmZzZXQobW0sIGFkZHJlc3MpCSgobW0pLT5wZ2QgKyBwZ2Rf
aW5kZXgoYWRkcmVzcykpCi0vKiB0byBmaW5kIGFuIGVudHJ5IGluIGEga2VybmVsIHBhZ2UtdGFi
bGUtZGlyZWN0b3J5ICovCi0jZGVmaW5lIHBnZF9vZmZzZXRfayhhZGRyKSAgICAgIHBnZF9vZmZz
ZXQoJmluaXRfbW0sIGFkZHIpCi0KIHN0YXRpYyBpbmxpbmUgcHRlX3QgcHRlX21vZGlmeShwdGVf
dCBwdGUsIHBncHJvdF90IG5ld3Byb3QpCiB7CiAJY29uc3QgdW5zaWduZWQgbG9uZyBtYXNrID0g
MHhmZmY7CmRpZmYgLS1naXQgYS9hcmNoL25pb3MyL2luY2x1ZGUvYXNtL3BndGFibGUuaCBiL2Fy
Y2gvbmlvczIvaW5jbHVkZS9hc20vcGd0YWJsZS5oCmluZGV4IGU5M2UxN2NhZjk2NS4uMjYwMGQ3
NmMzMTBjIDEwMDY0NAotLS0gYS9hcmNoL25pb3MyL2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysg
Yi9hcmNoL25pb3MyL2luY2x1ZGUvYXNtL3BndGFibGUuaApAQCAtMTAyLDEwICsxMDIsNiBAQCBz
dGF0aWMgaW5saW5lIHZvaWQgc2V0X3BtZChwbWRfdCAqcG1kcHRyLCBwbWRfdCBwbWR2YWwpCiAJ
KnBtZHB0ciA9IHBtZHZhbDsKIH0KIAotLyogdG8gZmluZCBhbiBlbnRyeSBpbiBhIHBhZ2UtdGFi
bGUtZGlyZWN0b3J5ICovCi0jZGVmaW5lIHBnZF9pbmRleChhZGRyKQkJKCgoYWRkcikgPj4gUEdE
SVJfU0hJRlQpICYgKFBUUlNfUEVSX1BHRCAtIDEpKQotI2RlZmluZSBwZ2Rfb2Zmc2V0KG1tLCBh
ZGRyKQkoKG1tKS0+cGdkICsgcGdkX2luZGV4KGFkZHIpKQotCiBzdGF0aWMgaW5saW5lIGludCBw
dGVfd3JpdGUocHRlX3QgcHRlKQkJXAogCXsgcmV0dXJuIHB0ZV92YWwocHRlKSAmIF9QQUdFX1dS
SVRFOyB9CiBzdGF0aWMgaW5saW5lIGludCBwdGVfZGlydHkocHRlX3QgcHRlKQkJXApAQCAtMjQ4
LDEwICsyNDQsNiBAQCBzdGF0aWMgaW5saW5lIHVuc2lnbmVkIGxvbmcgcG1kX3BhZ2VfdmFkZHIo
cG1kX3QgcG1kKQogCXJldHVybiBwbWRfdmFsKHBtZCk7CiB9CiAKLS8qIHRvIGZpbmQgYW4gZW50
cnkgaW4gYSBrZXJuZWwgcGFnZS10YWJsZS1kaXJlY3RvcnkgKi8KLSNkZWZpbmUgcGdkX29mZnNl
dF9rKGFkZHIpCXBnZF9vZmZzZXQoJmluaXRfbW0sIGFkZHIpCi0KLQogI2RlZmluZSBwdGVfRVJS
T1IoZSkgXAogCXByX2VycigiJXM6JWQ6IGJhZCBwdGUgJTA4bHguXG4iLCBcCiAJCV9fRklMRV9f
LCBfX0xJTkVfXywgcHRlX3ZhbChlKSkKZGlmZiAtLWdpdCBhL2FyY2gvb3BlbnJpc2MvaW5jbHVk
ZS9hc20vcGd0YWJsZS5oIGIvYXJjaC9vcGVucmlzYy9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKaW5k
ZXggN2RlMDYxMzA0YjZkLi45NDI1YmVkYWI0ZmMgMTAwNjQ0Ci0tLSBhL2FyY2gvb3BlbnJpc2Mv
aW5jbHVkZS9hc20vcGd0YWJsZS5oCisrKyBiL2FyY2gvb3BlbnJpc2MvaW5jbHVkZS9hc20vcGd0
YWJsZS5oCkBAIC0zNjksMTYgKzM2OSw2IEBAIHN0YXRpYyBpbmxpbmUgdW5zaWduZWQgbG9uZyBw
bWRfcGFnZV92YWRkcihwbWRfdCBwbWQpCiAJcmV0dXJuICgodW5zaWduZWQgbG9uZykgX192YShw
bWRfdmFsKHBtZCkgJiBQQUdFX01BU0spKTsKIH0KIAotLyogdG8gZmluZCBhbiBlbnRyeSBpbiBh
IHBhZ2UtdGFibGUtZGlyZWN0b3J5LiAqLwotI2RlZmluZSBwZ2RfaW5kZXgoYWRkcmVzcykgICAg
ICAoKGFkZHJlc3MgPj4gUEdESVJfU0hJRlQpICYgKFBUUlNfUEVSX1BHRC0xKSkKLQotI2RlZmlu
ZSBfX3BnZF9vZmZzZXQoYWRkcmVzcykgICBwZ2RfaW5kZXgoYWRkcmVzcykKLQotI2RlZmluZSBw
Z2Rfb2Zmc2V0KG1tLCBhZGRyZXNzKSAoKG1tKS0+cGdkK3BnZF9pbmRleChhZGRyZXNzKSkKLQot
LyogdG8gZmluZCBhbiBlbnRyeSBpbiBhIGtlcm5lbCBwYWdlLXRhYmxlLWRpcmVjdG9yeSAqLwot
I2RlZmluZSBwZ2Rfb2Zmc2V0X2soYWRkcmVzcykgcGdkX29mZnNldCgmaW5pdF9tbSwgYWRkcmVz
cykKLQogI2RlZmluZSBfX3BtZF9vZmZzZXQoYWRkcmVzcykgXAogCSgoKGFkZHJlc3MpID4+IFBN
RF9TSElGVCkgJiAoUFRSU19QRVJfUE1ELTEpKQogCmRpZmYgLS1naXQgYS9hcmNoL3BhcmlzYy9p
bmNsdWRlL2FzbS9wZ3RhYmxlLmggYi9hcmNoL3BhcmlzYy9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgK
aW5kZXggNzY0ODg4MDlhMTExLi4wOTdkMTkwMDdmMmUgMTAwNjQ0Ci0tLSBhL2FyY2gvcGFyaXNj
L2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNoL3BhcmlzYy9pbmNsdWRlL2FzbS9wZ3Rh
YmxlLmgKQEAgLTQzNywxNSArNDM3LDYgQEAgc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIHBt
ZF9wYWdlX3ZhZGRyKHBtZF90IHBtZCkKICNkZWZpbmUgX19wbWRfcGFnZShwbWQpICgodW5zaWdu
ZWQgbG9uZykgX192YShwbWRfYWRkcmVzcyhwbWQpKSkKICNkZWZpbmUgcG1kX3BhZ2UocG1kKQl2
aXJ0X3RvX3BhZ2UoKHZvaWQgKilfX3BtZF9wYWdlKHBtZCkpCiAKLSNkZWZpbmUgcGdkX2luZGV4
KGFkZHJlc3MpICgoYWRkcmVzcykgPj4gUEdESVJfU0hJRlQpCi0KLS8qIHRvIGZpbmQgYW4gZW50
cnkgaW4gYSBwYWdlLXRhYmxlLWRpcmVjdG9yeSAqLwotI2RlZmluZSBwZ2Rfb2Zmc2V0KG1tLCBh
ZGRyZXNzKSBcCi0oKG1tKS0+cGdkICsgKChhZGRyZXNzKSA+PiBQR0RJUl9TSElGVCkpCi0KLS8q
IHRvIGZpbmQgYW4gZW50cnkgaW4gYSBrZXJuZWwgcGFnZS10YWJsZS1kaXJlY3RvcnkgKi8KLSNk
ZWZpbmUgcGdkX29mZnNldF9rKGFkZHJlc3MpIHBnZF9vZmZzZXQoJmluaXRfbW0sIGFkZHJlc3Mp
Ci0KIC8qIEZpbmQgYW4gZW50cnkgaW4gdGhlIHNlY29uZC1sZXZlbCBwYWdlIHRhYmxlLi4gKi8K
IAogZXh0ZXJuIHZvaWQgcGFnaW5nX2luaXQgKHZvaWQpOwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dl
cnBjL2luY2x1ZGUvYXNtL2Jvb2szcy8zMi9wZ3RhYmxlLmggYi9hcmNoL3Bvd2VycGMvaW5jbHVk
ZS9hc20vYm9vazNzLzMyL3BndGFibGUuaAppbmRleCBmYzU0MjI3MzYzYjUuLjk3NTZhNmQ2NTdj
NSAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy8zMi9wZ3RhYmxl
LmgKKysrIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy8zMi9wZ3RhYmxlLmgKQEAg
LTM1NCwxMyArMzU0LDYgQEAgc3RhdGljIGlubGluZSB2b2lkIF9fcHRlcF9zZXRfYWNjZXNzX2Zs
YWdzKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLAogI2RlZmluZSBwbWRfcGFnZShwbWQpCQlc
CiAJcGZuX3RvX3BhZ2UocG1kX3ZhbChwbWQpID4+IFBBR0VfU0hJRlQpCiAKLS8qIHRvIGZpbmQg
YW4gZW50cnkgaW4gYSBrZXJuZWwgcGFnZS10YWJsZS1kaXJlY3RvcnkgKi8KLSNkZWZpbmUgcGdk
X29mZnNldF9rKGFkZHJlc3MpIHBnZF9vZmZzZXQoJmluaXRfbW0sIGFkZHJlc3MpCi0KLS8qIHRv
IGZpbmQgYW4gZW50cnkgaW4gYSBwYWdlLXRhYmxlLWRpcmVjdG9yeSAqLwotI2RlZmluZSBwZ2Rf
aW5kZXgoYWRkcmVzcykJICgoYWRkcmVzcykgPj4gUEdESVJfU0hJRlQpCi0jZGVmaW5lIHBnZF9v
ZmZzZXQobW0sIGFkZHJlc3MpCSAoKG1tKS0+cGdkICsgcGdkX2luZGV4KGFkZHJlc3MpKQotCiAv
KgogICogRW5jb2RlIGFuZCBkZWNvZGUgYSBzd2FwIGVudHJ5LgogICogTm90ZSB0aGF0IHRoZSBi
aXRzIHdlIHVzZSBpbiBhIFBURSBmb3IgcmVwcmVzZW50aW5nIGEgc3dhcCBlbnRyeQpkaWZmIC0t
Z2l0IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82NC9wZ3RhYmxlLmggYi9hcmNo
L3Bvd2VycGMvaW5jbHVkZS9hc20vYm9vazNzLzY0L3BndGFibGUuaAppbmRleCBmZmZlMjhkNTJj
MDIuLjI3YTg4NDYyNDMwNCAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jv
b2szcy82NC9wZ3RhYmxlLmgKKysrIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL2Jvb2szcy82
NC9wZ3RhYmxlLmgKQEAgLTEwMDgsMTkgKzEwMDgsNiBAQCBleHRlcm4gc3RydWN0IHBhZ2UgKnA0
ZF9wYWdlKHA0ZF90IHA0ZCk7CiAjZGVmaW5lIHB1ZF9wYWdlX3ZhZGRyKHB1ZCkJX192YShwdWRf
dmFsKHB1ZCkgJiB+UFVEX01BU0tFRF9CSVRTKQogI2RlZmluZSBwNGRfcGFnZV92YWRkcihwNGQp
CV9fdmEocDRkX3ZhbChwNGQpICYgflA0RF9NQVNLRURfQklUUykKIAotI2RlZmluZSBwZ2RfaW5k
ZXgoYWRkcmVzcykgKCgoYWRkcmVzcykgPj4gKFBHRElSX1NISUZUKSkgJiAoUFRSU19QRVJfUEdE
IC0gMSkpCi0KLS8qCi0gKiBGaW5kIGFuIGVudHJ5IGluIGEgcGFnZS10YWJsZS1kaXJlY3Rvcnku
ICBXZSBjb21iaW5lIHRoZSBhZGRyZXNzIHJlZ2lvbgotICogKHRoZSBoaWdoIG9yZGVyIE4gYml0
cykgYW5kIHRoZSBwZ2QgcG9ydGlvbiBvZiB0aGUgYWRkcmVzcy4KLSAqLwotCi0jZGVmaW5lIHBn
ZF9vZmZzZXQobW0sIGFkZHJlc3MpCSAoKG1tKS0+cGdkICsgcGdkX2luZGV4KGFkZHJlc3MpKQot
Ci0vKiB0byBmaW5kIGFuIGVudHJ5IGluIGEga2VybmVsIHBhZ2UtdGFibGUtZGlyZWN0b3J5ICov
Ci0vKiBUaGlzIG5vdyBvbmx5IGNvbnRhaW5zIHRoZSB2bWFsbG9jIHBhZ2VzICovCi0jZGVmaW5l
IHBnZF9vZmZzZXRfayhhZGRyZXNzKSBwZ2Rfb2Zmc2V0KCZpbml0X21tLCBhZGRyZXNzKQotCiAj
ZGVmaW5lIHB0ZV9FUlJPUihlKSBcCiAJcHJfZXJyKCIlczolZDogYmFkIHB0ZSAlMDhseC5cbiIs
IF9fRklMRV9fLCBfX0xJTkVfXywgcHRlX3ZhbChlKSkKICNkZWZpbmUgcG1kX0VSUk9SKGUpIFwK
ZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvMzIvcGd0YWJsZS5o
IGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL25vaGFzaC8zMi9wZ3RhYmxlLmgKaW5kZXggY2My
ZWQwOGQ2NDI0Li44ODlmZWFlYzBhMGUgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRl
L2FzbS9ub2hhc2gvMzIvcGd0YWJsZS5oCisrKyBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9u
b2hhc2gvMzIvcGd0YWJsZS5oCkBAIC0zNTgsMTMgKzM1OCw2IEBAIHN0YXRpYyBpbmxpbmUgaW50
IHB0ZV95b3VuZyhwdGVfdCBwdGUpCiAJcGZuX3RvX3BhZ2UoKF9fcGEocG1kX3ZhbChwbWQpKSA+
PiBQQUdFX1NISUZUKSkKICNlbmRpZgogCi0vKiB0byBmaW5kIGFuIGVudHJ5IGluIGEga2VybmVs
IHBhZ2UtdGFibGUtZGlyZWN0b3J5ICovCi0jZGVmaW5lIHBnZF9vZmZzZXRfayhhZGRyZXNzKSBw
Z2Rfb2Zmc2V0KCZpbml0X21tLCBhZGRyZXNzKQotCi0vKiB0byBmaW5kIGFuIGVudHJ5IGluIGEg
cGFnZS10YWJsZS1kaXJlY3RvcnkgKi8KLSNkZWZpbmUgcGdkX2luZGV4KGFkZHJlc3MpCSAoKGFk
ZHJlc3MpID4+IFBHRElSX1NISUZUKQotI2RlZmluZSBwZ2Rfb2Zmc2V0KG1tLCBhZGRyZXNzKQkg
KChtbSktPnBnZCArIHBnZF9pbmRleChhZGRyZXNzKSkKLQogLyoKICAqIEVuY29kZSBhbmQgZGVj
b2RlIGEgc3dhcCBlbnRyeS4KICAqIE5vdGUgdGhhdCB0aGUgYml0cyB3ZSB1c2UgaW4gYSBQVEUg
Zm9yIHJlcHJlc2VudGluZyBhIHN3YXAgZW50cnkKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9p
bmNsdWRlL2FzbS9ub2hhc2gvNjQvcGd0YWJsZS5oIGIvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNt
L25vaGFzaC82NC9wZ3RhYmxlLmgKaW5kZXggMjEwZTA2NGVkZTU0Li45ZGQ5ZGY1NjdlZmIgMTAw
NjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvNjQvcGd0YWJsZS5oCisr
KyBiL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9ub2hhc2gvNjQvcGd0YWJsZS5oCkBAIC0xODIs
MTggKzE4Miw2IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBwNGRfc2V0KHA0ZF90ICpwNGRwLCB1bnNp
Z25lZCBsb25nIHZhbCkKIAkqcDRkcCA9IF9fcDRkKHZhbCk7CiB9CiAKLS8qCi0gKiBGaW5kIGFu
IGVudHJ5IGluIGEgcGFnZS10YWJsZS1kaXJlY3RvcnkuICBXZSBjb21iaW5lIHRoZSBhZGRyZXNz
IHJlZ2lvbgotICogKHRoZSBoaWdoIG9yZGVyIE4gYml0cykgYW5kIHRoZSBwZ2QgcG9ydGlvbiBv
ZiB0aGUgYWRkcmVzcy4KLSAqLwotI2RlZmluZSBwZ2RfaW5kZXgoYWRkcmVzcykgKCgoYWRkcmVz
cykgPj4gKFBHRElSX1NISUZUKSkgJiAoUFRSU19QRVJfUEdEIC0gMSkpCi0KLSNkZWZpbmUgcGdk
X29mZnNldChtbSwgYWRkcmVzcykJICgobW0pLT5wZ2QgKyBwZ2RfaW5kZXgoYWRkcmVzcykpCi0K
LS8qIHRvIGZpbmQgYW4gZW50cnkgaW4gYSBrZXJuZWwgcGFnZS10YWJsZS1kaXJlY3RvcnkgKi8K
LS8qIFRoaXMgbm93IG9ubHkgY29udGFpbnMgdGhlIHZtYWxsb2MgcGFnZXMgKi8KLSNkZWZpbmUg
cGdkX29mZnNldF9rKGFkZHJlc3MpIHBnZF9vZmZzZXQoJmluaXRfbW0sIGFkZHJlc3MpCi0KIC8q
IEF0b21pYyBQVEUgdXBkYXRlcyAqLwogc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIHB0ZV91
cGRhdGUoc3RydWN0IG1tX3N0cnVjdCAqbW0sCiAJCQkJICAgICAgIHVuc2lnbmVkIGxvbmcgYWRk
ciwKZGlmZiAtLWdpdCBhL2FyY2gvcmlzY3YvaW5jbHVkZS9hc20vcGd0YWJsZS5oIGIvYXJjaC9y
aXNjdi9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKaW5kZXggOGRhYTM2MjQxOWQ4Li4wNGZiNTgzNzY5
YjQgMTAwNjQ0Ci0tLSBhL2FyY2gvcmlzY3YvaW5jbHVkZS9hc20vcGd0YWJsZS5oCisrKyBiL2Fy
Y2gvcmlzY3YvaW5jbHVkZS9hc20vcGd0YWJsZS5oCkBAIC0xNzMsMTYgKzE3Myw2IEBAIHN0YXRp
YyBpbmxpbmUgdW5zaWduZWQgbG9uZyBfcGdkX3BmbihwZ2RfdCBwZ2QpCiAJcmV0dXJuIHBnZF92
YWwocGdkKSA+PiBfUEFHRV9QRk5fU0hJRlQ7CiB9CiAKLSNkZWZpbmUgcGdkX2luZGV4KGFkZHIp
ICgoKGFkZHIpID4+IFBHRElSX1NISUZUKSAmIChQVFJTX1BFUl9QR0QgLSAxKSkKLQotLyogTG9j
YXRlIGFuIGVudHJ5IGluIHRoZSBwYWdlIGdsb2JhbCBkaXJlY3RvcnkgKi8KLXN0YXRpYyBpbmxp
bmUgcGdkX3QgKnBnZF9vZmZzZXQoY29uc3Qgc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVk
IGxvbmcgYWRkcikKLXsKLQlyZXR1cm4gbW0tPnBnZCArIHBnZF9pbmRleChhZGRyKTsKLX0KLS8q
IExvY2F0ZSBhbiBlbnRyeSBpbiB0aGUga2VybmVsIHBhZ2UgZ2xvYmFsIGRpcmVjdG9yeSAqLwot
I2RlZmluZSBwZ2Rfb2Zmc2V0X2soYWRkcikgICAgICBwZ2Rfb2Zmc2V0KCZpbml0X21tLCAoYWRk
cikpCi0KIHN0YXRpYyBpbmxpbmUgc3RydWN0IHBhZ2UgKnBtZF9wYWdlKHBtZF90IHBtZCkKIHsK
IAlyZXR1cm4gcGZuX3RvX3BhZ2UocG1kX3ZhbChwbWQpID4+IF9QQUdFX1BGTl9TSElGVCk7CmRp
ZmYgLS1naXQgYS9hcmNoL3Jpc2N2L21tL2luaXQuYyBiL2FyY2gvcmlzY3YvbW0vaW5pdC5jCmlu
ZGV4IDFjODY5OGZmMWE5NC4uMDc4YjYyOTc1MGMwIDEwMDY0NAotLS0gYS9hcmNoL3Jpc2N2L21t
L2luaXQuYworKysgYi9hcmNoL3Jpc2N2L21tL2luaXQuYwpAQCAtMzI1LDIxICszMjUsMjEgQEAg
c3RhdGljIHZvaWQgX19pbml0IGNyZWF0ZV9wZ2RfbWFwcGluZyhwZ2RfdCAqcGdkcCwKIHsKIAlw
Z2RfbmV4dF90ICpuZXh0cDsKIAlwaHlzX2FkZHJfdCBuZXh0X3BoeXM7Ci0JdWludHB0cl90IHBn
ZF9pbmRleCA9IHBnZF9pbmRleCh2YSk7CisJdWludHB0cl90IHBnZF9pZHggPSBwZ2RfaW5kZXgo
dmEpOwogCiAJaWYgKHN6ID09IFBHRElSX1NJWkUpIHsKLQkJaWYgKHBnZF92YWwocGdkcFtwZ2Rf
aW5kZXhdKSA9PSAwKQotCQkJcGdkcFtwZ2RfaW5kZXhdID0gcGZuX3BnZChQRk5fRE9XTihwYSks
IHByb3QpOworCQlpZiAocGdkX3ZhbChwZ2RwW3BnZF9pZHhdKSA9PSAwKQorCQkJcGdkcFtwZ2Rf
aWR4XSA9IHBmbl9wZ2QoUEZOX0RPV04ocGEpLCBwcm90KTsKIAkJcmV0dXJuOwogCX0KIAotCWlm
IChwZ2RfdmFsKHBnZHBbcGdkX2luZGV4XSkgPT0gMCkgeworCWlmIChwZ2RfdmFsKHBnZHBbcGdk
X2lkeF0pID09IDApIHsKIAkJbmV4dF9waHlzID0gYWxsb2NfcGdkX25leHQodmEpOwotCQlwZ2Rw
W3BnZF9pbmRleF0gPSBwZm5fcGdkKFBGTl9ET1dOKG5leHRfcGh5cyksIFBBR0VfVEFCTEUpOwor
CQlwZ2RwW3BnZF9pZHhdID0gcGZuX3BnZChQRk5fRE9XTihuZXh0X3BoeXMpLCBQQUdFX1RBQkxF
KTsKIAkJbmV4dHAgPSBnZXRfcGdkX25leHRfdmlydChuZXh0X3BoeXMpOwogCQltZW1zZXQobmV4
dHAsIDAsIFBBR0VfU0laRSk7CiAJfSBlbHNlIHsKLQkJbmV4dF9waHlzID0gUEZOX1BIWVMoX3Bn
ZF9wZm4ocGdkcFtwZ2RfaW5kZXhdKSk7CisJCW5leHRfcGh5cyA9IFBGTl9QSFlTKF9wZ2RfcGZu
KHBnZHBbcGdkX2lkeF0pKTsKIAkJbmV4dHAgPSBnZXRfcGdkX25leHRfdmlydChuZXh0X3BoeXMp
OwogCX0KIApkaWZmIC0tZ2l0IGEvYXJjaC9zMzkwL2luY2x1ZGUvYXNtL3BndGFibGUuaCBiL2Fy
Y2gvczM5MC9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKaW5kZXggZTFlZWY2N2EwODc3Li4xOWQ2MDNi
ZDFmMzYgMTAwNjQ0Ci0tLSBhL2FyY2gvczM5MC9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKKysrIGIv
YXJjaC9zMzkwL2luY2x1ZGUvYXNtL3BndGFibGUuaApAQCAtMTI1OSw3ICsxMjU5LDYgQEAgc3Rh
dGljIGlubGluZSBwZ2RfdCAqcGdkX29mZnNldF9yYXcocGdkX3QgKnBnZCwgdW5zaWduZWQgbG9u
ZyBhZGRyZXNzKQogfQogCiAjZGVmaW5lIHBnZF9vZmZzZXQobW0sIGFkZHJlc3MpIHBnZF9vZmZz
ZXRfcmF3KFJFQURfT05DRSgobW0pLT5wZ2QpLCBhZGRyZXNzKQotI2RlZmluZSBwZ2Rfb2Zmc2V0
X2soYWRkcmVzcykgcGdkX29mZnNldCgmaW5pdF9tbSwgYWRkcmVzcykKIAogc3RhdGljIGlubGlu
ZSBwNGRfdCAqcDRkX29mZnNldChwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MpCiB7
CmRpZmYgLS1naXQgYS9hcmNoL3NoL2luY2x1ZGUvYXNtL3BndGFibGVfMzIuaCBiL2FyY2gvc2gv
aW5jbHVkZS9hc20vcGd0YWJsZV8zMi5oCmluZGV4IGNjYzAzMmU4OWY3NS4uNDFiZTQzZTk5Y2Zm
IDEwMDY0NAotLS0gYS9hcmNoL3NoL2luY2x1ZGUvYXNtL3BndGFibGVfMzIuaAorKysgYi9hcmNo
L3NoL2luY2x1ZGUvYXNtL3BndGFibGVfMzIuaApAQCAtNDA4LDEzICs0MDgsNiBAQCBzdGF0aWMg
aW5saW5lIHVuc2lnbmVkIGxvbmcgcG1kX3BhZ2VfdmFkZHIocG1kX3QgcG1kKQogCiAjZGVmaW5l
IHBtZF9wYWdlKHBtZCkJCSh2aXJ0X3RvX3BhZ2UocG1kX3ZhbChwbWQpKSkKIAotLyogdG8gZmlu
ZCBhbiBlbnRyeSBpbiBhIHBhZ2UtdGFibGUtZGlyZWN0b3J5LiAqLwotI2RlZmluZSBwZ2RfaW5k
ZXgoYWRkcmVzcykJKCgoYWRkcmVzcykgPj4gUEdESVJfU0hJRlQpICYgKFBUUlNfUEVSX1BHRC0x
KSkKLSNkZWZpbmUgcGdkX29mZnNldChtbSwgYWRkcmVzcykJKChtbSktPnBnZCArIHBnZF9pbmRl
eChhZGRyZXNzKSkKLQotLyogdG8gZmluZCBhbiBlbnRyeSBpbiBhIGtlcm5lbCBwYWdlLXRhYmxl
LWRpcmVjdG9yeSAqLwotI2RlZmluZSBwZ2Rfb2Zmc2V0X2soYWRkcmVzcykJcGdkX29mZnNldCgm
aW5pdF9tbSwgYWRkcmVzcykKLQogI2lmZGVmIENPTkZJR19YMlRMQgogI2RlZmluZSBwdGVfRVJS
T1IoZSkgXAogCXByaW50aygiJXM6JWQ6IGJhZCBwdGUgJXAoJTA4bHglMDhseCkuXG4iLCBfX0ZJ
TEVfXywgX19MSU5FX18sIFwKZGlmZiAtLWdpdCBhL2FyY2gvc2gvaW5jbHVkZS9hc20vcGd0YWJs
ZV82NC5oIGIvYXJjaC9zaC9pbmNsdWRlL2FzbS9wZ3RhYmxlXzY0LmgKaW5kZXggNjBhZWYxMTkx
Nzg0Li41MDMzNTY4NmYxZTUgMTAwNjQ0Ci0tLSBhL2FyY2gvc2gvaW5jbHVkZS9hc20vcGd0YWJs
ZV82NC5oCisrKyBiL2FyY2gvc2gvaW5jbHVkZS9hc20vcGd0YWJsZV82NC5oCkBAIC00MCwxNyAr
NDAsNiBAQCBzdGF0aWMgX19pbmxpbmVfXyB2b2lkIHNldF9wdGUocHRlX3QgKnB0ZXB0ciwgcHRl
X3QgcHRldmFsKQogfQogI2RlZmluZSBzZXRfcHRlX2F0KG1tLGFkZHIscHRlcCxwdGV2YWwpIHNl
dF9wdGUocHRlcCxwdGV2YWwpCiAKLS8qCi0gKiBQR0QgZGVmaW5lcy4gVG9wIGxldmVsLgotICov
Ci0KLS8qIFRvIGZpbmQgYW4gZW50cnkgaW4gYSBnZW5lcmljIFBHRC4gKi8KLSNkZWZpbmUgcGdk
X2luZGV4KGFkZHJlc3MpICgoKGFkZHJlc3MpID4+IFBHRElSX1NISUZUKSAmIChQVFJTX1BFUl9Q
R0QtMSkpCi0jZGVmaW5lIHBnZF9vZmZzZXQobW0sIGFkZHJlc3MpICgobW0pLT5wZ2QrcGdkX2lu
ZGV4KGFkZHJlc3MpKQotCi0vKiBUbyBmaW5kIGFuIGVudHJ5IGluIGEga2VybmVsIFBHRC4gKi8K
LSNkZWZpbmUgcGdkX29mZnNldF9rKGFkZHJlc3MpIHBnZF9vZmZzZXQoJmluaXRfbW0sIGFkZHJl
c3MpCi0KIC8qCiAgKiBQTUQgbGV2ZWwgYWNjZXNzIHJvdXRpbmVzLiBTYW1lIG5vdGVzIGFzIGFi
b3ZlLgogICovCmRpZmYgLS1naXQgYS9hcmNoL3NwYXJjL2luY2x1ZGUvYXNtL3BndGFibGVfMzIu
aCBiL2FyY2gvc3BhcmMvaW5jbHVkZS9hc20vcGd0YWJsZV8zMi5oCmluZGV4IGFlNDU4MTIzMzZl
ZC4uODIzMDk5ZmIzMmQzIDEwMDY0NAotLS0gYS9hcmNoL3NwYXJjL2luY2x1ZGUvYXNtL3BndGFi
bGVfMzIuaAorKysgYi9hcmNoL3NwYXJjL2luY2x1ZGUvYXNtL3BndGFibGVfMzIuaApAQCAtMzA5
LDE0ICszMDksNiBAQCBzdGF0aWMgaW5saW5lIHB0ZV90IHB0ZV9tb2RpZnkocHRlX3QgcHRlLCBw
Z3Byb3RfdCBuZXdwcm90KQogCQlwZ3Byb3RfdmFsKG5ld3Byb3QpKTsKIH0KIAotI2RlZmluZSBw
Z2RfaW5kZXgoYWRkcmVzcykgKChhZGRyZXNzKSA+PiBQR0RJUl9TSElGVCkKLQotLyogdG8gZmlu
ZCBhbiBlbnRyeSBpbiBhIHBhZ2UtdGFibGUtZGlyZWN0b3J5ICovCi0jZGVmaW5lIHBnZF9vZmZz
ZXQobW0sIGFkZHJlc3MpICgobW0pLT5wZ2QgKyBwZ2RfaW5kZXgoYWRkcmVzcykpCi0KLS8qIHRv
IGZpbmQgYW4gZW50cnkgaW4gYSBrZXJuZWwgcGFnZS10YWJsZS1kaXJlY3RvcnkgKi8KLSNkZWZp
bmUgcGdkX29mZnNldF9rKGFkZHJlc3MpIHBnZF9vZmZzZXQoJmluaXRfbW0sIGFkZHJlc3MpCi0K
IHN0cnVjdCBzZXFfZmlsZTsKIHZvaWQgbW11X2luZm8oc3RydWN0IHNlcV9maWxlICptKTsKIApk
aWZmIC0tZ2l0IGEvYXJjaC9zcGFyYy9pbmNsdWRlL2FzbS9wZ3RhYmxlXzY0LmggYi9hcmNoL3Nw
YXJjL2luY2x1ZGUvYXNtL3BndGFibGVfNjQuaAppbmRleCBmNTQ2ZWE0NmQ0MWIuLjdlZjZhZmZh
MTA1ZSAxMDA2NDQKLS0tIGEvYXJjaC9zcGFyYy9pbmNsdWRlL2FzbS9wZ3RhYmxlXzY0LmgKKysr
IGIvYXJjaC9zcGFyYy9pbmNsdWRlL2FzbS9wZ3RhYmxlXzY0LmgKQEAgLTg4OSwxMyArODg5LDYg
QEAgc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIHB1ZF9wZm4ocHVkX3QgcHVkKQogI2RlZmlu
ZSBwNGRfc2V0KHA0ZHAsIHB1ZHApCVwKIAkocDRkX3ZhbCgqKHA0ZHApKSA9IChfX3BhKCh1bnNp
Z25lZCBsb25nKSAocHVkcCkpKSkKIAotLyogdG8gZmluZCBhbiBlbnRyeSBpbiBhIHBhZ2UtdGFi
bGUtZGlyZWN0b3J5LiAqLwotI2RlZmluZSBwZ2RfaW5kZXgoYWRkcmVzcykJKCgoYWRkcmVzcykg
Pj4gUEdESVJfU0hJRlQpICYgKFBUUlNfUEVSX1BHRCAtIDEpKQotI2RlZmluZSBwZ2Rfb2Zmc2V0
KG1tLCBhZGRyZXNzKQkoKG1tKS0+cGdkICsgcGdkX2luZGV4KGFkZHJlc3MpKQotCi0vKiB0byBm
aW5kIGFuIGVudHJ5IGluIGEga2VybmVsIHBhZ2UtdGFibGUtZGlyZWN0b3J5ICovCi0jZGVmaW5l
IHBnZF9vZmZzZXRfayhhZGRyZXNzKSBwZ2Rfb2Zmc2V0KCZpbml0X21tLCBhZGRyZXNzKQotCiAv
KiBXZSBjYW5ub3QgaW5jbHVkZSA8bGludXgvbW1fdHlwZXMuaD4gYXQgdGhpcyBwb2ludCB5ZXQ6
ICovCiBleHRlcm4gc3RydWN0IG1tX3N0cnVjdCBpbml0X21tOwogCmRpZmYgLS1naXQgYS9hcmNo
L3VtL2luY2x1ZGUvYXNtL3BndGFibGUuaCBiL2FyY2gvdW0vaW5jbHVkZS9hc20vcGd0YWJsZS5o
CmluZGV4IGVhMmQzZTZmNDZkZC4uZGVmMzc2MTk0ZGNlIDEwMDY0NAotLS0gYS9hcmNoL3VtL2lu
Y2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNoL3VtL2luY2x1ZGUvYXNtL3BndGFibGUuaApA
QCAtMSw1ICsxLDUgQEAKIC8qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wICovCi0v
KiAKKy8qCiAgKiBDb3B5cmlnaHQgKEMpIDIwMDAgLSAyMDA3IEplZmYgRGlrZSAoamRpa2VAe2Fk
ZHRvaXQsbGludXguaW50ZWx9LmNvbSkKICAqIENvcHlyaWdodCAyMDAzIFBhdGhTY2FsZSwgSW5j
LgogICogRGVyaXZlZCBmcm9tIGluY2x1ZGUvYXNtLWkzODYvcGd0YWJsZS5oCkBAIC0xMzEsNyAr
MTMxLDcgQEAgc3RhdGljIGlubGluZSBpbnQgcHRlX25vbmUocHRlX3QgcHRlKQogICogVW5kZWZp
bmVkIGJlaGF2aW91ciBpZiBub3QuLgogICovCiBzdGF0aWMgaW5saW5lIGludCBwdGVfcmVhZChw
dGVfdCBwdGUpCi17IAorewogCXJldHVybigocHRlX2dldF9iaXRzKHB0ZSwgX1BBR0VfVVNFUikp
ICYmCiAJICAgICAgICEocHRlX2dldF9iaXRzKHB0ZSwgX1BBR0VfUFJPVE5PTkUpKSk7CiB9CkBA
IC0xNjMsNyArMTYzLDcgQEAgc3RhdGljIGlubGluZSBpbnQgcHRlX25ld3BhZ2UocHRlX3QgcHRl
KQogfQogCiBzdGF0aWMgaW5saW5lIGludCBwdGVfbmV3cHJvdChwdGVfdCBwdGUpCi17IAorewog
CXJldHVybihwdGVfcHJlc2VudChwdGUpICYmIChwdGVfZ2V0X2JpdHMocHRlLCBfUEFHRV9ORVdQ
Uk9UKSkpOwogfQogCkBAIC0xODUsMzEgKzE4NSwzMSBAQCBzdGF0aWMgaW5saW5lIHB0ZV90IHB0
ZV9ta2NsZWFuKHB0ZV90IHB0ZSkKIAlyZXR1cm4ocHRlKTsKIH0KIAotc3RhdGljIGlubGluZSBw
dGVfdCBwdGVfbWtvbGQocHRlX3QgcHRlKQkKLXsgCitzdGF0aWMgaW5saW5lIHB0ZV90IHB0ZV9t
a29sZChwdGVfdCBwdGUpCit7CiAJcHRlX2NsZWFyX2JpdHMocHRlLCBfUEFHRV9BQ0NFU1NFRCk7
CiAJcmV0dXJuKHB0ZSk7CiB9CiAKIHN0YXRpYyBpbmxpbmUgcHRlX3QgcHRlX3dycHJvdGVjdChw
dGVfdCBwdGUpCi17IAorewogCWlmIChsaWtlbHkocHRlX2dldF9iaXRzKHB0ZSwgX1BBR0VfUlcp
KSkKIAkJcHRlX2NsZWFyX2JpdHMocHRlLCBfUEFHRV9SVyk7CiAJZWxzZQogCQlyZXR1cm4gcHRl
OwotCXJldHVybihwdGVfbWtuZXdwcm90KHB0ZSkpOyAKKwlyZXR1cm4ocHRlX21rbmV3cHJvdChw
dGUpKTsKIH0KIAogc3RhdGljIGlubGluZSBwdGVfdCBwdGVfbWtyZWFkKHB0ZV90IHB0ZSkKLXsg
Cit7CiAJaWYgKHVubGlrZWx5KHB0ZV9nZXRfYml0cyhwdGUsIF9QQUdFX1VTRVIpKSkKIAkJcmV0
dXJuIHB0ZTsKIAlwdGVfc2V0X2JpdHMocHRlLCBfUEFHRV9VU0VSKTsKLQlyZXR1cm4ocHRlX21r
bmV3cHJvdChwdGUpKTsgCisJcmV0dXJuKHB0ZV9ta25ld3Byb3QocHRlKSk7CiB9CiAKIHN0YXRp
YyBpbmxpbmUgcHRlX3QgcHRlX21rZGlydHkocHRlX3QgcHRlKQoteyAKK3sKIAlwdGVfc2V0X2Jp
dHMocHRlLCBfUEFHRV9ESVJUWSk7CiAJcmV0dXJuKHB0ZSk7CiB9CkBAIC0yMjAsMjAgKzIyMCwy
MCBAQCBzdGF0aWMgaW5saW5lIHB0ZV90IHB0ZV9ta3lvdW5nKHB0ZV90IHB0ZSkKIAlyZXR1cm4o
cHRlKTsKIH0KIAotc3RhdGljIGlubGluZSBwdGVfdCBwdGVfbWt3cml0ZShwdGVfdCBwdGUpCQor
c3RhdGljIGlubGluZSBwdGVfdCBwdGVfbWt3cml0ZShwdGVfdCBwdGUpCiB7CiAJaWYgKHVubGlr
ZWx5KHB0ZV9nZXRfYml0cyhwdGUsICBfUEFHRV9SVykpKQogCQlyZXR1cm4gcHRlOwogCXB0ZV9z
ZXRfYml0cyhwdGUsIF9QQUdFX1JXKTsKLQlyZXR1cm4ocHRlX21rbmV3cHJvdChwdGUpKTsgCisJ
cmV0dXJuKHB0ZV9ta25ld3Byb3QocHRlKSk7CiB9CiAKLXN0YXRpYyBpbmxpbmUgcHRlX3QgcHRl
X21rdXB0b2RhdGUocHRlX3QgcHRlKQkKK3N0YXRpYyBpbmxpbmUgcHRlX3QgcHRlX21rdXB0b2Rh
dGUocHRlX3QgcHRlKQogewogCXB0ZV9jbGVhcl9iaXRzKHB0ZSwgX1BBR0VfTkVXUEFHRSk7CiAJ
aWYocHRlX3ByZXNlbnQocHRlKSkKIAkJcHRlX2NsZWFyX2JpdHMocHRlLCBfUEFHRV9ORVdQUk9U
KTsKLQlyZXR1cm4ocHRlKTsgCisJcmV0dXJuKHB0ZSk7CiB9CiAKIHN0YXRpYyBpbmxpbmUgcHRl
X3QgcHRlX21rbmV3cGFnZShwdGVfdCBwdGUpCkBAIC0yODgsMjkgKzI4OCw5IEBAIHN0YXRpYyBp
bmxpbmUgaW50IHB0ZV9zYW1lKHB0ZV90IHB0ZV9hLCBwdGVfdCBwdGVfYikKIHN0YXRpYyBpbmxp
bmUgcHRlX3QgcHRlX21vZGlmeShwdGVfdCBwdGUsIHBncHJvdF90IG5ld3Byb3QpCiB7CiAJcHRl
X3NldF92YWwocHRlLCAocHRlX3ZhbChwdGUpICYgX1BBR0VfQ0hHX01BU0spLCBuZXdwcm90KTsK
LQlyZXR1cm4gcHRlOyAKKwlyZXR1cm4gcHRlOwogfQogCi0vKgotICogdGhlIHBnZCBwYWdlIGNh
biBiZSB0aG91Z2h0IG9mIGFuIGFycmF5IGxpa2UgdGhpczogcGdkX3RbUFRSU19QRVJfUEdEXQot
ICoKLSAqIHRoaXMgbWFjcm8gcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGVudHJ5IGluIHRoZSBw
Z2QgcGFnZSB3aGljaCB3b3VsZAotICogY29udHJvbCB0aGUgZ2l2ZW4gdmlydHVhbCBhZGRyZXNz
Ci0gKi8KLSNkZWZpbmUgcGdkX2luZGV4KGFkZHJlc3MpICgoKGFkZHJlc3MpID4+IFBHRElSX1NI
SUZUKSAmIChQVFJTX1BFUl9QR0QtMSkpCi0KLS8qCi0gKiBwZ2Rfb2Zmc2V0KCkgcmV0dXJucyBh
IChwZ2RfdCAqKQotICogcGdkX2luZGV4KCkgaXMgdXNlZCBnZXQgdGhlIG9mZnNldCBpbnRvIHRo
ZSBwZ2QgcGFnZSdzIGFycmF5IG9mIHBnZF90J3M7Ci0gKi8KLSNkZWZpbmUgcGdkX29mZnNldCht
bSwgYWRkcmVzcykgKChtbSktPnBnZCtwZ2RfaW5kZXgoYWRkcmVzcykpCi0KLS8qCi0gKiBhIHNo
b3J0Y3V0IHdoaWNoIGltcGxpZXMgdGhlIHVzZSBvZiB0aGUga2VybmVsJ3MgcGdkLCBpbnN0ZWFk
Ci0gKiBvZiBhIHByb2Nlc3MncwotICovCi0jZGVmaW5lIHBnZF9vZmZzZXRfayhhZGRyZXNzKSBw
Z2Rfb2Zmc2V0KCZpbml0X21tLCBhZGRyZXNzKQotCiAvKgogICogdGhlIHBtZCBwYWdlIGNhbiBi
ZSB0aG91Z2h0IG9mIGFuIGFycmF5IGxpa2UgdGhpczogcG1kX3RbUFRSU19QRVJfUE1EXQogICoK
ZGlmZiAtLWdpdCBhL2FyY2gvdW5pY29yZTMyL2luY2x1ZGUvYXNtL3BndGFibGUuaCBiL2FyY2gv
dW5pY29yZTMyL2luY2x1ZGUvYXNtL3BndGFibGUuaAppbmRleCBhMmIyNjRjYzhjNjguLjk3ZjU2
NGM4ZWNiYSAxMDA2NDQKLS0tIGEvYXJjaC91bmljb3JlMzIvaW5jbHVkZS9hc20vcGd0YWJsZS5o
CisrKyBiL2FyY2gvdW5pY29yZTMyL2luY2x1ZGUvYXNtL3BndGFibGUuaApAQCAtMjE1LDE0ICsy
MTUsNiBAQCBQVEVfQklUX0ZVTkMobWt5b3VuZywgICB8PSBQVEVfWU9VTkcpOwogICovCiAjZGVm
aW5lIG1rX3B0ZShwYWdlLCBwcm90KQlwZm5fcHRlKHBhZ2VfdG9fcGZuKHBhZ2UpLCBwcm90KQog
Ci0vKiB0byBmaW5kIGFuIGVudHJ5IGluIGEgcGFnZS10YWJsZS1kaXJlY3RvcnkgKi8KLSNkZWZp
bmUgcGdkX2luZGV4KGFkZHIpCQkoKGFkZHIpID4+IFBHRElSX1NISUZUKQotCi0jZGVmaW5lIHBn
ZF9vZmZzZXQobW0sIGFkZHIpCSgobW0pLT5wZ2QrcGdkX2luZGV4KGFkZHIpKQotCi0vKiB0byBm
aW5kIGFuIGVudHJ5IGluIGEga2VybmVsIHBhZ2UtdGFibGUtZGlyZWN0b3J5ICovCi0jZGVmaW5l
IHBnZF9vZmZzZXRfayhhZGRyKQlwZ2Rfb2Zmc2V0KCZpbml0X21tLCBhZGRyKQotCiBzdGF0aWMg
aW5saW5lIHB0ZV90IHB0ZV9tb2RpZnkocHRlX3QgcHRlLCBwZ3Byb3RfdCBuZXdwcm90KQogewog
CWNvbnN0IHVuc2lnbmVkIGxvbmcgbWFzayA9IFBURV9FWEVDIHwgUFRFX1dSSVRFIHwgUFRFX1JF
QUQ7CmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9wZ3RhYmxlLmggYi9hcmNoL3g4
Ni9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKaW5kZXggOTdlZmRjNjJlNzQwLi5hMjY5MmNmMWM4YzMg
MTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNoL3g4
Ni9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKQEAgLTk4OSwzMCArOTg5LDYgQEAgc3RhdGljIGlubGlu
ZSBpbnQgcGdkX25vbmUocGdkX3QgcGdkKQogCiAjZW5kaWYJLyogX19BU1NFTUJMWV9fICovCiAK
LS8qCi0gKiB0aGUgcGdkIHBhZ2UgY2FuIGJlIHRob3VnaHQgb2YgYW4gYXJyYXkgbGlrZSB0aGlz
OiBwZ2RfdFtQVFJTX1BFUl9QR0RdCi0gKgotICogdGhpcyBtYWNybyByZXR1cm5zIHRoZSBpbmRl
eCBvZiB0aGUgZW50cnkgaW4gdGhlIHBnZCBwYWdlIHdoaWNoIHdvdWxkCi0gKiBjb250cm9sIHRo
ZSBnaXZlbiB2aXJ0dWFsIGFkZHJlc3MKLSAqLwotI2RlZmluZSBwZ2RfaW5kZXgoYWRkcmVzcykg
KCgoYWRkcmVzcykgPj4gUEdESVJfU0hJRlQpICYgKFBUUlNfUEVSX1BHRCAtIDEpKQotCi0vKgot
ICogcGdkX29mZnNldCgpIHJldHVybnMgYSAocGdkX3QgKikKLSAqIHBnZF9pbmRleCgpIGlzIHVz
ZWQgZ2V0IHRoZSBvZmZzZXQgaW50byB0aGUgcGdkIHBhZ2UncyBhcnJheSBvZiBwZ2RfdCdzOwot
ICovCi0jZGVmaW5lIHBnZF9vZmZzZXRfcGdkKHBnZCwgYWRkcmVzcykgKHBnZCArIHBnZF9pbmRl
eCgoYWRkcmVzcykpKQotLyoKLSAqIGEgc2hvcnRjdXQgdG8gZ2V0IGEgcGdkX3QgaW4gYSBnaXZl
biBtbQotICovCi0jZGVmaW5lIHBnZF9vZmZzZXQobW0sIGFkZHJlc3MpIHBnZF9vZmZzZXRfcGdk
KChtbSktPnBnZCwgKGFkZHJlc3MpKQotLyoKLSAqIGEgc2hvcnRjdXQgd2hpY2ggaW1wbGllcyB0
aGUgdXNlIG9mIHRoZSBrZXJuZWwncyBwZ2QsIGluc3RlYWQKLSAqIG9mIGEgcHJvY2VzcydzCi0g
Ki8KLSNkZWZpbmUgcGdkX29mZnNldF9rKGFkZHJlc3MpIHBnZF9vZmZzZXQoJmluaXRfbW0sIChh
ZGRyZXNzKSkKLQotCiAjZGVmaW5lIEtFUk5FTF9QR0RfQk9VTkRBUlkJcGdkX2luZGV4KFBBR0Vf
T0ZGU0VUKQogI2RlZmluZSBLRVJORUxfUEdEX1BUUlMJCShQVFJTX1BFUl9QR0QgLSBLRVJORUxf
UEdEX0JPVU5EQVJZKQogCmRpZmYgLS1naXQgYS9hcmNoL3h0ZW5zYS9pbmNsdWRlL2FzbS9wZ3Rh
YmxlLmggYi9hcmNoL3h0ZW5zYS9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKaW5kZXggZDA4YjdiZTY2
NDllLi5mYTA1NGExNzcyZTEgMTAwNjQ0Ci0tLSBhL2FyY2gveHRlbnNhL2luY2x1ZGUvYXNtL3Bn
dGFibGUuaAorKysgYi9hcmNoL3h0ZW5zYS9pbmNsdWRlL2FzbS9wZ3RhYmxlLmgKQEAgLTM1OSwx
NCArMzU5LDYgQEAgcHRlcF9zZXRfd3Jwcm90ZWN0KHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNp
Z25lZCBsb25nIGFkZHIsIHB0ZV90ICpwdGVwKQogCXVwZGF0ZV9wdGUocHRlcCwgcHRlX3dycHJv
dGVjdChwdGUpKTsKIH0KIAotLyogdG8gZmluZCBhbiBlbnRyeSBpbiBhIGtlcm5lbCBwYWdlLXRh
YmxlLWRpcmVjdG9yeSAqLwotI2RlZmluZSBwZ2Rfb2Zmc2V0X2soYWRkcmVzcykJcGdkX29mZnNl
dCgmaW5pdF9tbSwgYWRkcmVzcykKLQotLyogdG8gZmluZCBhbiBlbnRyeSBpbiBhIHBhZ2UtdGFi
bGUtZGlyZWN0b3J5ICovCi0jZGVmaW5lIHBnZF9vZmZzZXQobW0sYWRkcmVzcykJKChtbSktPnBn
ZCArIHBnZF9pbmRleChhZGRyZXNzKSkKLQotI2RlZmluZSBwZ2RfaW5kZXgoYWRkcmVzcykJKChh
ZGRyZXNzKSA+PiBQR0RJUl9TSElGVCkKLQogLyoKICAqIEVuY29kZSBhbmQgZGVjb2RlIGEgc3dh
cCBhbmQgZmlsZSBlbnRyeS4KICAqLwpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9wZ3RhYmxl
LmggYi9pbmNsdWRlL2xpbnV4L3BndGFibGUuaAppbmRleCAzYTc4ZWYzOGVkYTYuLjllYzc2NWI3
Zjc3NiAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9wZ3RhYmxlLmgKKysrIGIvaW5jbHVkZS9s
aW51eC9wZ3RhYmxlLmgKQEAgLTYxLDYgKzYxLDE0IEBAIHN0YXRpYyBpbmxpbmUgdW5zaWduZWQg
bG9uZyBwdWRfaW5kZXgodW5zaWduZWQgbG9uZyBhZGRyZXNzKQogI2RlZmluZSBwdWRfaW5kZXgg
cHVkX2luZGV4CiAjZW5kaWYKIAorI2lmbmRlZiBwZ2RfaW5kZXgKK3N0YXRpYyBpbmxpbmUgdW5z
aWduZWQgbG9uZyBwZ2RfaW5kZXgodW5zaWduZWQgbG9uZyBhZGRyZXNzKQoreworCXJldHVybiAo
KGFkZHJlc3MgPj4gUEdESVJfU0hJRlQpICYgKFBUUlNfUEVSX1BHRCAtIDEpKTsKK30KKyNkZWZp
bmUgcGdkX2luZGV4IHBnZF9pbmRleAorI2VuZGlmCisKICNpZm5kZWYgcHRlX29mZnNldF9rZXJu
ZWwKIHN0YXRpYyBpbmxpbmUgcHRlX3QgKnB0ZV9vZmZzZXRfa2VybmVsKHBtZF90ICpwbWQsIHVu
c2lnbmVkIGxvbmcgYWRkcmVzcykKIHsKQEAgLTk2LDYgKzEwNCwyNCBAQCBzdGF0aWMgaW5saW5l
IHB1ZF90ICpwdWRfb2Zmc2V0KHA0ZF90ICpwNGQsIHVuc2lnbmVkIGxvbmcgYWRkcmVzcykKICNk
ZWZpbmUgcHVkX29mZnNldCBwdWRfb2Zmc2V0CiAjZW5kaWYKIAorc3RhdGljIGlubGluZSBwZ2Rf
dCAqcGdkX29mZnNldF9wZ2QocGdkX3QgKnBnZCwgdW5zaWduZWQgbG9uZyBhZGRyZXNzKQorewor
CXJldHVybiAocGdkICsgcGdkX2luZGV4KGFkZHJlc3MpKTsKK307CisKKy8qCisgKiBhIHNob3J0
Y3V0IHRvIGdldCBhIHBnZF90IGluIGEgZ2l2ZW4gbW0KKyAqLworI2lmbmRlZiBwZ2Rfb2Zmc2V0
CisjZGVmaW5lIHBnZF9vZmZzZXQobW0sIGFkZHJlc3MpCQlwZ2Rfb2Zmc2V0X3BnZCgobW0pLT5w
Z2QsIChhZGRyZXNzKSkKKyNlbmRpZgorCisvKgorICogYSBzaG9ydGN1dCB3aGljaCBpbXBsaWVz
IHRoZSB1c2Ugb2YgdGhlIGtlcm5lbCdzIHBnZCwgaW5zdGVhZAorICogb2YgYSBwcm9jZXNzJ3MK
KyAqLworI2RlZmluZSBwZ2Rfb2Zmc2V0X2soYWRkcmVzcykJCXBnZF9vZmZzZXQoJmluaXRfbW0s
IChhZGRyZXNzKSkKKwogLyogRklYTUU6ICovCiBzdGF0aWMgaW5saW5lIHBtZF90ICpwbWRfb2Zm
KHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIHZhKQogewotLSAKMi4yNi4xCgpf
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpPcGVuUklTQyBt
YWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMubGlicmVjb3Jlcy5vcmcKaHR0cHM6Ly9saXN0cy5s
aWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVucmlzYwo=
