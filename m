Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 72B2F2499BC
	for <lists+openrisc@lfdr.de>; Wed, 19 Aug 2020 11:55:51 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id DE72020AF7;
	Wed, 19 Aug 2020 11:55:48 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 5A2ED20CC6
 for <openrisc@lists.librecores.org>; Tue, 18 Aug 2020 17:18:39 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 9854F207DA;
 Tue, 18 Aug 2020 15:18:27 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1597763918;
 bh=Oo0BK/Dxb760cgwYm8yezajjoylgcCoXRmjwfHYQ/yc=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=KBBX7IZOL7O5OjP+FGSn/b9diGahataJkBRDR4kRNNGJiRVcj1EH3UYbRih/1skPj
 6hLZ04b+OkpdATLfj4Fc4PJvfnjhszctok7M0slj0gGH94ox2y9JhEMpYDrGi/jVPs
 sfJ3N1o3CdTN0K5G022ggrof09u30Lc2kWBlWwcI=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Tue, 18 Aug 2020 18:16:27 +0300
Message-Id: <20200818151634.14343-11-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200818151634.14343-1-rppt@kernel.org>
References: <20200818151634.14343-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Wed, 19 Aug 2020 11:55:42 +0200
Subject: [OpenRISC] [PATCH v3 10/17] memblock: reduce number of parameters
 in for_each_mem_range()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Thomas Gleixner <tglx@linutronix.de>,
 Emil Renner Berthing <kernel@esmil.dk>, linux-sh@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Christoph Hellwig <hch@lst.de>,
 Marek Szyprowski <m.szyprowski@samsung.com>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Michael Ellerman <mpe@ellerman.id.au>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Mike Rapoport <rppt@linux.ibm.com>, clang-built-linux@googlegroups.com,
 Ingo Molnar <mingo@redhat.com>, linux-arm-kernel@lists.infradead.org,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Hari Bathini <hbathini@linux.ibm.com>, Daniel Axtens <dja@axtens.net>,
 Michal Simek <monstr@monstr.eu>,
 Thomas Bogendoerfer <tsbogend@alpha.franken.de>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, linux-mm@kvack.org,
 linux-kernel@vger.kernel.org, iommu@lists.linux-foundation.org,
 Palmer Dabbelt <palmer@dabbelt.com>, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKQ3VycmVudGx5IGZvcl9l
YWNoX21lbV9yYW5nZSgpIGFuZCBmb3JfZWFjaF9tZW1fcmFuZ2VfcmV2KCkgaXRlcmF0b3JzIGFy
ZQp0aGUgbW9zdCBnZW5lcmljIHdheSB0byB0cmF2ZXJzZSBtZW1ibG9jayByZWdpb25zLiBBcyBz
dWNoLCB0aGV5IGhhdmUgOApwYXJhbWV0ZXJzIGFuZCB0aGV5IGFyZSBoYXJkbHkgY29udmVuaWVu
dCB0byB1c2Vycy4gTW9zdCB1c2VycyBjaG9vc2UgdG8KdXRpbGl6ZSBvbmUgb2YgdGhlaXIgd3Jh
cHBlcnMgYW5kIHRoZSBvbmx5IHVzZXIgdGhhdCBhY3R1YWxseSBuZWVkcyBtb3N0IG9mCnRoZSBw
YXJhbWV0ZXJzIGlzIG1lbWJsb2NrIGl0c2VsZi4KClRvIGF2b2lkIHlldCBhbm90aGVyIG5hbWlu
ZyBmb3IgbWVtYmxvY2sgaXRlcmF0b3JzLCByZW5hbWUgdGhlIGV4aXN0aW5nCmZvcl9lYWNoX21l
bV9yYW5nZVtfcmV2XSgpIHRvIF9fZm9yX2VhY2hfbWVtX3JhbmdlW19yZXZdKCkgYW5kIGFkZCBh
IG5ldwpmb3JfZWFjaF9tZW1fcmFuZ2VbX3Jldl0oKSB3cmFwcGVycyB3aXRoIG9ubHkgaW5kZXgs
IHN0YXJ0IGFuZCBlbmQKcGFyYW1ldGVycy4KClRoZSBuZXcgd3JhcHBlciBuaWNlbHkgZml0cyBp
bnRvIGluaXRfdW5hdmFpbGFibGVfbWVtKCkgYW5kIHdpbGwgYmUgdXNlZCBpbgp1cGNvbWluZyBj
aGFuZ2VzIHRvIHNpbXBsaWZ5IG1lbWJsb2NrIHRyYXZlcnNhbHMuCgpTaWduZWQtb2ZmLWJ5OiBN
aWtlIFJhcG9wb3J0IDxycHB0QGxpbnV4LmlibS5jb20+CkFja2VkLWJ5OiBUaG9tYXMgQm9nZW5k
b2VyZmVyIDx0c2JvZ2VuZEBhbHBoYS5mcmFua2VuLmRlPiAgIyBNSVBTCi0tLQogLmNsYW5nLWZv
cm1hdCAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgMiArKwogYXJjaC9hcm02NC9rZXJuZWwv
bWFjaGluZV9rZXhlY19maWxlLmMgfCAgNiArKy0tCiBhcmNoL3Bvd2VycGMva2V4ZWMvZmlsZV9s
b2FkXzY0LmMgICAgICB8ICA2ICsrLS0KIGluY2x1ZGUvbGludXgvbWVtYmxvY2suaCAgICAgICAg
ICAgICAgIHwgNDEgKysrKysrKysrKysrKysrKysrKy0tLS0tLS0KIG1tL3BhZ2VfYWxsb2MuYyAg
ICAgICAgICAgICAgICAgICAgICAgIHwgIDMgKy0KIDUgZmlsZXMgY2hhbmdlZCwgMzggaW5zZXJ0
aW9ucygrKSwgMjAgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvLmNsYW5nLWZvcm1hdCBiLy5j
bGFuZy1mb3JtYXQKaW5kZXggYTBhOTYwODhjNzRmLi4zZTQyYThlNGRmNzMgMTAwNjQ0Ci0tLSBh
Ly5jbGFuZy1mb3JtYXQKKysrIGIvLmNsYW5nLWZvcm1hdApAQCAtMjA1LDcgKzIwNSw5IEBAIEZv
ckVhY2hNYWNyb3M6CiAgIC0gJ2Zvcl9lYWNoX21lbWJsb2NrX3R5cGUnCiAgIC0gJ2Zvcl9lYWNo
X21lbWNnX2NhY2hlX2luZGV4JwogICAtICdmb3JfZWFjaF9tZW1fcGZuX3JhbmdlJworICAtICdf
X2Zvcl9lYWNoX21lbV9yYW5nZScKICAgLSAnZm9yX2VhY2hfbWVtX3JhbmdlJworICAtICdfX2Zv
cl9lYWNoX21lbV9yYW5nZV9yZXYnCiAgIC0gJ2Zvcl9lYWNoX21lbV9yYW5nZV9yZXYnCiAgIC0g
J2Zvcl9lYWNoX21pZ3JhdGV0eXBlX29yZGVyJwogICAtICdmb3JfZWFjaF9tc2lfZW50cnknCmRp
ZmYgLS1naXQgYS9hcmNoL2FybTY0L2tlcm5lbC9tYWNoaW5lX2tleGVjX2ZpbGUuYyBiL2FyY2gv
YXJtNjQva2VybmVsL21hY2hpbmVfa2V4ZWNfZmlsZS5jCmluZGV4IDM2MWExMTQzZTA5ZS4uNWIw
ZTY3YjkzY2RjIDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L2tlcm5lbC9tYWNoaW5lX2tleGVjX2Zp
bGUuYworKysgYi9hcmNoL2FybTY0L2tlcm5lbC9tYWNoaW5lX2tleGVjX2ZpbGUuYwpAQCAtMjE1
LDggKzIxNSw3IEBAIHN0YXRpYyBpbnQgcHJlcGFyZV9lbGZfaGVhZGVycyh2b2lkICoqYWRkciwg
dW5zaWduZWQgbG9uZyAqc3opCiAJcGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKIAogCW5yX3Jhbmdl
cyA9IDE7IC8qIGZvciBleGNsdXNpb24gb2YgY3Jhc2hrZXJuZWwgcmVnaW9uICovCi0JZm9yX2Vh
Y2hfbWVtX3JhbmdlKGksICZtZW1ibG9jay5tZW1vcnksIE5VTEwsIE5VTUFfTk9fTk9ERSwKLQkJ
CQkJTUVNQkxPQ0tfTk9ORSwgJnN0YXJ0LCAmZW5kLCBOVUxMKQorCWZvcl9lYWNoX21lbV9yYW5n
ZShpLCAmc3RhcnQsICZlbmQpCiAJCW5yX3JhbmdlcysrOwogCiAJY21lbSA9IGttYWxsb2Moc3Ry
dWN0X3NpemUoY21lbSwgcmFuZ2VzLCBucl9yYW5nZXMpLCBHRlBfS0VSTkVMKTsKQEAgLTIyNSw4
ICsyMjQsNyBAQCBzdGF0aWMgaW50IHByZXBhcmVfZWxmX2hlYWRlcnModm9pZCAqKmFkZHIsIHVu
c2lnbmVkIGxvbmcgKnN6KQogCiAJY21lbS0+bWF4X25yX3JhbmdlcyA9IG5yX3JhbmdlczsKIAlj
bWVtLT5ucl9yYW5nZXMgPSAwOwotCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmbWVtYmxvY2subWVt
b3J5LCBOVUxMLCBOVU1BX05PX05PREUsCi0JCQkJCU1FTUJMT0NLX05PTkUsICZzdGFydCwgJmVu
ZCwgTlVMTCkgeworCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmc3RhcnQsICZlbmQpIHsKIAkJY21l
bS0+cmFuZ2VzW2NtZW0tPm5yX3Jhbmdlc10uc3RhcnQgPSBzdGFydDsKIAkJY21lbS0+cmFuZ2Vz
W2NtZW0tPm5yX3Jhbmdlc10uZW5kID0gZW5kIC0gMTsKIAkJY21lbS0+bnJfcmFuZ2VzKys7CmRp
ZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMva2V4ZWMvZmlsZV9sb2FkXzY0LmMgYi9hcmNoL3Bvd2Vy
cGMva2V4ZWMvZmlsZV9sb2FkXzY0LmMKaW5kZXggNTNiYjcxZTNhMmUxLi4yYzlkOTA4ZWFiOTYg
MTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJwYy9rZXhlYy9maWxlX2xvYWRfNjQuYworKysgYi9hcmNo
L3Bvd2VycGMva2V4ZWMvZmlsZV9sb2FkXzY0LmMKQEAgLTI1MCw4ICsyNTAsNyBAQCBzdGF0aWMg
aW50IF9fbG9jYXRlX21lbV9ob2xlX3RvcF9kb3duKHN0cnVjdCBrZXhlY19idWYgKmtidWYsCiAJ
cGh5c19hZGRyX3Qgc3RhcnQsIGVuZDsKIAl1NjQgaTsKIAotCWZvcl9lYWNoX21lbV9yYW5nZV9y
ZXYoaSwgJm1lbWJsb2NrLm1lbW9yeSwgTlVMTCwgTlVNQV9OT19OT0RFLAotCQkJICAgICAgIE1F
TUJMT0NLX05PTkUsICZzdGFydCwgJmVuZCwgTlVMTCkgeworCWZvcl9lYWNoX21lbV9yYW5nZV9y
ZXYoaSwgJnN0YXJ0LCAmZW5kKSB7CiAJCS8qCiAJCSAqIG1lbWJsb2NrIHVzZXMgW3N0YXJ0LCBl
bmQpIGNvbnZlbnRpb24gd2hpbGUgaXQgaXMKIAkJICogW3N0YXJ0LCBlbmRdIGhlcmUuIEZpeCB0
aGUgb2ZmLWJ5LW9uZSB0byBoYXZlIHRoZQpAQCAtMzUwLDggKzM0OSw3IEBAIHN0YXRpYyBpbnQg
X19sb2NhdGVfbWVtX2hvbGVfYm90dG9tX3VwKHN0cnVjdCBrZXhlY19idWYgKmtidWYsCiAJcGh5
c19hZGRyX3Qgc3RhcnQsIGVuZDsKIAl1NjQgaTsKIAotCWZvcl9lYWNoX21lbV9yYW5nZShpLCAm
bWVtYmxvY2subWVtb3J5LCBOVUxMLCBOVU1BX05PX05PREUsCi0JCQkgICBNRU1CTE9DS19OT05F
LCAmc3RhcnQsICZlbmQsIE5VTEwpIHsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAm
ZW5kKSB7CiAJCS8qCiAJCSAqIG1lbWJsb2NrIHVzZXMgW3N0YXJ0LCBlbmQpIGNvbnZlbnRpb24g
d2hpbGUgaXQgaXMKIAkJICogW3N0YXJ0LCBlbmRdIGhlcmUuIEZpeCB0aGUgb2ZmLWJ5LW9uZSB0
byBoYXZlIHRoZQpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9tZW1ibG9jay5oIGIvaW5jbHVk
ZS9saW51eC9tZW1ibG9jay5oCmluZGV4IDQ3YTc2ZTIzN2ZjYS4uMjdjM2I4NGQxNjE1IDEwMDY0
NAotLS0gYS9pbmNsdWRlL2xpbnV4L21lbWJsb2NrLmgKKysrIGIvaW5jbHVkZS9saW51eC9tZW1i
bG9jay5oCkBAIC0xNjIsNyArMTYyLDcgQEAgc3RhdGljIGlubGluZSB2b2lkIF9fbmV4dF9waHlz
bWVtX3JhbmdlKHU2NCAqaWR4LCBzdHJ1Y3QgbWVtYmxvY2tfdHlwZSAqdHlwZSwKICNlbmRpZiAv
KiBDT05GSUdfSEFWRV9NRU1CTE9DS19QSFlTX01BUCAqLwogCiAvKioKLSAqIGZvcl9lYWNoX21l
bV9yYW5nZSAtIGl0ZXJhdGUgdGhyb3VnaCBtZW1ibG9jayBhcmVhcyBmcm9tIHR5cGVfYSBhbmQg
bm90CisgKiBfX2Zvcl9lYWNoX21lbV9yYW5nZSAtIGl0ZXJhdGUgdGhyb3VnaCBtZW1ibG9jayBh
cmVhcyBmcm9tIHR5cGVfYSBhbmQgbm90CiAgKiBpbmNsdWRlZCBpbiB0eXBlX2IuIE9yIGp1c3Qg
dHlwZV9hIGlmIHR5cGVfYiBpcyBOVUxMLgogICogQGk6IHU2NCB1c2VkIGFzIGxvb3AgdmFyaWFi
bGUKICAqIEB0eXBlX2E6IHB0ciB0byBtZW1ibG9ja190eXBlIHRvIGl0ZXJhdGUKQEAgLTE3Myw3
ICsxNzMsNyBAQCBzdGF0aWMgaW5saW5lIHZvaWQgX19uZXh0X3BoeXNtZW1fcmFuZ2UodTY0ICpp
ZHgsIHN0cnVjdCBtZW1ibG9ja190eXBlICp0eXBlLAogICogQHBfZW5kOiBwdHIgdG8gcGh5c19h
ZGRyX3QgZm9yIGVuZCBhZGRyZXNzIG9mIHRoZSByYW5nZSwgY2FuIGJlICVOVUxMCiAgKiBAcF9u
aWQ6IHB0ciB0byBpbnQgZm9yIG5pZCBvZiB0aGUgcmFuZ2UsIGNhbiBiZSAlTlVMTAogICovCi0j
ZGVmaW5lIGZvcl9lYWNoX21lbV9yYW5nZShpLCB0eXBlX2EsIHR5cGVfYiwgbmlkLCBmbGFncywJ
CVwKKyNkZWZpbmUgX19mb3JfZWFjaF9tZW1fcmFuZ2UoaSwgdHlwZV9hLCB0eXBlX2IsIG5pZCwg
ZmxhZ3MsCQlcCiAJCQkgICBwX3N0YXJ0LCBwX2VuZCwgcF9uaWQpCQkJXAogCWZvciAoaSA9IDAs
IF9fbmV4dF9tZW1fcmFuZ2UoJmksIG5pZCwgZmxhZ3MsIHR5cGVfYSwgdHlwZV9iLAlcCiAJCQkJ
ICAgICBwX3N0YXJ0LCBwX2VuZCwgcF9uaWQpOwkJXApAQCAtMTgyLDcgKzE4Miw3IEBAIHN0YXRp
YyBpbmxpbmUgdm9pZCBfX25leHRfcGh5c21lbV9yYW5nZSh1NjQgKmlkeCwgc3RydWN0IG1lbWJs
b2NrX3R5cGUgKnR5cGUsCiAJCQkgICAgICBwX3N0YXJ0LCBwX2VuZCwgcF9uaWQpKQogCiAvKioK
LSAqIGZvcl9lYWNoX21lbV9yYW5nZV9yZXYgLSByZXZlcnNlIGl0ZXJhdGUgdGhyb3VnaCBtZW1i
bG9jayBhcmVhcyBmcm9tCisgKiBfX2Zvcl9lYWNoX21lbV9yYW5nZV9yZXYgLSByZXZlcnNlIGl0
ZXJhdGUgdGhyb3VnaCBtZW1ibG9jayBhcmVhcyBmcm9tCiAgKiB0eXBlX2EgYW5kIG5vdCBpbmNs
dWRlZCBpbiB0eXBlX2IuIE9yIGp1c3QgdHlwZV9hIGlmIHR5cGVfYiBpcyBOVUxMLgogICogQGk6
IHU2NCB1c2VkIGFzIGxvb3AgdmFyaWFibGUKICAqIEB0eXBlX2E6IHB0ciB0byBtZW1ibG9ja190
eXBlIHRvIGl0ZXJhdGUKQEAgLTE5MywxNSArMTkzLDM2IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBf
X25leHRfcGh5c21lbV9yYW5nZSh1NjQgKmlkeCwgc3RydWN0IG1lbWJsb2NrX3R5cGUgKnR5cGUs
CiAgKiBAcF9lbmQ6IHB0ciB0byBwaHlzX2FkZHJfdCBmb3IgZW5kIGFkZHJlc3Mgb2YgdGhlIHJh
bmdlLCBjYW4gYmUgJU5VTEwKICAqIEBwX25pZDogcHRyIHRvIGludCBmb3IgbmlkIG9mIHRoZSBy
YW5nZSwgY2FuIGJlICVOVUxMCiAgKi8KLSNkZWZpbmUgZm9yX2VhY2hfbWVtX3JhbmdlX3Jldihp
LCB0eXBlX2EsIHR5cGVfYiwgbmlkLCBmbGFncywJCVwKLQkJCSAgICAgICBwX3N0YXJ0LCBwX2Vu
ZCwgcF9uaWQpCQkJXAorI2RlZmluZSBfX2Zvcl9lYWNoX21lbV9yYW5nZV9yZXYoaSwgdHlwZV9h
LCB0eXBlX2IsIG5pZCwgZmxhZ3MsCQlcCisJCQkJIHBfc3RhcnQsIHBfZW5kLCBwX25pZCkJCQlc
CiAJZm9yIChpID0gKHU2NClVTExPTkdfTUFYLAkJCQkJXAotCQkgICAgIF9fbmV4dF9tZW1fcmFu
Z2VfcmV2KCZpLCBuaWQsIGZsYWdzLCB0eXBlX2EsIHR5cGVfYixcCisJCSAgICAgX19uZXh0X21l
bV9yYW5nZV9yZXYoJmksIG5pZCwgZmxhZ3MsIHR5cGVfYSwgdHlwZV9iLCBcCiAJCQkJCSAgcF9z
dGFydCwgcF9lbmQsIHBfbmlkKTsJXAogCSAgICAgaSAhPSAodTY0KVVMTE9OR19NQVg7CQkJCQlc
CiAJICAgICBfX25leHRfbWVtX3JhbmdlX3JldigmaSwgbmlkLCBmbGFncywgdHlwZV9hLCB0eXBl
X2IsCVwKIAkJCQkgIHBfc3RhcnQsIHBfZW5kLCBwX25pZCkpCiAKKy8qKgorICogZm9yX2VhY2hf
bWVtX3JhbmdlIC0gaXRlcmF0ZSB0aHJvdWdoIG1lbW9yeSBhcmVhcy4KKyAqIEBpOiB1NjQgdXNl
ZCBhcyBsb29wIHZhcmlhYmxlCisgKiBAcF9zdGFydDogcHRyIHRvIHBoeXNfYWRkcl90IGZvciBz
dGFydCBhZGRyZXNzIG9mIHRoZSByYW5nZSwgY2FuIGJlICVOVUxMCisgKiBAcF9lbmQ6IHB0ciB0
byBwaHlzX2FkZHJfdCBmb3IgZW5kIGFkZHJlc3Mgb2YgdGhlIHJhbmdlLCBjYW4gYmUgJU5VTEwK
KyAqLworI2RlZmluZSBmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgcF9zdGFydCwgcF9lbmQpIFwKKwlf
X2Zvcl9lYWNoX21lbV9yYW5nZShpLCAmbWVtYmxvY2subWVtb3J5LCBOVUxMLCBOVU1BX05PX05P
REUsCVwKKwkJCSAgICAgTUVNQkxPQ0tfTk9ORSwgcF9zdGFydCwgcF9lbmQsIE5VTEwpCisKKy8q
KgorICogZm9yX2VhY2hfbWVtX3JhbmdlX3JldiAtIHJldmVyc2UgaXRlcmF0ZSB0aHJvdWdoIG1l
bWJsb2NrIGFyZWFzIGZyb20KKyAqIHR5cGVfYSBhbmQgbm90IGluY2x1ZGVkIGluIHR5cGVfYi4g
T3IganVzdCB0eXBlX2EgaWYgdHlwZV9iIGlzIE5VTEwuCisgKiBAaTogdTY0IHVzZWQgYXMgbG9v
cCB2YXJpYWJsZQorICogQHBfc3RhcnQ6IHB0ciB0byBwaHlzX2FkZHJfdCBmb3Igc3RhcnQgYWRk
cmVzcyBvZiB0aGUgcmFuZ2UsIGNhbiBiZSAlTlVMTAorICogQHBfZW5kOiBwdHIgdG8gcGh5c19h
ZGRyX3QgZm9yIGVuZCBhZGRyZXNzIG9mIHRoZSByYW5nZSwgY2FuIGJlICVOVUxMCisgKi8KKyNk
ZWZpbmUgZm9yX2VhY2hfbWVtX3JhbmdlX3JldihpLCBwX3N0YXJ0LCBwX2VuZCkJCQlcCisJX19m
b3JfZWFjaF9tZW1fcmFuZ2VfcmV2KGksICZtZW1ibG9jay5tZW1vcnksIE5VTEwsIE5VTUFfTk9f
Tk9ERSwgXAorCQkJCSBNRU1CTE9DS19OT05FLCBwX3N0YXJ0LCBwX2VuZCwgTlVMTCkKKwogLyoq
CiAgKiBmb3JfZWFjaF9yZXNlcnZlZF9tZW1fcmVnaW9uIC0gaXRlcmF0ZSBvdmVyIGFsbCByZXNl
cnZlZCBtZW1ibG9jayBhcmVhcwogICogQGk6IHU2NCB1c2VkIGFzIGxvb3AgdmFyaWFibGUKQEAg
LTMwNyw4ICszMjgsOCBAQCBpbnQgX19pbml0IGRlZmVycmVkX3BhZ2VfaW5pdF9tYXhfdGhyZWFk
cyhjb25zdCBzdHJ1Y3QgY3B1bWFzayAqbm9kZV9jcHVtYXNrKTsKICAqIHNvb24gYXMgbWVtYmxv
Y2sgaXMgaW5pdGlhbGl6ZWQuCiAgKi8KICNkZWZpbmUgZm9yX2VhY2hfZnJlZV9tZW1fcmFuZ2Uo
aSwgbmlkLCBmbGFncywgcF9zdGFydCwgcF9lbmQsIHBfbmlkKQlcCi0JZm9yX2VhY2hfbWVtX3Jh
bmdlKGksICZtZW1ibG9jay5tZW1vcnksICZtZW1ibG9jay5yZXNlcnZlZCwJXAotCQkJICAgbmlk
LCBmbGFncywgcF9zdGFydCwgcF9lbmQsIHBfbmlkKQorCV9fZm9yX2VhY2hfbWVtX3JhbmdlKGks
ICZtZW1ibG9jay5tZW1vcnksICZtZW1ibG9jay5yZXNlcnZlZCwJXAorCQkJICAgICBuaWQsIGZs
YWdzLCBwX3N0YXJ0LCBwX2VuZCwgcF9uaWQpCiAKIC8qKgogICogZm9yX2VhY2hfZnJlZV9tZW1f
cmFuZ2VfcmV2ZXJzZSAtIHJldi1pdGVyYXRlIHRocm91Z2ggZnJlZSBtZW1ibG9jayBhcmVhcwpA
QCAtMzI0LDggKzM0NSw4IEBAIGludCBfX2luaXQgZGVmZXJyZWRfcGFnZV9pbml0X21heF90aHJl
YWRzKGNvbnN0IHN0cnVjdCBjcHVtYXNrICpub2RlX2NwdW1hc2spOwogICovCiAjZGVmaW5lIGZv
cl9lYWNoX2ZyZWVfbWVtX3JhbmdlX3JldmVyc2UoaSwgbmlkLCBmbGFncywgcF9zdGFydCwgcF9l
bmQsCVwKIAkJCQkJcF9uaWQpCQkJCVwKLQlmb3JfZWFjaF9tZW1fcmFuZ2VfcmV2KGksICZtZW1i
bG9jay5tZW1vcnksICZtZW1ibG9jay5yZXNlcnZlZCwJXAotCQkJICAgICAgIG5pZCwgZmxhZ3Ms
IHBfc3RhcnQsIHBfZW5kLCBwX25pZCkKKwlfX2Zvcl9lYWNoX21lbV9yYW5nZV9yZXYoaSwgJm1l
bWJsb2NrLm1lbW9yeSwgJm1lbWJsb2NrLnJlc2VydmVkLCBcCisJCQkJIG5pZCwgZmxhZ3MsIHBf
c3RhcnQsIHBfZW5kLCBwX25pZCkKIAogaW50IG1lbWJsb2NrX3NldF9ub2RlKHBoeXNfYWRkcl90
IGJhc2UsIHBoeXNfYWRkcl90IHNpemUsCiAJCSAgICAgIHN0cnVjdCBtZW1ibG9ja190eXBlICp0
eXBlLCBpbnQgbmlkKTsKZGlmZiAtLWdpdCBhL21tL3BhZ2VfYWxsb2MuYyBiL21tL3BhZ2VfYWxs
b2MuYwppbmRleCAwZTJiYWI0ODZmZWEuLjEyZGE1NmIxY2YzOSAxMDA2NDQKLS0tIGEvbW0vcGFn
ZV9hbGxvYy5jCisrKyBiL21tL3BhZ2VfYWxsb2MuYwpAQCAtNjk3OSw4ICs2OTc5LDcgQEAgc3Rh
dGljIHZvaWQgX19pbml0IGluaXRfdW5hdmFpbGFibGVfbWVtKHZvaWQpCiAJICogTG9vcCB0aHJv
dWdoIHVuYXZhaWxhYmxlIHJhbmdlcyBub3QgY292ZXJlZCBieSBtZW1ibG9jay5tZW1vcnkuCiAJ
ICovCiAJcGdjbnQgPSAwOwotCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmbWVtYmxvY2subWVtb3J5
LCBOVUxMLAotCQkJTlVNQV9OT19OT0RFLCBNRU1CTE9DS19OT05FLCAmc3RhcnQsICZlbmQsIE5V
TEwpIHsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKSB7CiAJCWlmIChuZXh0
IDwgc3RhcnQpCiAJCQlwZ2NudCArPSBpbml0X3VuYXZhaWxhYmxlX3JhbmdlKFBGTl9ET1dOKG5l
eHQpLAogCQkJCQkJCVBGTl9VUChzdGFydCkpOwotLSAKMi4yNi4yCgpfX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3Bl
blJJU0NAbGlzdHMubGlicmVjb3Jlcy5vcmcKaHR0cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9s
aXN0aW5mby9vcGVucmlzYwo=
