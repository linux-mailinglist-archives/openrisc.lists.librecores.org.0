Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 8452214AB4
	for <lists+openrisc@lfdr.de>; Mon,  6 May 2019 15:16:35 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 6F53428441;
	Mon,  6 May 2019 15:16:35 +0200 (CEST)
Received: from mail-pg1-f169.google.com (mail-pg1-f169.google.com
 [209.85.215.169])
 by mail.librecores.org (Postfix) with ESMTPS id DF23625B3E
 for <openrisc@lists.librecores.org>; Mon,  6 May 2019 15:16:33 +0200 (CEST)
Received: by mail-pg1-f169.google.com with SMTP id t187so2327985pgb.13
 for <openrisc@lists.librecores.org>; Mon, 06 May 2019 06:16:33 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=from:to:cc:subject:date:message-id:in-reply-to:references
 :mime-version:content-transfer-encoding;
 bh=dtIpQRwPD5ZkbVfwzBtrWySNT3wg7J8+hXDpDe1JvEw=;
 b=XQ2zVzyW9IJooUyApYP15DjNI+dc5hNYoMNF4S880cpgjuPRkr50103ot6ck+OHFmu
 B340WRVna/HhjXWdX0q4GjCdOIEictck2VUcycj3RprusIbY+/lq0IQ6EkQKl5UE5b9o
 Au0uH11vavgbysKsTiBEGs9ry1HPGMlKVXGYgTPj+S+FKVrh3gU6SncBP3jXPeNVvn0m
 V1OhPPh+XIwDeqTeEtcDEqsOioBNG5jfJ3A+41nSbNb6SZTDOJqUXC3AivIibyVhB1pP
 h39f0MMS/ABWsbthyix9nNjSO/1tfbOxJdzI+v1RDj7Uz1t/z2h/lAeLJFtmth9qNVUh
 yZCg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
 :references:mime-version:content-transfer-encoding;
 bh=dtIpQRwPD5ZkbVfwzBtrWySNT3wg7J8+hXDpDe1JvEw=;
 b=ozRnUerzUq03u05aj6sFNNLjSsZAmB7TCtA6Xq/GB1dwVbMxTqxkrtSYMWW94vaNls
 mIb1GAGZL0zduKBIFF7BUMD8ozAbrcBa9EiPMhlcJ3YzADLSMssWqOmcAv3BzE69vzQE
 VJLFFZNHHwu7RplQH5F/iOqQzliagZNat5Fjev/DBDYNZw4yR8Op8sl0kWK3s1LXw7O7
 jSOXuHGZ7lmHOmz3WbjI4deb/y8FW3Kqo9aO1GBaJN16jNabiMolYqcvUaZdgjktTrNx
 lLnuTWsMxBW+XkSVFOFZmgnzuQpDmtYc1g/jsOYeOLxvmcJDPg5rnSpixaidWS46YJpm
 JsUQ==
X-Gm-Message-State: APjAAAVJGSu74AJJcGwcg6u1T1CkZX0w+Y3Wp2QYUEqUOlrDijK6oBP4
 /foT8QI3Kzutc/WZlriWy30=
X-Google-Smtp-Source: APXvYqz5b8SB8kUanysl4zsz9n3xeupl+jtZ31NJSID8FCnlB+AmGN8i0BVq0bX8+NUuPZjSdW+hFA==
X-Received: by 2002:a63:42:: with SMTP id 63mr31995853pga.337.1557148592417;
 Mon, 06 May 2019 06:16:32 -0700 (PDT)
Received: from localhost (g191.61-115-60.ppp.wakwak.ne.jp. [61.115.60.191])
 by smtp.gmail.com with ESMTPSA id t9sm11415372pgp.66.2019.05.06.06.16.31
 (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
 Mon, 06 May 2019 06:16:31 -0700 (PDT)
From: Stafford Horne <shorne@gmail.com>
To: GCC patches <gcc-patches@gcc.gnu.org>
Date: Mon,  6 May 2019 22:16:20 +0900
Message-Id: <20190506131621.29929-2-shorne@gmail.com>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20190506131621.29929-1-shorne@gmail.com>
References: <20190506131621.29929-1-shorne@gmail.com>
MIME-Version: 1.0
Subject: [OpenRISC] [PATCH 1/2] or1k: Fix code quality for volatile memory
 loads
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Openrisc <openrisc@lists.librecores.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

Vm9sYXRpbGUgbWVtb3J5IGRvZXMgbm90IG1hdGNoIHRoZSBtZW1vcnlfb3BlcmFuZCBwcmVkaWNh
dGUuICBUaGlzCmNhdXNlcyBleHRyYSBleHRlbmQvbWFzayBpbnN0cnVjdGlvbnMgaW5zdHJ1Y3Rp
b25zIHdoZW4gcmVhZGluZwpmcm9tIHZvbGF0aWxlIG1lbW9yeS4gIE9uIE9wZW5SSVNDIGxvYWRp
bmcgdm9saXRpbGUgbWVtb3J5IGNhbiBiZQp0cmVhdGVkIHRoZSBzYW1lIGFzIHJlZ3VsYXIgbWVt
b3J5IGxvYWRzIHdoaWNoIHN1cHBvcnRzIGNvbWJpbmVkCnNpZ24vemVybyBleHRlbmRzLiAgRml4
aW5nIHRoaXMgZWxpbWluYXRlcyB0aGUgbmVlZCBmb3IgZXh0cmEKZXh0ZW5kL21hc2sgaW5zdHJ1
Y3Rpb25zLgoKVGhpcyBhbHNvIGFkZHMgYSB0ZXN0IHByb3ZpZGVkIGJ5IFJpY2hhcmQgU2VsdmFn
Z2kgd2hpY2ggdW5jb3ZlcmVkIHRoZQppc3N1ZSB3aGlsZSB3ZSB3ZXJlIGxvb2tpbmcgaW50byBh
bm90aGVyIGlzc3VlLgoKZ2NjL0NoYW5nZUxvZzoKCglQUiB0YXJnZXQvOTAzNjMKCSogY29uZmln
L29yMWsvb3Ixay5tZCAoemVyb19leHRlbmQ8bW9kZT5zaTIpOiBVcGRhdGUgcHJlZGljYXRlLgoJ
KGV4dGVuZDxtb2RlPnNpMik6IFVwZGF0ZSBwcmVkaWNhdGUuCgkqIGdjYy9jb25maWcvb3Ixay9w
cmVkaWNhdGVzLm1kICh2b2xhdGlsZV9tZW1fb3BlcmFuZCk6IE5ldy4KCShyZWdfb3JfbWVtX29w
ZXJhbmQpOiBOZXcuCgpnY2MvdGVzdHN1aXRlL0NoYW5nZUxvZzoKCglQUiB0YXJnZXQvOTAzNjMK
CSogZ2NjLnRhcmdldC9vcjFrL3N3YXAtMS5jOiBOZXcgdGVzdC4KCSogZ2NjLnRhcmdldC9vcjFr
L3N3YXAtMi5jOiBOZXcgdGVzdC4KLS0tCiBnY2MvY29uZmlnL29yMWsvb3Ixay5tZCAgICAgICAg
ICAgICAgICB8ICA2ICstCiBnY2MvY29uZmlnL29yMWsvcHJlZGljYXRlcy5tZCAgICAgICAgICB8
IDE4ICsrKysrKwogZ2NjL3Rlc3RzdWl0ZS9nY2MudGFyZ2V0L29yMWsvc3dhcC0xLmMgfCA4NiAr
KysrKysrKysrKysrKysrKysrKysrKysrKwogZ2NjL3Rlc3RzdWl0ZS9nY2MudGFyZ2V0L29yMWsv
c3dhcC0yLmMgfCA2MyArKysrKysrKysrKysrKysrKysrCiA0IGZpbGVzIGNoYW5nZWQsIDE3MCBp
bnNlcnRpb25zKCspLCAzIGRlbGV0aW9ucygtKQogY3JlYXRlIG1vZGUgMTAwNjQ0IGdjYy90ZXN0
c3VpdGUvZ2NjLnRhcmdldC9vcjFrL3N3YXAtMS5jCiBjcmVhdGUgbW9kZSAxMDA2NDQgZ2NjL3Rl
c3RzdWl0ZS9nY2MudGFyZ2V0L29yMWsvc3dhcC0yLmMKCmRpZmYgLS1naXQgYS9nY2MvY29uZmln
L29yMWsvb3Ixay5tZCBiL2djYy9jb25maWcvb3Ixay9vcjFrLm1kCmluZGV4IDJkYWQ1MWNkNDZi
Li43NTdkODk5YzQ0MiAxMDA2NDQKLS0tIGEvZ2NjL2NvbmZpZy9vcjFrL29yMWsubWQKKysrIGIv
Z2NjL2NvbmZpZy9vcjFrL29yMWsubWQKQEAgLTMyOCwxMSArMzI4LDExIEBACiA7OyBTaWduIEV4
dGVuZGluZwogOzsgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogCi07OyBaZXJvIGV4dGVuc2lvbiBjYW4gYWx3
YXlzIGJlIGRvbmUgd2l0aCBBTkQgYW5kIGFuIGV4dGVuZGluZyBsb2FkLgorOzsgWmVybyBleHRl
bnNpb24gY2FuIGFsd2F5cyBiZSBkb25lIHdpdGggQU5EIG9yIGFuIGV4dGVuZGluZyBsb2FkLgog
CiAoZGVmaW5lX2luc24gInplcm9fZXh0ZW5kPG1vZGU+c2kyIgogICBbKHNldCAobWF0Y2hfb3Bl
cmFuZDpTSSAwICJyZWdpc3Rlcl9vcGVyYW5kIiAgICAgICAgICAgICAgICAgICAgICI9cixyIikK
LQkoemVyb19leHRlbmQ6U0kgKG1hdGNoX29wZXJhbmQ6STEyIDEgIm5vbmltbWVkaWF0ZV9vcGVy
YW5kIiAicixtIikpKV0KKwkoemVyb19leHRlbmQ6U0kgKG1hdGNoX29wZXJhbmQ6STEyIDEgInJl
Z19vcl9tZW1fb3BlcmFuZCIgInIsbSIpKSldCiAgICIiCiAgICJACiAgICBsLmFuZGlcdCUwLCAl
MSwgPHpleHRfYW5kaT4KQEAgLTM0NCw3ICszNDQsNyBAQAogCiAoZGVmaW5lX2luc24gImV4dGVu
ZDxtb2RlPnNpMiIKICAgWyhzZXQgKG1hdGNoX29wZXJhbmQ6U0kgMCAicmVnaXN0ZXJfb3BlcmFu
ZCIgICAgICAgICAgICAgICAgICAgICAgIj1yLHIiKQotCShzaWduX2V4dGVuZDpTSSAobWF0Y2hf
b3BlcmFuZDpJMTIgMSAibm9uaW1tZWRpYXRlX29wZXJhbmQiICAicixtIikpKV0KKwkoc2lnbl9l
eHRlbmQ6U0kgKG1hdGNoX29wZXJhbmQ6STEyIDEgInJlZ19vcl9tZW1fb3BlcmFuZCIgICJyLG0i
KSkpXQogICAiVEFSR0VUX1NFWFQiCiAgICJACiAgICBsLmV4dDxsZHN0PnNcdCUwLCAlMQpkaWZm
IC0tZ2l0IGEvZ2NjL2NvbmZpZy9vcjFrL3ByZWRpY2F0ZXMubWQgYi9nY2MvY29uZmlnL29yMWsv
cHJlZGljYXRlcy5tZAppbmRleCA4NzkyMzZiY2E0OS4uYjg5NWYxYjQyMjggMTAwNjQ0Ci0tLSBh
L2djYy9jb25maWcvb3Ixay9wcmVkaWNhdGVzLm1kCisrKyBiL2djYy9jb25maWcvb3Ixay9wcmVk
aWNhdGVzLm1kCkBAIC04MiwzICs4MiwyMSBAQAogCiAoZGVmaW5lX3ByZWRpY2F0ZSAiZXF1YWxp
dHlfY29tcGFyaXNvbl9vcGVyYXRvciIKICAgKG1hdGNoX2NvZGUgIm5lLGVxIikpCisKKzs7IEJv
cnJvd2VkIGZyb20gcnM2MDAwCis7ICBSZXR1cm4gdHJ1ZSBpZiB0aGUgb3BlcmFuZCBpcyBpbiB2
b2xhdGlsZSBtZW1vcnkuICBOb3RlIHRoYXQgZHVyaW5nIHRoZQorOzsgUlRMIGdlbmVyYXRpb24g
cGhhc2UsIG1lbW9yeV9vcGVyYW5kIGRvZXMgbm90IHJldHVybiBUUlVFIGZvciB2b2xhdGlsZQor
OzsgbWVtb3J5IHJlZmVyZW5jZXMuICBTbyB0aGlzIGZ1bmN0aW9uIGFsbG93cyB1cyB0byByZWNv
Z25pemUgdm9sYXRpbGUKKzs7IHJlZmVyZW5jZXMgd2hlcmUgaXQncyBzYWZlLgorKGRlZmluZV9w
cmVkaWNhdGUgInZvbGF0aWxlX21lbV9vcGVyYW5kIgorICAoYW5kIChtYXRjaF9jb2RlICJtZW0i
KQorICAgICAgIChtYXRjaF90ZXN0ICJNRU1fVk9MQVRJTEVfUCAob3ApIikKKyAgICAgICAoaWZf
dGhlbl9lbHNlIChtYXRjaF90ZXN0ICJyZWxvYWRfY29tcGxldGVkIikKKwkgKG1hdGNoX29wZXJh
bmQgMCAibWVtb3J5X29wZXJhbmQiKQorCSAobWF0Y2hfdGVzdCAibWVtb3J5X2FkZHJlc3NfcCAo
bW9kZSwgWEVYUCAob3AsIDApKSIpKSkpCisKKzs7IFJldHVybiB0cnVlIGlmIHRoZSBvcGVyYW5k
IGlzIGEgcmVnaXN0ZXIgb3IgbWVtb3J5OyBpbmNsdWRpbmcgdm9sYXRpbGUKKzs7IG1lbW9yeS4K
KyhkZWZpbmVfcHJlZGljYXRlICJyZWdfb3JfbWVtX29wZXJhbmQiCisgIChpb3IgKG1hdGNoX29w
ZXJhbmQgMCAibm9uaW1tZWRpYXRlX29wZXJhbmQiKQorICAgICAgIChtYXRjaF9vcGVyYW5kIDAg
InZvbGF0aWxlX21lbV9vcGVyYW5kIikpKQpkaWZmIC0tZ2l0IGEvZ2NjL3Rlc3RzdWl0ZS9nY2Mu
dGFyZ2V0L29yMWsvc3dhcC0xLmMgYi9nY2MvdGVzdHN1aXRlL2djYy50YXJnZXQvb3Ixay9zd2Fw
LTEuYwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwMC4uMjMzYzRiNzE2MjcK
LS0tIC9kZXYvbnVsbAorKysgYi9nY2MvdGVzdHN1aXRlL2djYy50YXJnZXQvb3Ixay9zd2FwLTEu
YwpAQCAtMCwwICsxLDg2IEBACisvKiB7IGRnLWRvIHJ1biB9ICovCisvKiB7IGRnLW9wdGlvbnMg
Ii1PcyAtbWhhcmQtbXVsIC1tc29mdC1kaXYgLW1zb2Z0LWZsb2F0IiB9ICovCisKKy8qIENvcHly
aWdodCAoQykgMjAxOC0yMDE5IEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgSW5jLgorICAgQ29w
eXJpZ2h0IDIwMTkgQnJvYWRjb20uICAgUmljaGFyZCBTZWx2YWdnaSwgMjAxOS1NYXJjaC0yNwor
ICAgVGhlIHRlcm0gIkJyb2FkY29tIiByZWZlcnMgdG8gQnJvYWRjb20gSW5jLiBhbmQvb3IgaXRz
IHN1YnNpZGlhcmllcy4KKworICAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBj
YW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKKyAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHZlcnNpb24gMiwgYXMKKyAgIHB1Ymxp
c2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uICh0aGUgIkdQTCIpLgorCisgICBU
aGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVz
ZWZ1bCwgYnV0CisgICBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBs
aWVkIHdhcnJhbnR5IG9mCisgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJU
SUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVQorICAgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2
ZXJzaW9uIDIgKEdQTHYyKSBmb3IgbW9yZSBkZXRhaWxzLgorCisgICBZb3Ugc2hvdWxkIGhhdmUg
cmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQorICAgdmVy
c2lvbiAyIChHUEx2MikgYWxvbmcgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLiAgKi8KKworLyogTm90
ZXM6CisKKyAgIFRoaXMgdGVzdCBmYWlsZWQgb24gb3IxayBHQ0MgNy4yLjAsIGFuZCBwYXNzZXMg
b24gb3IxayBHQ0MgNS4zLjAKKyAgIGFzIHdlbGwgYXMgdGhlIG9yMWsgcG9ydCByZWxlYXNlZCBp
biBHQ0MgOS4xLgorCisgICBUaGUgbWFpbiBwcm9ncmFtIGlzIG9yZ2FuaXplZCBhcyBhIGxvb3Ag
c3RydWN0dXJlIHNvIGdjYyBkb2VzIG5vdAorICAgb3B0aW1pemUtYXdheSB0aGUgY2FsbHMgdG8g
c3dhcF8xKCkuICBDb21waWxpbmcgd2l0aCAtTzIgaXMgc3RpbGwgc21hcnQKKyAgIGVub3VnaCB0
byBvcHRpbWl6ZS1hd2F5IHRoZSBjYWxscywgYnV0IHVzaW5nIC1PcyBkb2VzIG5vdC4KKyAgIFRo
ZSBiYWQgY29kZSBpcyBvbmx5IGdlbmVyYXRlZCB3aGVuIGNvbXBpbGVkIHdpdGggLU9zLgorCisg
ICBXaGVuIHRoZSBiYWQgY29kZSBpcyBnZW5lcmF0ZWQgYWxsIGNvZGUgaXMgb2theSBleGNlcHQg
Zm9yIHRoZSB2ZXJ5IGxhc3QKKyAgIGluc3RydWN0aW9uIChhICdsLmFkZGMnIGluIHRoZSBsLmpy
IGRlbGF5IHNsb3QpLgorICAgVXAgdG8gdGhhdCBwb2ludCBpbiBleGVjdXRpb24sIHIxMSBhbmQg
cjEyIGNvbnRhaW4gdGhlIGNvcnJlY3QgKGV4cGVjdGVkKQorICAgdmFsdWVzLCBidXQgdGhlIGV4
ZWN1dGlvbiBvZiB0aGUgZmluYWwgImwuYWRkYyIgY29ycnVwdHMgcjExLgorCisgICBUaGlzIHRl
c3QgaXMgYWRkZWQgdG8gZW5zdXJlIHRoaXMgZG9lcyBub3QgY29tZSBiYWNrLiAgKi8KKworI2lu
Y2x1ZGUgPHN0ZGludC5oPgorCit2b2xhdGlsZSBzdGF0aWMgdWludDhfdCBnX2Rvc3dhcCA9IDE7
CisKK3VpbnQ2NF90IHN3YXBfMSAodWludDY0X3QgdTY0KSB7CisgIHVpbnQzMl90IHU2NF9sbywg
dTY0X2hpLCB1NjRfdG1wOworCisgIHU2NF9sbyA9IHU2NCAmIDB4RkZGRkZGRkY7CisgIHU2NF9o
aSA9IHU2NCA+PiAzMjsKKworICBpZiAoZ19kb3N3YXApCisgICAgeworICAgICAgdTY0X3RtcCA9
IHU2NF9sbzsKKyAgICAgIHU2NF9sbyAgPSB1NjRfaGk7CisgICAgICB1NjRfaGkgID0gdTY0X3Rt
cDsKKyAgICB9CisKKyAgdTY0ID0gdTY0X2xvOworICB1NjQgKz0gKCh1aW50NjRfdCkgdTY0X2hp
IDw8IDMyKTsKKworICByZXR1cm4gdTY0OworfQorCitpbnQgbWFpbiAoKSB7CisgIGludCByZXQ7
CisgIGludCBpdGVyOworICB1aW50NjRfdCAgYWFbMl07ICAgLy8gaW5wdXRzIHRvIHN3YXAgZnVu
Y3Rpb24KKyAgdWludDY0X3QgIGVlWzJdOyAgIC8vIGV4cGVjdGVkIG91dHB1dHMgb2Ygc3dhcCBm
dW5jdGlvbgorICB1aW50NjRfdCAgcnJbMl07ICAgLy8gYWN0dWFsIHJlc3VsdHMgb2Ygc3dhcCBm
dW5jdGlvbgorCisgIGdfZG9zd2FwID0gMTsKKworICAvLyBwb3B1bGF0ZSBpbnB1dHMsIGFuZCBl
eHBlY3RlZCBvdXRwdXRzOgorICBhYVswXSA9IDB4MTIzNDU2Nzg5YWJjZGVmMDsKKyAgYWFbMV0g
PSAweDAxMjM0NTY3ODlhYmNkZWY7CisKKyAgZWVbMF0gPSAweDlBQkNERUYwMTIzNDU2Nzg7Cisg
IGVlWzFdID0gMHg4OUFCQ0RFRjAxMjM0NTY3OworCisgIHJldCA9IDA7CisgIGZvciAoaXRlciA9
IDA7IGl0ZXIgPCAyOyBpdGVyKyspCisgICAgeworICAgICAgcnJbaXRlcl0gPSBzd2FwXzEoYWFb
aXRlcl0pOworICAgICAgLy8gZWFybHktb3V0IGlmIHRoZXJlJ3MgYSBtaXMtbWF0Y2g6CisgICAg
ICBpZiAoZWVbaXRlcl0gIT0gcnJbaXRlcl0pCisgICAgICAgIHJldCA9IDE7CisgICAgfQorCisg
IHJldHVybiByZXQ7Cit9CmRpZmYgLS1naXQgYS9nY2MvdGVzdHN1aXRlL2djYy50YXJnZXQvb3Ix
ay9zd2FwLTIuYyBiL2djYy90ZXN0c3VpdGUvZ2NjLnRhcmdldC9vcjFrL3N3YXAtMi5jCm5ldyBm
aWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwLi44ZGRlYTRlNjU5ZgotLS0gL2Rldi9u
dWxsCisrKyBiL2djYy90ZXN0c3VpdGUvZ2NjLnRhcmdldC9vcjFrL3N3YXAtMi5jCkBAIC0wLDAg
KzEsNjMgQEAKKy8qIHsgZGctZG8gY29tcGlsZSB9ICovCisvKiB7IGRnLW9wdGlvbnMgIi1PcyAt
bWhhcmQtbXVsIC1tc29mdC1kaXYgLW1zb2Z0LWZsb2F0IiB9ICovCisKKy8qIENvcHlyaWdodCAo
QykgMjAxOC0yMDE5IEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgSW5jLgorICAgQ29weXJpZ2h0
IDIwMTkgQnJvYWRjb20uICAgUmljaGFyZCBTZWx2YWdnaSwgMjAxOS1NYXJjaC0yNworICAgVGhl
IHRlcm0gIkJyb2FkY29tIiByZWZlcnMgdG8gQnJvYWRjb20gSW5jLiBhbmQvb3IgaXRzIHN1YnNp
ZGlhcmllcy4KKworICAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVk
aXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKKyAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
R05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UsIHZlcnNpb24gMiwgYXMKKyAgIHB1Ymxpc2hlZCBi
eSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uICh0aGUgIkdQTCIpLgorCisgICBUaGlzIHBy
b2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwg
YnV0CisgICBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdh
cnJhbnR5IG9mCisgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFS
IFBVUlBPU0UuICBTZWUgdGhlIEdOVQorICAgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2ZXJzaW9u
IDIgKEdQTHYyKSBmb3IgbW9yZSBkZXRhaWxzLgorCisgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2
ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQorICAgdmVyc2lvbiAy
IChHUEx2MikgYWxvbmcgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLiAgKi8KKworLyogTm90ZXM6CisK
KyAgIFRoaXMgdGVzdCBmYWlsZWQgb24gb3IxayBHQ0MgNy4yLjAsIGFuZCBwYXNzZXMgb24gb3Ix
ayBHQ0MgNS4zLjAKKyAgIGFzIHdlbGwgYXMgdGhlIG9yMWsgcG9ydCByZWxlYXNlZCBpbiBHQ0Mg
OS4xLgorCisgICBUaGUgbWFpbiBwcm9ncmFtIGlzIG9yZ2FuaXplZCBhcyBhIGxvb3Agc3RydWN0
dXJlIHNvIGdjYyBkb2VzIG5vdAorICAgb3B0aW1pemUtYXdheSB0aGUgY2FsbHMgdG8gc3dhcF8x
KCkuICBDb21waWxpbmcgd2l0aCAtTzIgaXMgc3RpbGwgc21hcnQKKyAgIGVub3VnaCB0byBvcHRp
bWl6ZS1hd2F5IHRoZSBjYWxscywgYnV0IHVzaW5nIC1PcyBkb2VzIG5vdC4KKyAgIFRoZSBiYWQg
Y29kZSBpcyBvbmx5IGdlbmVyYXRlZCB3aGVuIGNvbXBpbGVkIHdpdGggLU9zLgorCisgICBXaGVu
IHRoZSBiYWQgY29kZSBpcyBnZW5lcmF0ZWQgYWxsIGNvZGUgaXMgb2theSBleGNlcHQgZm9yIHRo
ZSB2ZXJ5IGxhc3QKKyAgIGluc3RydWN0aW9uIChhICdsLmFkZGMnIGluIHRoZSBsLmpyIGRlbGF5
IHNsb3QpLgorICAgVXAgdG8gdGhhdCBwb2ludCBpbiBleGVjdXRpb24sIHIxMSBhbmQgcjEyIGNv
bnRhaW4gdGhlIGNvcnJlY3QgKGV4cGVjdGVkKQorICAgdmFsdWVzLCBidXQgdGhlIGV4ZWN1dGlv
biBvZiB0aGUgZmluYWwgImwuYWRkYyIgY29ycnVwdHMgcjExLgorCisgICBUaGlzIHRlc3QgZW5z
dXJlcyBhbiBsLmFkZGMgaXMgbm90IGluIHRoZSBvdXRwdXQuICBBbHNvLCB3aGlsZSBjb25maXJt
aW5nCisgICB0aGlzIHRlc3Qgd2UgdW5jb3ZlcmVkIFBSLzkwMzYzLCB3ZSB1c2UgaXQgdG8gY2hl
Y2sgZm9yIHRoYXQgYXMgd2VsbC4gICovCisKKyNpbmNsdWRlIDxzdGRpbnQuaD4KKwordm9sYXRp
bGUgc3RhdGljIHVpbnQ4X3QgZ19kb3N3YXAgPSAxOworCit1aW50NjRfdCBzd2FwXzEgKHVpbnQ2
NF90IHU2NCkgeworICB1aW50MzJfdCB1NjRfbG8sIHU2NF9oaSwgdTY0X3RtcDsKKworICB1NjRf
bG8gPSB1NjQgJiAweEZGRkZGRkZGOworICB1NjRfaGkgPSB1NjQgPj4gMzI7CisKKyAgaWYgKGdf
ZG9zd2FwKQorICAgIHsKKyAgICAgIHU2NF90bXAgPSB1NjRfbG87CisgICAgICB1NjRfbG8gID0g
dTY0X2hpOworICAgICAgdTY0X2hpICA9IHU2NF90bXA7CisgICAgfQorCisgIHU2NCA9IHU2NF9s
bzsKKyAgdTY0ICs9ICgodWludDY0X3QpIHU2NF9oaSA8PCAzMik7CisKKyAgcmV0dXJuIHU2NDsK
K30KKworLyogQ2hlY2sgdG8gZW5zdXJlIHRoZSB2b2xpdGlsZSBsb2FkIGRvZXMgbm90IGdldCB6
ZXJvIGV4dGVuZGVkLiAgKi8KKy8qIHsgZGctZmluYWwgeyBzY2FuLWFzc2VtYmxlci1ub3QgIjB4
ZmYiIH0gfSAqLworLyogeyBkZy1maW5hbCB7IHNjYW4tYXNzZW1ibGVyLW5vdCAibC5hZGRjIiB9
IH0gKi8KLS0gCjIuMTkuMQoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX18KT3BlblJJU0MgbWFpbGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMu
b3JnCmh0dHBzOi8vbGlzdHMubGlicmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJpc2MK
