Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 8360A370907
	for <lists+openrisc@lfdr.de>; Sat,  1 May 2021 23:11:57 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 5E4792137C;
	Sat,  1 May 2021 23:11:57 +0200 (CEST)
Received: from mail-pg1-f172.google.com (mail-pg1-f172.google.com
 [209.85.215.172])
 by mail.librecores.org (Postfix) with ESMTPS id CC7DA20EEB
 for <openrisc@lists.librecores.org>; Sat,  1 May 2021 23:11:54 +0200 (CEST)
Received: by mail-pg1-f172.google.com with SMTP id j7so997209pgi.3
 for <openrisc@lists.librecores.org>; Sat, 01 May 2021 14:11:54 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=from:to:cc:subject:date:message-id:in-reply-to:references
 :mime-version:content-transfer-encoding;
 bh=01ZY5aFHRNvHls4oMmh3XOeiwznPb/ulDcFhESJ5PiQ=;
 b=qnpg7VoRnP/RLYDMwdu3e5GQ1mZEq9o1sE6FXPxAqXem7wIN0jMOqJDZPYW0C4QwxE
 rE58kuhQ98IKgUG3RcsKOS7uZ6jefQenvG2/zgnJMPGNdBGiNdiV9cNJ6eLb9cT/J5UX
 7Hajl7zhuHOopFiRTISy0ZvqLjWc3jkscdvf+Uq7UjM6Pp6KzAbtuoHJHFPPox/8jJLL
 IiHHaKAWbOJQqHkalSn3yiDabCgYxVcSr6IlTaCBn5V3fs4qHlIVJgCTRpMBqRFGIfdN
 O3Xsm1j0QnehVwtj5H0NKJcTlu6WOSHZ1SOjbbfEyBjsjaxfj45cNltsGNZ2RaTozU9S
 GfNQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
 :references:mime-version:content-transfer-encoding;
 bh=01ZY5aFHRNvHls4oMmh3XOeiwznPb/ulDcFhESJ5PiQ=;
 b=tznyCm9I2LNeuzWSbkLyNPT5eq/lDYXeF24Gmdu7T1QUuyHdWh3EElQ8cX32cvi3sJ
 jlNbn+ZFZkY3I2s0oyzd0lXv4bqupCmxB0zsrIxxlX13PU/1RQjCdYJIFF3DL5srdKBZ
 HTVnK9Xx/C1J5m4dOfbiH6VAAi3gFZZpaJhSfAx87MPlk0lBwmByw5WFv79k8r72lGDS
 5SYEuIPBA0tN8qaZaJb3sostT3svOSz1cdvllYHYywVjUrglVx+6UR/ZtuWlDmRmD2vs
 eTFKOTKezHjlYsTBMLLrSFtbib/rtYswXfwi/yp2a6Z0aS7Iui82kcdf2x+AGc9oFGvR
 LY4w==
X-Gm-Message-State: AOAM530Ydc7qQIdEnTIz3ddCaKd6GZdssb+2lV85N7PgeBIY/ARIQDDY
 J5coy/XEirlioxSv4yeVIm4=
X-Google-Smtp-Source: ABdhPJzmKozMRVhRYNbZn5NjS4p1evdgfVXefAGD5+fd3Wfwn69Z0GBpkJ7iWP/l2osYock/a2yu+A==
X-Received: by 2002:aa7:828f:0:b029:200:6e27:8c8f with SMTP id
 s15-20020aa7828f0000b02902006e278c8fmr11132175pfm.44.1619903513308; 
 Sat, 01 May 2021 14:11:53 -0700 (PDT)
Received: from localhost (g17.222-224-135.ppp.wakwak.ne.jp. [222.224.135.17])
 by smtp.gmail.com with ESMTPSA id
 f1sm13831104pjt.50.2021.05.01.14.11.52
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Sat, 01 May 2021 14:11:52 -0700 (PDT)
From: Stafford Horne <shorne@gmail.com>
To: GCC patches <gcc-patches@gcc.gnu.org>
Date: Sun,  2 May 2021 06:11:44 +0900
Message-Id: <20210501211145.2980164-2-shorne@gmail.com>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20210501211145.2980164-1-shorne@gmail.com>
References: <20210501211145.2980164-1-shorne@gmail.com>
MIME-Version: 1.0
Subject: [OpenRISC] [PATCH v2 1/2] or1k: Add mcmodel option to handle large
 GOTs
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: giulio.benetti@benettiengineering.com,
 Openrisc <openrisc@lists.librecores.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

V2hlbiBidWlsZGluZyBsaWJnZW9zIHdlIGdldCBhbiBlcnJvciB3aXRoOgoKICAgIGxpbnV4LXVj
bGliYy85LjMuMC9jcnRiZWdpblMubzogaW4gZnVuY3Rpb24gYF9fZG9fZ2xvYmFsX2R0b3JzX2F1
eCc6CiAgICBjcnRzdHVmZi5jOigudGV4dCsweDExOCk6IHJlbG9jYXRpb24gdHJ1bmNhdGVkIHRv
IGZpdDogUl9PUjFLX0dPVDE2IGFnYWluc3Qgc3ltYm9sIGBfX2N4YV9maW5hbGl6ZScgZGVmaW5l
ZCBpbiAudGV4dCBzZWN0aW9uIGluCiAgICAvaG9tZS9zaG9ybmUvd29yay9vcGVucmlzYy8zZWI5
ZjlkMGY2ZDgyNzRiMmQxOTc1M2MwMDZiZDgzZjdkNTM2ZTNjL291dHB1dC9ob3N0L29yMWstYnVp
bGRyb290LWxpbnV4LXVjbGliYy9zeXNyb290L2xpYi9saWJjLnNvLgoKVGhpcyBpcyBjYXVzZWQg
YnkgR09UIGNvZGUgaGF2aW5nIGEgbGltaXQgb2YgNjRrLiAgSW4gT3BlblJJU0MgdGhpcwpsb29r
cyB0byBiZSB0aGUgb25seSByZWxvY2F0aW9uIGNvZGUgcGF0dGVybiB0byBiZSBsaW1pdGVkIHRv
IDY0ay4KClRoaXMgcGF0Y2ggYWxsb3dzIHNwZWNpZnlpbmcgYSBuZXcgb3B0aW9uIC1tY21vZGVs
PWxhcmdlIHdoaWNoIGNhbiBiZQp1c2VkIHRvIGdlbmVyYXRlIDIgbW9yZSBpbnN0cnVjdGlvbnMg
dG8gY29uc3RydWN0IDMyLWJpdCBhZGRyZXNzZXMgZm9yCnVwIHRvIDRHIEdPVHMuCgpnY2MvQ2hh
bmdlTG9nOgoKCVBSIDk5NzgzCgkqIGNvbmZpZy9vcjFrL29yMWstb3B0cy5oOiBOZXcgZmlsZS4K
CSogY29uZmlnL29yMWsvb3Ixay5jIChvcjFrX2xlZ2l0aW1pemVfYWRkcmVzc18xLCBwcmludF9y
ZWxvYyk6CglTdXBwb3J0IGdlbmVyYXRpbmcgZ290aGEgcmVsb2NhdGlvbnMgaWYgLW1jbW9kZWw9
bGFyZ2UgaXMKCXNwZWNpZmllZC4KCSogY29uZmlnL29yMWsvb3Ixay5oIChUQVJHRVRfQ01PREVM
X1NNQUxMLCBUQVJHRVRfQ01PREVMX0xBUkdFKToKCU5ldyBtYWNyb3MuCgkqIGNvbmZpZy9vcjFr
L29yMWsub3B0IChtY21vZGVsPSk6IE5ldyBvcHRpb24uCgkqIGRvYy9pbnZva2UudGV4dCAoT3Bl
blJJU0MgT3B0aW9ucyk6IERvY3VtZW50IG1jbW9kZWwuCi0tLQogZ2NjL2NvbmZpZy9vcjFrL29y
MWstb3B0cy5oIHwgMzAgKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrCiBnY2MvY29uZmln
L29yMWsvb3Ixay5jICAgICAgfCAxMSArKysrKysrKystLQogZ2NjL2NvbmZpZy9vcjFrL29yMWsu
aCAgICAgIHwgIDcgKysrKysrKwogZ2NjL2NvbmZpZy9vcjFrL29yMWsub3B0ICAgIHwgMTkgKysr
KysrKysrKysrKysrKysrKwogZ2NjL2RvYy9pbnZva2UudGV4aSAgICAgICAgIHwgMTIgKysrKysr
KysrKystCiA1IGZpbGVzIGNoYW5nZWQsIDc2IGluc2VydGlvbnMoKyksIDMgZGVsZXRpb25zKC0p
CiBjcmVhdGUgbW9kZSAxMDA2NDQgZ2NjL2NvbmZpZy9vcjFrL29yMWstb3B0cy5oCgpkaWZmIC0t
Z2l0IGEvZ2NjL2NvbmZpZy9vcjFrL29yMWstb3B0cy5oIGIvZ2NjL2NvbmZpZy9vcjFrL29yMWst
b3B0cy5oCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwLi5mNzkxYjg5NGZk
ZAotLS0gL2Rldi9udWxsCisrKyBiL2djYy9jb25maWcvb3Ixay9vcjFrLW9wdHMuaApAQCAtMCww
ICsxLDMwIEBACisvKiBEZWZpbml0aW9ucyBmb3Igb3B0aW9uIGhhbmRsaW5nIGZvciBPcGVuUklT
Qy4KKyAgIENvcHlyaWdodCAoQykgMjAyMSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIEluYy4K
KyAgIENvbnRyaWJ1dGVkIGJ5IFN0YWZmb3JkIEhvcm5lLgorCisgICBUaGlzIGZpbGUgaXMgcGFy
dCBvZiBHQ0MuCisKKyAgIEdDQyBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0
ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0CisgICB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5l
cmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZAorICAgYnkgdGhlIEZyZWUgU29mdHdhcmUg
Rm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMywgb3IgKGF0IHlvdXIKKyAgIG9wdGlvbikgYW55
IGxhdGVyIHZlcnNpb24uCisKKyAgIEdDQyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0
IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVAorICAgQU5ZIFdBUlJBTlRZOyB3aXRob3V0
IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZCisgICBvciBGSVRO
RVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VIEdlbmVyYWwgUHVibGlj
CisgICBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCisKKyAgIFlvdSBzaG91bGQgaGF2ZSByZWNl
aXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCisgICBhbG9uZyB3
aXRoIEdDQzsgc2VlIHRoZSBmaWxlIENPUFlJTkczLiAgSWYgbm90IHNlZQorICAgPGh0dHA6Ly93
d3cuZ251Lm9yZy9saWNlbnNlcy8+LiAgKi8KKworI2lmbmRlZiBHQ0NfT1IxS19PUFRTX0gKKyNk
ZWZpbmUgR0NDX09SMUtfT1BUU19ICisKKy8qIFRoZSBPcGVuUklTQyBjb2RlIGdlbmVyYXRpb24g
bW9kZWxzIGF2YWlsYWJsZS4gICovCitlbnVtIG9yMWtfY21vZGVsX3R5cGUgeworICBDTU9ERUxf
U01BTEwsCisgIENNT0RFTF9MQVJHRQorfTsKKworI2VuZGlmIC8qIEdDQ19PUjFLX09QVFNfSCAq
LwpkaWZmIC0tZ2l0IGEvZ2NjL2NvbmZpZy9vcjFrL29yMWsuYyBiL2djYy9jb25maWcvb3Ixay9v
cjFrLmMKaW5kZXggZTc3MmE3YWRkZWEuLjI3ZDNmYTE3OTk1IDEwMDY0NAotLS0gYS9nY2MvY29u
ZmlnL29yMWsvb3Ixay5jCisrKyBiL2djYy9jb25maWcvb3Ixay9vcjFrLmMKQEAgLTc1MCw3ICs3
NTAsMTQgQEAgb3Ixa19sZWdpdGltaXplX2FkZHJlc3NfMSAocnR4IHgsIHJ0eCBzY3JhdGNoKQog
CSAgICB7CiAJICAgICAgYmFzZSA9IGdlbl9zeW1fdW5zcGVjIChiYXNlLCBVTlNQRUNfR09UKTsK
IAkgICAgICBjcnRsLT51c2VzX3BpY19vZmZzZXRfdGFibGUgPSAxOwotCSAgICAgIHQyID0gZ2Vu
X3J0eF9MT19TVU0gKFBtb2RlLCBwaWNfb2Zmc2V0X3RhYmxlX3J0eCwgYmFzZSk7CisJICAgICAg
aWYgKFRBUkdFVF9DTU9ERUxfTEFSR0UpCisJCXsKKwkgICAgICAgICAgZW1pdF9pbnNuIChnZW5f
cnR4X1NFVCAodDEsIGdlbl9ydHhfSElHSCAoUG1vZGUsIGJhc2UpKSk7CisJICAgICAgICAgIGVt
aXRfaW5zbiAoZ2VuX2FkZDNfaW5zbiAodDEsIHQxLCBwaWNfb2Zmc2V0X3RhYmxlX3J0eCkpOwor
CSAgICAgICAgICB0MiA9IGdlbl9ydHhfTE9fU1VNIChQbW9kZSwgdDEsIGJhc2UpOworCQl9CisJ
ICAgICAgZWxzZQorCSAgICAgICAgdDIgPSBnZW5fcnR4X0xPX1NVTSAoUG1vZGUsIHBpY19vZmZz
ZXRfdGFibGVfcnR4LCBiYXNlKTsKIAkgICAgICB0MiA9IGdlbl9jb25zdF9tZW0gKFBtb2RlLCB0
Mik7CiAJICAgICAgZW1pdF9pbnNuIChnZW5fcnR4X1NFVCAodDEsIHQyKSk7CiAJICAgICAgYmFz
ZSA9IHQxOwpAQCAtMTA4OSw3ICsxMDk2LDcgQEAgcHJpbnRfcmVsb2MgKEZJTEUgKnN0cmVhbSwg
cnR4IHgsIEhPU1RfV0lERV9JTlQgYWRkLCByZWxvY19raW5kIGtpbmQpCiAgICAgIG5vIHNwZWNp
YWwgbWFya3VwLiAgKi8KICAgc3RhdGljIGNvbnN0IGNoYXIgKiBjb25zdCByZWxvY3NbUktJTkRf
TUFYXVtSVFlQRV9NQVhdID0gewogICAgIHsgImxvIiwgImdvdCIsICJnb3RvZmZsbyIsICJ0cG9m
ZmxvIiwgImdvdHRwb2ZmbG8iLCAidGxzZ2RsbyIgfSwKLSAgICB7ICJoYSIsIE5VTEwsICAiZ290
b2ZmaGEiLCAidHBvZmZoYSIsICJnb3R0cG9mZmhhIiwgInRsc2dkaGkiIH0sCisgICAgeyAiaGEi
LCAiZ290aGEiLCAiZ290b2ZmaGEiLCAidHBvZmZoYSIsICJnb3R0cG9mZmhhIiwgInRsc2dkaGki
IH0sCiAgIH07CiAgIHJlbG9jX3R5cGUgdHlwZSA9IFJUWVBFX0RJUkVDVDsKIApkaWZmIC0tZ2l0
IGEvZ2NjL2NvbmZpZy9vcjFrL29yMWsuaCBiL2djYy9jb25maWcvb3Ixay9vcjFrLmgKaW5kZXgg
ZmUwMWFiODFlYWQuLjY2OTkwN2U3ZTc0IDEwMDY0NAotLS0gYS9nY2MvY29uZmlnL29yMWsvb3Ix
ay5oCisrKyBiL2djYy9jb25maWcvb3Ixay9vcjFrLmgKQEAgLTIxLDYgKzIxLDggQEAKICNpZm5k
ZWYgR0NDX09SMUtfSAogI2RlZmluZSBHQ0NfT1IxS19ICiAKKyNpbmNsdWRlICJjb25maWcvb3Ix
ay9vcjFrLW9wdHMuaCIKKwogLyogTmFtZXMgdG8gcHJlZGVmaW5lIGluIHRoZSBwcmVwcm9jZXNz
b3IgZm9yIHRoaXMgdGFyZ2V0IG1hY2hpbmUuICAqLwogI2RlZmluZSBUQVJHRVRfQ1BVX0NQUF9C
VUlMVElOUygpCQlcCiAgIGRvCQkJCQkJXApAQCAtMzcsNiArMzksMTEgQEAKICAgICB9CQkJCQkJ
XAogICB3aGlsZSAoMCkKIAorI2RlZmluZSBUQVJHRVRfQ01PREVMX1NNQUxMIFwKKyAgKG9yMWtf
Y29kZV9tb2RlbCA9PSBDTU9ERUxfU01BTEwpCisjZGVmaW5lIFRBUkdFVF9DTU9ERUxfTEFSR0Ug
XAorICAob3Ixa19jb2RlX21vZGVsID09IENNT0RFTF9MQVJHRSkKKwogLyogU3RvcmFnZSBsYXlv
dXQuICAqLwogCiAjZGVmaW5lIERFRkFVTFRfU0lHTkVEX0NIQVIgMQpkaWZmIC0tZ2l0IGEvZ2Nj
L2NvbmZpZy9vcjFrL29yMWsub3B0IGIvZ2NjL2NvbmZpZy9vcjFrL29yMWsub3B0CmluZGV4IDZi
ZDBmM2VlZTZkLi5jYzIzZTNiODg1NiAxMDA2NDQKLS0tIGEvZ2NjL2NvbmZpZy9vcjFrL29yMWsu
b3B0CisrKyBiL2djYy9jb25maWcvb3Ixay9vcjFrLm9wdApAQCAtMjEsNiArMjEsOSBAQAogOyBT
ZWUgdGhlIEdDQyBpbnRlcm5hbHMgbWFudWFsIChvcHRpb25zLnRleGkpIGZvciBhIGRlc2NyaXB0
aW9uIG9mCiA7IHRoaXMgZmlsZSdzIGZvcm1hdC4KIAorSGVhZGVySW5jbHVkZQorY29uZmlnL29y
MWsvb3Ixay1vcHRzLmgKKwogbWhhcmQtZGl2CiBUYXJnZXQgUmVqZWN0TmVnYXRpdmUgSW52ZXJz
ZU1hc2soU09GVF9ESVYpCiBFbmFibGUgZ2VuZXJhdGlvbiBvZiBoYXJkd2FyZSBkaXZpZGUgKGwu
ZGl2LCBsLmRpdnUpIGluc3RydWN0aW9ucy4gIFRoaXMgaXMgdGhlCkBAIC02Myw2ICs2NiwyMiBA
QCBXaGVuIC1taGFyZC1mbG9hdCBpcyBzZWxlY3RlZCwgZW5hYmxlcyBnZW5lcmF0aW9uIG9mIHVu
b3JkZXJlZCBmbG9hdGluZyBwb2ludAogY29tcGFyZSBhbmQgc2V0IGZsYWcgKGxmLnNmdW4qKSBp
bnN0cnVjdGlvbnMuICBCeSBkZWZhdWx0IGZ1bmN0aW9ucyBmcm9tIGxpYmdjYwogYXJlIHVzZWQg
dG8gcGVyZm9ybSB1bm9yZGVyZWQgZmxvYXRpbmcgcG9pbnQgY29tcGFyZSBhbmQgc2V0IGZsYWcg
b3BlcmF0aW9ucy4KIAorbWNtb2RlbD0KK1RhcmdldCBSZWplY3ROZWdhdGl2ZSBKb2luZWQgRW51
bShvcjFrX2Ntb2RlbF90eXBlKSBWYXIob3Ixa19jb2RlX21vZGVsKSBJbml0KENNT0RFTF9TTUFM
TCkKK1NwZWNpZnkgdGhlIGNvZGUgbW9kZWwgdXNlZCBmb3IgYWNjZXNzaW5nIG1lbW9yeSBhZGRy
ZXNzZXMuICBTcGVjaWZ5aW5nIGxhcmdlCitlbmFibGVzIGdlbmVyYXRpbmcgYmluYXJpZXMgd2l0
aCBsYXJnZSBnbG9iYWwgb2Zmc2V0IHRhYmxlcy4gIEJ5IGRlZmF1bHQgdGhlCit2YWx1ZSBpcyBz
bWFsbC4KKworRW51bQorTmFtZShvcjFrX2Ntb2RlbF90eXBlKSBUeXBlKGVudW0gb3Ixa19jbW9k
ZWxfdHlwZSkKK0tub3duIGNvZGUgbW9kZWwgdHlwZXMgKGZvciB1c2Ugd2l0aCB0aGUgLW1jbW9k
ZWw9IG9wdGlvbik6CisKK0VudW1WYWx1ZQorRW51bShvcjFrX2Ntb2RlbF90eXBlKSBTdHJpbmco
c21hbGwpIFZhbHVlKENNT0RFTF9TTUFMTCkKKworRW51bVZhbHVlCitFbnVtKG9yMWtfY21vZGVs
X3R5cGUpIFN0cmluZyhsYXJnZSkgVmFsdWUoQ01PREVMX0xBUkdFKQorCiBtY21vdgogVGFyZ2V0
IFJlamVjdE5lZ2F0aXZlIE1hc2soQ01PVikKIEVuYWJsZSBnZW5lcmF0aW9uIG9mIGNvbmRpdGlv
bmFsIG1vdmUgKGwuY21vdikgaW5zdHJ1Y3Rpb25zLiAgQnkgZGVmYXVsdCB0aGUKZGlmZiAtLWdp
dCBhL2djYy9kb2MvaW52b2tlLnRleGkgYi9nY2MvZG9jL2ludm9rZS50ZXhpCmluZGV4IDA5NmNl
YmM4NTYyLi42M2NjNGVjOTdkYiAxMDA2NDQKLS0tIGEvZ2NjL2RvYy9pbnZva2UudGV4aQorKysg
Yi9nY2MvZG9jL2ludm9rZS50ZXhpCkBAIC0xMTM1LDcgKzExMzUsOCBAQCBPYmplY3RpdmUtQyBh
bmQgT2JqZWN0aXZlLUMrKyBEaWFsZWN0c30uCiBAZ2Njb3B0bGlzdHstbWJvYXJkPUB2YXJ7bmFt
ZX0gIC1tbmV3bGliICAtbWhhcmQtbXVsICAtbWhhcmQtZGl2IEBnb2wKIC1tc29mdC1tdWwgIC1t
c29mdC1kaXYgQGdvbAogLW1zb2Z0LWZsb2F0ICAtbWhhcmQtZmxvYXQgIC1tZG91YmxlLWZsb2F0
IC1tdW5vcmRlcmVkLWZsb2F0IEBnb2wKLS1tY21vdiAgLW1yb3IgIC1tcm9yaSAgLW1zZXh0ICAt
bXNmaW1tICAtbXNoZnRpbW19CistbWNtb3YgIC1tcm9yICAtbXJvcmkgIC1tc2V4dCAgLW1zZmlt
bSAgLW1zaGZ0aW1tIEBnb2wKKy1tY21vZGVsPUB2YXJ7Y29kZS1tb2RlbH19CiAKIEBlbXBoe1BE
UC0xMSBPcHRpb25zfQogQGdjY29wdGxpc3R7LW1mcHUgIC1tc29mdC1mbG9hdCAgLW1hYzAgIC1t
bm8tYWMwICAtbTQwICAtbTQ1ICAtbTEwIEBnb2wKQEAgLTI2NDA2LDYgKzI2NDA3LDE1IEBAIEVu
YWJsZSBnZW5lcmF0aW9uIG9mIHNoaWZ0IHdpdGggaW1tZWRpYXRlIChAY29kZXtsLnNyYWl9LCBA
Y29kZXtsLnNybGl9LAogQGNvZGV7bC5zbGxpfSkgaW5zdHJ1Y3Rpb25zLiAgQnkgZGVmYXVsdCBl
eHRyYSBpbnN0cnVjdGlvbnMgd2lsbCBiZSBnZW5lcmF0ZWQKIHRvIHN0b3JlIHRoZSBpbW1lZGlh
dGUgdG8gYSByZWdpc3RlciBmaXJzdC4KIAorQGl0ZW0gLW1jbW9kZWw9c21hbGwKK0BvcGluZGV4
IG1jbW9kZWw9c21hbGwKK0dlbmVyYXRlIE9wZW5SSVNDIGNvZGUgZm9yIHRoZSBzbWFsbCBtb2Rl
bDogVGhlIEdPVCBpcyBsaW1pdGVkIHRvIDY0ay4gVGhpcyBpcwordGhlIGRlZmF1bHQgbW9kZWwu
CisKK0BpdGVtIC1tY21vZGVsPWxhcmdlCitAb3BpbmRleCBtY21vZGVsPWxhcmdlCitHZW5lcmF0
ZSBPcGVuUklTQyBjb2RlIGZvciB0aGUgbGFyZ2UgbW9kZWw6IFRoZSBHT1QgbWF5IGdyb3cgdXAg
dG8gNEcgaW4gc2l6ZS4KKwogCiBAZW5kIHRhYmxlCiAKLS0gCjIuMjYuMgoKX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KT3BlblJJU0MgbWFpbGluZyBsaXN0
Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMub3JnCmh0dHBzOi8vbGlzdHMubGlicmVjb3Jlcy5v
cmcvbGlzdGluZm8vb3BlbnJpc2MK
