Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 36DE62460B9
	for <lists+openrisc@lfdr.de>; Mon, 17 Aug 2020 10:46:18 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id B98B120E59;
	Mon, 17 Aug 2020 10:46:17 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 59EDA20CD9
 for <openrisc@lists.librecores.org>; Tue, 28 Jul 2020 07:14:03 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id D8C9D2250E;
 Tue, 28 Jul 2020 05:13:52 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1595913242;
 bh=/P/lupA3C4FmvMBK6FgIXaCKoFOV5sz/UYytaknOuEQ=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=ekzq732XLM7rZfBBWAAa33F6g3rHV+mO9Fg/LM+KQ4w/RzQPvjwepYwzmsb/XoBCy
 R3fxzP5eCFMU+VlLwKua74V7ztxqjN3g1jfg1aKz0z7pGC4wLm9HOldlh3tZl65Pw9
 4if1i5cNzR0aZwsP0WdD+b3nm7gRU4We1i0oxnuA=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Tue, 28 Jul 2020 08:11:49 +0300
Message-Id: <20200728051153.1590-12-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200728051153.1590-1-rppt@kernel.org>
References: <20200728051153.1590-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Mon, 17 Aug 2020 10:45:37 +0200
Subject: [OpenRISC] [PATCH 11/15] memblock: reduce number of parameters in
 for_each_mem_range()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: linux-sh@vger.kernel.org, Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Marek Szyprowski <m.szyprowski@samsung.com>,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Yoshinori Sato <ysato@users.sourceforge.jp>,
 Michael Ellerman <mpe@ellerman.id.au>, x86@kernel.org,
 Russell King <linux@armlinux.org.uk>, Mike Rapoport <rppt@linux.ibm.com>,
 clang-built-linux@googlegroups.com, Ingo Molnar <mingo@redhat.com>,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Thomas Gleixner <tglx@linutronix.de>, linux-arm-kernel@lists.infradead.org,
 Michal Simek <monstr@monstr.eu>, linux-mm@kvack.org,
 linuxppc-dev@lists.ozlabs.org, linux-kernel@vger.kernel.org,
 iommu@lists.linux-foundation.org, Palmer Dabbelt <palmer@dabbelt.com>,
 Christoph Hellwig <hch@lst.de>, Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKQ3VycmVudGx5IGZvcl9l
YWNoX21lbV9yYW5nZSgpIGl0ZXJhdG9yIGlzIHRoZSBtb3N0IGdlbmVyaWMgd2F5IHRvIHRyYXZl
cnNlCm1lbWJsb2NrIHJlZ2lvbnMuIEFzIHN1Y2gsIGl0IGhhcyA4IHBhcmFtZXRlcnMgYW5kIGl0
IGlzIGhhcmRseSBjb252ZW5pZW50CnRvIHVzZXJzLiBNb3N0IHVzZXJzIGNob29zZSB0byB1dGls
aXplIG9uZSBvZiBpdHMgd3JhcHBlcnMgYW5kIHRoZSBvbmx5CnVzZXIgdGhhdCBhY3R1YWxseSBu
ZWVkcyBtb3N0IG9mIHRoZSBwYXJhbWV0ZXJzIG91dHNpZGUgbWVtYmxvY2sgaXMgczM5MApjcmFz
aCBkdW1wIGltcGxlbWVudGF0aW9uLgoKVG8gYXZvaWQgeWV0IGFub3RoZXIgbmFtaW5nIGZvciBt
ZW1ibG9jayBpdGVyYXRvcnMsIHJlbmFtZSB0aGUgZXhpc3RpbmcKZm9yX2VhY2hfbWVtX3Jhbmdl
KCkgdG8gX19mb3JfZWFjaF9tZW1fcmFuZ2UoKSBhbmQgYWRkIGEgbmV3CmZvcl9lYWNoX21lbV9y
YW5nZSgpIHdyYXBwZXIgd2l0aCBvbmx5IGluZGV4LCBzdGFydCBhbmQgZW5kIHBhcmFtZXRlcnMu
CgpUaGUgbmV3IHdyYXBwZXIgbmljZWx5IGZpdHMgaW50byBpbml0X3VuYXZhaWxhYmxlX21lbSgp
IGFuZCB3aWxsIGJlIHVzZWQgaW4KdXBjb21pbmcgY2hhbmdlcyB0byBzaW1wbGlmeSBtZW1ibG9j
ayB0cmF2ZXJzYWxzLgoKU2lnbmVkLW9mZi1ieTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5p
Ym0uY29tPgotLS0KIC5jbGFuZy1mb3JtYXQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDEg
KwogYXJjaC9hcm02NC9rZXJuZWwvbWFjaGluZV9rZXhlY19maWxlLmMgfCAgNiArKy0tLS0KIGFy
Y2gvczM5MC9rZXJuZWwvY3Jhc2hfZHVtcC5jICAgICAgICAgIHwgIDggKysrKy0tLS0KIGluY2x1
ZGUvbGludXgvbWVtYmxvY2suaCAgICAgICAgICAgICAgIHwgMTggKysrKysrKysrKysrKystLS0t
CiBtbS9wYWdlX2FsbG9jLmMgICAgICAgICAgICAgICAgICAgICAgICB8ICAzICstLQogNSBmaWxl
cyBjaGFuZ2VkLCAyMiBpbnNlcnRpb25zKCspLCAxNCBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQg
YS8uY2xhbmctZm9ybWF0IGIvLmNsYW5nLWZvcm1hdAppbmRleCBhMGE5NjA4OGM3NGYuLjUyZWRl
ZGFiMjVjZSAxMDA2NDQKLS0tIGEvLmNsYW5nLWZvcm1hdAorKysgYi8uY2xhbmctZm9ybWF0CkBA
IC0yMDUsNiArMjA1LDcgQEAgRm9yRWFjaE1hY3JvczoKICAgLSAnZm9yX2VhY2hfbWVtYmxvY2tf
dHlwZScKICAgLSAnZm9yX2VhY2hfbWVtY2dfY2FjaGVfaW5kZXgnCiAgIC0gJ2Zvcl9lYWNoX21l
bV9wZm5fcmFuZ2UnCisgIC0gJ19fZm9yX2VhY2hfbWVtX3JhbmdlJwogICAtICdmb3JfZWFjaF9t
ZW1fcmFuZ2UnCiAgIC0gJ2Zvcl9lYWNoX21lbV9yYW5nZV9yZXYnCiAgIC0gJ2Zvcl9lYWNoX21p
Z3JhdGV0eXBlX29yZGVyJwpkaWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9rZXJuZWwvbWFjaGluZV9r
ZXhlY19maWxlLmMgYi9hcmNoL2FybTY0L2tlcm5lbC9tYWNoaW5lX2tleGVjX2ZpbGUuYwppbmRl
eCAzNjFhMTE0M2UwOWUuLjViMGU2N2I5M2NkYyAxMDA2NDQKLS0tIGEvYXJjaC9hcm02NC9rZXJu
ZWwvbWFjaGluZV9rZXhlY19maWxlLmMKKysrIGIvYXJjaC9hcm02NC9rZXJuZWwvbWFjaGluZV9r
ZXhlY19maWxlLmMKQEAgLTIxNSw4ICsyMTUsNyBAQCBzdGF0aWMgaW50IHByZXBhcmVfZWxmX2hl
YWRlcnModm9pZCAqKmFkZHIsIHVuc2lnbmVkIGxvbmcgKnN6KQogCXBoeXNfYWRkcl90IHN0YXJ0
LCBlbmQ7CiAKIAlucl9yYW5nZXMgPSAxOyAvKiBmb3IgZXhjbHVzaW9uIG9mIGNyYXNoa2VybmVs
IHJlZ2lvbiAqLwotCWZvcl9lYWNoX21lbV9yYW5nZShpLCAmbWVtYmxvY2subWVtb3J5LCBOVUxM
LCBOVU1BX05PX05PREUsCi0JCQkJCU1FTUJMT0NLX05PTkUsICZzdGFydCwgJmVuZCwgTlVMTCkK
Kwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnN0YXJ0LCAmZW5kKQogCQlucl9yYW5nZXMrKzsKIAog
CWNtZW0gPSBrbWFsbG9jKHN0cnVjdF9zaXplKGNtZW0sIHJhbmdlcywgbnJfcmFuZ2VzKSwgR0ZQ
X0tFUk5FTCk7CkBAIC0yMjUsOCArMjI0LDcgQEAgc3RhdGljIGludCBwcmVwYXJlX2VsZl9oZWFk
ZXJzKHZvaWQgKiphZGRyLCB1bnNpZ25lZCBsb25nICpzeikKIAogCWNtZW0tPm1heF9ucl9yYW5n
ZXMgPSBucl9yYW5nZXM7CiAJY21lbS0+bnJfcmFuZ2VzID0gMDsKLQlmb3JfZWFjaF9tZW1fcmFu
Z2UoaSwgJm1lbWJsb2NrLm1lbW9yeSwgTlVMTCwgTlVNQV9OT19OT0RFLAotCQkJCQlNRU1CTE9D
S19OT05FLCAmc3RhcnQsICZlbmQsIE5VTEwpIHsKKwlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJnN0
YXJ0LCAmZW5kKSB7CiAJCWNtZW0tPnJhbmdlc1tjbWVtLT5ucl9yYW5nZXNdLnN0YXJ0ID0gc3Rh
cnQ7CiAJCWNtZW0tPnJhbmdlc1tjbWVtLT5ucl9yYW5nZXNdLmVuZCA9IGVuZCAtIDE7CiAJCWNt
ZW0tPm5yX3JhbmdlcysrOwpkaWZmIC0tZ2l0IGEvYXJjaC9zMzkwL2tlcm5lbC9jcmFzaF9kdW1w
LmMgYi9hcmNoL3MzOTAva2VybmVsL2NyYXNoX2R1bXAuYwppbmRleCBmOTZhNTg1N2JiZmQuLmUy
ODA4NWM3MjVmZiAxMDA2NDQKLS0tIGEvYXJjaC9zMzkwL2tlcm5lbC9jcmFzaF9kdW1wLmMKKysr
IGIvYXJjaC9zMzkwL2tlcm5lbC9jcmFzaF9kdW1wLmMKQEAgLTU0OSw4ICs1NDksOCBAQCBzdGF0
aWMgaW50IGdldF9tZW1fY2h1bmtfY250KHZvaWQpCiAJaW50IGNudCA9IDA7CiAJdTY0IGlkeDsK
IAotCWZvcl9lYWNoX21lbV9yYW5nZShpZHgsICZtZW1ibG9jay5waHlzbWVtLCAmb2xkbWVtX3R5
cGUsIE5VTUFfTk9fTk9ERSwKLQkJCSAgIE1FTUJMT0NLX05PTkUsIE5VTEwsIE5VTEwsIE5VTEwp
CisJX19mb3JfZWFjaF9tZW1fcmFuZ2UoaWR4LCAmbWVtYmxvY2sucGh5c21lbSwgJm9sZG1lbV90
eXBlLCBOVU1BX05PX05PREUsCisJCQkgICAgIE1FTUJMT0NLX05PTkUsIE5VTEwsIE5VTEwsIE5V
TEwpCiAJCWNudCsrOwogCXJldHVybiBjbnQ7CiB9CkBAIC01NjMsOCArNTYzLDggQEAgc3RhdGlj
IHZvaWQgbG9hZHNfaW5pdChFbGY2NF9QaGRyICpwaGRyLCB1NjQgbG9hZHNfb2Zmc2V0KQogCXBo
eXNfYWRkcl90IHN0YXJ0LCBlbmQ7CiAJdTY0IGlkeDsKIAotCWZvcl9lYWNoX21lbV9yYW5nZShp
ZHgsICZtZW1ibG9jay5waHlzbWVtLCAmb2xkbWVtX3R5cGUsIE5VTUFfTk9fTk9ERSwKLQkJCSAg
IE1FTUJMT0NLX05PTkUsICZzdGFydCwgJmVuZCwgTlVMTCkgeworCV9fZm9yX2VhY2hfbWVtX3Jh
bmdlKGlkeCwgJm1lbWJsb2NrLnBoeXNtZW0sICZvbGRtZW1fdHlwZSwgTlVNQV9OT19OT0RFLAor
CQkJICAgICBNRU1CTE9DS19OT05FLCAmc3RhcnQsICZlbmQsIE5VTEwpIHsKIAkJcGhkci0+cF9m
aWxlc3ogPSBlbmQgLSBzdGFydDsKIAkJcGhkci0+cF90eXBlID0gUFRfTE9BRDsKIAkJcGhkci0+
cF9vZmZzZXQgPSBzdGFydDsKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvbWVtYmxvY2suaCBi
L2luY2x1ZGUvbGludXgvbWVtYmxvY2suaAppbmRleCBlNmEyM2IzZGI2OTYuLmQ3MGMyODM1ZTkx
MyAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9tZW1ibG9jay5oCisrKyBiL2luY2x1ZGUvbGlu
dXgvbWVtYmxvY2suaApAQCAtMTQyLDcgKzE0Miw3IEBAIHZvaWQgX19uZXh0X3Jlc2VydmVkX21l
bV9yZWdpb24odTY0ICppZHgsIHBoeXNfYWRkcl90ICpvdXRfc3RhcnQsCiB2b2lkIF9fbWVtYmxv
Y2tfZnJlZV9sYXRlKHBoeXNfYWRkcl90IGJhc2UsIHBoeXNfYWRkcl90IHNpemUpOwogCiAvKioK
LSAqIGZvcl9lYWNoX21lbV9yYW5nZSAtIGl0ZXJhdGUgdGhyb3VnaCBtZW1ibG9jayBhcmVhcyBm
cm9tIHR5cGVfYSBhbmQgbm90CisgKiBfX2Zvcl9lYWNoX21lbV9yYW5nZSAtIGl0ZXJhdGUgdGhy
b3VnaCBtZW1ibG9jayBhcmVhcyBmcm9tIHR5cGVfYSBhbmQgbm90CiAgKiBpbmNsdWRlZCBpbiB0
eXBlX2IuIE9yIGp1c3QgdHlwZV9hIGlmIHR5cGVfYiBpcyBOVUxMLgogICogQGk6IHU2NCB1c2Vk
IGFzIGxvb3AgdmFyaWFibGUKICAqIEB0eXBlX2E6IHB0ciB0byBtZW1ibG9ja190eXBlIHRvIGl0
ZXJhdGUKQEAgLTE1Myw3ICsxNTMsNyBAQCB2b2lkIF9fbWVtYmxvY2tfZnJlZV9sYXRlKHBoeXNf
YWRkcl90IGJhc2UsIHBoeXNfYWRkcl90IHNpemUpOwogICogQHBfZW5kOiBwdHIgdG8gcGh5c19h
ZGRyX3QgZm9yIGVuZCBhZGRyZXNzIG9mIHRoZSByYW5nZSwgY2FuIGJlICVOVUxMCiAgKiBAcF9u
aWQ6IHB0ciB0byBpbnQgZm9yIG5pZCBvZiB0aGUgcmFuZ2UsIGNhbiBiZSAlTlVMTAogICovCi0j
ZGVmaW5lIGZvcl9lYWNoX21lbV9yYW5nZShpLCB0eXBlX2EsIHR5cGVfYiwgbmlkLCBmbGFncywJ
CVwKKyNkZWZpbmUgX19mb3JfZWFjaF9tZW1fcmFuZ2UoaSwgdHlwZV9hLCB0eXBlX2IsIG5pZCwg
ZmxhZ3MsCQlcCiAJCQkgICBwX3N0YXJ0LCBwX2VuZCwgcF9uaWQpCQkJXAogCWZvciAoaSA9IDAs
IF9fbmV4dF9tZW1fcmFuZ2UoJmksIG5pZCwgZmxhZ3MsIHR5cGVfYSwgdHlwZV9iLAlcCiAJCQkJ
ICAgICBwX3N0YXJ0LCBwX2VuZCwgcF9uaWQpOwkJXApAQCAtMTgyLDYgKzE4MiwxNiBAQCB2b2lk
IF9fbWVtYmxvY2tfZnJlZV9sYXRlKHBoeXNfYWRkcl90IGJhc2UsIHBoeXNfYWRkcl90IHNpemUp
OwogCSAgICAgX19uZXh0X21lbV9yYW5nZV9yZXYoJmksIG5pZCwgZmxhZ3MsIHR5cGVfYSwgdHlw
ZV9iLAlcCiAJCQkJICBwX3N0YXJ0LCBwX2VuZCwgcF9uaWQpKQogCisvKioKKyAqIGZvcl9lYWNo
X21lbV9yYW5nZSAtIGl0ZXJhdGUgdGhyb3VnaCBtZW1vcnkgYXJlYXMuCisgKiBAaTogdTY0IHVz
ZWQgYXMgbG9vcCB2YXJpYWJsZQorICogQHBfc3RhcnQ6IHB0ciB0byBwaHlzX2FkZHJfdCBmb3Ig
c3RhcnQgYWRkcmVzcyBvZiB0aGUgcmFuZ2UsIGNhbiBiZSAlTlVMTAorICogQHBfZW5kOiBwdHIg
dG8gcGh5c19hZGRyX3QgZm9yIGVuZCBhZGRyZXNzIG9mIHRoZSByYW5nZSwgY2FuIGJlICVOVUxM
CisgKi8KKyNkZWZpbmUgZm9yX2VhY2hfbWVtX3JhbmdlKGksIHBfc3RhcnQsIHBfZW5kKSBcCisJ
X19mb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJm1lbWJsb2NrLm1lbW9yeSwgTlVMTCwgTlVNQV9OT19O
T0RFLAlcCisJCQkgICAgIE1FTUJMT0NLX05PTkUsIHBfc3RhcnQsIHBfZW5kLCBOVUxMKQorCiAv
KioKICAqIGZvcl9lYWNoX3Jlc2VydmVkX21lbV9yZWdpb24gLSBpdGVyYXRlIG92ZXIgYWxsIHJl
c2VydmVkIG1lbWJsb2NrIGFyZWFzCiAgKiBAaTogdTY0IHVzZWQgYXMgbG9vcCB2YXJpYWJsZQpA
QCAtMjg3LDggKzI5Nyw4IEBAIGludCBfX2luaXQgZGVmZXJyZWRfcGFnZV9pbml0X21heF90aHJl
YWRzKGNvbnN0IHN0cnVjdCBjcHVtYXNrICpub2RlX2NwdW1hc2spOwogICogc29vbiBhcyBtZW1i
bG9jayBpcyBpbml0aWFsaXplZC4KICAqLwogI2RlZmluZSBmb3JfZWFjaF9mcmVlX21lbV9yYW5n
ZShpLCBuaWQsIGZsYWdzLCBwX3N0YXJ0LCBwX2VuZCwgcF9uaWQpCVwKLQlmb3JfZWFjaF9tZW1f
cmFuZ2UoaSwgJm1lbWJsb2NrLm1lbW9yeSwgJm1lbWJsb2NrLnJlc2VydmVkLAlcCi0JCQkgICBu
aWQsIGZsYWdzLCBwX3N0YXJ0LCBwX2VuZCwgcF9uaWQpCisJX19mb3JfZWFjaF9tZW1fcmFuZ2Uo
aSwgJm1lbWJsb2NrLm1lbW9yeSwgJm1lbWJsb2NrLnJlc2VydmVkLAlcCisJCQkgICAgIG5pZCwg
ZmxhZ3MsIHBfc3RhcnQsIHBfZW5kLCBwX25pZCkKIAogLyoqCiAgKiBmb3JfZWFjaF9mcmVlX21l
bV9yYW5nZV9yZXZlcnNlIC0gcmV2LWl0ZXJhdGUgdGhyb3VnaCBmcmVlIG1lbWJsb2NrIGFyZWFz
CmRpZmYgLS1naXQgYS9tbS9wYWdlX2FsbG9jLmMgYi9tbS9wYWdlX2FsbG9jLmMKaW5kZXggZTAy
OGI4N2NlMjk0Li45NWFmMTExZDY5ZDMgMTAwNjQ0Ci0tLSBhL21tL3BhZ2VfYWxsb2MuYworKysg
Yi9tbS9wYWdlX2FsbG9jLmMKQEAgLTY5NzIsOCArNjk3Miw3IEBAIHN0YXRpYyB2b2lkIF9faW5p
dCBpbml0X3VuYXZhaWxhYmxlX21lbSh2b2lkKQogCSAqIExvb3AgdGhyb3VnaCB1bmF2YWlsYWJs
ZSByYW5nZXMgbm90IGNvdmVyZWQgYnkgbWVtYmxvY2subWVtb3J5LgogCSAqLwogCXBnY250ID0g
MDsKLQlmb3JfZWFjaF9tZW1fcmFuZ2UoaSwgJm1lbWJsb2NrLm1lbW9yeSwgTlVMTCwKLQkJCU5V
TUFfTk9fTk9ERSwgTUVNQkxPQ0tfTk9ORSwgJnN0YXJ0LCAmZW5kLCBOVUxMKSB7CisJZm9yX2Vh
Y2hfbWVtX3JhbmdlKGksICZzdGFydCwgJmVuZCkgewogCQlpZiAobmV4dCA8IHN0YXJ0KQogCQkJ
cGdjbnQgKz0gaW5pdF91bmF2YWlsYWJsZV9yYW5nZShQRk5fRE9XTihuZXh0KSwKIAkJCQkJCQlQ
Rk5fVVAoc3RhcnQpKTsKLS0gCjIuMjYuMgoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX18KT3BlblJJU0MgbWFpbGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxp
YnJlY29yZXMub3JnCmh0dHBzOi8vbGlzdHMubGlicmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJp
c2MK
