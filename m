Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 14F242499BD
	for <lists+openrisc@lfdr.de>; Wed, 19 Aug 2020 11:55:52 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id E08A020D57;
	Wed, 19 Aug 2020 11:55:50 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 9838920CC8
 for <openrisc@lists.librecores.org>; Tue, 18 Aug 2020 17:18:50 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 9F30A20882;
 Tue, 18 Aug 2020 15:18:38 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1597763928;
 bh=+7FiPEcgmORvEAotokCpYJjgB4evttBen+IqBIop8W8=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=ScbYqqw789PICEHmCAHnroINv9mBBxJqBPSrbeYV0cABCWMu1Uv4M/Yxjgn7NRE08
 ktuSUHln5yh709mlBOPSNDOZlJ/kccLyj5/tmTHTPpSOTfmdxaX31YIfsWQB/zBAad
 sCUx6/ruH0UaM1rAynDFQrqGHkw+lUgP4QEhMLro=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Tue, 18 Aug 2020 18:16:28 +0300
Message-Id: <20200818151634.14343-12-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200818151634.14343-1-rppt@kernel.org>
References: <20200818151634.14343-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Wed, 19 Aug 2020 11:55:42 +0200
Subject: [OpenRISC] [PATCH v3 11/17] arch,
 mm: replace for_each_memblock() with for_each_mem_pfn_range()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Thomas Gleixner <tglx@linutronix.de>,
 Emil Renner Berthing <kernel@esmil.dk>, linux-sh@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Christoph Hellwig <hch@lst.de>,
 Marek Szyprowski <m.szyprowski@samsung.com>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Michael Ellerman <mpe@ellerman.id.au>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Mike Rapoport <rppt@linux.ibm.com>, clang-built-linux@googlegroups.com,
 Ingo Molnar <mingo@redhat.com>, linux-arm-kernel@lists.infradead.org,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Hari Bathini <hbathini@linux.ibm.com>, Daniel Axtens <dja@axtens.net>,
 Michal Simek <monstr@monstr.eu>, Yoshinori Sato <ysato@users.sourceforge.jp>,
 linux-mm@kvack.org, linux-kernel@vger.kernel.org,
 iommu@lists.linux-foundation.org, Palmer Dabbelt <palmer@dabbelt.com>,
 linuxppc-dev@lists.ozlabs.org, Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlcmUgYXJlIHNldmVy
YWwgb2NjdXJyZW5jZXMgb2YgdGhlIGZvbGxvd2luZyBwYXR0ZXJuOgoKCWZvcl9lYWNoX21lbWJs
b2NrKG1lbW9yeSwgcmVnKSB7CgkJc3RhcnRfcGZuID0gbWVtYmxvY2tfcmVnaW9uX21lbW9yeV9i
YXNlX3BmbihyZWcpOwoJCWVuZF9wZm4gPSBtZW1ibG9ja19yZWdpb25fbWVtb3J5X2VuZF9wZm4o
cmVnKTsKCgkJLyogZG8gc29tZXRoaW5nIHdpdGggc3RhcnRfcGZuIGFuZCBlbmRfcGZuICovCgl9
CgpSYXRoZXIgdGhhbiBpdGVyYXRlIG92ZXIgYWxsIG1lbWJsb2NrLm1lbW9yeSByZWdpb25zIGFu
ZCBlYWNoIHRpbWUgcXVlcnkKZm9yIHRoZWlyIHN0YXJ0IGFuZCBlbmQgUEZOcywgdXNlIGZvcl9l
YWNoX21lbV9wZm5fcmFuZ2UoKSBpdGVyYXRvciB0byBnZXQKc2ltcGxlciBhbmQgY2xlYXJlciBj
b2RlLgoKU2lnbmVkLW9mZi1ieTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgpS
ZXZpZXdlZC1ieTogQmFvcXVhbiBIZSA8YmhlQHJlZGhhdC5jb20+Ci0tLQogYXJjaC9hcm0vbW0v
aW5pdC5jICAgICAgICAgICB8IDExICsrKystLS0tLS0tCiBhcmNoL2FybTY0L21tL2luaXQuYyAg
ICAgICAgIHwgMTEgKysrKy0tLS0tLS0KIGFyY2gvcG93ZXJwYy9rZXJuZWwvZmFkdW1wLmMgfCAx
MSArKysrKystLS0tLQogYXJjaC9wb3dlcnBjL21tL21lbS5jICAgICAgICB8IDE1ICsrKysrKysr
LS0tLS0tLQogYXJjaC9wb3dlcnBjL21tL251bWEuYyAgICAgICB8ICA3ICsrLS0tLS0KIGFyY2gv
czM5MC9tbS9wYWdlLXN0YXRlcy5jICAgfCAgNiArKy0tLS0KIGFyY2gvc2gvbW0vaW5pdC5jICAg
ICAgICAgICAgfCAgOSArKystLS0tLS0KIG1tL21lbWJsb2NrLmMgICAgICAgICAgICAgICAgfCAg
NiArKy0tLS0KIG1tL3NwYXJzZS5jICAgICAgICAgICAgICAgICAgfCAxMCArKysrLS0tLS0tCiA5
IGZpbGVzIGNoYW5nZWQsIDM1IGluc2VydGlvbnMoKyksIDUxIGRlbGV0aW9ucygtKQoKZGlmZiAt
LWdpdCBhL2FyY2gvYXJtL21tL2luaXQuYyBiL2FyY2gvYXJtL21tL2luaXQuYwppbmRleCA1MGE1
YTMwYTc4ZmYuLjQ1ZjlkNWVjMjM2MCAxMDA2NDQKLS0tIGEvYXJjaC9hcm0vbW0vaW5pdC5jCisr
KyBiL2FyY2gvYXJtL21tL2luaXQuYwpAQCAtMjk5LDE2ICsyOTksMTQgQEAgZnJlZV9tZW1tYXAo
dW5zaWduZWQgbG9uZyBzdGFydF9wZm4sIHVuc2lnbmVkIGxvbmcgZW5kX3BmbikKICAqLwogc3Rh
dGljIHZvaWQgX19pbml0IGZyZWVfdW51c2VkX21lbW1hcCh2b2lkKQogewotCXVuc2lnbmVkIGxv
bmcgc3RhcnQsIHByZXZfZW5kID0gMDsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJ
dW5zaWduZWQgbG9uZyBzdGFydCwgZW5kLCBwcmV2X2VuZCA9IDA7CisJaW50IGk7CiAKIAkvKgog
CSAqIFRoaXMgcmVsaWVzIG9uIGVhY2ggYmFuayBiZWluZyBpbiBhZGRyZXNzIG9yZGVyLgogCSAq
IFRoZSBiYW5rcyBhcmUgc29ydGVkIHByZXZpb3VzbHkgaW4gYm9vdG1lbV9pbml0KCkuCiAJICov
Ci0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJc3RhcnQgPSBtZW1ibG9ja19y
ZWdpb25fbWVtb3J5X2Jhc2VfcGZuKHJlZyk7Ci0KKwlmb3JfZWFjaF9tZW1fcGZuX3JhbmdlKGks
IE1BWF9OVU1OT0RFUywgJnN0YXJ0LCAmZW5kLCBOVUxMKSB7CiAjaWZkZWYgQ09ORklHX1NQQVJT
RU1FTQogCQkvKgogCQkgKiBUYWtlIGNhcmUgbm90IHRvIGZyZWUgbWVtbWFwIGVudHJpZXMgdGhh
dCBkb24ndCBleGlzdApAQCAtMzM2LDggKzMzNCw3IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBmcmVl
X3VudXNlZF9tZW1tYXAodm9pZCkKIAkJICogbWVtbWFwIGVudHJpZXMgYXJlIHZhbGlkIGZyb20g
dGhlIGJhbmsgZW5kIGFsaWduZWQgdG8KIAkJICogTUFYX09SREVSX05SX1BBR0VTLgogCQkgKi8K
LQkJcHJldl9lbmQgPSBBTElHTihtZW1ibG9ja19yZWdpb25fbWVtb3J5X2VuZF9wZm4ocmVnKSwK
LQkJCQkgTUFYX09SREVSX05SX1BBR0VTKTsKKwkJcHJldl9lbmQgPSBBTElHTihlbmQsIE1BWF9P
UkRFUl9OUl9QQUdFUyk7CiAJfQogCiAjaWZkZWYgQ09ORklHX1NQQVJTRU1FTQpkaWZmIC0tZ2l0
IGEvYXJjaC9hcm02NC9tbS9pbml0LmMgYi9hcmNoL2FybTY0L21tL2luaXQuYwppbmRleCA0ODFk
MjJjMzJhMmUuLmYwYmY4NmQ4MTYyMiAxMDA2NDQKLS0tIGEvYXJjaC9hcm02NC9tbS9pbml0LmMK
KysrIGIvYXJjaC9hcm02NC9tbS9pbml0LmMKQEAgLTQ3MSwxMiArNDcxLDEwIEBAIHN0YXRpYyBp
bmxpbmUgdm9pZCBmcmVlX21lbW1hcCh1bnNpZ25lZCBsb25nIHN0YXJ0X3BmbiwgdW5zaWduZWQg
bG9uZyBlbmRfcGZuKQogICovCiBzdGF0aWMgdm9pZCBfX2luaXQgZnJlZV91bnVzZWRfbWVtbWFw
KHZvaWQpCiB7Ci0JdW5zaWduZWQgbG9uZyBzdGFydCwgcHJldl9lbmQgPSAwOwotCXN0cnVjdCBt
ZW1ibG9ja19yZWdpb24gKnJlZzsKLQotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7
Ci0JCXN0YXJ0ID0gX19waHlzX3RvX3BmbihyZWctPmJhc2UpOworCXVuc2lnbmVkIGxvbmcgc3Rh
cnQsIGVuZCwgcHJldl9lbmQgPSAwOworCWludCBpOwogCisJZm9yX2VhY2hfbWVtX3Bmbl9yYW5n
ZShpLCBNQVhfTlVNTk9ERVMsICZzdGFydCwgJmVuZCwgTlVMTCkgewogI2lmZGVmIENPTkZJR19T
UEFSU0VNRU0KIAkJLyoKIAkJICogVGFrZSBjYXJlIG5vdCB0byBmcmVlIG1lbW1hcCBlbnRyaWVz
IHRoYXQgZG9uJ3QgZXhpc3QgZHVlCkBAIC00OTYsOCArNDk0LDcgQEAgc3RhdGljIHZvaWQgX19p
bml0IGZyZWVfdW51c2VkX21lbW1hcCh2b2lkKQogCQkgKiBtZW1tYXAgZW50cmllcyBhcmUgdmFs
aWQgZnJvbSB0aGUgYmFuayBlbmQgYWxpZ25lZCB0bwogCQkgKiBNQVhfT1JERVJfTlJfUEFHRVMu
CiAJCSAqLwotCQlwcmV2X2VuZCA9IEFMSUdOKF9fcGh5c190b19wZm4ocmVnLT5iYXNlICsgcmVn
LT5zaXplKSwKLQkJCQkgTUFYX09SREVSX05SX1BBR0VTKTsKKwkJcHJldl9lbmQgPSBBTElHTihl
bmQsIE1BWF9PUkRFUl9OUl9QQUdFUyk7CiAJfQogCiAjaWZkZWYgQ09ORklHX1NQQVJTRU1FTQpk
aWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL2tlcm5lbC9mYWR1bXAuYyBiL2FyY2gvcG93ZXJwYy9r
ZXJuZWwvZmFkdW1wLmMKaW5kZXggMTBlYmI0YmY3MWFkLi5lNDY5YjE1MGJlMjEgMTAwNjQ0Ci0t
LSBhL2FyY2gvcG93ZXJwYy9rZXJuZWwvZmFkdW1wLmMKKysrIGIvYXJjaC9wb3dlcnBjL2tlcm5l
bC9mYWR1bXAuYwpAQCAtMTI0MiwxNCArMTI0MiwxNSBAQCBzdGF0aWMgdm9pZCBmYWR1bXBfZnJl
ZV9yZXNlcnZlZF9tZW1vcnkodW5zaWduZWQgbG9uZyBzdGFydF9wZm4sCiAgKi8KIHN0YXRpYyB2
b2lkIGZhZHVtcF9yZWxlYXNlX3Jlc2VydmVkX2FyZWEodTY0IHN0YXJ0LCB1NjQgZW5kKQogewot
CXU2NCB0c3RhcnQsIHRlbmQsIHNwZm4sIGVwZm47Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAq
cmVnOworCXU2NCB0c3RhcnQsIHRlbmQsIHNwZm4sIGVwZm4sIHJlZ19zcGZuLCByZWdfZXBmbiwg
aTsKIAogCXNwZm4gPSBQSFlTX1BGTihzdGFydCk7CiAJZXBmbiA9IFBIWVNfUEZOKGVuZCk7Ci0J
Zm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJdHN0YXJ0ID0gbWF4X3QodTY0LCBz
cGZuLCBtZW1ibG9ja19yZWdpb25fbWVtb3J5X2Jhc2VfcGZuKHJlZykpOwotCQl0ZW5kICAgPSBt
aW5fdCh1NjQsIGVwZm4sIG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfZW5kX3BmbihyZWcpKTsKKwor
CWZvcl9lYWNoX21lbV9wZm5fcmFuZ2UoaSwgTUFYX05VTU5PREVTLCAmcmVnX3NwZm4sICZyZWdf
ZXBmbiwgTlVMTCkgeworCQl0c3RhcnQgPSBtYXhfdCh1NjQsIHNwZm4sIHJlZ19zcGZuKTsKKwkJ
dGVuZCAgID0gbWluX3QodTY0LCBlcGZuLCByZWdfZXBmbik7CisKIAkJaWYgKHRzdGFydCA8IHRl
bmQpIHsKIAkJCWZhZHVtcF9mcmVlX3Jlc2VydmVkX21lbW9yeSh0c3RhcnQsIHRlbmQpOwogCmRp
ZmYgLS1naXQgYS9hcmNoL3Bvd2VycGMvbW0vbWVtLmMgYi9hcmNoL3Bvd2VycGMvbW0vbWVtLmMK
aW5kZXggNDJlMjU4NzRmNWE4Li44MGRmMzI5ZjE4MGUgMTAwNjQ0Ci0tLSBhL2FyY2gvcG93ZXJw
Yy9tbS9tZW0uYworKysgYi9hcmNoL3Bvd2VycGMvbW0vbWVtLmMKQEAgLTE4NCwxNSArMTg0LDE2
IEBAIHZvaWQgX19pbml0IGluaXRtZW1faW5pdCh2b2lkKQogLyogbWFyayBwYWdlcyB0aGF0IGRv
bid0IGV4aXN0IGFzIG5vc2F2ZSAqLwogc3RhdGljIGludCBfX2luaXQgbWFya19ub25yYW1fbm9z
YXZlKHZvaWQpCiB7Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnLCAqcHJldiA9IE5VTEw7
CisJdW5zaWduZWQgbG9uZyBzcGZuLCBlcGZuLCBwcmV2ID0gMDsKKwlpbnQgaTsKIAotCWZvcl9l
YWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCWlmIChwcmV2ICYmCi0JCSAgICBtZW1ibG9j
a19yZWdpb25fbWVtb3J5X2VuZF9wZm4ocHJldikgPCBtZW1ibG9ja19yZWdpb25fbWVtb3J5X2Jh
c2VfcGZuKHJlZykpCi0JCQlyZWdpc3Rlcl9ub3NhdmVfcmVnaW9uKG1lbWJsb2NrX3JlZ2lvbl9t
ZW1vcnlfZW5kX3BmbihwcmV2KSwKLQkJCQkJICAgICAgIG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlf
YmFzZV9wZm4ocmVnKSk7Ci0JCXByZXYgPSByZWc7CisJZm9yX2VhY2hfbWVtX3Bmbl9yYW5nZShp
LCBNQVhfTlVNTk9ERVMsICZzcGZuLCAmZXBmbiwgTlVMTCkgeworCQlpZiAocHJldiAmJiBwcmV2
IDwgc3BmbikKKwkJCXJlZ2lzdGVyX25vc2F2ZV9yZWdpb24ocHJldiwgc3Bmbik7CisKKwkJcHJl
diA9IGVwZm47CiAJfQorCiAJcmV0dXJuIDA7CiB9CiAjZWxzZSAvKiBDT05GSUdfTkVFRF9NVUxU
SVBMRV9OT0RFUyAqLwpkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL251bWEuYyBiL2FyY2gv
cG93ZXJwYy9tbS9udW1hLmMKaW5kZXggMWY2MWZhMjE0OGI1Li5mNGUyMGQ4ZTZjMDIgMTAwNjQ0
Ci0tLSBhL2FyY2gvcG93ZXJwYy9tbS9udW1hLmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL251bWEu
YwpAQCAtODA0LDE3ICs4MDQsMTQgQEAgc3RhdGljIHZvaWQgX19pbml0IHNldHVwX25vbm51bWEo
dm9pZCkKIAl1bnNpZ25lZCBsb25nIHRvdGFsX3JhbSA9IG1lbWJsb2NrX3BoeXNfbWVtX3NpemUo
KTsKIAl1bnNpZ25lZCBsb25nIHN0YXJ0X3BmbiwgZW5kX3BmbjsKIAl1bnNpZ25lZCBpbnQgbmlk
ID0gMDsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJaW50IGk7CiAKIAlwcmludGso
S0VSTl9ERUJVRyAiVG9wIG9mIFJBTTogMHglbHgsIFRvdGFsIFJBTTogMHglbHhcbiIsCiAJICAg
ICAgIHRvcF9vZl9yYW0sIHRvdGFsX3JhbSk7CiAJcHJpbnRrKEtFUk5fREVCVUcgIk1lbW9yeSBo
b2xlIHNpemU6ICVsZE1CXG4iLAogCSAgICAgICAodG9wX29mX3JhbSAtIHRvdGFsX3JhbSkgPj4g
MjApOwogCi0JZm9yX2VhY2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJc3RhcnRfcGZuID0g
bWVtYmxvY2tfcmVnaW9uX21lbW9yeV9iYXNlX3BmbihyZWcpOwotCQllbmRfcGZuID0gbWVtYmxv
Y2tfcmVnaW9uX21lbW9yeV9lbmRfcGZuKHJlZyk7Ci0KKwlmb3JfZWFjaF9tZW1fcGZuX3Jhbmdl
KGksIE1BWF9OVU1OT0RFUywgJnN0YXJ0X3BmbiwgJmVuZF9wZm4sIE5VTEwpIHsKIAkJZmFrZV9u
dW1hX2NyZWF0ZV9uZXdfbm9kZShlbmRfcGZuLCAmbmlkKTsKIAkJbWVtYmxvY2tfc2V0X25vZGUo
UEZOX1BIWVMoc3RhcnRfcGZuKSwKIAkJCQkgIFBGTl9QSFlTKGVuZF9wZm4gLSBzdGFydF9wZm4p
LApkaWZmIC0tZ2l0IGEvYXJjaC9zMzkwL21tL3BhZ2Utc3RhdGVzLmMgYi9hcmNoL3MzOTAvbW0v
cGFnZS1zdGF0ZXMuYwppbmRleCBmYzE0MTg5M2QwMjguLjU2N2M2OWYzMDY5ZSAxMDA2NDQKLS0t
IGEvYXJjaC9zMzkwL21tL3BhZ2Utc3RhdGVzLmMKKysrIGIvYXJjaC9zMzkwL21tL3BhZ2Utc3Rh
dGVzLmMKQEAgLTE4Myw5ICsxODMsOSBAQCBzdGF0aWMgdm9pZCBtYXJrX2tlcm5lbF9wZ2Qodm9p
ZCkKIAogdm9pZCBfX2luaXQgY21tYV9pbml0X25vZGF0KHZvaWQpCiB7Ci0Jc3RydWN0IG1lbWJs
b2NrX3JlZ2lvbiAqcmVnOwogCXN0cnVjdCBwYWdlICpwYWdlOwogCXVuc2lnbmVkIGxvbmcgc3Rh
cnQsIGVuZCwgaXg7CisJaW50IGk7CiAKIAlpZiAoY21tYV9mbGFnIDwgMikKIAkJcmV0dXJuOwpA
QCAtMTkzLDkgKzE5Myw3IEBAIHZvaWQgX19pbml0IGNtbWFfaW5pdF9ub2RhdCh2b2lkKQogCW1h
cmtfa2VybmVsX3BnZCgpOwogCiAJLyogU2V0IGFsbCBrZXJuZWwgcGFnZXMgbm90IHVzZWQgZm9y
IHBhZ2UgdGFibGVzIHRvIHN0YWJsZS9uby1kYXQgKi8KLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1v
cnksIHJlZykgewotCQlzdGFydCA9IG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfYmFzZV9wZm4ocmVn
KTsKLQkJZW5kID0gbWVtYmxvY2tfcmVnaW9uX21lbW9yeV9lbmRfcGZuKHJlZyk7CisJZm9yX2Vh
Y2hfbWVtX3Bmbl9yYW5nZShpLCBNQVhfTlVNTk9ERVMsICZzdGFydCwgJmVuZCwgTlVMTCkgewog
CQlwYWdlID0gcGZuX3RvX3BhZ2Uoc3RhcnQpOwogCQlmb3IgKGl4ID0gc3RhcnQ7IGl4IDwgZW5k
OyBpeCsrLCBwYWdlKyspIHsKIAkJCWlmIChfX3Rlc3RfYW5kX2NsZWFyX2JpdChQR19hcmNoXzEs
ICZwYWdlLT5mbGFncykpCmRpZmYgLS1naXQgYS9hcmNoL3NoL21tL2luaXQuYyBiL2FyY2gvc2gv
bW0vaW5pdC5jCmluZGV4IDQ3MzUxNzZhYjgxMS4uMzM0OGUwYzRkNzY5IDEwMDY0NAotLS0gYS9h
cmNoL3NoL21tL2luaXQuYworKysgYi9hcmNoL3NoL21tL2luaXQuYwpAQCAtMjI2LDE1ICsyMjYs
MTIgQEAgdm9pZCBfX2luaXQgYWxsb2NhdGVfcGdkYXQodW5zaWduZWQgaW50IG5pZCkKIAogc3Rh
dGljIHZvaWQgX19pbml0IGRvX2luaXRfYm9vdG1lbSh2b2lkKQogewotCXN0cnVjdCBtZW1ibG9j
a19yZWdpb24gKnJlZzsKKwl1bnNpZ25lZCBsb25nIHN0YXJ0X3BmbiwgZW5kX3BmbjsKKwlpbnQg
aTsKIAogCS8qIEFkZCBhY3RpdmUgcmVnaW9ucyB3aXRoIHZhbGlkIFBGTnMuICovCi0JZm9yX2Vh
Y2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJdW5zaWduZWQgbG9uZyBzdGFydF9wZm4sIGVu
ZF9wZm47Ci0JCXN0YXJ0X3BmbiA9IG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfYmFzZV9wZm4ocmVn
KTsKLQkJZW5kX3BmbiA9IG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfZW5kX3BmbihyZWcpOworCWZv
cl9lYWNoX21lbV9wZm5fcmFuZ2UoaSwgTUFYX05VTU5PREVTLCAmc3RhcnRfcGZuLCAmZW5kX3Bm
biwgTlVMTCkKIAkJX19hZGRfYWN0aXZlX3JhbmdlKDAsIHN0YXJ0X3BmbiwgZW5kX3Bmbik7Ci0J
fQogCiAJLyogQWxsIG9mIHN5c3RlbSBSQU0gc2l0cyBpbiBub2RlIDAgZm9yIHRoZSBub24tTlVN
QSBjYXNlICovCiAJYWxsb2NhdGVfcGdkYXQoMCk7CmRpZmYgLS1naXQgYS9tbS9tZW1ibG9jay5j
IGIvbW0vbWVtYmxvY2suYwppbmRleCA3OTk1MTNmM2Q2YTkuLjU2N2U0NTRjZTBhMSAxMDA2NDQK
LS0tIGEvbW0vbWVtYmxvY2suYworKysgYi9tbS9tZW1ibG9jay5jCkBAIC0xNjYwLDEyICsxNjYw
LDEwIEBAIHBoeXNfYWRkcl90IF9faW5pdF9tZW1ibG9jayBtZW1ibG9ja19yZXNlcnZlZF9zaXpl
KHZvaWQpCiBwaHlzX2FkZHJfdCBfX2luaXQgbWVtYmxvY2tfbWVtX3NpemUodW5zaWduZWQgbG9u
ZyBsaW1pdF9wZm4pCiB7CiAJdW5zaWduZWQgbG9uZyBwYWdlcyA9IDA7Ci0Jc3RydWN0IG1lbWJs
b2NrX3JlZ2lvbiAqcjsKIAl1bnNpZ25lZCBsb25nIHN0YXJ0X3BmbiwgZW5kX3BmbjsKKwlpbnQg
aTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcikgewotCQlzdGFydF9wZm4gPSBtZW1i
bG9ja19yZWdpb25fbWVtb3J5X2Jhc2VfcGZuKHIpOwotCQllbmRfcGZuID0gbWVtYmxvY2tfcmVn
aW9uX21lbW9yeV9lbmRfcGZuKHIpOworCWZvcl9lYWNoX21lbV9wZm5fcmFuZ2UoaSwgTUFYX05V
TU5PREVTLCAmc3RhcnRfcGZuLCAmZW5kX3BmbiwgTlVMTCkgewogCQlzdGFydF9wZm4gPSBtaW5f
dCh1bnNpZ25lZCBsb25nLCBzdGFydF9wZm4sIGxpbWl0X3Bmbik7CiAJCWVuZF9wZm4gPSBtaW5f
dCh1bnNpZ25lZCBsb25nLCBlbmRfcGZuLCBsaW1pdF9wZm4pOwogCQlwYWdlcyArPSBlbmRfcGZu
IC0gc3RhcnRfcGZuOwpkaWZmIC0tZ2l0IGEvbW0vc3BhcnNlLmMgYi9tbS9zcGFyc2UuYwppbmRl
eCBmY2MzZDE3NmYxZWEuLmIyNWFkOGU2NDgzOSAxMDA2NDQKLS0tIGEvbW0vc3BhcnNlLmMKKysr
IGIvbW0vc3BhcnNlLmMKQEAgLTI5MSwxMyArMjkxLDExIEBAIHN0YXRpYyB2b2lkIF9faW5pdCBt
ZW1vcnlfcHJlc2VudChpbnQgbmlkLCB1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25n
IGVuCiAgKi8KIHN0YXRpYyB2b2lkIF9faW5pdCBtZW1ibG9ja3NfcHJlc2VudCh2b2lkKQogewot
CXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKKwl1bnNpZ25lZCBsb25nIHN0YXJ0LCBlbmQ7
CisJaW50IGksIG5pZDsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCW1l
bW9yeV9wcmVzZW50KG1lbWJsb2NrX2dldF9yZWdpb25fbm9kZShyZWcpLAotCQkJICAgICAgIG1l
bWJsb2NrX3JlZ2lvbl9tZW1vcnlfYmFzZV9wZm4ocmVnKSwKLQkJCSAgICAgICBtZW1ibG9ja19y
ZWdpb25fbWVtb3J5X2VuZF9wZm4ocmVnKSk7Ci0JfQorCWZvcl9lYWNoX21lbV9wZm5fcmFuZ2Uo
aSwgTUFYX05VTU5PREVTLCAmc3RhcnQsICZlbmQsICZuaWQpCisJCW1lbW9yeV9wcmVzZW50KG5p
ZCwgc3RhcnQsIGVuZCk7CiB9CiAKIC8qCi0tIAoyLjI2LjIKCl9fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcgbGlzdApPcGVuUklT
Q0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29yZXMub3JnL2xpc3Rp
bmZvL29wZW5yaXNjCg==
