Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 2DCCE1E504C
	for <lists+openrisc@lfdr.de>; Wed, 27 May 2020 23:19:42 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id DCDC420CB7;
	Wed, 27 May 2020 23:19:41 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id D459820828
 for <openrisc@lists.librecores.org>; Fri, 15 May 2020 20:40:16 +0200 (CEST)
Received: from localhost.localdomain (c-73-231-172-41.hsd1.ca.comcast.net
 [73.231.172.41])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id CDE7E20756;
 Fri, 15 May 2020 18:40:12 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1589568014;
 bh=BBBv3m+Y6Rx8GHHOJv7nr9EuTcBH1QfMr6G5KYr+URM=;
 h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
 b=ZPl7ZpmnamMwzomzyEFEaeSO67QglMkj0xknYAgtqCmlhD7cwufkcN3NT35Urm73F
 ZUuvtpiSLLaOSTyMOoZOk8CdaxrxKhZmcjKc792Z0Qnm7OsXY1fh8xF/SgC75ZsPCu
 MTnnuYZnjYNmpEZ2EjMrAx+7dmNlYxsF0zOLlOyg=
Date: Fri, 15 May 2020 11:40:12 -0700
From: Andrew Morton <akpm@linux-foundation.org>
To: Mike Rapoport <rppt@kernel.org>
Message-Id: <20200515114012.49f45aa01efb7d8b918bc0f5@linux-foundation.org>
In-Reply-To: <20200414153455.21744-4-rppt@kernel.org>
References: <20200414153455.21744-1-rppt@kernel.org>
 <20200414153455.21744-4-rppt@kernel.org>
X-Mailer: Sylpheed 3.5.1 (GTK+ 2.24.31; x86_64-pc-linux-gnu)
Mime-Version: 1.0
X-Mailman-Approved-At: Wed, 27 May 2020 23:18:59 +0200
Subject: Re: [OpenRISC] [PATCH v4 03/14] arm64: add support for folded p4d
 page tables
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 Geert Uytterhoeven <geert+renesas@glider.be>, linux-sh@vger.kernel.org,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>, linux-mm@kvack.org,
 Paul Mackerras <paulus@samba.org>, linux-hexagon@vger.kernel.org,
 Will Deacon <will@kernel.org>, kvmarm@lists.cs.columbia.edu,
 Jonas Bonn <jonas@southpole.se>, linux-arch@vger.kernel.org,
 Brian Cain <bcain@codeaurora.org>, Marc Zyngier <maz@kernel.org>,
 Russell King <linux@armlinux.org.uk>, Ley Foon Tan <ley.foon.tan@intel.com>,
 Mike Rapoport <rppt@linux.ibm.com>, Catalin Marinas <catalin.marinas@arm.com>,
 Julien Thierry <julien.thierry.kdev@gmail.com>,
 uclinux-h8-devel@lists.sourceforge.jp, Fenghua Yu <fenghua.yu@intel.com>,
 Arnd Bergmann <arnd@arndb.de>, Suzuki K Poulose <suzuki.poulose@arm.com>,
 kvm-ppc@vger.kernel.org, openrisc@lists.librecores.org,
 Guan Xuetao <gxt@pku.edu.cn>, linux-arm-kernel@lists.infradead.org,
 Christophe Leroy <christophe.leroy@c-s.fr>, Tony Luck <tony.luck@intel.com>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, linux-kernel@vger.kernel.org,
 James Morse <james.morse@arm.com>, Michael Ellerman <mpe@ellerman.id.au>,
 nios2-dev@lists.rocketboards.org, linuxppc-dev@lists.ozlabs.org
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

T24gVHVlLCAxNCBBcHIgMjAyMCAxODozNDo0NCArMDMwMCBNaWtlIFJhcG9wb3J0IDxycHB0QGtl
cm5lbC5vcmc+IHdyb3RlOgoKPiBJbXBsZW1lbnQgcHJpbWl0aXZlcyBuZWNlc3NhcnkgZm9yIHRo
ZSA0dGggbGV2ZWwgZm9sZGluZywgYWRkIHdhbGtzIG9mIHA0ZAo+IGxldmVsIHdoZXJlIGFwcHJv
cHJpYXRlLCByZXBsYWNlIDVsZXZlbC1maXh1cC5oIHdpdGggcGd0YWJsZS1ub3A0ZC5oIGFuZAo+
IHJlbW92ZSBfX0FSQ0hfVVNFXzVMRVZFTF9IQUNLLgoKVGhpcyBuZWVkZWQgc29tZSByZXdvcmsg
ZHVlIHRvIGFybSBjaGFuZ2VzIGluIGxpbnV4LW5leHQuICBQbGVhc2UgY2hlY2sKbXkgaGFuZGl3
b3JrIGFuZCB0ZXN0IGl0IG9uY2UgSSd2ZSBtZXJnZWQgdGhpcyBpbnRvIGxpbnV4LW5leHQ/CgpS
ZWplY3RzIHdlcmUKCi0tLSBhcmNoL2FybTY0L2luY2x1ZGUvYXNtL3BndGFibGUuaH5hcm02NC1h
ZGQtc3VwcG9ydC1mb3ItZm9sZGVkLXA0ZC1wYWdlLXRhYmxlcworKysgYXJjaC9hcm02NC9pbmNs
dWRlL2FzbS9wZ3RhYmxlLmgKQEAgLTU5Niw0OSArNjA0LDUwIEBAIHN0YXRpYyBpbmxpbmUgcGh5
c19hZGRyX3QgcHVkX3BhZ2VfcGFkZHIKIAogI2RlZmluZSBwdWRfRVJST1IocHVkKQkJX19wdWRf
ZXJyb3IoX19GSUxFX18sIF9fTElORV9fLCBwdWRfdmFsKHB1ZCkpCiAKLSNkZWZpbmUgcGdkX25v
bmUocGdkKQkJKCFwZ2RfdmFsKHBnZCkpCi0jZGVmaW5lIHBnZF9iYWQocGdkKQkJKCEocGdkX3Zh
bChwZ2QpICYgMikpCi0jZGVmaW5lIHBnZF9wcmVzZW50KHBnZCkJKHBnZF92YWwocGdkKSkKKyNk
ZWZpbmUgcDRkX25vbmUocDRkKQkJKCFwNGRfdmFsKHA0ZCkpCisjZGVmaW5lIHA0ZF9iYWQocDRk
KQkJKCEocDRkX3ZhbChwNGQpICYgMikpCisjZGVmaW5lIHA0ZF9wcmVzZW50KHA0ZCkJKHA0ZF92
YWwocDRkKSkKIAotc3RhdGljIGlubGluZSB2b2lkIHNldF9wZ2QocGdkX3QgKnBnZHAsIHBnZF90
IHBnZCkKK3N0YXRpYyBpbmxpbmUgdm9pZCBzZXRfcDRkKHA0ZF90ICpwNGRwLCBwNGRfdCBwNGQp
CiB7Ci0JaWYgKGluX3N3YXBwZXJfcGdkaXIocGdkcCkpIHsKLQkJc2V0X3N3YXBwZXJfcGdkKHBn
ZHAsIHBnZCk7CisJaWYgKGluX3N3YXBwZXJfcGdkaXIocDRkcCkpIHsKKwkJc2V0X3N3YXBwZXJf
cGdkKChwZ2RfdCAqKXA0ZHAsIF9fcGdkKHA0ZF92YWwocDRkKSkpOwogCQlyZXR1cm47CiAJfQog
Ci0JV1JJVEVfT05DRSgqcGdkcCwgcGdkKTsKKwlXUklURV9PTkNFKCpwNGRwLCBwNGQpOwogCWRz
Yihpc2hzdCk7CiAJaXNiKCk7CiB9CiAKLXN0YXRpYyBpbmxpbmUgdm9pZCBwZ2RfY2xlYXIocGdk
X3QgKnBnZHApCitzdGF0aWMgaW5saW5lIHZvaWQgcDRkX2NsZWFyKHA0ZF90ICpwNGRwKQogewot
CXNldF9wZ2QocGdkcCwgX19wZ2QoMCkpOworCXNldF9wNGQocDRkcCwgX19wNGQoMCkpOwogfQog
Ci1zdGF0aWMgaW5saW5lIHBoeXNfYWRkcl90IHBnZF9wYWdlX3BhZGRyKHBnZF90IHBnZCkKK3N0
YXRpYyBpbmxpbmUgcGh5c19hZGRyX3QgcDRkX3BhZ2VfcGFkZHIocDRkX3QgcDRkKQogewotCXJl
dHVybiBfX3BnZF90b19waHlzKHBnZCk7CisJcmV0dXJuIF9fcDRkX3RvX3BoeXMocDRkKTsKIH0K
IAogLyogRmluZCBhbiBlbnRyeSBpbiB0aGUgZnJzdC1sZXZlbCBwYWdlIHRhYmxlLiAqLwogI2Rl
ZmluZSBwdWRfaW5kZXgoYWRkcikJCSgoKGFkZHIpID4+IFBVRF9TSElGVCkgJiAoUFRSU19QRVJf
UFVEIC0gMSkpCiAKLSNkZWZpbmUgcHVkX29mZnNldF9waHlzKGRpciwgYWRkcikJKHBnZF9wYWdl
X3BhZGRyKFJFQURfT05DRSgqKGRpcikpKSArIHB1ZF9pbmRleChhZGRyKSAqIHNpemVvZihwdWRf
dCkpCisjZGVmaW5lIHB1ZF9vZmZzZXRfcGh5cyhkaXIsIGFkZHIpCShwNGRfcGFnZV9wYWRkcihS
RUFEX09OQ0UoKihkaXIpKSkgKyBwdWRfaW5kZXgoYWRkcikgKiBzaXplb2YocHVkX3QpKQogI2Rl
ZmluZSBwdWRfb2Zmc2V0KGRpciwgYWRkcikJCSgocHVkX3QgKilfX3ZhKHB1ZF9vZmZzZXRfcGh5
cygoZGlyKSwgKGFkZHIpKSkpCiAKICNkZWZpbmUgcHVkX3NldF9maXhtYXAoYWRkcikJCSgocHVk
X3QgKilzZXRfZml4bWFwX29mZnNldChGSVhfUFVELCBhZGRyKSkKLSNkZWZpbmUgcHVkX3NldF9m
aXhtYXBfb2Zmc2V0KHBnZCwgYWRkcikJcHVkX3NldF9maXhtYXAocHVkX29mZnNldF9waHlzKHBn
ZCwgYWRkcikpCisjZGVmaW5lIHB1ZF9zZXRfZml4bWFwX29mZnNldChwNGQsIGFkZHIpCXB1ZF9z
ZXRfZml4bWFwKHB1ZF9vZmZzZXRfcGh5cyhwNGQsIGFkZHIpKQogI2RlZmluZSBwdWRfY2xlYXJf
Zml4bWFwKCkJCWNsZWFyX2ZpeG1hcChGSVhfUFVEKQogCi0jZGVmaW5lIHBnZF9wYWdlKHBnZCkJ
CXBmbl90b19wYWdlKF9fcGh5c190b19wZm4oX19wZ2RfdG9fcGh5cyhwZ2QpKSkKKyNkZWZpbmUg
cDRkX3BhZ2UocDRkKQkJcGZuX3RvX3BhZ2UoX19waHlzX3RvX3BmbihfX3A0ZF90b19waHlzKHA0
ZCkpKQogCiAvKiB1c2UgT05MWSBmb3Igc3RhdGljYWxseSBhbGxvY2F0ZWQgdHJhbnNsYXRpb24g
dGFibGVzICovCiAjZGVmaW5lIHB1ZF9vZmZzZXRfa2ltZyhkaXIsYWRkcikJKChwdWRfdCAqKV9f
cGh5c190b19raW1nKHB1ZF9vZmZzZXRfcGh5cygoZGlyKSwgKGFkZHIpKSkpCiAKICNlbHNlCiAK
KyNkZWZpbmUgcDRkX3BhZ2VfcGFkZHIocDRkKQkoeyBCVUlMRF9CVUcoKTsgMDt9KQogI2RlZmlu
ZSBwZ2RfcGFnZV9wYWRkcihwZ2QpCSh7IEJVSUxEX0JVRygpOyAwO30pCiAKIC8qIE1hdGNoIHB1
ZF9vZmZzZXQgZm9sZGluZyBpbiA8YXNtL2dlbmVyaWMvcGd0YWJsZS1ub3B1ZC5oPiAqLwoKCgph
bmQKCi0tLSBhcmNoL2FybTY0L2t2bS9tbXUuY35hcm02NC1hZGQtc3VwcG9ydC1mb3ItZm9sZGVk
LXA0ZC1wYWdlLXRhYmxlcworKysgYXJjaC9hcm02NC9rdm0vbW11LmMKQEAgLTQ2OSw3ICs1MTcs
NyBAQCBzdGF0aWMgdm9pZCBzdGFnZTJfZmx1c2hfbWVtc2xvdChzdHJ1Y3QKIAlkbyB7CiAJCW5l
eHQgPSBzdGFnZTJfcGdkX2FkZHJfZW5kKGt2bSwgYWRkciwgZW5kKTsKIAkJaWYgKCFzdGFnZTJf
cGdkX25vbmUoa3ZtLCAqcGdkKSkKLQkJCXN0YWdlMl9mbHVzaF9wdWRzKGt2bSwgcGdkLCBhZGRy
LCBuZXh0KTsKKwkJCXN0YWdlMl9mbHVzaF9wNGRzKGt2bSwgcGdkLCBhZGRyLCBuZXh0KTsKIAl9
IHdoaWxlIChwZ2QrKywgYWRkciA9IG5leHQsIGFkZHIgIT0gZW5kKTsKIH0KIAoKClJlc3VsdDoK
CkZyb206IE1pa2UgUmFwb3BvcnQgPHJwcHRAbGludXguaWJtLmNvbT4KU3ViamVjdDogYXJtNjQ6
IGFkZCBzdXBwb3J0IGZvciBmb2xkZWQgcDRkIHBhZ2UgdGFibGVzCgpJbXBsZW1lbnQgcHJpbWl0
aXZlcyBuZWNlc3NhcnkgZm9yIHRoZSA0dGggbGV2ZWwgZm9sZGluZywgYWRkIHdhbGtzIG9mIHA0
ZApsZXZlbCB3aGVyZSBhcHByb3ByaWF0ZSwgcmVwbGFjZSA1bGV2ZWwtZml4dXAuaCB3aXRoIHBn
dGFibGUtbm9wNGQuaCBhbmQKcmVtb3ZlIF9fQVJDSF9VU0VfNUxFVkVMX0hBQ0suCgpMaW5rOiBo
dHRwOi8vbGttbC5rZXJuZWwub3JnL3IvMjAyMDA0MTQxNTM0NTUuMjE3NDQtNC1ycHB0QGtlcm5l
bC5vcmcKU2lnbmVkLW9mZi1ieTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgpD
YzogQXJuZCBCZXJnbWFubiA8YXJuZEBhcm5kYi5kZT4KQ2M6IEJlbmphbWluIEhlcnJlbnNjaG1p
ZHQgPGJlbmhAa2VybmVsLmNyYXNoaW5nLm9yZz4KQ2M6IEJyaWFuIENhaW4gPGJjYWluQGNvZGVh
dXJvcmEub3JnPgpDYzogQ2F0YWxpbiBNYXJpbmFzIDxjYXRhbGluLm1hcmluYXNAYXJtLmNvbT4K
Q2M6IENocmlzdG9waGUgTGVyb3kgPGNocmlzdG9waGUubGVyb3lAYy1zLmZyPgpDYzogRmVuZ2h1
YSBZdSA8ZmVuZ2h1YS55dUBpbnRlbC5jb20+CkNjOiBHZWVydCBVeXR0ZXJob2V2ZW4gPGdlZXJ0
K3JlbmVzYXNAZ2xpZGVyLmJlPgpDYzogR3VhbiBYdWV0YW8gPGd4dEBwa3UuZWR1LmNuPgpDYzog
SmFtZXMgTW9yc2UgPGphbWVzLm1vcnNlQGFybS5jb20+CkNjOiBKb25hcyBCb25uIDxqb25hc0Bz
b3V0aHBvbGUuc2U+CkNjOiBKdWxpZW4gVGhpZXJyeSA8anVsaWVuLnRoaWVycnkua2RldkBnbWFp
bC5jb20+CkNjOiBMZXkgRm9vbiBUYW4gPGxleS5mb29uLnRhbkBpbnRlbC5jb20+CkNjOiBNYXJj
IFp5bmdpZXIgPG1hekBrZXJuZWwub3JnPgpDYzogTWljaGFlbCBFbGxlcm1hbiA8bXBlQGVsbGVy
bWFuLmlkLmF1PgpDYzogUGF1bCBNYWNrZXJyYXMgPHBhdWx1c0BzYW1iYS5vcmc+CkNjOiBSaWNo
IEZlbGtlciA8ZGFsaWFzQGxpYmMub3JnPgpDYzogUnVzc2VsbCBLaW5nIDxsaW51eEBhcm1saW51
eC5vcmcudWs+CkNjOiBTdGFmZm9yZCBIb3JuZSA8c2hvcm5lQGdtYWlsLmNvbT4KQ2M6IFN0ZWZh
biBLcmlzdGlhbnNzb24gPHN0ZWZhbi5rcmlzdGlhbnNzb25Ac2F1bmFsYWh0aS5maT4KQ2M6IFN1
enVraSBLIFBvdWxvc2UgPHN1enVraS5wb3Vsb3NlQGFybS5jb20+CkNjOiBUb255IEx1Y2sgPHRv
bnkubHVja0BpbnRlbC5jb20+CkNjOiBXaWxsIERlYWNvbiA8d2lsbEBrZXJuZWwub3JnPgpDYzog
WW9zaGlub3JpIFNhdG8gPHlzYXRvQHVzZXJzLnNvdXJjZWZvcmdlLmpwPgpTaWduZWQtb2ZmLWJ5
OiBBbmRyZXcgTW9ydG9uIDxha3BtQGxpbnV4LWZvdW5kYXRpb24ub3JnPgotLS0KCiBhcmNoL2Fy
bTY0L2luY2x1ZGUvYXNtL2t2bV9tbXUuaCAgICAgICAgfCAgIDEwIC0KIGFyY2gvYXJtNjQvaW5j
bHVkZS9hc20vcGdhbGxvYy5oICAgICAgICB8ICAgMTAgLQogYXJjaC9hcm02NC9pbmNsdWRlL2Fz
bS9wZ3RhYmxlLXR5cGVzLmggIHwgICAgNSAKIGFyY2gvYXJtNjQvaW5jbHVkZS9hc20vcGd0YWJs
ZS5oICAgICAgICB8ICAgMzcgKystCiBhcmNoL2FybTY0L2luY2x1ZGUvYXNtL3N0YWdlMl9wZ3Rh
YmxlLmggfCAgIDQ4ICsrKy0tCiBhcmNoL2FybTY0L2tlcm5lbC9oaWJlcm5hdGUuYyAgICAgICAg
ICAgfCAgIDQ0ICsrKy0KIGFyY2gvYXJtNjQva3ZtL21tdS5jICAgICAgICAgICAgICAgICAgICB8
ICAyMDkgKysrKysrKysrKysrKysrKysrLS0tLQogYXJjaC9hcm02NC9tbS9mYXVsdC5jICAgICAg
ICAgICAgICAgICAgIHwgICAgOSAKIGFyY2gvYXJtNjQvbW0vaHVnZXRsYnBhZ2UuYyAgICAgICAg
ICAgICB8ICAgMTUgKwogYXJjaC9hcm02NC9tbS9rYXNhbl9pbml0LmMgICAgICAgICAgICAgIHwg
ICAyNiArKwogYXJjaC9hcm02NC9tbS9tbXUuYyAgICAgICAgICAgICAgICAgICAgIHwgICA1MiAr
KystLQogYXJjaC9hcm02NC9tbS9wYWdlYXR0ci5jICAgICAgICAgICAgICAgIHwgICAgNyAKIDEy
IGZpbGVzIGNoYW5nZWQsIDM2OCBpbnNlcnRpb25zKCspLCAxMDQgZGVsZXRpb25zKC0pCgotLS0g
YS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL2t2bV9tbXUuaH5hcm02NC1hZGQtc3VwcG9ydC1mb3It
Zm9sZGVkLXA0ZC1wYWdlLXRhYmxlcworKysgYS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL2t2bV9t
bXUuaApAQCAtMTcyLDggKzE3Miw4IEBAIHZvaWQga3ZtX2NsZWFyX2h5cF9pZG1hcCh2b2lkKTsK
IAlfX3BtZChfX3BoeXNfdG9fcG1kX3ZhbChfX3BhKHB0ZXApKSB8IFBNRF9UWVBFX1RBQkxFKQog
I2RlZmluZSBrdm1fbWtfcHVkKHBtZHApCQkJCQlcCiAJX19wdWQoX19waHlzX3RvX3B1ZF92YWwo
X19wYShwbWRwKSkgfCBQTURfVFlQRV9UQUJMRSkKLSNkZWZpbmUga3ZtX21rX3BnZChwdWRwKQkJ
CQkJXAotCV9fcGdkKF9fcGh5c190b19wZ2RfdmFsKF9fcGEocHVkcCkpIHwgUFVEX1RZUEVfVEFC
TEUpCisjZGVmaW5lIGt2bV9ta19wNGQocG1kcCkJCQkJCVwKKwlfX3A0ZChfX3BoeXNfdG9fcDRk
X3ZhbChfX3BhKHBtZHApKSB8IFBVRF9UWVBFX1RBQkxFKQogCiAjZGVmaW5lIGt2bV9zZXRfcHVk
KHB1ZHAsIHB1ZCkJCXNldF9wdWQocHVkcCwgcHVkKQogCkBAIC0yOTksNiArMjk5LDEyIEBAIHN0
YXRpYyBpbmxpbmUgYm9vbCBrdm1fczJwdWRfeW91bmcocHVkX3QKICNkZWZpbmUgaHlwX3B1ZF90
YWJsZV9lbXB0eShwdWRwKSBrdm1fcGFnZV9lbXB0eShwdWRwKQogI2VuZGlmCiAKKyNpZmRlZiBf
X1BBR0VUQUJMRV9QNERfRk9MREVECisjZGVmaW5lIGh5cF9wNGRfdGFibGVfZW1wdHkocDRkcCkg
KDApCisjZWxzZQorI2RlZmluZSBoeXBfcDRkX3RhYmxlX2VtcHR5KHA0ZHApIGt2bV9wYWdlX2Vt
cHR5KHA0ZHApCisjZW5kaWYKKwogc3RydWN0IGt2bTsKIAogI2RlZmluZSBrdm1fZmx1c2hfZGNh
Y2hlX3RvX3BvYyhhLGwpCV9fZmx1c2hfZGNhY2hlX2FyZWEoKGEpLCAobCkpCi0tLSBhL2FyY2gv
YXJtNjQvaW5jbHVkZS9hc20vcGdhbGxvYy5ofmFybTY0LWFkZC1zdXBwb3J0LWZvci1mb2xkZWQt
cDRkLXBhZ2UtdGFibGVzCisrKyBhL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20vcGdhbGxvYy5oCkBA
IC03MywxNyArNzMsMTcgQEAgc3RhdGljIGlubGluZSB2b2lkIHB1ZF9mcmVlKHN0cnVjdCBtbV9z
dAogCWZyZWVfcGFnZSgodW5zaWduZWQgbG9uZylwdWRwKTsKIH0KIAotc3RhdGljIGlubGluZSB2
b2lkIF9fcGdkX3BvcHVsYXRlKHBnZF90ICpwZ2RwLCBwaHlzX2FkZHJfdCBwdWRwLCBwZ2R2YWxf
dCBwcm90KQorc3RhdGljIGlubGluZSB2b2lkIF9fcDRkX3BvcHVsYXRlKHA0ZF90ICpwNGRwLCBw
aHlzX2FkZHJfdCBwdWRwLCBwNGR2YWxfdCBwcm90KQogewotCXNldF9wZ2QocGdkcCwgX19wZ2Qo
X19waHlzX3RvX3BnZF92YWwocHVkcCkgfCBwcm90KSk7CisJc2V0X3A0ZChwNGRwLCBfX3A0ZChf
X3BoeXNfdG9fcDRkX3ZhbChwdWRwKSB8IHByb3QpKTsKIH0KIAotc3RhdGljIGlubGluZSB2b2lk
IHBnZF9wb3B1bGF0ZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgcGdkX3QgKnBnZHAsIHB1ZF90ICpw
dWRwKQorc3RhdGljIGlubGluZSB2b2lkIHA0ZF9wb3B1bGF0ZShzdHJ1Y3QgbW1fc3RydWN0ICpt
bSwgcDRkX3QgKnA0ZHAsIHB1ZF90ICpwdWRwKQogewotCV9fcGdkX3BvcHVsYXRlKHBnZHAsIF9f
cGEocHVkcCksIFBVRF9UWVBFX1RBQkxFKTsKKwlfX3A0ZF9wb3B1bGF0ZShwNGRwLCBfX3BhKHB1
ZHApLCBQVURfVFlQRV9UQUJMRSk7CiB9CiAjZWxzZQotc3RhdGljIGlubGluZSB2b2lkIF9fcGdk
X3BvcHVsYXRlKHBnZF90ICpwZ2RwLCBwaHlzX2FkZHJfdCBwdWRwLCBwZ2R2YWxfdCBwcm90KQor
c3RhdGljIGlubGluZSB2b2lkIF9fcDRkX3BvcHVsYXRlKHA0ZF90ICpwNGRwLCBwaHlzX2FkZHJf
dCBwdWRwLCBwNGR2YWxfdCBwcm90KQogewogCUJVSUxEX0JVRygpOwogfQotLS0gYS9hcmNoL2Fy
bTY0L2luY2x1ZGUvYXNtL3BndGFibGUuaH5hcm02NC1hZGQtc3VwcG9ydC1mb3ItZm9sZGVkLXA0
ZC1wYWdlLXRhYmxlcworKysgYS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3BndGFibGUuaApAQCAt
Mjk4LDYgKzI5OCwxMSBAQCBzdGF0aWMgaW5saW5lIHB0ZV90IHBnZF9wdGUocGdkX3QgcGdkKQog
CXJldHVybiBfX3B0ZShwZ2RfdmFsKHBnZCkpOwogfQogCitzdGF0aWMgaW5saW5lIHB0ZV90IHA0
ZF9wdGUocDRkX3QgcDRkKQoreworCXJldHVybiBfX3B0ZShwNGRfdmFsKHA0ZCkpOworfQorCiBz
dGF0aWMgaW5saW5lIHB0ZV90IHB1ZF9wdGUocHVkX3QgcHVkKQogewogCXJldHVybiBfX3B0ZShw
dWRfdmFsKHB1ZCkpOwpAQCAtNDAxLDYgKzQwNiw5IEBAIHN0YXRpYyBpbmxpbmUgcG1kX3QgcG1k
X21rZGV2bWFwKHBtZF90IHAKIAogI2RlZmluZSBzZXRfcG1kX2F0KG1tLCBhZGRyLCBwbWRwLCBw
bWQpCXNldF9wdGVfYXQobW0sIGFkZHIsIChwdGVfdCAqKXBtZHAsIHBtZF9wdGUocG1kKSkKIAor
I2RlZmluZSBfX3A0ZF90b19waHlzKHA0ZCkJX19wdGVfdG9fcGh5cyhwNGRfcHRlKHA0ZCkpCisj
ZGVmaW5lIF9fcGh5c190b19wNGRfdmFsKHBoeXMpCV9fcGh5c190b19wdGVfdmFsKHBoeXMpCisK
ICNkZWZpbmUgX19wZ2RfdG9fcGh5cyhwZ2QpCV9fcHRlX3RvX3BoeXMocGdkX3B0ZShwZ2QpKQog
I2RlZmluZSBfX3BoeXNfdG9fcGdkX3ZhbChwaHlzKQlfX3BoeXNfdG9fcHRlX3ZhbChwaHlzKQog
CkBAIC01OTIsNDkgKzYwMCw1MCBAQCBzdGF0aWMgaW5saW5lIHBoeXNfYWRkcl90IHB1ZF9wYWdl
X3BhZGRyCiAKICNkZWZpbmUgcHVkX0VSUk9SKHB1ZCkJCV9fcHVkX2Vycm9yKF9fRklMRV9fLCBf
X0xJTkVfXywgcHVkX3ZhbChwdWQpKQogCi0jZGVmaW5lIHBnZF9ub25lKHBnZCkJCSghcGdkX3Zh
bChwZ2QpKQotI2RlZmluZSBwZ2RfYmFkKHBnZCkJCSghKHBnZF92YWwocGdkKSAmIDIpKQotI2Rl
ZmluZSBwZ2RfcHJlc2VudChwZ2QpCShwZ2RfdmFsKHBnZCkpCisjZGVmaW5lIHA0ZF9ub25lKHA0
ZCkJCSghcDRkX3ZhbChwNGQpKQorI2RlZmluZSBwNGRfYmFkKHA0ZCkJCSghKHA0ZF92YWwocDRk
KSAmIDIpKQorI2RlZmluZSBwNGRfcHJlc2VudChwNGQpCShwNGRfdmFsKHA0ZCkpCiAKLXN0YXRp
YyBpbmxpbmUgdm9pZCBzZXRfcGdkKHBnZF90ICpwZ2RwLCBwZ2RfdCBwZ2QpCitzdGF0aWMgaW5s
aW5lIHZvaWQgc2V0X3A0ZChwNGRfdCAqcDRkcCwgcDRkX3QgcDRkKQogewotCWlmIChpbl9zd2Fw
cGVyX3BnZGlyKHBnZHApKSB7Ci0JCXNldF9zd2FwcGVyX3BnZChwZ2RwLCBwZ2QpOworCWlmIChp
bl9zd2FwcGVyX3BnZGlyKHA0ZHApKSB7CisJCXNldF9zd2FwcGVyX3BnZCgocGdkX3QgKilwNGRw
LCBfX3BnZChwNGRfdmFsKHA0ZCkpKTsKIAkJcmV0dXJuOwogCX0KIAotCVdSSVRFX09OQ0UoKnBn
ZHAsIHBnZCk7CisJV1JJVEVfT05DRSgqcDRkcCwgcDRkKTsKIAlkc2IoaXNoc3QpOwogCWlzYigp
OwogfQogCi1zdGF0aWMgaW5saW5lIHZvaWQgcGdkX2NsZWFyKHBnZF90ICpwZ2RwKQorc3RhdGlj
IGlubGluZSB2b2lkIHA0ZF9jbGVhcihwNGRfdCAqcDRkcCkKIHsKLQlzZXRfcGdkKHBnZHAsIF9f
cGdkKDApKTsKKwlzZXRfcDRkKHA0ZHAsIF9fcDRkKDApKTsKIH0KIAotc3RhdGljIGlubGluZSBw
aHlzX2FkZHJfdCBwZ2RfcGFnZV9wYWRkcihwZ2RfdCBwZ2QpCitzdGF0aWMgaW5saW5lIHBoeXNf
YWRkcl90IHA0ZF9wYWdlX3BhZGRyKHA0ZF90IHA0ZCkKIHsKLQlyZXR1cm4gX19wZ2RfdG9fcGh5
cyhwZ2QpOworCXJldHVybiBfX3A0ZF90b19waHlzKHA0ZCk7CiB9CiAKIC8qIEZpbmQgYW4gZW50
cnkgaW4gdGhlIGZyc3QtbGV2ZWwgcGFnZSB0YWJsZS4gKi8KICNkZWZpbmUgcHVkX2luZGV4KGFk
ZHIpCQkoKChhZGRyKSA+PiBQVURfU0hJRlQpICYgKFBUUlNfUEVSX1BVRCAtIDEpKQogCi0jZGVm
aW5lIHB1ZF9vZmZzZXRfcGh5cyhkaXIsIGFkZHIpCShwZ2RfcGFnZV9wYWRkcihSRUFEX09OQ0Uo
KihkaXIpKSkgKyBwdWRfaW5kZXgoYWRkcikgKiBzaXplb2YocHVkX3QpKQorI2RlZmluZSBwdWRf
b2Zmc2V0X3BoeXMoZGlyLCBhZGRyKQkocDRkX3BhZ2VfcGFkZHIoUkVBRF9PTkNFKCooZGlyKSkp
ICsgcHVkX2luZGV4KGFkZHIpICogc2l6ZW9mKHB1ZF90KSkKICNkZWZpbmUgcHVkX29mZnNldChk
aXIsIGFkZHIpCQkoKHB1ZF90ICopX192YShwdWRfb2Zmc2V0X3BoeXMoKGRpciksIChhZGRyKSkp
KQogCiAjZGVmaW5lIHB1ZF9zZXRfZml4bWFwKGFkZHIpCQkoKHB1ZF90ICopc2V0X2ZpeG1hcF9v
ZmZzZXQoRklYX1BVRCwgYWRkcikpCi0jZGVmaW5lIHB1ZF9zZXRfZml4bWFwX29mZnNldChwZ2Qs
IGFkZHIpCXB1ZF9zZXRfZml4bWFwKHB1ZF9vZmZzZXRfcGh5cyhwZ2QsIGFkZHIpKQorI2RlZmlu
ZSBwdWRfc2V0X2ZpeG1hcF9vZmZzZXQocDRkLCBhZGRyKQlwdWRfc2V0X2ZpeG1hcChwdWRfb2Zm
c2V0X3BoeXMocDRkLCBhZGRyKSkKICNkZWZpbmUgcHVkX2NsZWFyX2ZpeG1hcCgpCQljbGVhcl9m
aXhtYXAoRklYX1BVRCkKIAotI2RlZmluZSBwZ2RfcGFnZShwZ2QpCQkJcGh5c190b19wYWdlKF9f
cGdkX3RvX3BoeXMocGdkKSkKKyNkZWZpbmUgcDRkX3BhZ2UocDRkKQkJcGZuX3RvX3BhZ2UoX19w
aHlzX3RvX3BmbihfX3A0ZF90b19waHlzKHA0ZCkpKQogCiAvKiB1c2UgT05MWSBmb3Igc3RhdGlj
YWxseSBhbGxvY2F0ZWQgdHJhbnNsYXRpb24gdGFibGVzICovCiAjZGVmaW5lIHB1ZF9vZmZzZXRf
a2ltZyhkaXIsYWRkcikJKChwdWRfdCAqKV9fcGh5c190b19raW1nKHB1ZF9vZmZzZXRfcGh5cygo
ZGlyKSwgKGFkZHIpKSkpCiAKICNlbHNlCiAKKyNkZWZpbmUgcDRkX3BhZ2VfcGFkZHIocDRkKQko
eyBCVUlMRF9CVUcoKTsgMDt9KQogI2RlZmluZSBwZ2RfcGFnZV9wYWRkcihwZ2QpCSh7IEJVSUxE
X0JVRygpOyAwO30pCiAKIC8qIE1hdGNoIHB1ZF9vZmZzZXQgZm9sZGluZyBpbiA8YXNtL2dlbmVy
aWMvcGd0YWJsZS1ub3B1ZC5oPiAqLwotLS0gYS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3BndGFi
bGUtdHlwZXMuaH5hcm02NC1hZGQtc3VwcG9ydC1mb3ItZm9sZGVkLXA0ZC1wYWdlLXRhYmxlcwor
KysgYS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3BndGFibGUtdHlwZXMuaApAQCAtMTQsNiArMTQs
NyBAQAogdHlwZWRlZiB1NjQgcHRldmFsX3Q7CiB0eXBlZGVmIHU2NCBwbWR2YWxfdDsKIHR5cGVk
ZWYgdTY0IHB1ZHZhbF90OwordHlwZWRlZiB1NjQgcDRkdmFsX3Q7CiB0eXBlZGVmIHU2NCBwZ2R2
YWxfdDsKIAogLyoKQEAgLTQ0LDEzICs0NSwxMSBAQCB0eXBlZGVmIHN0cnVjdCB7IHB0ZXZhbF90
IHBncHJvdDsgfSBwZ3ByCiAjZGVmaW5lIF9fcGdwcm90KHgpCSgocGdwcm90X3QpIHsgKHgpIH0g
KQogCiAjaWYgQ09ORklHX1BHVEFCTEVfTEVWRUxTID09IDIKLSNkZWZpbmUgX19BUkNIX1VTRV81
TEVWRUxfSEFDSwogI2luY2x1ZGUgPGFzbS1nZW5lcmljL3BndGFibGUtbm9wbWQuaD4KICNlbGlm
IENPTkZJR19QR1RBQkxFX0xFVkVMUyA9PSAzCi0jZGVmaW5lIF9fQVJDSF9VU0VfNUxFVkVMX0hB
Q0sKICNpbmNsdWRlIDxhc20tZ2VuZXJpYy9wZ3RhYmxlLW5vcHVkLmg+CiAjZWxpZiBDT05GSUdf
UEdUQUJMRV9MRVZFTFMgPT0gNAotI2luY2x1ZGUgPGFzbS1nZW5lcmljLzVsZXZlbC1maXh1cC5o
PgorI2luY2x1ZGUgPGFzbS1nZW5lcmljL3BndGFibGUtbm9wNGQuaD4KICNlbmRpZgogCiAjZW5k
aWYJLyogX19BU01fUEdUQUJMRV9UWVBFU19IICovCi0tLSBhL2FyY2gvYXJtNjQvaW5jbHVkZS9h
c20vc3RhZ2UyX3BndGFibGUuaH5hcm02NC1hZGQtc3VwcG9ydC1mb3ItZm9sZGVkLXA0ZC1wYWdl
LXRhYmxlcworKysgYS9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3N0YWdlMl9wZ3RhYmxlLmgKQEAg
LTY4LDQxICs2OCw2NyBAQCBzdGF0aWMgaW5saW5lIGJvb2wga3ZtX3N0YWdlMl9oYXNfcHVkKHN0
CiAjZGVmaW5lIFMyX1BVRF9TSVpFCQkJKDFVTCA8PCBTMl9QVURfU0hJRlQpCiAjZGVmaW5lIFMy
X1BVRF9NQVNLCQkJKH4oUzJfUFVEX1NJWkUgLSAxKSkKIAotc3RhdGljIGlubGluZSBib29sIHN0
YWdlMl9wZ2Rfbm9uZShzdHJ1Y3Qga3ZtICprdm0sIHBnZF90IHBnZCkKKyNkZWZpbmUgc3RhZ2Uy
X3BnZF9ub25lKGt2bSwgcGdkKQkJcGdkX25vbmUocGdkKQorI2RlZmluZSBzdGFnZTJfcGdkX2Ns
ZWFyKGt2bSwgcGdkKQkJcGdkX2NsZWFyKHBnZCkKKyNkZWZpbmUgc3RhZ2UyX3BnZF9wcmVzZW50
KGt2bSwgcGdkKQkJcGdkX3ByZXNlbnQocGdkKQorI2RlZmluZSBzdGFnZTJfcGdkX3BvcHVsYXRl
KGt2bSwgcGdkLCBwNGQpCXBnZF9wb3B1bGF0ZShOVUxMLCBwZ2QsIHA0ZCkKKworc3RhdGljIGlu
bGluZSBwNGRfdCAqc3RhZ2UyX3A0ZF9vZmZzZXQoc3RydWN0IGt2bSAqa3ZtLAorCQkJCSAgICAg
ICBwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MpCit7CisJcmV0dXJuIHA0ZF9vZmZz
ZXQocGdkLCBhZGRyZXNzKTsKK30KKworc3RhdGljIGlubGluZSB2b2lkIHN0YWdlMl9wNGRfZnJl
ZShzdHJ1Y3Qga3ZtICprdm0sIHA0ZF90ICpwNGQpCit7Cit9CisKK3N0YXRpYyBpbmxpbmUgYm9v
bCBzdGFnZTJfcDRkX3RhYmxlX2VtcHR5KHN0cnVjdCBrdm0gKmt2bSwgcDRkX3QgKnA0ZHApCit7
CisJcmV0dXJuIGZhbHNlOworfQorCitzdGF0aWMgaW5saW5lIHBoeXNfYWRkcl90IHN0YWdlMl9w
NGRfYWRkcl9lbmQoc3RydWN0IGt2bSAqa3ZtLAorCQkJCQkgICAgICBwaHlzX2FkZHJfdCBhZGRy
LCBwaHlzX2FkZHJfdCBlbmQpCit7CisJcmV0dXJuIGVuZDsKK30KKworc3RhdGljIGlubGluZSBi
b29sIHN0YWdlMl9wNGRfbm9uZShzdHJ1Y3Qga3ZtICprdm0sIHA0ZF90IHA0ZCkKIHsKIAlpZiAo
a3ZtX3N0YWdlMl9oYXNfcHVkKGt2bSkpCi0JCXJldHVybiBwZ2Rfbm9uZShwZ2QpOworCQlyZXR1
cm4gcDRkX25vbmUocDRkKTsKIAllbHNlCiAJCXJldHVybiAwOwogfQogCi1zdGF0aWMgaW5saW5l
IHZvaWQgc3RhZ2UyX3BnZF9jbGVhcihzdHJ1Y3Qga3ZtICprdm0sIHBnZF90ICpwZ2RwKQorc3Rh
dGljIGlubGluZSB2b2lkIHN0YWdlMl9wNGRfY2xlYXIoc3RydWN0IGt2bSAqa3ZtLCBwNGRfdCAq
cDRkcCkKIHsKIAlpZiAoa3ZtX3N0YWdlMl9oYXNfcHVkKGt2bSkpCi0JCXBnZF9jbGVhcihwZ2Rw
KTsKKwkJcDRkX2NsZWFyKHA0ZHApOwogfQogCi1zdGF0aWMgaW5saW5lIGJvb2wgc3RhZ2UyX3Bn
ZF9wcmVzZW50KHN0cnVjdCBrdm0gKmt2bSwgcGdkX3QgcGdkKQorc3RhdGljIGlubGluZSBib29s
IHN0YWdlMl9wNGRfcHJlc2VudChzdHJ1Y3Qga3ZtICprdm0sIHA0ZF90IHA0ZCkKIHsKIAlpZiAo
a3ZtX3N0YWdlMl9oYXNfcHVkKGt2bSkpCi0JCXJldHVybiBwZ2RfcHJlc2VudChwZ2QpOworCQly
ZXR1cm4gcDRkX3ByZXNlbnQocDRkKTsKIAllbHNlCiAJCXJldHVybiAxOwogfQogCi1zdGF0aWMg
aW5saW5lIHZvaWQgc3RhZ2UyX3BnZF9wb3B1bGF0ZShzdHJ1Y3Qga3ZtICprdm0sIHBnZF90ICpw
Z2QsIHB1ZF90ICpwdWQpCitzdGF0aWMgaW5saW5lIHZvaWQgc3RhZ2UyX3A0ZF9wb3B1bGF0ZShz
dHJ1Y3Qga3ZtICprdm0sIHA0ZF90ICpwNGQsIHB1ZF90ICpwdWQpCiB7CiAJaWYgKGt2bV9zdGFn
ZTJfaGFzX3B1ZChrdm0pKQotCQlwZ2RfcG9wdWxhdGUoTlVMTCwgcGdkLCBwdWQpOworCQlwNGRf
cG9wdWxhdGUoTlVMTCwgcDRkLCBwdWQpOwogfQogCiBzdGF0aWMgaW5saW5lIHB1ZF90ICpzdGFn
ZTJfcHVkX29mZnNldChzdHJ1Y3Qga3ZtICprdm0sCi0JCQkJICAgICAgIHBnZF90ICpwZ2QsIHVu
c2lnbmVkIGxvbmcgYWRkcmVzcykKKwkJCQkgICAgICAgcDRkX3QgKnA0ZCwgdW5zaWduZWQgbG9u
ZyBhZGRyZXNzKQogewogCWlmIChrdm1fc3RhZ2UyX2hhc19wdWQoa3ZtKSkKLQkJcmV0dXJuIHB1
ZF9vZmZzZXQocGdkLCBhZGRyZXNzKTsKKwkJcmV0dXJuIHB1ZF9vZmZzZXQocDRkLCBhZGRyZXNz
KTsKIAllbHNlCi0JCXJldHVybiAocHVkX3QgKilwZ2Q7CisJCXJldHVybiAocHVkX3QgKilwNGQ7
CiB9CiAKIHN0YXRpYyBpbmxpbmUgdm9pZCBzdGFnZTJfcHVkX2ZyZWUoc3RydWN0IGt2bSAqa3Zt
LCBwdWRfdCAqcHVkKQotLS0gYS9hcmNoL2FybTY0L2tlcm5lbC9oaWJlcm5hdGUuY35hcm02NC1h
ZGQtc3VwcG9ydC1mb3ItZm9sZGVkLXA0ZC1wYWdlLXRhYmxlcworKysgYS9hcmNoL2FybTY0L2tl
cm5lbC9oaWJlcm5hdGUuYwpAQCAtMTg0LDYgKzE4NCw3IEBAIHN0YXRpYyBpbnQgdHJhbnNfcGdk
X21hcF9wYWdlKHBnZF90ICp0cmEKIAkJICAgICAgIHBncHJvdF90IHBncHJvdCkKIHsKIAlwZ2Rf
dCAqcGdkcDsKKwlwNGRfdCAqcDRkcDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAlw
dGVfdCAqcHRlcDsKQEAgLTE5Niw3ICsxOTcsMTUgQEAgc3RhdGljIGludCB0cmFuc19wZ2RfbWFw
X3BhZ2UocGdkX3QgKnRyYQogCQlwZ2RfcG9wdWxhdGUoJmluaXRfbW0sIHBnZHAsIHB1ZHApOwog
CX0KIAotCXB1ZHAgPSBwdWRfb2Zmc2V0KHBnZHAsIGRzdF9hZGRyKTsKKwlwNGRwID0gcDRkX29m
ZnNldChwZ2RwLCBkc3RfYWRkcik7CisJaWYgKHA0ZF9ub25lKFJFQURfT05DRSgqcDRkcCkpKSB7
CisJCXB1ZHAgPSAodm9pZCAqKWdldF9zYWZlX3BhZ2UoR0ZQX0FUT01JQyk7CisJCWlmICghcHVk
cCkKKwkJCXJldHVybiAtRU5PTUVNOworCQlwNGRfcG9wdWxhdGUoJmluaXRfbW0sIHA0ZHAsIHB1
ZHApOworCX0KKworCXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIGRzdF9hZGRyKTsKIAlpZiAocHVk
X25vbmUoUkVBRF9PTkNFKCpwdWRwKSkpIHsKIAkJcG1kcCA9ICh2b2lkICopZ2V0X3NhZmVfcGFn
ZShHRlBfQVRPTUlDKTsKIAkJaWYgKCFwbWRwKQpAQCAtNDE5LDcgKzQyOCw3IEBAIHN0YXRpYyBp
bnQgY29weV9wbWQocHVkX3QgKmRzdF9wdWRwLCBwdWQKIAlyZXR1cm4gMDsKIH0KIAotc3RhdGlj
IGludCBjb3B5X3B1ZChwZ2RfdCAqZHN0X3BnZHAsIHBnZF90ICpzcmNfcGdkcCwgdW5zaWduZWQg
bG9uZyBzdGFydCwKK3N0YXRpYyBpbnQgY29weV9wdWQocDRkX3QgKmRzdF9wNGRwLCBwNGRfdCAq
c3JjX3A0ZHAsIHVuc2lnbmVkIGxvbmcgc3RhcnQsCiAJCSAgICB1bnNpZ25lZCBsb25nIGVuZCkK
IHsKIAlwdWRfdCAqZHN0X3B1ZHA7CkBAIC00MjcsMTUgKzQzNiwxNSBAQCBzdGF0aWMgaW50IGNv
cHlfcHVkKHBnZF90ICpkc3RfcGdkcCwgcGdkCiAJdW5zaWduZWQgbG9uZyBuZXh0OwogCXVuc2ln
bmVkIGxvbmcgYWRkciA9IHN0YXJ0OwogCi0JaWYgKHBnZF9ub25lKFJFQURfT05DRSgqZHN0X3Bn
ZHApKSkgeworCWlmIChwNGRfbm9uZShSRUFEX09OQ0UoKmRzdF9wNGRwKSkpIHsKIAkJZHN0X3B1
ZHAgPSAocHVkX3QgKilnZXRfc2FmZV9wYWdlKEdGUF9BVE9NSUMpOwogCQlpZiAoIWRzdF9wdWRw
KQogCQkJcmV0dXJuIC1FTk9NRU07Ci0JCXBnZF9wb3B1bGF0ZSgmaW5pdF9tbSwgZHN0X3BnZHAs
IGRzdF9wdWRwKTsKKwkJcDRkX3BvcHVsYXRlKCZpbml0X21tLCBkc3RfcDRkcCwgZHN0X3B1ZHAp
OwogCX0KLQlkc3RfcHVkcCA9IHB1ZF9vZmZzZXQoZHN0X3BnZHAsIHN0YXJ0KTsKKwlkc3RfcHVk
cCA9IHB1ZF9vZmZzZXQoZHN0X3A0ZHAsIHN0YXJ0KTsKIAotCXNyY19wdWRwID0gcHVkX29mZnNl
dChzcmNfcGdkcCwgc3RhcnQpOworCXNyY19wdWRwID0gcHVkX29mZnNldChzcmNfcDRkcCwgc3Rh
cnQpOwogCWRvIHsKIAkJcHVkX3QgcHVkID0gUkVBRF9PTkNFKCpzcmNfcHVkcCk7CiAKQEAgLTQ1
NCw2ICs0NjMsMjcgQEAgc3RhdGljIGludCBjb3B5X3B1ZChwZ2RfdCAqZHN0X3BnZHAsIHBnZAog
CXJldHVybiAwOwogfQogCitzdGF0aWMgaW50IGNvcHlfcDRkKHBnZF90ICpkc3RfcGdkcCwgcGdk
X3QgKnNyY19wZ2RwLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAorCQkgICAgdW5zaWduZWQgbG9uZyBl
bmQpCit7CisJcDRkX3QgKmRzdF9wNGRwOworCXA0ZF90ICpzcmNfcDRkcDsKKwl1bnNpZ25lZCBs
b25nIG5leHQ7CisJdW5zaWduZWQgbG9uZyBhZGRyID0gc3RhcnQ7CisKKwlkc3RfcDRkcCA9IHA0
ZF9vZmZzZXQoZHN0X3BnZHAsIHN0YXJ0KTsKKwlzcmNfcDRkcCA9IHA0ZF9vZmZzZXQoc3JjX3Bn
ZHAsIHN0YXJ0KTsKKwlkbyB7CisJCW5leHQgPSBwNGRfYWRkcl9lbmQoYWRkciwgZW5kKTsKKwkJ
aWYgKHA0ZF9ub25lKFJFQURfT05DRSgqc3JjX3A0ZHApKSkKKwkJCWNvbnRpbnVlOworCQlpZiAo
Y29weV9wdWQoZHN0X3A0ZHAsIHNyY19wNGRwLCBhZGRyLCBuZXh0KSkKKwkJCXJldHVybiAtRU5P
TUVNOworCX0gd2hpbGUgKGRzdF9wNGRwKyssIHNyY19wNGRwKyssIGFkZHIgPSBuZXh0LCBhZGRy
ICE9IGVuZCk7CisKKwlyZXR1cm4gMDsKK30KKwogc3RhdGljIGludCBjb3B5X3BhZ2VfdGFibGVz
KHBnZF90ICpkc3RfcGdkcCwgdW5zaWduZWQgbG9uZyBzdGFydCwKIAkJCSAgICB1bnNpZ25lZCBs
b25nIGVuZCkKIHsKQEAgLTQ2Niw3ICs0OTYsNyBAQCBzdGF0aWMgaW50IGNvcHlfcGFnZV90YWJs
ZXMocGdkX3QgKmRzdF9wCiAJCW5leHQgPSBwZ2RfYWRkcl9lbmQoYWRkciwgZW5kKTsKIAkJaWYg
KHBnZF9ub25lKFJFQURfT05DRSgqc3JjX3BnZHApKSkKIAkJCWNvbnRpbnVlOwotCQlpZiAoY29w
eV9wdWQoZHN0X3BnZHAsIHNyY19wZ2RwLCBhZGRyLCBuZXh0KSkKKwkJaWYgKGNvcHlfcDRkKGRz
dF9wZ2RwLCBzcmNfcGdkcCwgYWRkciwgbmV4dCkpCiAJCQlyZXR1cm4gLUVOT01FTTsKIAl9IHdo
aWxlIChkc3RfcGdkcCsrLCBzcmNfcGdkcCsrLCBhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQpOwog
Ci0tLSBhL2FyY2gvYXJtNjQva3ZtL21tdS5jfmFybTY0LWFkZC1zdXBwb3J0LWZvci1mb2xkZWQt
cDRkLXBhZ2UtdGFibGVzCisrKyBhL2FyY2gvYXJtNjQva3ZtL21tdS5jCkBAIC0xNTgsMTMgKzE1
OCwyMiBAQCBzdGF0aWMgdm9pZCAqbW11X21lbW9yeV9jYWNoZV9hbGxvYyhzdHJ1CiAKIHN0YXRp
YyB2b2lkIGNsZWFyX3N0YWdlMl9wZ2RfZW50cnkoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGdk
LCBwaHlzX2FkZHJfdCBhZGRyKQogewotCXB1ZF90ICpwdWRfdGFibGUgX19tYXliZV91bnVzZWQg
PSBzdGFnZTJfcHVkX29mZnNldChrdm0sIHBnZCwgMFVMKTsKKwlwNGRfdCAqcDRkX3RhYmxlIF9f
bWF5YmVfdW51c2VkID0gc3RhZ2UyX3A0ZF9vZmZzZXQoa3ZtLCBwZ2QsIDBVTCk7CiAJc3RhZ2Uy
X3BnZF9jbGVhcihrdm0sIHBnZCk7CiAJa3ZtX3RsYl9mbHVzaF92bWlkX2lwYShrdm0sIGFkZHIp
OwotCXN0YWdlMl9wdWRfZnJlZShrdm0sIHB1ZF90YWJsZSk7CisJc3RhZ2UyX3A0ZF9mcmVlKGt2
bSwgcDRkX3RhYmxlKTsKIAlwdXRfcGFnZSh2aXJ0X3RvX3BhZ2UocGdkKSk7CiB9CiAKK3N0YXRp
YyB2b2lkIGNsZWFyX3N0YWdlMl9wNGRfZW50cnkoc3RydWN0IGt2bSAqa3ZtLCBwNGRfdCAqcDRk
LCBwaHlzX2FkZHJfdCBhZGRyKQoreworCXB1ZF90ICpwdWRfdGFibGUgX19tYXliZV91bnVzZWQg
PSBzdGFnZTJfcHVkX29mZnNldChrdm0sIHA0ZCwgMCk7CisJc3RhZ2UyX3A0ZF9jbGVhcihrdm0s
IHA0ZCk7CisJa3ZtX3RsYl9mbHVzaF92bWlkX2lwYShrdm0sIGFkZHIpOworCXN0YWdlMl9wdWRf
ZnJlZShrdm0sIHB1ZF90YWJsZSk7CisJcHV0X3BhZ2UodmlydF90b19wYWdlKHA0ZCkpOworfQor
CiBzdGF0aWMgdm9pZCBjbGVhcl9zdGFnZTJfcHVkX2VudHJ5KHN0cnVjdCBrdm0gKmt2bSwgcHVk
X3QgKnB1ZCwgcGh5c19hZGRyX3QgYWRkcikKIHsKIAlwbWRfdCAqcG1kX3RhYmxlIF9fbWF5YmVf
dW51c2VkID0gc3RhZ2UyX3BtZF9vZmZzZXQoa3ZtLCBwdWQsIDApOwpAQCAtMjA4LDEyICsyMTcs
MjAgQEAgc3RhdGljIGlubGluZSB2b2lkIGt2bV9wdWRfcG9wdWxhdGUocHVkXwogCWRzYihpc2hz
dCk7CiB9CiAKLXN0YXRpYyBpbmxpbmUgdm9pZCBrdm1fcGdkX3BvcHVsYXRlKHBnZF90ICpwZ2Rw
LCBwdWRfdCAqcHVkcCkKK3N0YXRpYyBpbmxpbmUgdm9pZCBrdm1fcDRkX3BvcHVsYXRlKHA0ZF90
ICpwNGRwLCBwdWRfdCAqcHVkcCkKIHsKLQlXUklURV9PTkNFKCpwZ2RwLCBrdm1fbWtfcGdkKHB1
ZHApKTsKKwlXUklURV9PTkNFKCpwNGRwLCBrdm1fbWtfcDRkKHB1ZHApKTsKIAlkc2IoaXNoc3Qp
OwogfQogCitzdGF0aWMgaW5saW5lIHZvaWQga3ZtX3BnZF9wb3B1bGF0ZShwZ2RfdCAqcGdkcCwg
cDRkX3QgKnA0ZHApCit7CisjaWZuZGVmIF9fUEFHRVRBQkxFX1A0RF9GT0xERUQKKwlXUklURV9P
TkNFKCpwZ2RwLCBrdm1fbWtfcGdkKHA0ZHApKTsKKwlkc2IoaXNoc3QpOworI2VuZGlmCit9CisK
IC8qCiAgKiBVbm1hcHBpbmcgdnMgZGNhY2hlIG1hbmFnZW1lbnQ6CiAgKgpAQCAtMjkzLDEzICsz
MTAsMTMgQEAgc3RhdGljIHZvaWQgdW5tYXBfc3RhZ2UyX3BtZHMoc3RydWN0IGt2bQogCQljbGVh
cl9zdGFnZTJfcHVkX2VudHJ5KGt2bSwgcHVkLCBzdGFydF9hZGRyKTsKIH0KIAotc3RhdGljIHZv
aWQgdW5tYXBfc3RhZ2UyX3B1ZHMoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGdkLAorc3RhdGlj
IHZvaWQgdW5tYXBfc3RhZ2UyX3B1ZHMoc3RydWN0IGt2bSAqa3ZtLCBwNGRfdCAqcDRkLAogCQkg
ICAgICAgcGh5c19hZGRyX3QgYWRkciwgcGh5c19hZGRyX3QgZW5kKQogewogCXBoeXNfYWRkcl90
IG5leHQsIHN0YXJ0X2FkZHIgPSBhZGRyOwogCXB1ZF90ICpwdWQsICpzdGFydF9wdWQ7CiAKLQlz
dGFydF9wdWQgPSBwdWQgPSBzdGFnZTJfcHVkX29mZnNldChrdm0sIHBnZCwgYWRkcik7CisJc3Rh
cnRfcHVkID0gcHVkID0gc3RhZ2UyX3B1ZF9vZmZzZXQoa3ZtLCBwNGQsIGFkZHIpOwogCWRvIHsK
IAkJbmV4dCA9IHN0YWdlMl9wdWRfYWRkcl9lbmQoa3ZtLCBhZGRyLCBlbmQpOwogCQlpZiAoIXN0
YWdlMl9wdWRfbm9uZShrdm0sICpwdWQpKSB7CkBAIC0zMTcsNiArMzM0LDIzIEBAIHN0YXRpYyB2
b2lkIHVubWFwX3N0YWdlMl9wdWRzKHN0cnVjdCBrdm0KIAl9IHdoaWxlIChwdWQrKywgYWRkciA9
IG5leHQsIGFkZHIgIT0gZW5kKTsKIAogCWlmIChzdGFnZTJfcHVkX3RhYmxlX2VtcHR5KGt2bSwg
c3RhcnRfcHVkKSkKKwkJY2xlYXJfc3RhZ2UyX3A0ZF9lbnRyeShrdm0sIHA0ZCwgc3RhcnRfYWRk
cik7Cit9CisKK3N0YXRpYyB2b2lkIHVubWFwX3N0YWdlMl9wNGRzKHN0cnVjdCBrdm0gKmt2bSwg
cGdkX3QgKnBnZCwKKwkJICAgICAgIHBoeXNfYWRkcl90IGFkZHIsIHBoeXNfYWRkcl90IGVuZCkK
K3sKKwlwaHlzX2FkZHJfdCBuZXh0LCBzdGFydF9hZGRyID0gYWRkcjsKKwlwNGRfdCAqcDRkLCAq
c3RhcnRfcDRkOworCisJc3RhcnRfcDRkID0gcDRkID0gc3RhZ2UyX3A0ZF9vZmZzZXQoa3ZtLCBw
Z2QsIGFkZHIpOworCWRvIHsKKwkJbmV4dCA9IHN0YWdlMl9wNGRfYWRkcl9lbmQoa3ZtLCBhZGRy
LCBlbmQpOworCQlpZiAoIXN0YWdlMl9wNGRfbm9uZShrdm0sICpwNGQpKQorCQkJdW5tYXBfc3Rh
Z2UyX3B1ZHMoa3ZtLCBwNGQsIGFkZHIsIG5leHQpOworCX0gd2hpbGUgKHA0ZCsrLCBhZGRyID0g
bmV4dCwgYWRkciAhPSBlbmQpOworCisJaWYgKHN0YWdlMl9wNGRfdGFibGVfZW1wdHkoa3ZtLCBz
dGFydF9wNGQpKQogCQljbGVhcl9zdGFnZTJfcGdkX2VudHJ5KGt2bSwgcGdkLCBzdGFydF9hZGRy
KTsKIH0KIApAQCAtMzUxLDcgKzM4NSw3IEBAIHN0YXRpYyB2b2lkIHVubWFwX3N0YWdlMl9yYW5n
ZShzdHJ1Y3Qga3YKIAkJCWJyZWFrOwogCQluZXh0ID0gc3RhZ2UyX3BnZF9hZGRyX2VuZChrdm0s
IGFkZHIsIGVuZCk7CiAJCWlmICghc3RhZ2UyX3BnZF9ub25lKGt2bSwgKnBnZCkpCi0JCQl1bm1h
cF9zdGFnZTJfcHVkcyhrdm0sIHBnZCwgYWRkciwgbmV4dCk7CisJCQl1bm1hcF9zdGFnZTJfcDRk
cyhrdm0sIHBnZCwgYWRkciwgbmV4dCk7CiAJCS8qCiAJCSAqIElmIHRoZSByYW5nZSBpcyB0b28g
bGFyZ2UsIHJlbGVhc2UgdGhlIGt2bS0+bW11X2xvY2sKIAkJICogdG8gcHJldmVudCBzdGFydmF0
aW9uIGFuZCBsb2NrdXAgZGV0ZWN0b3Igd2FybmluZ3MuCkBAIC0zOTEsMTMgKzQyNSwxMyBAQCBz
dGF0aWMgdm9pZCBzdGFnZTJfZmx1c2hfcG1kcyhzdHJ1Y3Qga3ZtCiAJfSB3aGlsZSAocG1kKyss
IGFkZHIgPSBuZXh0LCBhZGRyICE9IGVuZCk7CiB9CiAKLXN0YXRpYyB2b2lkIHN0YWdlMl9mbHVz
aF9wdWRzKHN0cnVjdCBrdm0gKmt2bSwgcGdkX3QgKnBnZCwKK3N0YXRpYyB2b2lkIHN0YWdlMl9m
bHVzaF9wdWRzKHN0cnVjdCBrdm0gKmt2bSwgcDRkX3QgKnA0ZCwKIAkJCSAgICAgIHBoeXNfYWRk
cl90IGFkZHIsIHBoeXNfYWRkcl90IGVuZCkKIHsKIAlwdWRfdCAqcHVkOwogCXBoeXNfYWRkcl90
IG5leHQ7CiAKLQlwdWQgPSBzdGFnZTJfcHVkX29mZnNldChrdm0sIHBnZCwgYWRkcik7CisJcHVk
ID0gc3RhZ2UyX3B1ZF9vZmZzZXQoa3ZtLCBwNGQsIGFkZHIpOwogCWRvIHsKIAkJbmV4dCA9IHN0
YWdlMl9wdWRfYWRkcl9lbmQoa3ZtLCBhZGRyLCBlbmQpOwogCQlpZiAoIXN0YWdlMl9wdWRfbm9u
ZShrdm0sICpwdWQpKSB7CkBAIC00MDksNiArNDQzLDIwIEBAIHN0YXRpYyB2b2lkIHN0YWdlMl9m
bHVzaF9wdWRzKHN0cnVjdCBrdm0KIAl9IHdoaWxlIChwdWQrKywgYWRkciA9IG5leHQsIGFkZHIg
IT0gZW5kKTsKIH0KIAorc3RhdGljIHZvaWQgc3RhZ2UyX2ZsdXNoX3A0ZHMoc3RydWN0IGt2bSAq
a3ZtLCBwZ2RfdCAqcGdkLAorCQkJICAgICAgcGh5c19hZGRyX3QgYWRkciwgcGh5c19hZGRyX3Qg
ZW5kKQoreworCXA0ZF90ICpwNGQ7CisJcGh5c19hZGRyX3QgbmV4dDsKKworCXA0ZCA9IHN0YWdl
Ml9wNGRfb2Zmc2V0KGt2bSwgcGdkLCBhZGRyKTsKKwlkbyB7CisJCW5leHQgPSBzdGFnZTJfcDRk
X2FkZHJfZW5kKGt2bSwgYWRkciwgZW5kKTsKKwkJaWYgKCFzdGFnZTJfcDRkX25vbmUoa3ZtLCAq
cDRkKSkKKwkJCXN0YWdlMl9mbHVzaF9wdWRzKGt2bSwgcDRkLCBhZGRyLCBuZXh0KTsKKwl9IHdo
aWxlIChwNGQrKywgYWRkciA9IG5leHQsIGFkZHIgIT0gZW5kKTsKK30KKwogc3RhdGljIHZvaWQg
c3RhZ2UyX2ZsdXNoX21lbXNsb3Qoc3RydWN0IGt2bSAqa3ZtLAogCQkJCSBzdHJ1Y3Qga3ZtX21l
bW9yeV9zbG90ICptZW1zbG90KQogewpAQCAtNDIxLDcgKzQ2OSw3IEBAIHN0YXRpYyB2b2lkIHN0
YWdlMl9mbHVzaF9tZW1zbG90KHN0cnVjdAogCWRvIHsKIAkJbmV4dCA9IHN0YWdlMl9wZ2RfYWRk
cl9lbmQoa3ZtLCBhZGRyLCBlbmQpOwogCQlpZiAoIXN0YWdlMl9wZ2Rfbm9uZShrdm0sICpwZ2Qp
KQotCQkJc3RhZ2UyX2ZsdXNoX3B1ZHMoa3ZtLCBwZ2QsIGFkZHIsIG5leHQpOworCQkJc3RhZ2Uy
X2ZsdXNoX3A0ZHMoa3ZtLCBwZ2QsIGFkZHIsIG5leHQpOwogCiAJCWlmIChuZXh0ICE9IGVuZCkK
IAkJCWNvbmRfcmVzY2hlZF9sb2NrKCZrdm0tPm1tdV9sb2NrKTsKQEAgLTQ1NCwxMiArNTAyLDIx
IEBAIHN0YXRpYyB2b2lkIHN0YWdlMl9mbHVzaF92bShzdHJ1Y3Qga3ZtICoKIAogc3RhdGljIHZv
aWQgY2xlYXJfaHlwX3BnZF9lbnRyeShwZ2RfdCAqcGdkKQogewotCXB1ZF90ICpwdWRfdGFibGUg
X19tYXliZV91bnVzZWQgPSBwdWRfb2Zmc2V0KHBnZCwgMFVMKTsKKwlwNGRfdCAqcDRkX3RhYmxl
IF9fbWF5YmVfdW51c2VkID0gcDRkX29mZnNldChwZ2QsIDBVTCk7CiAJcGdkX2NsZWFyKHBnZCk7
Ci0JcHVkX2ZyZWUoTlVMTCwgcHVkX3RhYmxlKTsKKwlwNGRfZnJlZShOVUxMLCBwNGRfdGFibGUp
OwogCXB1dF9wYWdlKHZpcnRfdG9fcGFnZShwZ2QpKTsKIH0KIAorc3RhdGljIHZvaWQgY2xlYXJf
aHlwX3A0ZF9lbnRyeShwNGRfdCAqcDRkKQoreworCXB1ZF90ICpwdWRfdGFibGUgX19tYXliZV91
bnVzZWQgPSBwdWRfb2Zmc2V0KHA0ZCwgMCk7CisJVk1fQlVHX09OKHA0ZF9odWdlKCpwNGQpKTsK
KwlwNGRfY2xlYXIocDRkKTsKKwlwdWRfZnJlZShOVUxMLCBwdWRfdGFibGUpOworCXB1dF9wYWdl
KHZpcnRfdG9fcGFnZShwNGQpKTsKK30KKwogc3RhdGljIHZvaWQgY2xlYXJfaHlwX3B1ZF9lbnRy
eShwdWRfdCAqcHVkKQogewogCXBtZF90ICpwbWRfdGFibGUgX19tYXliZV91bnVzZWQgPSBwbWRf
b2Zmc2V0KHB1ZCwgMCk7CkBAIC01MTEsMTIgKzU2OCwxMiBAQCBzdGF0aWMgdm9pZCB1bm1hcF9o
eXBfcG1kcyhwdWRfdCAqcHVkLCBwCiAJCWNsZWFyX2h5cF9wdWRfZW50cnkocHVkKTsKIH0KIAot
c3RhdGljIHZvaWQgdW5tYXBfaHlwX3B1ZHMocGdkX3QgKnBnZCwgcGh5c19hZGRyX3QgYWRkciwg
cGh5c19hZGRyX3QgZW5kKQorc3RhdGljIHZvaWQgdW5tYXBfaHlwX3B1ZHMocDRkX3QgKnA0ZCwg
cGh5c19hZGRyX3QgYWRkciwgcGh5c19hZGRyX3QgZW5kKQogewogCXBoeXNfYWRkcl90IG5leHQ7
CiAJcHVkX3QgKnB1ZCwgKnN0YXJ0X3B1ZDsKIAotCXN0YXJ0X3B1ZCA9IHB1ZCA9IHB1ZF9vZmZz
ZXQocGdkLCBhZGRyKTsKKwlzdGFydF9wdWQgPSBwdWQgPSBwdWRfb2Zmc2V0KHA0ZCwgYWRkcik7
CiAJZG8gewogCQluZXh0ID0gcHVkX2FkZHJfZW5kKGFkZHIsIGVuZCk7CiAJCS8qIEh5cCBkb2Vz
bid0IHVzZSBodWdlIHB1ZHMgKi8KQEAgLTUyNSw2ICs1ODIsMjMgQEAgc3RhdGljIHZvaWQgdW5t
YXBfaHlwX3B1ZHMocGdkX3QgKnBnZCwgcAogCX0gd2hpbGUgKHB1ZCsrLCBhZGRyID0gbmV4dCwg
YWRkciAhPSBlbmQpOwogCiAJaWYgKGh5cF9wdWRfdGFibGVfZW1wdHkoc3RhcnRfcHVkKSkKKwkJ
Y2xlYXJfaHlwX3A0ZF9lbnRyeShwNGQpOworfQorCitzdGF0aWMgdm9pZCB1bm1hcF9oeXBfcDRk
cyhwZ2RfdCAqcGdkLCBwaHlzX2FkZHJfdCBhZGRyLCBwaHlzX2FkZHJfdCBlbmQpCit7CisJcGh5
c19hZGRyX3QgbmV4dDsKKwlwNGRfdCAqcDRkLCAqc3RhcnRfcDRkOworCisJc3RhcnRfcDRkID0g
cDRkID0gcDRkX29mZnNldChwZ2QsIGFkZHIpOworCWRvIHsKKwkJbmV4dCA9IHA0ZF9hZGRyX2Vu
ZChhZGRyLCBlbmQpOworCQkvKiBIeXAgZG9lc24ndCB1c2UgaHVnZSBwNGRzICovCisJCWlmICgh
cDRkX25vbmUoKnA0ZCkpCisJCQl1bm1hcF9oeXBfcHVkcyhwNGQsIGFkZHIsIG5leHQpOworCX0g
d2hpbGUgKHA0ZCsrLCBhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQpOworCisJaWYgKGh5cF9wNGRf
dGFibGVfZW1wdHkoc3RhcnRfcDRkKSkKIAkJY2xlYXJfaHlwX3BnZF9lbnRyeShwZ2QpOwogfQog
CkBAIC01NDgsNyArNjIyLDcgQEAgc3RhdGljIHZvaWQgX191bm1hcF9oeXBfcmFuZ2UocGdkX3Qg
KnBnZAogCWRvIHsKIAkJbmV4dCA9IHBnZF9hZGRyX2VuZChhZGRyLCBlbmQpOwogCQlpZiAoIXBn
ZF9ub25lKCpwZ2QpKQotCQkJdW5tYXBfaHlwX3B1ZHMocGdkLCBhZGRyLCBuZXh0KTsKKwkJCXVu
bWFwX2h5cF9wNGRzKHBnZCwgYWRkciwgbmV4dCk7CiAJfSB3aGlsZSAocGdkKyssIGFkZHIgPSBu
ZXh0LCBhZGRyICE9IGVuZCk7CiB9CiAKQEAgLTY1OCw3ICs3MzIsNyBAQCBzdGF0aWMgaW50IGNy
ZWF0ZV9oeXBfcG1kX21hcHBpbmdzKHB1ZF90CiAJcmV0dXJuIDA7CiB9CiAKLXN0YXRpYyBpbnQg
Y3JlYXRlX2h5cF9wdWRfbWFwcGluZ3MocGdkX3QgKnBnZCwgdW5zaWduZWQgbG9uZyBzdGFydCwK
K3N0YXRpYyBpbnQgY3JlYXRlX2h5cF9wdWRfbWFwcGluZ3MocDRkX3QgKnA0ZCwgdW5zaWduZWQg
bG9uZyBzdGFydCwKIAkJCQkgICB1bnNpZ25lZCBsb25nIGVuZCwgdW5zaWduZWQgbG9uZyBwZm4s
CiAJCQkJICAgcGdwcm90X3QgcHJvdCkKIHsKQEAgLTY2OSw3ICs3NDMsNyBAQCBzdGF0aWMgaW50
IGNyZWF0ZV9oeXBfcHVkX21hcHBpbmdzKHBnZF90CiAKIAlhZGRyID0gc3RhcnQ7CiAJZG8gewot
CQlwdWQgPSBwdWRfb2Zmc2V0KHBnZCwgYWRkcik7CisJCXB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBh
ZGRyKTsKIAogCQlpZiAocHVkX25vbmVfb3JfY2xlYXJfYmFkKHB1ZCkpIHsKIAkJCXBtZCA9IHBt
ZF9hbGxvY19vbmUoTlVMTCwgYWRkcik7CkBAIC02OTEsMTIgKzc2NSw0NSBAQCBzdGF0aWMgaW50
IGNyZWF0ZV9oeXBfcHVkX21hcHBpbmdzKHBnZF90CiAJcmV0dXJuIDA7CiB9CiAKK3N0YXRpYyBp
bnQgY3JlYXRlX2h5cF9wNGRfbWFwcGluZ3MocGdkX3QgKnBnZCwgdW5zaWduZWQgbG9uZyBzdGFy
dCwKKwkJCQkgICB1bnNpZ25lZCBsb25nIGVuZCwgdW5zaWduZWQgbG9uZyBwZm4sCisJCQkJICAg
cGdwcm90X3QgcHJvdCkKK3sKKwlwNGRfdCAqcDRkOworCXB1ZF90ICpwdWQ7CisJdW5zaWduZWQg
bG9uZyBhZGRyLCBuZXh0OworCWludCByZXQ7CisKKwlhZGRyID0gc3RhcnQ7CisJZG8geworCQlw
NGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcik7CisKKwkJaWYgKHA0ZF9ub25lKCpwNGQpKSB7CisJ
CQlwdWQgPSBwdWRfYWxsb2Nfb25lKE5VTEwsIGFkZHIpOworCQkJaWYgKCFwdWQpIHsKKwkJCQlr
dm1fZXJyKCJDYW5ub3QgYWxsb2NhdGUgSHlwIHB1ZFxuIik7CisJCQkJcmV0dXJuIC1FTk9NRU07
CisJCQl9CisJCQlrdm1fcDRkX3BvcHVsYXRlKHA0ZCwgcHVkKTsKKwkJCWdldF9wYWdlKHZpcnRf
dG9fcGFnZShwNGQpKTsKKwkJfQorCisJCW5leHQgPSBwNGRfYWRkcl9lbmQoYWRkciwgZW5kKTsK
KwkJcmV0ID0gY3JlYXRlX2h5cF9wdWRfbWFwcGluZ3MocDRkLCBhZGRyLCBuZXh0LCBwZm4sIHBy
b3QpOworCQlpZiAocmV0KQorCQkJcmV0dXJuIHJldDsKKwkJcGZuICs9IChuZXh0IC0gYWRkcikg
Pj4gUEFHRV9TSElGVDsKKwl9IHdoaWxlIChhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQpOworCisJ
cmV0dXJuIDA7Cit9CisKIHN0YXRpYyBpbnQgX19jcmVhdGVfaHlwX21hcHBpbmdzKHBnZF90ICpw
Z2RwLCB1bnNpZ25lZCBsb25nIHB0cnNfcGVyX3BnZCwKIAkJCQkgdW5zaWduZWQgbG9uZyBzdGFy
dCwgdW5zaWduZWQgbG9uZyBlbmQsCiAJCQkJIHVuc2lnbmVkIGxvbmcgcGZuLCBwZ3Byb3RfdCBw
cm90KQogewogCXBnZF90ICpwZ2Q7Ci0JcHVkX3QgKnB1ZDsKKwlwNGRfdCAqcDRkOwogCXVuc2ln
bmVkIGxvbmcgYWRkciwgbmV4dDsKIAlpbnQgZXJyID0gMDsKIApAQCAtNzA3LDE4ICs4MTQsMTgg
QEAgc3RhdGljIGludCBfX2NyZWF0ZV9oeXBfbWFwcGluZ3MocGdkX3QgKgogCQlwZ2QgPSBwZ2Rw
ICsga3ZtX3BnZF9pbmRleChhZGRyLCBwdHJzX3Blcl9wZ2QpOwogCiAJCWlmIChwZ2Rfbm9uZSgq
cGdkKSkgewotCQkJcHVkID0gcHVkX2FsbG9jX29uZShOVUxMLCBhZGRyKTsKLQkJCWlmICghcHVk
KSB7Ci0JCQkJa3ZtX2VycigiQ2Fubm90IGFsbG9jYXRlIEh5cCBwdWRcbiIpOworCQkJcDRkID0g
cDRkX2FsbG9jX29uZShOVUxMLCBhZGRyKTsKKwkJCWlmICghcDRkKSB7CisJCQkJa3ZtX2Vycigi
Q2Fubm90IGFsbG9jYXRlIEh5cCBwNGRcbiIpOwogCQkJCWVyciA9IC1FTk9NRU07CiAJCQkJZ290
byBvdXQ7CiAJCQl9Ci0JCQlrdm1fcGdkX3BvcHVsYXRlKHBnZCwgcHVkKTsKKwkJCWt2bV9wZ2Rf
cG9wdWxhdGUocGdkLCBwNGQpOwogCQkJZ2V0X3BhZ2UodmlydF90b19wYWdlKHBnZCkpOwogCQl9
CiAKIAkJbmV4dCA9IHBnZF9hZGRyX2VuZChhZGRyLCBlbmQpOwotCQllcnIgPSBjcmVhdGVfaHlw
X3B1ZF9tYXBwaW5ncyhwZ2QsIGFkZHIsIG5leHQsIHBmbiwgcHJvdCk7CisJCWVyciA9IGNyZWF0
ZV9oeXBfcDRkX21hcHBpbmdzKHBnZCwgYWRkciwgbmV4dCwgcGZuLCBwcm90KTsKIAkJaWYgKGVy
cikKIAkJCWdvdG8gb3V0OwogCQlwZm4gKz0gKG5leHQgLSBhZGRyKSA+PiBQQUdFX1NISUZUOwpA
QCAtMTAxNSwyMiArMTEyMiw0MCBAQCB2b2lkIGt2bV9mcmVlX3N0YWdlMl9wZ2Qoc3RydWN0IGt2
bSAqa3ZtCiAJCWZyZWVfcGFnZXNfZXhhY3QocGdkLCBzdGFnZTJfcGdkX3NpemUoa3ZtKSk7CiB9
CiAKLXN0YXRpYyBwdWRfdCAqc3RhZ2UyX2dldF9wdWQoc3RydWN0IGt2bSAqa3ZtLCBzdHJ1Y3Qg
a3ZtX21tdV9tZW1vcnlfY2FjaGUgKmNhY2hlLAorc3RhdGljIHA0ZF90ICpzdGFnZTJfZ2V0X3A0
ZChzdHJ1Y3Qga3ZtICprdm0sIHN0cnVjdCBrdm1fbW11X21lbW9yeV9jYWNoZSAqY2FjaGUsCiAJ
CQkgICAgIHBoeXNfYWRkcl90IGFkZHIpCiB7CiAJcGdkX3QgKnBnZDsKLQlwdWRfdCAqcHVkOwor
CXA0ZF90ICpwNGQ7CiAKIAlwZ2QgPSBrdm0tPmFyY2gucGdkICsgc3RhZ2UyX3BnZF9pbmRleChr
dm0sIGFkZHIpOwogCWlmIChzdGFnZTJfcGdkX25vbmUoa3ZtLCAqcGdkKSkgewogCQlpZiAoIWNh
Y2hlKQogCQkJcmV0dXJuIE5VTEw7Ci0JCXB1ZCA9IG1tdV9tZW1vcnlfY2FjaGVfYWxsb2MoY2Fj
aGUpOwotCQlzdGFnZTJfcGdkX3BvcHVsYXRlKGt2bSwgcGdkLCBwdWQpOworCQlwNGQgPSBtbXVf
bWVtb3J5X2NhY2hlX2FsbG9jKGNhY2hlKTsKKwkJc3RhZ2UyX3BnZF9wb3B1bGF0ZShrdm0sIHBn
ZCwgcDRkKTsKIAkJZ2V0X3BhZ2UodmlydF90b19wYWdlKHBnZCkpOwogCX0KIAotCXJldHVybiBz
dGFnZTJfcHVkX29mZnNldChrdm0sIHBnZCwgYWRkcik7CisJcmV0dXJuIHN0YWdlMl9wNGRfb2Zm
c2V0KGt2bSwgcGdkLCBhZGRyKTsKK30KKworc3RhdGljIHB1ZF90ICpzdGFnZTJfZ2V0X3B1ZChz
dHJ1Y3Qga3ZtICprdm0sIHN0cnVjdCBrdm1fbW11X21lbW9yeV9jYWNoZSAqY2FjaGUsCisJCQkg
ICAgIHBoeXNfYWRkcl90IGFkZHIpCit7CisJcDRkX3QgKnA0ZDsKKwlwdWRfdCAqcHVkOworCisJ
cDRkID0gc3RhZ2UyX2dldF9wNGQoa3ZtLCBjYWNoZSwgYWRkcik7CisJaWYgKHN0YWdlMl9wNGRf
bm9uZShrdm0sICpwNGQpKSB7CisJCWlmICghY2FjaGUpCisJCQlyZXR1cm4gTlVMTDsKKwkJcHVk
ID0gbW11X21lbW9yeV9jYWNoZV9hbGxvYyhjYWNoZSk7CisJCXN0YWdlMl9wNGRfcG9wdWxhdGUo
a3ZtLCBwNGQsIHB1ZCk7CisJCWdldF9wYWdlKHZpcnRfdG9fcGFnZShwNGQpKTsKKwl9CisKKwly
ZXR1cm4gc3RhZ2UyX3B1ZF9vZmZzZXQoa3ZtLCBwNGQsIGFkZHIpOwogfQogCiBzdGF0aWMgcG1k
X3QgKnN0YWdlMl9nZXRfcG1kKHN0cnVjdCBrdm0gKmt2bSwgc3RydWN0IGt2bV9tbXVfbWVtb3J5
X2NhY2hlICpjYWNoZSwKQEAgLTE0MjMsMTggKzE1NDgsMTggQEAgc3RhdGljIHZvaWQgc3RhZ2Uy
X3dwX3BtZHMoc3RydWN0IGt2bSAqawogfQogCiAvKioKLSAqIHN0YWdlMl93cF9wdWRzIC0gd3Jp
dGUgcHJvdGVjdCBQR0QgcmFuZ2UKKyAqIHN0YWdlMl93cF9wdWRzIC0gd3JpdGUgcHJvdGVjdCBQ
NEQgcmFuZ2UKICAqIEBwZ2Q6CXBvaW50ZXIgdG8gcGdkIGVudHJ5CiAgKiBAYWRkcjoJcmFuZ2Ug
c3RhcnQgYWRkcmVzcwogICogQGVuZDoJcmFuZ2UgZW5kIGFkZHJlc3MKICAqLwotc3RhdGljIHZv
aWQgIHN0YWdlMl93cF9wdWRzKHN0cnVjdCBrdm0gKmt2bSwgcGdkX3QgKnBnZCwKK3N0YXRpYyB2
b2lkICBzdGFnZTJfd3BfcHVkcyhzdHJ1Y3Qga3ZtICprdm0sIHA0ZF90ICpwNGQsCiAJCQkgICAg
cGh5c19hZGRyX3QgYWRkciwgcGh5c19hZGRyX3QgZW5kKQogewogCXB1ZF90ICpwdWQ7CiAJcGh5
c19hZGRyX3QgbmV4dDsKIAotCXB1ZCA9IHN0YWdlMl9wdWRfb2Zmc2V0KGt2bSwgcGdkLCBhZGRy
KTsKKwlwdWQgPSBzdGFnZTJfcHVkX29mZnNldChrdm0sIHA0ZCwgYWRkcik7CiAJZG8gewogCQlu
ZXh0ID0gc3RhZ2UyX3B1ZF9hZGRyX2VuZChrdm0sIGFkZHIsIGVuZCk7CiAJCWlmICghc3RhZ2Uy
X3B1ZF9ub25lKGt2bSwgKnB1ZCkpIHsKQEAgLTE0NDksNiArMTU3NCwyNiBAQCBzdGF0aWMgdm9p
ZCAgc3RhZ2UyX3dwX3B1ZHMoc3RydWN0IGt2bSAqCiB9CiAKIC8qKgorICogc3RhZ2UyX3dwX3A0
ZHMgLSB3cml0ZSBwcm90ZWN0IFBHRCByYW5nZQorICogQHBnZDoJcG9pbnRlciB0byBwZ2QgZW50
cnkKKyAqIEBhZGRyOglyYW5nZSBzdGFydCBhZGRyZXNzCisgKiBAZW5kOglyYW5nZSBlbmQgYWRk
cmVzcworICovCitzdGF0aWMgdm9pZCAgc3RhZ2UyX3dwX3A0ZHMoc3RydWN0IGt2bSAqa3ZtLCBw
Z2RfdCAqcGdkLAorCQkJICAgIHBoeXNfYWRkcl90IGFkZHIsIHBoeXNfYWRkcl90IGVuZCkKK3sK
KwlwNGRfdCAqcDRkOworCXBoeXNfYWRkcl90IG5leHQ7CisKKwlwNGQgPSBzdGFnZTJfcDRkX29m
ZnNldChrdm0sIHBnZCwgYWRkcik7CisJZG8geworCQluZXh0ID0gc3RhZ2UyX3A0ZF9hZGRyX2Vu
ZChrdm0sIGFkZHIsIGVuZCk7CisJCWlmICghc3RhZ2UyX3A0ZF9ub25lKGt2bSwgKnA0ZCkpCisJ
CQlzdGFnZTJfd3BfcHVkcyhrdm0sIHA0ZCwgYWRkciwgbmV4dCk7CisJfSB3aGlsZSAocDRkKyss
IGFkZHIgPSBuZXh0LCBhZGRyICE9IGVuZCk7Cit9CisKKy8qKgogICogc3RhZ2UyX3dwX3Jhbmdl
KCkgLSB3cml0ZSBwcm90ZWN0IHN0YWdlMiBtZW1vcnkgcmVnaW9uIHJhbmdlCiAgKiBAa3ZtOglU
aGUgS1ZNIHBvaW50ZXIKICAqIEBhZGRyOglTdGFydCBhZGRyZXNzIG9mIHJhbmdlCkBAIC0xNDc1
LDcgKzE2MjAsNyBAQCBzdGF0aWMgdm9pZCBzdGFnZTJfd3BfcmFuZ2Uoc3RydWN0IGt2bSAqCiAJ
CQlicmVhazsKIAkJbmV4dCA9IHN0YWdlMl9wZ2RfYWRkcl9lbmQoa3ZtLCBhZGRyLCBlbmQpOwog
CQlpZiAoc3RhZ2UyX3BnZF9wcmVzZW50KGt2bSwgKnBnZCkpCi0JCQlzdGFnZTJfd3BfcHVkcyhr
dm0sIHBnZCwgYWRkciwgbmV4dCk7CisJCQlzdGFnZTJfd3BfcDRkcyhrdm0sIHBnZCwgYWRkciwg
bmV4dCk7CiAJfSB3aGlsZSAocGdkKyssIGFkZHIgPSBuZXh0LCBhZGRyICE9IGVuZCk7CiB9CiAK
LS0tIGEvYXJjaC9hcm02NC9tbS9mYXVsdC5jfmFybTY0LWFkZC1zdXBwb3J0LWZvci1mb2xkZWQt
cDRkLXBhZ2UtdGFibGVzCisrKyBhL2FyY2gvYXJtNjQvbW0vZmF1bHQuYwpAQCAtMTQ1LDYgKzE0
NSw3IEBAIHN0YXRpYyB2b2lkIHNob3dfcHRlKHVuc2lnbmVkIGxvbmcgYWRkcikKIAlwcl9hbGVy
dCgiWyUwMTZseF0gcGdkPSUwMTZsbHgiLCBhZGRyLCBwZ2RfdmFsKHBnZCkpOwogCiAJZG8gewor
CQlwNGRfdCAqcDRkcCwgcDRkOwogCQlwdWRfdCAqcHVkcCwgcHVkOwogCQlwbWRfdCAqcG1kcCwg
cG1kOwogCQlwdGVfdCAqcHRlcCwgcHRlOwpAQCAtMTUyLDcgKzE1MywxMyBAQCBzdGF0aWMgdm9p
ZCBzaG93X3B0ZSh1bnNpZ25lZCBsb25nIGFkZHIpCiAJCWlmIChwZ2Rfbm9uZShwZ2QpIHx8IHBn
ZF9iYWQocGdkKSkKIAkJCWJyZWFrOwogCi0JCXB1ZHAgPSBwdWRfb2Zmc2V0KHBnZHAsIGFkZHIp
OworCQlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKKwkJcDRkID0gUkVBRF9PTkNFKCpw
NGRwKTsKKwkJcHJfY29udCgiLCBwNGQ9JTAxNmxseCIsIHA0ZF92YWwocDRkKSk7CisJCWlmIChw
NGRfbm9uZShwNGQpIHx8IHA0ZF9iYWQocDRkKSkKKwkJCWJyZWFrOworCisJCXB1ZHAgPSBwdWRf
b2Zmc2V0KHA0ZHAsIGFkZHIpOwogCQlwdWQgPSBSRUFEX09OQ0UoKnB1ZHApOwogCQlwcl9jb250
KCIsIHB1ZD0lMDE2bGx4IiwgcHVkX3ZhbChwdWQpKTsKIAkJaWYgKHB1ZF9ub25lKHB1ZCkgfHwg
cHVkX2JhZChwdWQpKQotLS0gYS9hcmNoL2FybTY0L21tL2h1Z2V0bGJwYWdlLmN+YXJtNjQtYWRk
LXN1cHBvcnQtZm9yLWZvbGRlZC1wNGQtcGFnZS10YWJsZXMKKysrIGEvYXJjaC9hcm02NC9tbS9o
dWdldGxicGFnZS5jCkBAIC02NywxMSArNjcsMTMgQEAgc3RhdGljIGludCBmaW5kX251bV9jb250
aWcoc3RydWN0IG1tX3N0cgogCQkJICAgcHRlX3QgKnB0ZXAsIHNpemVfdCAqcGdzaXplKQogewog
CXBnZF90ICpwZ2RwID0gcGdkX29mZnNldChtbSwgYWRkcik7CisJcDRkX3QgKnA0ZHA7CiAJcHVk
X3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7CiAKIAkqcGdzaXplID0gUEFHRV9TSVpFOwotCXB1ZHAg
PSBwdWRfb2Zmc2V0KHBnZHAsIGFkZHIpOworCXA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGFkZHIp
OworCXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIGFkZHIpOwogCXBtZHAgPSBwbWRfb2Zmc2V0KHB1
ZHAsIGFkZHIpOwogCWlmICgocHRlX3QgKilwbWRwID09IHB0ZXApIHsKIAkJKnBnc2l6ZSA9IFBN
RF9TSVpFOwpAQCAtMjE3LDEyICsyMTksMTQgQEAgcHRlX3QgKmh1Z2VfcHRlX2FsbG9jKHN0cnVj
dCBtbV9zdHJ1Y3QgKgogCQkgICAgICB1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcg
c3opCiB7CiAJcGdkX3QgKnBnZHA7CisJcDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1ZHA7CiAJcG1k
X3QgKnBtZHA7CiAJcHRlX3QgKnB0ZXAgPSBOVUxMOwogCiAJcGdkcCA9IHBnZF9vZmZzZXQobW0s
IGFkZHIpOwotCXB1ZHAgPSBwdWRfYWxsb2MobW0sIHBnZHAsIGFkZHIpOworCXA0ZHAgPSBwNGRf
b2Zmc2V0KHBnZHAsIGFkZHIpOworCXB1ZHAgPSBwdWRfYWxsb2MobW0sIHA0ZHAsIGFkZHIpOwog
CWlmICghcHVkcCkKIAkJcmV0dXJuIE5VTEw7CiAKQEAgLTI2MSw2ICsyNjUsNyBAQCBwdGVfdCAq
aHVnZV9wdGVfb2Zmc2V0KHN0cnVjdCBtbV9zdHJ1Y3QKIAkJICAgICAgIHVuc2lnbmVkIGxvbmcg
YWRkciwgdW5zaWduZWQgbG9uZyBzeikKIHsKIAlwZ2RfdCAqcGdkcDsKKwlwNGRfdCAqcDRkcDsK
IAlwdWRfdCAqcHVkcCwgcHVkOwogCXBtZF90ICpwbWRwLCBwbWQ7CiAKQEAgLTI2OCw3ICsyNzMs
MTEgQEAgcHRlX3QgKmh1Z2VfcHRlX29mZnNldChzdHJ1Y3QgbW1fc3RydWN0CiAJaWYgKCFwZ2Rf
cHJlc2VudChSRUFEX09OQ0UoKnBnZHApKSkKIAkJcmV0dXJuIE5VTEw7CiAKLQlwdWRwID0gcHVk
X29mZnNldChwZ2RwLCBhZGRyKTsKKwlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlp
ZiAoIXA0ZF9wcmVzZW50KFJFQURfT05DRSgqcDRkcCkpKQorCQlyZXR1cm4gTlVMTDsKKworCXB1
ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIGFkZHIpOwogCXB1ZCA9IFJFQURfT05DRSgqcHVkcCk7CiAJ
aWYgKHN6ICE9IFBVRF9TSVpFICYmIHB1ZF9ub25lKHB1ZCkpCiAJCXJldHVybiBOVUxMOwotLS0g
YS9hcmNoL2FybTY0L21tL2thc2FuX2luaXQuY35hcm02NC1hZGQtc3VwcG9ydC1mb3ItZm9sZGVk
LXA0ZC1wYWdlLXRhYmxlcworKysgYS9hcmNoL2FybTY0L21tL2thc2FuX2luaXQuYwpAQCAtODQs
MTcgKzg0LDE3IEBAIHN0YXRpYyBwbWRfdCAqX19pbml0IGthc2FuX3BtZF9vZmZzZXQocHUKIAly
ZXR1cm4gZWFybHkgPyBwbWRfb2Zmc2V0X2tpbWcocHVkcCwgYWRkcikgOiBwbWRfb2Zmc2V0KHB1
ZHAsIGFkZHIpOwogfQogCi1zdGF0aWMgcHVkX3QgKl9faW5pdCBrYXNhbl9wdWRfb2Zmc2V0KHBn
ZF90ICpwZ2RwLCB1bnNpZ25lZCBsb25nIGFkZHIsIGludCBub2RlLAorc3RhdGljIHB1ZF90ICpf
X2luaXQga2FzYW5fcHVkX29mZnNldChwNGRfdCAqcDRkcCwgdW5zaWduZWQgbG9uZyBhZGRyLCBp
bnQgbm9kZSwKIAkJCQkgICAgICBib29sIGVhcmx5KQogewotCWlmIChwZ2Rfbm9uZShSRUFEX09O
Q0UoKnBnZHApKSkgeworCWlmIChwNGRfbm9uZShSRUFEX09OQ0UoKnA0ZHApKSkgewogCQlwaHlz
X2FkZHJfdCBwdWRfcGh5cyA9IGVhcmx5ID8KIAkJCQlfX3BhX3N5bWJvbChrYXNhbl9lYXJseV9z
aGFkb3dfcHVkKQogCQkJCQk6IGthc2FuX2FsbG9jX3plcm9lZF9wYWdlKG5vZGUpOwotCQlfX3Bn
ZF9wb3B1bGF0ZShwZ2RwLCBwdWRfcGh5cywgUE1EX1RZUEVfVEFCTEUpOworCQlfX3A0ZF9wb3B1
bGF0ZShwNGRwLCBwdWRfcGh5cywgUE1EX1RZUEVfVEFCTEUpOwogCX0KIAotCXJldHVybiBlYXJs
eSA/IHB1ZF9vZmZzZXRfa2ltZyhwZ2RwLCBhZGRyKSA6IHB1ZF9vZmZzZXQocGdkcCwgYWRkcik7
CisJcmV0dXJuIGVhcmx5ID8gcHVkX29mZnNldF9raW1nKHA0ZHAsIGFkZHIpIDogcHVkX29mZnNl
dChwNGRwLCBhZGRyKTsKIH0KIAogc3RhdGljIHZvaWQgX19pbml0IGthc2FuX3B0ZV9wb3B1bGF0
ZShwbWRfdCAqcG1kcCwgdW5zaWduZWQgbG9uZyBhZGRyLApAQCAtMTI2LDExICsxMjYsMTEgQEAg
c3RhdGljIHZvaWQgX19pbml0IGthc2FuX3BtZF9wb3B1bGF0ZShwdQogCX0gd2hpbGUgKHBtZHAr
KywgYWRkciA9IG5leHQsIGFkZHIgIT0gZW5kICYmIHBtZF9ub25lKFJFQURfT05DRSgqcG1kcCkp
KTsKIH0KIAotc3RhdGljIHZvaWQgX19pbml0IGthc2FuX3B1ZF9wb3B1bGF0ZShwZ2RfdCAqcGdk
cCwgdW5zaWduZWQgbG9uZyBhZGRyLAorc3RhdGljIHZvaWQgX19pbml0IGthc2FuX3B1ZF9wb3B1
bGF0ZShwNGRfdCAqcDRkcCwgdW5zaWduZWQgbG9uZyBhZGRyLAogCQkJCSAgICAgIHVuc2lnbmVk
IGxvbmcgZW5kLCBpbnQgbm9kZSwgYm9vbCBlYXJseSkKIHsKIAl1bnNpZ25lZCBsb25nIG5leHQ7
Ci0JcHVkX3QgKnB1ZHAgPSBrYXNhbl9wdWRfb2Zmc2V0KHBnZHAsIGFkZHIsIG5vZGUsIGVhcmx5
KTsKKwlwdWRfdCAqcHVkcCA9IGthc2FuX3B1ZF9vZmZzZXQocDRkcCwgYWRkciwgbm9kZSwgZWFy
bHkpOwogCiAJZG8gewogCQluZXh0ID0gcHVkX2FkZHJfZW5kKGFkZHIsIGVuZCk7CkBAIC0xMzgs
NiArMTM4LDE4IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBrYXNhbl9wdWRfcG9wdWxhdGUocGcKIAl9
IHdoaWxlIChwdWRwKyssIGFkZHIgPSBuZXh0LCBhZGRyICE9IGVuZCAmJiBwdWRfbm9uZShSRUFE
X09OQ0UoKnB1ZHApKSk7CiB9CiAKK3N0YXRpYyB2b2lkIF9faW5pdCBrYXNhbl9wNGRfcG9wdWxh
dGUocGdkX3QgKnBnZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKKwkJCQkgICAgICB1bnNpZ25lZCBs
b25nIGVuZCwgaW50IG5vZGUsIGJvb2wgZWFybHkpCit7CisJdW5zaWduZWQgbG9uZyBuZXh0Owor
CXA0ZF90ICpwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKKworCWRvIHsKKwkJbmV4dCA9
IHA0ZF9hZGRyX2VuZChhZGRyLCBlbmQpOworCQlrYXNhbl9wdWRfcG9wdWxhdGUocDRkcCwgYWRk
ciwgbmV4dCwgbm9kZSwgZWFybHkpOworCX0gd2hpbGUgKHA0ZHArKywgYWRkciA9IG5leHQsIGFk
ZHIgIT0gZW5kKTsKK30KKwogc3RhdGljIHZvaWQgX19pbml0IGthc2FuX3BnZF9wb3B1bGF0ZSh1
bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgZW5kLAogCQkJCSAgICAgIGludCBub2Rl
LCBib29sIGVhcmx5KQogewpAQCAtMTQ3LDcgKzE1OSw3IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBr
YXNhbl9wZ2RfcG9wdWxhdGUodW4KIAlwZ2RwID0gcGdkX29mZnNldF9rKGFkZHIpOwogCWRvIHsK
IAkJbmV4dCA9IHBnZF9hZGRyX2VuZChhZGRyLCBlbmQpOwotCQlrYXNhbl9wdWRfcG9wdWxhdGUo
cGdkcCwgYWRkciwgbmV4dCwgbm9kZSwgZWFybHkpOworCQlrYXNhbl9wNGRfcG9wdWxhdGUocGdk
cCwgYWRkciwgbmV4dCwgbm9kZSwgZWFybHkpOwogCX0gd2hpbGUgKHBnZHArKywgYWRkciA9IG5l
eHQsIGFkZHIgIT0gZW5kKTsKIH0KIAotLS0gYS9hcmNoL2FybTY0L21tL21tdS5jfmFybTY0LWFk
ZC1zdXBwb3J0LWZvci1mb2xkZWQtcDRkLXBhZ2UtdGFibGVzCisrKyBhL2FyY2gvYXJtNjQvbW0v
bW11LmMKQEAgLTI5MCwxOCArMjkwLDE5IEBAIHN0YXRpYyB2b2lkIGFsbG9jX2luaXRfcHVkKHBn
ZF90ICpwZ2RwLAogewogCXVuc2lnbmVkIGxvbmcgbmV4dDsKIAlwdWRfdCAqcHVkcDsKLQlwZ2Rf
dCBwZ2QgPSBSRUFEX09OQ0UoKnBnZHApOworCXA0ZF90ICpwNGRwID0gcDRkX29mZnNldChwZ2Rw
LCBhZGRyKTsKKwlwNGRfdCBwNGQgPSBSRUFEX09OQ0UoKnA0ZHApOwogCi0JaWYgKHBnZF9ub25l
KHBnZCkpIHsKKwlpZiAocDRkX25vbmUocDRkKSkgewogCQlwaHlzX2FkZHJfdCBwdWRfcGh5czsK
IAkJQlVHX09OKCFwZ3RhYmxlX2FsbG9jKTsKIAkJcHVkX3BoeXMgPSBwZ3RhYmxlX2FsbG9jKFBV
RF9TSElGVCk7Ci0JCV9fcGdkX3BvcHVsYXRlKHBnZHAsIHB1ZF9waHlzLCBQVURfVFlQRV9UQUJM
RSk7Ci0JCXBnZCA9IFJFQURfT05DRSgqcGdkcCk7CisJCV9fcDRkX3BvcHVsYXRlKHA0ZHAsIHB1
ZF9waHlzLCBQVURfVFlQRV9UQUJMRSk7CisJCXA0ZCA9IFJFQURfT05DRSgqcDRkcCk7CiAJfQot
CUJVR19PTihwZ2RfYmFkKHBnZCkpOworCUJVR19PTihwNGRfYmFkKHA0ZCkpOwogCi0JcHVkcCA9
IHB1ZF9zZXRfZml4bWFwX29mZnNldChwZ2RwLCBhZGRyKTsKKwlwdWRwID0gcHVkX3NldF9maXht
YXBfb2Zmc2V0KHA0ZHAsIGFkZHIpOwogCWRvIHsKIAkJcHVkX3Qgb2xkX3B1ZCA9IFJFQURfT05D
RSgqcHVkcCk7CiAKQEAgLTY3Miw2ICs2NzMsNyBAQCBzdGF0aWMgdm9pZCBfX2luaXQgbWFwX2tl
cm5lbChwZ2RfdCAqcGdkCiAJCQlSRUFEX09OQ0UoKnBnZF9vZmZzZXRfayhGSVhBRERSX1NUQVJU
KSkpOwogCX0gZWxzZSBpZiAoQ09ORklHX1BHVEFCTEVfTEVWRUxTID4gMykgewogCQlwZ2RfdCAq
Ym1fcGdkcDsKKwkJcDRkX3QgKmJtX3A0ZHA7CiAJCXB1ZF90ICpibV9wdWRwOwogCQkvKgogCQkg
KiBUaGUgZml4bWFwIHNoYXJlcyBpdHMgdG9wIGxldmVsIHBnZCBlbnRyeSB3aXRoIHRoZSBrZXJu
ZWwKQEAgLTY4MSw3ICs2ODMsOCBAQCBzdGF0aWMgdm9pZCBfX2luaXQgbWFwX2tlcm5lbChwZ2Rf
dCAqcGdkCiAJCSAqLwogCQlCVUdfT04oIUlTX0VOQUJMRUQoQ09ORklHX0FSTTY0XzE2S19QQUdF
UykpOwogCQlibV9wZ2RwID0gcGdkX29mZnNldF9yYXcocGdkcCwgRklYQUREUl9TVEFSVCk7Ci0J
CWJtX3B1ZHAgPSBwdWRfc2V0X2ZpeG1hcF9vZmZzZXQoYm1fcGdkcCwgRklYQUREUl9TVEFSVCk7
CisJCWJtX3A0ZHAgPSBwNGRfb2Zmc2V0KGJtX3BnZHAsIEZJWEFERFJfU1RBUlQpOworCQlibV9w
dWRwID0gcHVkX3NldF9maXhtYXBfb2Zmc2V0KGJtX3A0ZHAsIEZJWEFERFJfU1RBUlQpOwogCQlw
dWRfcG9wdWxhdGUoJmluaXRfbW0sIGJtX3B1ZHAsIGxtX2FsaWFzKGJtX3BtZCkpOwogCQlwdWRf
Y2xlYXJfZml4bWFwKCk7CiAJfSBlbHNlIHsKQEAgLTcxNSw2ICs3MTgsNyBAQCB2b2lkIF9faW5p
dCBwYWdpbmdfaW5pdCh2b2lkKQogaW50IGtlcm5fYWRkcl92YWxpZCh1bnNpZ25lZCBsb25nIGFk
ZHIpCiB7CiAJcGdkX3QgKnBnZHA7CisJcDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1ZHAsIHB1ZDsK
IAlwbWRfdCAqcG1kcCwgcG1kOwogCXB0ZV90ICpwdGVwLCBwdGU7CkBAIC03MjYsNyArNzMwLDEx
IEBAIGludCBrZXJuX2FkZHJfdmFsaWQodW5zaWduZWQgbG9uZyBhZGRyKQogCWlmIChwZ2Rfbm9u
ZShSRUFEX09OQ0UoKnBnZHApKSkKIAkJcmV0dXJuIDA7CiAKLQlwdWRwID0gcHVkX29mZnNldChw
Z2RwLCBhZGRyKTsKKwlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlpZiAocDRkX25v
bmUoUkVBRF9PTkNFKCpwNGRwKSkpCisJCXJldHVybiAwOworCisJcHVkcCA9IHB1ZF9vZmZzZXQo
cDRkcCwgYWRkcik7CiAJcHVkID0gUkVBRF9PTkNFKCpwdWRwKTsKIAlpZiAocHVkX25vbmUocHVk
KSkKIAkJcmV0dXJuIDA7CkBAIC0xMDY5LDYgKzEwNzcsNyBAQCBpbnQgX19tZW1pbml0IHZtZW1t
YXBfcG9wdWxhdGUodW5zaWduZWQKIAl1bnNpZ25lZCBsb25nIGFkZHIgPSBzdGFydDsKIAl1bnNp
Z25lZCBsb25nIG5leHQ7CiAJcGdkX3QgKnBnZHA7CisJcDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1
ZHA7CiAJcG1kX3QgKnBtZHA7CiAKQEAgLTEwNzksNyArMTA4OCwxMSBAQCBpbnQgX19tZW1pbml0
IHZtZW1tYXBfcG9wdWxhdGUodW5zaWduZWQKIAkJaWYgKCFwZ2RwKQogCQkJcmV0dXJuIC1FTk9N
RU07CiAKLQkJcHVkcCA9IHZtZW1tYXBfcHVkX3BvcHVsYXRlKHBnZHAsIGFkZHIsIG5vZGUpOwor
CQlwNGRwID0gdm1lbW1hcF9wNGRfcG9wdWxhdGUocGdkcCwgYWRkciwgbm9kZSk7CisJCWlmICgh
cDRkcCkKKwkJCXJldHVybiAtRU5PTUVNOworCisJCXB1ZHAgPSB2bWVtbWFwX3B1ZF9wb3B1bGF0
ZShwNGRwLCBhZGRyLCBub2RlKTsKIAkJaWYgKCFwdWRwKQogCQkJcmV0dXJuIC1FTk9NRU07CiAK
QEAgLTExMTQsMTEgKzExMjcsMTIgQEAgdm9pZCB2bWVtbWFwX2ZyZWUodW5zaWduZWQgbG9uZyBz
dGFydCwgdQogc3RhdGljIGlubGluZSBwdWRfdCAqIGZpeG1hcF9wdWQodW5zaWduZWQgbG9uZyBh
ZGRyKQogewogCXBnZF90ICpwZ2RwID0gcGdkX29mZnNldF9rKGFkZHIpOwotCXBnZF90IHBnZCA9
IFJFQURfT05DRSgqcGdkcCk7CisJcDRkX3QgKnA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGFkZHIp
OworCXA0ZF90IHA0ZCA9IFJFQURfT05DRSgqcDRkcCk7CiAKLQlCVUdfT04ocGdkX25vbmUocGdk
KSB8fCBwZ2RfYmFkKHBnZCkpOworCUJVR19PTihwNGRfbm9uZShwNGQpIHx8IHA0ZF9iYWQocDRk
KSk7CiAKLQlyZXR1cm4gcHVkX29mZnNldF9raW1nKHBnZHAsIGFkZHIpOworCXJldHVybiBwdWRf
b2Zmc2V0X2tpbWcocDRkcCwgYWRkcik7CiB9CiAKIHN0YXRpYyBpbmxpbmUgcG1kX3QgKiBmaXht
YXBfcG1kKHVuc2lnbmVkIGxvbmcgYWRkcikKQEAgLTExNDQsMjUgKzExNTgsMjcgQEAgc3RhdGlj
IGlubGluZSBwdGVfdCAqIGZpeG1hcF9wdGUodW5zaWduZQogICovCiB2b2lkIF9faW5pdCBlYXJs
eV9maXhtYXBfaW5pdCh2b2lkKQogewotCXBnZF90ICpwZ2RwLCBwZ2Q7CisJcGdkX3QgKnBnZHA7
CisJcDRkX3QgKnA0ZHAsIHA0ZDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAl1bnNp
Z25lZCBsb25nIGFkZHIgPSBGSVhBRERSX1NUQVJUOwogCiAJcGdkcCA9IHBnZF9vZmZzZXRfayhh
ZGRyKTsKLQlwZ2QgPSBSRUFEX09OQ0UoKnBnZHApOworCXA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAs
IGFkZHIpOworCXA0ZCA9IFJFQURfT05DRSgqcDRkcCk7CiAJaWYgKENPTkZJR19QR1RBQkxFX0xF
VkVMUyA+IDMgJiYKLQkgICAgIShwZ2Rfbm9uZShwZ2QpIHx8IHBnZF9wYWdlX3BhZGRyKHBnZCkg
PT0gX19wYV9zeW1ib2woYm1fcHVkKSkpIHsKKwkgICAgIShwNGRfbm9uZShwNGQpIHx8IHA0ZF9w
YWdlX3BhZGRyKHA0ZCkgPT0gX19wYV9zeW1ib2woYm1fcHVkKSkpIHsKIAkJLyoKIAkJICogV2Ug
b25seSBlbmQgdXAgaGVyZSBpZiB0aGUga2VybmVsIG1hcHBpbmcgYW5kIHRoZSBmaXhtYXAKIAkJ
ICogc2hhcmUgdGhlIHRvcCBsZXZlbCBwZ2QgZW50cnksIHdoaWNoIHNob3VsZCBvbmx5IGhhcHBl
biBvbgogCQkgKiAxNmsvNCBsZXZlbHMgY29uZmlndXJhdGlvbnMuCiAJCSAqLwogCQlCVUdfT04o
IUlTX0VOQUJMRUQoQ09ORklHX0FSTTY0XzE2S19QQUdFUykpOwotCQlwdWRwID0gcHVkX29mZnNl
dF9raW1nKHBnZHAsIGFkZHIpOworCQlwdWRwID0gcHVkX29mZnNldF9raW1nKHA0ZHAsIGFkZHIp
OwogCX0gZWxzZSB7Ci0JCWlmIChwZ2Rfbm9uZShwZ2QpKQotCQkJX19wZ2RfcG9wdWxhdGUocGdk
cCwgX19wYV9zeW1ib2woYm1fcHVkKSwgUFVEX1RZUEVfVEFCTEUpOworCQlpZiAocDRkX25vbmUo
cDRkKSkKKwkJCV9fcDRkX3BvcHVsYXRlKHA0ZHAsIF9fcGFfc3ltYm9sKGJtX3B1ZCksIFBVRF9U
WVBFX1RBQkxFKTsKIAkJcHVkcCA9IGZpeG1hcF9wdWQoYWRkcik7CiAJfQogCWlmIChwdWRfbm9u
ZShSRUFEX09OQ0UoKnB1ZHApKSkKLS0tIGEvYXJjaC9hcm02NC9tbS9wYWdlYXR0ci5jfmFybTY0
LWFkZC1zdXBwb3J0LWZvci1mb2xkZWQtcDRkLXBhZ2UtdGFibGVzCisrKyBhL2FyY2gvYXJtNjQv
bW0vcGFnZWF0dHIuYwpAQCAtMTk4LDYgKzE5OCw3IEBAIHZvaWQgX19rZXJuZWxfbWFwX3BhZ2Vz
KHN0cnVjdCBwYWdlICpwYWcKIGJvb2wga2VybmVsX3BhZ2VfcHJlc2VudChzdHJ1Y3QgcGFnZSAq
cGFnZSkKIHsKIAlwZ2RfdCAqcGdkcDsKKwlwNGRfdCAqcDRkcDsKIAlwdWRfdCAqcHVkcCwgcHVk
OwogCXBtZF90ICpwbWRwLCBwbWQ7CiAJcHRlX3QgKnB0ZXA7CkBAIC0yMTAsNyArMjExLDExIEBA
IGJvb2wga2VybmVsX3BhZ2VfcHJlc2VudChzdHJ1Y3QgcGFnZSAqcGEKIAlpZiAocGdkX25vbmUo
UkVBRF9PTkNFKCpwZ2RwKSkpCiAJCXJldHVybiBmYWxzZTsKIAotCXB1ZHAgPSBwdWRfb2Zmc2V0
KHBnZHAsIGFkZHIpOworCXA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGFkZHIpOworCWlmIChwNGRf
bm9uZShSRUFEX09OQ0UoKnA0ZHApKSkKKwkJcmV0dXJuIGZhbHNlOworCisJcHVkcCA9IHB1ZF9v
ZmZzZXQocDRkcCwgYWRkcik7CiAJcHVkID0gUkVBRF9PTkNFKCpwdWRwKTsKIAlpZiAocHVkX25v
bmUocHVkKSkKIAkJcmV0dXJuIGZhbHNlOwpfCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fXwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3BlblJJU0NAbGlzdHMu
bGlicmVjb3Jlcy5vcmcKaHR0cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9saXN0aW5mby9vcGVu
cmlzYwo=
