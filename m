Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id E00EC1B20B4
	for <lists+openrisc@lfdr.de>; Tue, 21 Apr 2020 10:01:57 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 899F220AB6;
	Tue, 21 Apr 2020 10:01:57 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id A52F8207A9
 for <openrisc@lists.librecores.org>; Tue, 14 Apr 2020 17:35:39 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 1B9A0206D5;
 Tue, 14 Apr 2020 15:35:28 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1586878538;
 bh=ZNYcPVbuWKw+7iLxYHg+I6pfL+0qwx1BEiCX4nUUa6M=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=kYAAZEpaOKGY0xY00uZoMUAb1exJG4bBBJAazwxp20IdsTXgNtrviTBDHKRIiA2Na
 jbTFAiWmWxfkb8NH0fkbC5j4sZRXXQnLqJUbvLwAEmegu8y86cUwcG0vFP7QW8j534
 JwRqDkNd/dlPTsAfgSQt5Gid72hlU2Vdm+3cZ5YI=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Tue, 14 Apr 2020 18:34:44 +0300
Message-Id: <20200414153455.21744-4-rppt@kernel.org>
X-Mailer: git-send-email 2.25.1
In-Reply-To: <20200414153455.21744-1-rppt@kernel.org>
References: <20200414153455.21744-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Tue, 21 Apr 2020 10:01:35 +0200
Subject: [OpenRISC] [PATCH v4 03/14] arm64: add support for folded p4d page
 tables
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 Geert Uytterhoeven <geert+renesas@glider.be>, linux-sh@vger.kernel.org,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>, linux-mm@kvack.org,
 Paul Mackerras <paulus@samba.org>, linux-hexagon@vger.kernel.org,
 Will Deacon <will@kernel.org>, kvmarm@lists.cs.columbia.edu,
 Jonas Bonn <jonas@southpole.se>, linux-arch@vger.kernel.org,
 Brian Cain <bcain@codeaurora.org>, Marc Zyngier <maz@kernel.org>,
 Russell King <linux@armlinux.org.uk>, Ley Foon Tan <ley.foon.tan@intel.com>,
 Mike Rapoport <rppt@linux.ibm.com>, Catalin Marinas <catalin.marinas@arm.com>,
 Julien Thierry <julien.thierry.kdev@gmail.com>,
 uclinux-h8-devel@lists.sourceforge.jp, Fenghua Yu <fenghua.yu@intel.com>,
 Arnd Bergmann <arnd@arndb.de>, Suzuki K Poulose <suzuki.poulose@arm.com>,
 kvm-ppc@vger.kernel.org, openrisc@lists.librecores.org,
 Guan Xuetao <gxt@pku.edu.cn>, linux-arm-kernel@lists.infradead.org,
 Christophe Leroy <christophe.leroy@c-s.fr>, Tony Luck <tony.luck@intel.com>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, linux-kernel@vger.kernel.org,
 James Morse <james.morse@arm.com>, Michael Ellerman <mpe@ellerman.id.au>,
 nios2-dev@lists.rocketboards.org, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKSW1wbGVtZW50IHByaW1p
dGl2ZXMgbmVjZXNzYXJ5IGZvciB0aGUgNHRoIGxldmVsIGZvbGRpbmcsIGFkZCB3YWxrcyBvZiBw
NGQKbGV2ZWwgd2hlcmUgYXBwcm9wcmlhdGUsIHJlcGxhY2UgNWxldmVsLWZpeHVwLmggd2l0aCBw
Z3RhYmxlLW5vcDRkLmggYW5kCnJlbW92ZSBfX0FSQ0hfVVNFXzVMRVZFTF9IQUNLLgoKU2lnbmVk
LW9mZi1ieTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgotLS0KIGFyY2gvYXJt
NjQvaW5jbHVkZS9hc20va3ZtX21tdS5oICAgICAgICB8ICAxMCArLQogYXJjaC9hcm02NC9pbmNs
dWRlL2FzbS9wZ2FsbG9jLmggICAgICAgIHwgIDEwICstCiBhcmNoL2FybTY0L2luY2x1ZGUvYXNt
L3BndGFibGUtdHlwZXMuaCAgfCAgIDUgKy0KIGFyY2gvYXJtNjQvaW5jbHVkZS9hc20vcGd0YWJs
ZS5oICAgICAgICB8ICAzNyArKystLQogYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9zdGFnZTJfcGd0
YWJsZS5oIHwgIDQ4ICsrKystLQogYXJjaC9hcm02NC9rZXJuZWwvaGliZXJuYXRlLmMgICAgICAg
ICAgIHwgIDQ0ICsrKystCiBhcmNoL2FybTY0L21tL2ZhdWx0LmMgICAgICAgICAgICAgICAgICAg
fCAgIDkgKy0KIGFyY2gvYXJtNjQvbW0vaHVnZXRsYnBhZ2UuYyAgICAgICAgICAgICB8ICAxNSAr
LQogYXJjaC9hcm02NC9tbS9rYXNhbl9pbml0LmMgICAgICAgICAgICAgIHwgIDI2ICsrLQogYXJj
aC9hcm02NC9tbS9tbXUuYyAgICAgICAgICAgICAgICAgICAgIHwgIDUyICsrKystLQogYXJjaC9h
cm02NC9tbS9wYWdlYXR0ci5jICAgICAgICAgICAgICAgIHwgICA3ICstCiB2aXJ0L2t2bS9hcm0v
bW11LmMgICAgICAgICAgICAgICAgICAgICAgfCAyMDkgKysrKysrKysrKysrKysrKysrKystLS0t
CiAxMiBmaWxlcyBjaGFuZ2VkLCAzNjggaW5zZXJ0aW9ucygrKSwgMTA0IGRlbGV0aW9ucygtKQoK
ZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20va3ZtX21tdS5oIGIvYXJjaC9hcm02
NC9pbmNsdWRlL2FzbS9rdm1fbW11LmgKaW5kZXggMzBiMGU4ZDZiODk1Li44MjU1ZmFiMmU0NDEg
MTAwNjQ0Ci0tLSBhL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20va3ZtX21tdS5oCisrKyBiL2FyY2gv
YXJtNjQvaW5jbHVkZS9hc20va3ZtX21tdS5oCkBAIC0xNzIsOCArMTcyLDggQEAgdm9pZCBrdm1f
Y2xlYXJfaHlwX2lkbWFwKHZvaWQpOwogCV9fcG1kKF9fcGh5c190b19wbWRfdmFsKF9fcGEocHRl
cCkpIHwgUE1EX1RZUEVfVEFCTEUpCiAjZGVmaW5lIGt2bV9ta19wdWQocG1kcCkJCQkJCVwKIAlf
X3B1ZChfX3BoeXNfdG9fcHVkX3ZhbChfX3BhKHBtZHApKSB8IFBNRF9UWVBFX1RBQkxFKQotI2Rl
ZmluZSBrdm1fbWtfcGdkKHB1ZHApCQkJCQlcCi0JX19wZ2QoX19waHlzX3RvX3BnZF92YWwoX19w
YShwdWRwKSkgfCBQVURfVFlQRV9UQUJMRSkKKyNkZWZpbmUga3ZtX21rX3A0ZChwbWRwKQkJCQkJ
XAorCV9fcDRkKF9fcGh5c190b19wNGRfdmFsKF9fcGEocG1kcCkpIHwgUFVEX1RZUEVfVEFCTEUp
CiAKICNkZWZpbmUga3ZtX3NldF9wdWQocHVkcCwgcHVkKQkJc2V0X3B1ZChwdWRwLCBwdWQpCiAK
QEAgLTI5OSw2ICsyOTksMTIgQEAgc3RhdGljIGlubGluZSBib29sIGt2bV9zMnB1ZF95b3VuZyhw
dWRfdCBwdWQpCiAjZGVmaW5lIGh5cF9wdWRfdGFibGVfZW1wdHkocHVkcCkga3ZtX3BhZ2VfZW1w
dHkocHVkcCkKICNlbmRpZgogCisjaWZkZWYgX19QQUdFVEFCTEVfUDREX0ZPTERFRAorI2RlZmlu
ZSBoeXBfcDRkX3RhYmxlX2VtcHR5KHA0ZHApICgwKQorI2Vsc2UKKyNkZWZpbmUgaHlwX3A0ZF90
YWJsZV9lbXB0eShwNGRwKSBrdm1fcGFnZV9lbXB0eShwNGRwKQorI2VuZGlmCisKIHN0cnVjdCBr
dm07CiAKICNkZWZpbmUga3ZtX2ZsdXNoX2RjYWNoZV90b19wb2MoYSxsKQlfX2ZsdXNoX2RjYWNo
ZV9hcmVhKChhKSwgKGwpKQpkaWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9wZ2Fs
bG9jLmggYi9hcmNoL2FybTY0L2luY2x1ZGUvYXNtL3BnYWxsb2MuaAppbmRleCAxNzJkNzZmYTAy
NDUuLjU4ZTkzNTgzZGRiNiAxMDA2NDQKLS0tIGEvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9wZ2Fs
bG9jLmgKKysrIGIvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9wZ2FsbG9jLmgKQEAgLTczLDE3ICs3
MywxNyBAQCBzdGF0aWMgaW5saW5lIHZvaWQgcHVkX2ZyZWUoc3RydWN0IG1tX3N0cnVjdCAqbW0s
IHB1ZF90ICpwdWRwKQogCWZyZWVfcGFnZSgodW5zaWduZWQgbG9uZylwdWRwKTsKIH0KIAotc3Rh
dGljIGlubGluZSB2b2lkIF9fcGdkX3BvcHVsYXRlKHBnZF90ICpwZ2RwLCBwaHlzX2FkZHJfdCBw
dWRwLCBwZ2R2YWxfdCBwcm90KQorc3RhdGljIGlubGluZSB2b2lkIF9fcDRkX3BvcHVsYXRlKHA0
ZF90ICpwNGRwLCBwaHlzX2FkZHJfdCBwdWRwLCBwNGR2YWxfdCBwcm90KQogewotCXNldF9wZ2Qo
cGdkcCwgX19wZ2QoX19waHlzX3RvX3BnZF92YWwocHVkcCkgfCBwcm90KSk7CisJc2V0X3A0ZChw
NGRwLCBfX3A0ZChfX3BoeXNfdG9fcDRkX3ZhbChwdWRwKSB8IHByb3QpKTsKIH0KIAotc3RhdGlj
IGlubGluZSB2b2lkIHBnZF9wb3B1bGF0ZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgcGdkX3QgKnBn
ZHAsIHB1ZF90ICpwdWRwKQorc3RhdGljIGlubGluZSB2b2lkIHA0ZF9wb3B1bGF0ZShzdHJ1Y3Qg
bW1fc3RydWN0ICptbSwgcDRkX3QgKnA0ZHAsIHB1ZF90ICpwdWRwKQogewotCV9fcGdkX3BvcHVs
YXRlKHBnZHAsIF9fcGEocHVkcCksIFBVRF9UWVBFX1RBQkxFKTsKKwlfX3A0ZF9wb3B1bGF0ZShw
NGRwLCBfX3BhKHB1ZHApLCBQVURfVFlQRV9UQUJMRSk7CiB9CiAjZWxzZQotc3RhdGljIGlubGlu
ZSB2b2lkIF9fcGdkX3BvcHVsYXRlKHBnZF90ICpwZ2RwLCBwaHlzX2FkZHJfdCBwdWRwLCBwZ2R2
YWxfdCBwcm90KQorc3RhdGljIGlubGluZSB2b2lkIF9fcDRkX3BvcHVsYXRlKHA0ZF90ICpwNGRw
LCBwaHlzX2FkZHJfdCBwdWRwLCBwNGR2YWxfdCBwcm90KQogewogCUJVSUxEX0JVRygpOwogfQpk
aWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9wZ3RhYmxlLXR5cGVzLmggYi9hcmNo
L2FybTY0L2luY2x1ZGUvYXNtL3BndGFibGUtdHlwZXMuaAppbmRleCBhY2IwNzUxYTY2MDYuLmI4
ZjE1OGFlMjUyNyAxMDA2NDQKLS0tIGEvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9wZ3RhYmxlLXR5
cGVzLmgKKysrIGIvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9wZ3RhYmxlLXR5cGVzLmgKQEAgLTE0
LDYgKzE0LDcgQEAKIHR5cGVkZWYgdTY0IHB0ZXZhbF90OwogdHlwZWRlZiB1NjQgcG1kdmFsX3Q7
CiB0eXBlZGVmIHU2NCBwdWR2YWxfdDsKK3R5cGVkZWYgdTY0IHA0ZHZhbF90OwogdHlwZWRlZiB1
NjQgcGdkdmFsX3Q7CiAKIC8qCkBAIC00NCwxMyArNDUsMTEgQEAgdHlwZWRlZiBzdHJ1Y3QgeyBw
dGV2YWxfdCBwZ3Byb3Q7IH0gcGdwcm90X3Q7CiAjZGVmaW5lIF9fcGdwcm90KHgpCSgocGdwcm90
X3QpIHsgKHgpIH0gKQogCiAjaWYgQ09ORklHX1BHVEFCTEVfTEVWRUxTID09IDIKLSNkZWZpbmUg
X19BUkNIX1VTRV81TEVWRUxfSEFDSwogI2luY2x1ZGUgPGFzbS1nZW5lcmljL3BndGFibGUtbm9w
bWQuaD4KICNlbGlmIENPTkZJR19QR1RBQkxFX0xFVkVMUyA9PSAzCi0jZGVmaW5lIF9fQVJDSF9V
U0VfNUxFVkVMX0hBQ0sKICNpbmNsdWRlIDxhc20tZ2VuZXJpYy9wZ3RhYmxlLW5vcHVkLmg+CiAj
ZWxpZiBDT05GSUdfUEdUQUJMRV9MRVZFTFMgPT0gNAotI2luY2x1ZGUgPGFzbS1nZW5lcmljLzVs
ZXZlbC1maXh1cC5oPgorI2luY2x1ZGUgPGFzbS1nZW5lcmljL3BndGFibGUtbm9wNGQuaD4KICNl
bmRpZgogCiAjZW5kaWYJLyogX19BU01fUEdUQUJMRV9UWVBFU19IICovCmRpZmYgLS1naXQgYS9h
cmNoL2FybTY0L2luY2x1ZGUvYXNtL3BndGFibGUuaCBiL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20v
cGd0YWJsZS5oCmluZGV4IDUzOGM4NWU2MmY4Ni4uYzIzYzVhNGU2ZGM2IDEwMDY0NAotLS0gYS9h
cmNoL2FybTY0L2luY2x1ZGUvYXNtL3BndGFibGUuaAorKysgYi9hcmNoL2FybTY0L2luY2x1ZGUv
YXNtL3BndGFibGUuaApAQCAtMjk4LDYgKzI5OCwxMSBAQCBzdGF0aWMgaW5saW5lIHB0ZV90IHBn
ZF9wdGUocGdkX3QgcGdkKQogCXJldHVybiBfX3B0ZShwZ2RfdmFsKHBnZCkpOwogfQogCitzdGF0
aWMgaW5saW5lIHB0ZV90IHA0ZF9wdGUocDRkX3QgcDRkKQoreworCXJldHVybiBfX3B0ZShwNGRf
dmFsKHA0ZCkpOworfQorCiBzdGF0aWMgaW5saW5lIHB0ZV90IHB1ZF9wdGUocHVkX3QgcHVkKQog
ewogCXJldHVybiBfX3B0ZShwdWRfdmFsKHB1ZCkpOwpAQCAtNDAxLDYgKzQwNiw5IEBAIHN0YXRp
YyBpbmxpbmUgcG1kX3QgcG1kX21rZGV2bWFwKHBtZF90IHBtZCkKIAogI2RlZmluZSBzZXRfcG1k
X2F0KG1tLCBhZGRyLCBwbWRwLCBwbWQpCXNldF9wdGVfYXQobW0sIGFkZHIsIChwdGVfdCAqKXBt
ZHAsIHBtZF9wdGUocG1kKSkKIAorI2RlZmluZSBfX3A0ZF90b19waHlzKHA0ZCkJX19wdGVfdG9f
cGh5cyhwNGRfcHRlKHA0ZCkpCisjZGVmaW5lIF9fcGh5c190b19wNGRfdmFsKHBoeXMpCV9fcGh5
c190b19wdGVfdmFsKHBoeXMpCisKICNkZWZpbmUgX19wZ2RfdG9fcGh5cyhwZ2QpCV9fcHRlX3Rv
X3BoeXMocGdkX3B0ZShwZ2QpKQogI2RlZmluZSBfX3BoeXNfdG9fcGdkX3ZhbChwaHlzKQlfX3Bo
eXNfdG9fcHRlX3ZhbChwaHlzKQogCkBAIC01ODgsNDkgKzU5Niw1MCBAQCBzdGF0aWMgaW5saW5l
IHBoeXNfYWRkcl90IHB1ZF9wYWdlX3BhZGRyKHB1ZF90IHB1ZCkKIAogI2RlZmluZSBwdWRfRVJS
T1IocHVkKQkJX19wdWRfZXJyb3IoX19GSUxFX18sIF9fTElORV9fLCBwdWRfdmFsKHB1ZCkpCiAK
LSNkZWZpbmUgcGdkX25vbmUocGdkKQkJKCFwZ2RfdmFsKHBnZCkpCi0jZGVmaW5lIHBnZF9iYWQo
cGdkKQkJKCEocGdkX3ZhbChwZ2QpICYgMikpCi0jZGVmaW5lIHBnZF9wcmVzZW50KHBnZCkJKHBn
ZF92YWwocGdkKSkKKyNkZWZpbmUgcDRkX25vbmUocDRkKQkJKCFwNGRfdmFsKHA0ZCkpCisjZGVm
aW5lIHA0ZF9iYWQocDRkKQkJKCEocDRkX3ZhbChwNGQpICYgMikpCisjZGVmaW5lIHA0ZF9wcmVz
ZW50KHA0ZCkJKHA0ZF92YWwocDRkKSkKIAotc3RhdGljIGlubGluZSB2b2lkIHNldF9wZ2QocGdk
X3QgKnBnZHAsIHBnZF90IHBnZCkKK3N0YXRpYyBpbmxpbmUgdm9pZCBzZXRfcDRkKHA0ZF90ICpw
NGRwLCBwNGRfdCBwNGQpCiB7Ci0JaWYgKGluX3N3YXBwZXJfcGdkaXIocGdkcCkpIHsKLQkJc2V0
X3N3YXBwZXJfcGdkKHBnZHAsIHBnZCk7CisJaWYgKGluX3N3YXBwZXJfcGdkaXIocDRkcCkpIHsK
KwkJc2V0X3N3YXBwZXJfcGdkKChwZ2RfdCAqKXA0ZHAsIF9fcGdkKHA0ZF92YWwocDRkKSkpOwog
CQlyZXR1cm47CiAJfQogCi0JV1JJVEVfT05DRSgqcGdkcCwgcGdkKTsKKwlXUklURV9PTkNFKCpw
NGRwLCBwNGQpOwogCWRzYihpc2hzdCk7CiAJaXNiKCk7CiB9CiAKLXN0YXRpYyBpbmxpbmUgdm9p
ZCBwZ2RfY2xlYXIocGdkX3QgKnBnZHApCitzdGF0aWMgaW5saW5lIHZvaWQgcDRkX2NsZWFyKHA0
ZF90ICpwNGRwKQogewotCXNldF9wZ2QocGdkcCwgX19wZ2QoMCkpOworCXNldF9wNGQocDRkcCwg
X19wNGQoMCkpOwogfQogCi1zdGF0aWMgaW5saW5lIHBoeXNfYWRkcl90IHBnZF9wYWdlX3BhZGRy
KHBnZF90IHBnZCkKK3N0YXRpYyBpbmxpbmUgcGh5c19hZGRyX3QgcDRkX3BhZ2VfcGFkZHIocDRk
X3QgcDRkKQogewotCXJldHVybiBfX3BnZF90b19waHlzKHBnZCk7CisJcmV0dXJuIF9fcDRkX3Rv
X3BoeXMocDRkKTsKIH0KIAogLyogRmluZCBhbiBlbnRyeSBpbiB0aGUgZnJzdC1sZXZlbCBwYWdl
IHRhYmxlLiAqLwogI2RlZmluZSBwdWRfaW5kZXgoYWRkcikJCSgoKGFkZHIpID4+IFBVRF9TSElG
VCkgJiAoUFRSU19QRVJfUFVEIC0gMSkpCiAKLSNkZWZpbmUgcHVkX29mZnNldF9waHlzKGRpciwg
YWRkcikJKHBnZF9wYWdlX3BhZGRyKFJFQURfT05DRSgqKGRpcikpKSArIHB1ZF9pbmRleChhZGRy
KSAqIHNpemVvZihwdWRfdCkpCisjZGVmaW5lIHB1ZF9vZmZzZXRfcGh5cyhkaXIsIGFkZHIpCShw
NGRfcGFnZV9wYWRkcihSRUFEX09OQ0UoKihkaXIpKSkgKyBwdWRfaW5kZXgoYWRkcikgKiBzaXpl
b2YocHVkX3QpKQogI2RlZmluZSBwdWRfb2Zmc2V0KGRpciwgYWRkcikJCSgocHVkX3QgKilfX3Zh
KHB1ZF9vZmZzZXRfcGh5cygoZGlyKSwgKGFkZHIpKSkpCiAKICNkZWZpbmUgcHVkX3NldF9maXht
YXAoYWRkcikJCSgocHVkX3QgKilzZXRfZml4bWFwX29mZnNldChGSVhfUFVELCBhZGRyKSkKLSNk
ZWZpbmUgcHVkX3NldF9maXhtYXBfb2Zmc2V0KHBnZCwgYWRkcikJcHVkX3NldF9maXhtYXAocHVk
X29mZnNldF9waHlzKHBnZCwgYWRkcikpCisjZGVmaW5lIHB1ZF9zZXRfZml4bWFwX29mZnNldChw
NGQsIGFkZHIpCXB1ZF9zZXRfZml4bWFwKHB1ZF9vZmZzZXRfcGh5cyhwNGQsIGFkZHIpKQogI2Rl
ZmluZSBwdWRfY2xlYXJfZml4bWFwKCkJCWNsZWFyX2ZpeG1hcChGSVhfUFVEKQogCi0jZGVmaW5l
IHBnZF9wYWdlKHBnZCkJCXBmbl90b19wYWdlKF9fcGh5c190b19wZm4oX19wZ2RfdG9fcGh5cyhw
Z2QpKSkKKyNkZWZpbmUgcDRkX3BhZ2UocDRkKQkJcGZuX3RvX3BhZ2UoX19waHlzX3RvX3Bmbihf
X3A0ZF90b19waHlzKHA0ZCkpKQogCiAvKiB1c2UgT05MWSBmb3Igc3RhdGljYWxseSBhbGxvY2F0
ZWQgdHJhbnNsYXRpb24gdGFibGVzICovCiAjZGVmaW5lIHB1ZF9vZmZzZXRfa2ltZyhkaXIsYWRk
cikJKChwdWRfdCAqKV9fcGh5c190b19raW1nKHB1ZF9vZmZzZXRfcGh5cygoZGlyKSwgKGFkZHIp
KSkpCiAKICNlbHNlCiAKKyNkZWZpbmUgcDRkX3BhZ2VfcGFkZHIocDRkKQkoeyBCVUlMRF9CVUco
KTsgMDt9KQogI2RlZmluZSBwZ2RfcGFnZV9wYWRkcihwZ2QpCSh7IEJVSUxEX0JVRygpOyAwO30p
CiAKIC8qIE1hdGNoIHB1ZF9vZmZzZXQgZm9sZGluZyBpbiA8YXNtL2dlbmVyaWMvcGd0YWJsZS1u
b3B1ZC5oPiAqLwpkaWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9zdGFnZTJfcGd0
YWJsZS5oIGIvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9zdGFnZTJfcGd0YWJsZS5oCmluZGV4IDMy
NmFhYzY1OGI5ZC4uOWEzNjRhZWFlNWZiIDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L2luY2x1ZGUv
YXNtL3N0YWdlMl9wZ3RhYmxlLmgKKysrIGIvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS9zdGFnZTJf
cGd0YWJsZS5oCkBAIC02OCw0MSArNjgsNjcgQEAgc3RhdGljIGlubGluZSBib29sIGt2bV9zdGFn
ZTJfaGFzX3B1ZChzdHJ1Y3Qga3ZtICprdm0pCiAjZGVmaW5lIFMyX1BVRF9TSVpFCQkJKDFVTCA8
PCBTMl9QVURfU0hJRlQpCiAjZGVmaW5lIFMyX1BVRF9NQVNLCQkJKH4oUzJfUFVEX1NJWkUgLSAx
KSkKIAotc3RhdGljIGlubGluZSBib29sIHN0YWdlMl9wZ2Rfbm9uZShzdHJ1Y3Qga3ZtICprdm0s
IHBnZF90IHBnZCkKKyNkZWZpbmUgc3RhZ2UyX3BnZF9ub25lKGt2bSwgcGdkKQkJcGdkX25vbmUo
cGdkKQorI2RlZmluZSBzdGFnZTJfcGdkX2NsZWFyKGt2bSwgcGdkKQkJcGdkX2NsZWFyKHBnZCkK
KyNkZWZpbmUgc3RhZ2UyX3BnZF9wcmVzZW50KGt2bSwgcGdkKQkJcGdkX3ByZXNlbnQocGdkKQor
I2RlZmluZSBzdGFnZTJfcGdkX3BvcHVsYXRlKGt2bSwgcGdkLCBwNGQpCXBnZF9wb3B1bGF0ZShO
VUxMLCBwZ2QsIHA0ZCkKKworc3RhdGljIGlubGluZSBwNGRfdCAqc3RhZ2UyX3A0ZF9vZmZzZXQo
c3RydWN0IGt2bSAqa3ZtLAorCQkJCSAgICAgICBwZ2RfdCAqcGdkLCB1bnNpZ25lZCBsb25nIGFk
ZHJlc3MpCit7CisJcmV0dXJuIHA0ZF9vZmZzZXQocGdkLCBhZGRyZXNzKTsKK30KKworc3RhdGlj
IGlubGluZSB2b2lkIHN0YWdlMl9wNGRfZnJlZShzdHJ1Y3Qga3ZtICprdm0sIHA0ZF90ICpwNGQp
Cit7Cit9CisKK3N0YXRpYyBpbmxpbmUgYm9vbCBzdGFnZTJfcDRkX3RhYmxlX2VtcHR5KHN0cnVj
dCBrdm0gKmt2bSwgcDRkX3QgKnA0ZHApCit7CisJcmV0dXJuIGZhbHNlOworfQorCitzdGF0aWMg
aW5saW5lIHBoeXNfYWRkcl90IHN0YWdlMl9wNGRfYWRkcl9lbmQoc3RydWN0IGt2bSAqa3ZtLAor
CQkJCQkgICAgICBwaHlzX2FkZHJfdCBhZGRyLCBwaHlzX2FkZHJfdCBlbmQpCit7CisJcmV0dXJu
IGVuZDsKK30KKworc3RhdGljIGlubGluZSBib29sIHN0YWdlMl9wNGRfbm9uZShzdHJ1Y3Qga3Zt
ICprdm0sIHA0ZF90IHA0ZCkKIHsKIAlpZiAoa3ZtX3N0YWdlMl9oYXNfcHVkKGt2bSkpCi0JCXJl
dHVybiBwZ2Rfbm9uZShwZ2QpOworCQlyZXR1cm4gcDRkX25vbmUocDRkKTsKIAllbHNlCiAJCXJl
dHVybiAwOwogfQogCi1zdGF0aWMgaW5saW5lIHZvaWQgc3RhZ2UyX3BnZF9jbGVhcihzdHJ1Y3Qg
a3ZtICprdm0sIHBnZF90ICpwZ2RwKQorc3RhdGljIGlubGluZSB2b2lkIHN0YWdlMl9wNGRfY2xl
YXIoc3RydWN0IGt2bSAqa3ZtLCBwNGRfdCAqcDRkcCkKIHsKIAlpZiAoa3ZtX3N0YWdlMl9oYXNf
cHVkKGt2bSkpCi0JCXBnZF9jbGVhcihwZ2RwKTsKKwkJcDRkX2NsZWFyKHA0ZHApOwogfQogCi1z
dGF0aWMgaW5saW5lIGJvb2wgc3RhZ2UyX3BnZF9wcmVzZW50KHN0cnVjdCBrdm0gKmt2bSwgcGdk
X3QgcGdkKQorc3RhdGljIGlubGluZSBib29sIHN0YWdlMl9wNGRfcHJlc2VudChzdHJ1Y3Qga3Zt
ICprdm0sIHA0ZF90IHA0ZCkKIHsKIAlpZiAoa3ZtX3N0YWdlMl9oYXNfcHVkKGt2bSkpCi0JCXJl
dHVybiBwZ2RfcHJlc2VudChwZ2QpOworCQlyZXR1cm4gcDRkX3ByZXNlbnQocDRkKTsKIAllbHNl
CiAJCXJldHVybiAxOwogfQogCi1zdGF0aWMgaW5saW5lIHZvaWQgc3RhZ2UyX3BnZF9wb3B1bGF0
ZShzdHJ1Y3Qga3ZtICprdm0sIHBnZF90ICpwZ2QsIHB1ZF90ICpwdWQpCitzdGF0aWMgaW5saW5l
IHZvaWQgc3RhZ2UyX3A0ZF9wb3B1bGF0ZShzdHJ1Y3Qga3ZtICprdm0sIHA0ZF90ICpwNGQsIHB1
ZF90ICpwdWQpCiB7CiAJaWYgKGt2bV9zdGFnZTJfaGFzX3B1ZChrdm0pKQotCQlwZ2RfcG9wdWxh
dGUoTlVMTCwgcGdkLCBwdWQpOworCQlwNGRfcG9wdWxhdGUoTlVMTCwgcDRkLCBwdWQpOwogfQog
CiBzdGF0aWMgaW5saW5lIHB1ZF90ICpzdGFnZTJfcHVkX29mZnNldChzdHJ1Y3Qga3ZtICprdm0s
Ci0JCQkJICAgICAgIHBnZF90ICpwZ2QsIHVuc2lnbmVkIGxvbmcgYWRkcmVzcykKKwkJCQkgICAg
ICAgcDRkX3QgKnA0ZCwgdW5zaWduZWQgbG9uZyBhZGRyZXNzKQogewogCWlmIChrdm1fc3RhZ2Uy
X2hhc19wdWQoa3ZtKSkKLQkJcmV0dXJuIHB1ZF9vZmZzZXQocGdkLCBhZGRyZXNzKTsKKwkJcmV0
dXJuIHB1ZF9vZmZzZXQocDRkLCBhZGRyZXNzKTsKIAllbHNlCi0JCXJldHVybiAocHVkX3QgKilw
Z2Q7CisJCXJldHVybiAocHVkX3QgKilwNGQ7CiB9CiAKIHN0YXRpYyBpbmxpbmUgdm9pZCBzdGFn
ZTJfcHVkX2ZyZWUoc3RydWN0IGt2bSAqa3ZtLCBwdWRfdCAqcHVkKQpkaWZmIC0tZ2l0IGEvYXJj
aC9hcm02NC9rZXJuZWwvaGliZXJuYXRlLmMgYi9hcmNoL2FybTY0L2tlcm5lbC9oaWJlcm5hdGUu
YwppbmRleCA1YjczZTkyYzk5ZTMuLmE4YTRiNTVmM2EwOSAxMDA2NDQKLS0tIGEvYXJjaC9hcm02
NC9rZXJuZWwvaGliZXJuYXRlLmMKKysrIGIvYXJjaC9hcm02NC9rZXJuZWwvaGliZXJuYXRlLmMK
QEAgLTE4NCw2ICsxODQsNyBAQCBzdGF0aWMgaW50IHRyYW5zX3BnZF9tYXBfcGFnZShwZ2RfdCAq
dHJhbnNfcGdkLCB2b2lkICpwYWdlLAogCQkgICAgICAgcGdwcm90X3QgcGdwcm90KQogewogCXBn
ZF90ICpwZ2RwOworCXA0ZF90ICpwNGRwOwogCXB1ZF90ICpwdWRwOwogCXBtZF90ICpwbWRwOwog
CXB0ZV90ICpwdGVwOwpAQCAtMTk2LDcgKzE5NywxNSBAQCBzdGF0aWMgaW50IHRyYW5zX3BnZF9t
YXBfcGFnZShwZ2RfdCAqdHJhbnNfcGdkLCB2b2lkICpwYWdlLAogCQlwZ2RfcG9wdWxhdGUoJmlu
aXRfbW0sIHBnZHAsIHB1ZHApOwogCX0KIAotCXB1ZHAgPSBwdWRfb2Zmc2V0KHBnZHAsIGRzdF9h
ZGRyKTsKKwlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBkc3RfYWRkcik7CisJaWYgKHA0ZF9ub25l
KFJFQURfT05DRSgqcDRkcCkpKSB7CisJCXB1ZHAgPSAodm9pZCAqKWdldF9zYWZlX3BhZ2UoR0ZQ
X0FUT01JQyk7CisJCWlmICghcHVkcCkKKwkJCXJldHVybiAtRU5PTUVNOworCQlwNGRfcG9wdWxh
dGUoJmluaXRfbW0sIHA0ZHAsIHB1ZHApOworCX0KKworCXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAs
IGRzdF9hZGRyKTsKIAlpZiAocHVkX25vbmUoUkVBRF9PTkNFKCpwdWRwKSkpIHsKIAkJcG1kcCA9
ICh2b2lkICopZ2V0X3NhZmVfcGFnZShHRlBfQVRPTUlDKTsKIAkJaWYgKCFwbWRwKQpAQCAtNDE5
LDcgKzQyOCw3IEBAIHN0YXRpYyBpbnQgY29weV9wbWQocHVkX3QgKmRzdF9wdWRwLCBwdWRfdCAq
c3JjX3B1ZHAsIHVuc2lnbmVkIGxvbmcgc3RhcnQsCiAJcmV0dXJuIDA7CiB9CiAKLXN0YXRpYyBp
bnQgY29weV9wdWQocGdkX3QgKmRzdF9wZ2RwLCBwZ2RfdCAqc3JjX3BnZHAsIHVuc2lnbmVkIGxv
bmcgc3RhcnQsCitzdGF0aWMgaW50IGNvcHlfcHVkKHA0ZF90ICpkc3RfcDRkcCwgcDRkX3QgKnNy
Y19wNGRwLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAogCQkgICAgdW5zaWduZWQgbG9uZyBlbmQpCiB7
CiAJcHVkX3QgKmRzdF9wdWRwOwpAQCAtNDI3LDE1ICs0MzYsMTUgQEAgc3RhdGljIGludCBjb3B5
X3B1ZChwZ2RfdCAqZHN0X3BnZHAsIHBnZF90ICpzcmNfcGdkcCwgdW5zaWduZWQgbG9uZyBzdGFy
dCwKIAl1bnNpZ25lZCBsb25nIG5leHQ7CiAJdW5zaWduZWQgbG9uZyBhZGRyID0gc3RhcnQ7CiAK
LQlpZiAocGdkX25vbmUoUkVBRF9PTkNFKCpkc3RfcGdkcCkpKSB7CisJaWYgKHA0ZF9ub25lKFJF
QURfT05DRSgqZHN0X3A0ZHApKSkgewogCQlkc3RfcHVkcCA9IChwdWRfdCAqKWdldF9zYWZlX3Bh
Z2UoR0ZQX0FUT01JQyk7CiAJCWlmICghZHN0X3B1ZHApCiAJCQlyZXR1cm4gLUVOT01FTTsKLQkJ
cGdkX3BvcHVsYXRlKCZpbml0X21tLCBkc3RfcGdkcCwgZHN0X3B1ZHApOworCQlwNGRfcG9wdWxh
dGUoJmluaXRfbW0sIGRzdF9wNGRwLCBkc3RfcHVkcCk7CiAJfQotCWRzdF9wdWRwID0gcHVkX29m
ZnNldChkc3RfcGdkcCwgc3RhcnQpOworCWRzdF9wdWRwID0gcHVkX29mZnNldChkc3RfcDRkcCwg
c3RhcnQpOwogCi0Jc3JjX3B1ZHAgPSBwdWRfb2Zmc2V0KHNyY19wZ2RwLCBzdGFydCk7CisJc3Jj
X3B1ZHAgPSBwdWRfb2Zmc2V0KHNyY19wNGRwLCBzdGFydCk7CiAJZG8gewogCQlwdWRfdCBwdWQg
PSBSRUFEX09OQ0UoKnNyY19wdWRwKTsKIApAQCAtNDU0LDYgKzQ2MywyNyBAQCBzdGF0aWMgaW50
IGNvcHlfcHVkKHBnZF90ICpkc3RfcGdkcCwgcGdkX3QgKnNyY19wZ2RwLCB1bnNpZ25lZCBsb25n
IHN0YXJ0LAogCXJldHVybiAwOwogfQogCitzdGF0aWMgaW50IGNvcHlfcDRkKHBnZF90ICpkc3Rf
cGdkcCwgcGdkX3QgKnNyY19wZ2RwLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAorCQkgICAgdW5zaWdu
ZWQgbG9uZyBlbmQpCit7CisJcDRkX3QgKmRzdF9wNGRwOworCXA0ZF90ICpzcmNfcDRkcDsKKwl1
bnNpZ25lZCBsb25nIG5leHQ7CisJdW5zaWduZWQgbG9uZyBhZGRyID0gc3RhcnQ7CisKKwlkc3Rf
cDRkcCA9IHA0ZF9vZmZzZXQoZHN0X3BnZHAsIHN0YXJ0KTsKKwlzcmNfcDRkcCA9IHA0ZF9vZmZz
ZXQoc3JjX3BnZHAsIHN0YXJ0KTsKKwlkbyB7CisJCW5leHQgPSBwNGRfYWRkcl9lbmQoYWRkciwg
ZW5kKTsKKwkJaWYgKHA0ZF9ub25lKFJFQURfT05DRSgqc3JjX3A0ZHApKSkKKwkJCWNvbnRpbnVl
OworCQlpZiAoY29weV9wdWQoZHN0X3A0ZHAsIHNyY19wNGRwLCBhZGRyLCBuZXh0KSkKKwkJCXJl
dHVybiAtRU5PTUVNOworCX0gd2hpbGUgKGRzdF9wNGRwKyssIHNyY19wNGRwKyssIGFkZHIgPSBu
ZXh0LCBhZGRyICE9IGVuZCk7CisKKwlyZXR1cm4gMDsKK30KKwogc3RhdGljIGludCBjb3B5X3Bh
Z2VfdGFibGVzKHBnZF90ICpkc3RfcGdkcCwgdW5zaWduZWQgbG9uZyBzdGFydCwKIAkJCSAgICB1
bnNpZ25lZCBsb25nIGVuZCkKIHsKQEAgLTQ2Niw3ICs0OTYsNyBAQCBzdGF0aWMgaW50IGNvcHlf
cGFnZV90YWJsZXMocGdkX3QgKmRzdF9wZ2RwLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAogCQluZXh0
ID0gcGdkX2FkZHJfZW5kKGFkZHIsIGVuZCk7CiAJCWlmIChwZ2Rfbm9uZShSRUFEX09OQ0UoKnNy
Y19wZ2RwKSkpCiAJCQljb250aW51ZTsKLQkJaWYgKGNvcHlfcHVkKGRzdF9wZ2RwLCBzcmNfcGdk
cCwgYWRkciwgbmV4dCkpCisJCWlmIChjb3B5X3A0ZChkc3RfcGdkcCwgc3JjX3BnZHAsIGFkZHIs
IG5leHQpKQogCQkJcmV0dXJuIC1FTk9NRU07CiAJfSB3aGlsZSAoZHN0X3BnZHArKywgc3JjX3Bn
ZHArKywgYWRkciA9IG5leHQsIGFkZHIgIT0gZW5kKTsKIApkaWZmIC0tZ2l0IGEvYXJjaC9hcm02
NC9tbS9mYXVsdC5jIGIvYXJjaC9hcm02NC9tbS9mYXVsdC5jCmluZGV4IGM5Y2VkYzA0MzJkMi4u
YTUyOTg3N2RhYTEzIDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L21tL2ZhdWx0LmMKKysrIGIvYXJj
aC9hcm02NC9tbS9mYXVsdC5jCkBAIC0xNDUsNiArMTQ1LDcgQEAgc3RhdGljIHZvaWQgc2hvd19w
dGUodW5zaWduZWQgbG9uZyBhZGRyKQogCXByX2FsZXJ0KCJbJTAxNmx4XSBwZ2Q9JTAxNmxseCIs
IGFkZHIsIHBnZF92YWwocGdkKSk7CiAKIAlkbyB7CisJCXA0ZF90ICpwNGRwLCBwNGQ7CiAJCXB1
ZF90ICpwdWRwLCBwdWQ7CiAJCXBtZF90ICpwbWRwLCBwbWQ7CiAJCXB0ZV90ICpwdGVwLCBwdGU7
CkBAIC0xNTIsNyArMTUzLDEzIEBAIHN0YXRpYyB2b2lkIHNob3dfcHRlKHVuc2lnbmVkIGxvbmcg
YWRkcikKIAkJaWYgKHBnZF9ub25lKHBnZCkgfHwgcGdkX2JhZChwZ2QpKQogCQkJYnJlYWs7CiAK
LQkJcHVkcCA9IHB1ZF9vZmZzZXQocGdkcCwgYWRkcik7CisJCXA0ZHAgPSBwNGRfb2Zmc2V0KHBn
ZHAsIGFkZHIpOworCQlwNGQgPSBSRUFEX09OQ0UoKnA0ZHApOworCQlwcl9jb250KCIsIHA0ZD0l
MDE2bGx4IiwgcDRkX3ZhbChwNGQpKTsKKwkJaWYgKHA0ZF9ub25lKHA0ZCkgfHwgcDRkX2JhZChw
NGQpKQorCQkJYnJlYWs7CisKKwkJcHVkcCA9IHB1ZF9vZmZzZXQocDRkcCwgYWRkcik7CiAJCXB1
ZCA9IFJFQURfT05DRSgqcHVkcCk7CiAJCXByX2NvbnQoIiwgcHVkPSUwMTZsbHgiLCBwdWRfdmFs
KHB1ZCkpOwogCQlpZiAocHVkX25vbmUocHVkKSB8fCBwdWRfYmFkKHB1ZCkpCmRpZmYgLS1naXQg
YS9hcmNoL2FybTY0L21tL2h1Z2V0bGJwYWdlLmMgYi9hcmNoL2FybTY0L21tL2h1Z2V0bGJwYWdl
LmMKaW5kZXggYmJlYjZhNWE2YmE2Li5iOGE5ZjI2ZjM3OTAgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJt
NjQvbW0vaHVnZXRsYnBhZ2UuYworKysgYi9hcmNoL2FybTY0L21tL2h1Z2V0bGJwYWdlLmMKQEAg
LTY3LDExICs2NywxMyBAQCBzdGF0aWMgaW50IGZpbmRfbnVtX2NvbnRpZyhzdHJ1Y3QgbW1fc3Ry
dWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyLAogCQkJICAgcHRlX3QgKnB0ZXAsIHNpemVfdCAq
cGdzaXplKQogewogCXBnZF90ICpwZ2RwID0gcGdkX29mZnNldChtbSwgYWRkcik7CisJcDRkX3Qg
KnA0ZHA7CiAJcHVkX3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7CiAKIAkqcGdzaXplID0gUEFHRV9T
SVpFOwotCXB1ZHAgPSBwdWRfb2Zmc2V0KHBnZHAsIGFkZHIpOworCXA0ZHAgPSBwNGRfb2Zmc2V0
KHBnZHAsIGFkZHIpOworCXB1ZHAgPSBwdWRfb2Zmc2V0KHA0ZHAsIGFkZHIpOwogCXBtZHAgPSBw
bWRfb2Zmc2V0KHB1ZHAsIGFkZHIpOwogCWlmICgocHRlX3QgKilwbWRwID09IHB0ZXApIHsKIAkJ
KnBnc2l6ZSA9IFBNRF9TSVpFOwpAQCAtMjE3LDEyICsyMTksMTQgQEAgcHRlX3QgKmh1Z2VfcHRl
X2FsbG9jKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLAogCQkgICAgICB1bnNpZ25lZCBsb25nIGFkZHIs
IHVuc2lnbmVkIGxvbmcgc3opCiB7CiAJcGdkX3QgKnBnZHA7CisJcDRkX3QgKnA0ZHA7CiAJcHVk
X3QgKnB1ZHA7CiAJcG1kX3QgKnBtZHA7CiAJcHRlX3QgKnB0ZXAgPSBOVUxMOwogCiAJcGdkcCA9
IHBnZF9vZmZzZXQobW0sIGFkZHIpOwotCXB1ZHAgPSBwdWRfYWxsb2MobW0sIHBnZHAsIGFkZHIp
OworCXA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGFkZHIpOworCXB1ZHAgPSBwdWRfYWxsb2MobW0s
IHA0ZHAsIGFkZHIpOwogCWlmICghcHVkcCkKIAkJcmV0dXJuIE5VTEw7CiAKQEAgLTI1OSw2ICsy
NjMsNyBAQCBwdGVfdCAqaHVnZV9wdGVfb2Zmc2V0KHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLAogCQkg
ICAgICAgdW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIHN6KQogewogCXBnZF90ICpw
Z2RwOworCXA0ZF90ICpwNGRwOwogCXB1ZF90ICpwdWRwLCBwdWQ7CiAJcG1kX3QgKnBtZHAsIHBt
ZDsKIApAQCAtMjY2LDcgKzI3MSwxMSBAQCBwdGVfdCAqaHVnZV9wdGVfb2Zmc2V0KHN0cnVjdCBt
bV9zdHJ1Y3QgKm1tLAogCWlmICghcGdkX3ByZXNlbnQoUkVBRF9PTkNFKCpwZ2RwKSkpCiAJCXJl
dHVybiBOVUxMOwogCi0JcHVkcCA9IHB1ZF9vZmZzZXQocGdkcCwgYWRkcik7CisJcDRkcCA9IHA0
ZF9vZmZzZXQocGdkcCwgYWRkcik7CisJaWYgKCFwNGRfcHJlc2VudChSRUFEX09OQ0UoKnA0ZHAp
KSkKKwkJcmV0dXJuIE5VTEw7CisKKwlwdWRwID0gcHVkX29mZnNldChwNGRwLCBhZGRyKTsKIAlw
dWQgPSBSRUFEX09OQ0UoKnB1ZHApOwogCWlmIChzeiAhPSBQVURfU0laRSAmJiBwdWRfbm9uZShw
dWQpKQogCQlyZXR1cm4gTlVMTDsKZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQvbW0va2FzYW5faW5p
dC5jIGIvYXJjaC9hcm02NC9tbS9rYXNhbl9pbml0LmMKaW5kZXggZjg3YTMyNDg0ZWE4Li4yMzM5
ODExZjMxN2IgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtNjQvbW0va2FzYW5faW5pdC5jCisrKyBiL2Fy
Y2gvYXJtNjQvbW0va2FzYW5faW5pdC5jCkBAIC04NCwxNyArODQsMTcgQEAgc3RhdGljIHBtZF90
ICpfX2luaXQga2FzYW5fcG1kX29mZnNldChwdWRfdCAqcHVkcCwgdW5zaWduZWQgbG9uZyBhZGRy
LCBpbnQgbm9kZSwKIAlyZXR1cm4gZWFybHkgPyBwbWRfb2Zmc2V0X2tpbWcocHVkcCwgYWRkcikg
OiBwbWRfb2Zmc2V0KHB1ZHAsIGFkZHIpOwogfQogCi1zdGF0aWMgcHVkX3QgKl9faW5pdCBrYXNh
bl9wdWRfb2Zmc2V0KHBnZF90ICpwZ2RwLCB1bnNpZ25lZCBsb25nIGFkZHIsIGludCBub2RlLAor
c3RhdGljIHB1ZF90ICpfX2luaXQga2FzYW5fcHVkX29mZnNldChwNGRfdCAqcDRkcCwgdW5zaWdu
ZWQgbG9uZyBhZGRyLCBpbnQgbm9kZSwKIAkJCQkgICAgICBib29sIGVhcmx5KQogewotCWlmIChw
Z2Rfbm9uZShSRUFEX09OQ0UoKnBnZHApKSkgeworCWlmIChwNGRfbm9uZShSRUFEX09OQ0UoKnA0
ZHApKSkgewogCQlwaHlzX2FkZHJfdCBwdWRfcGh5cyA9IGVhcmx5ID8KIAkJCQlfX3BhX3N5bWJv
bChrYXNhbl9lYXJseV9zaGFkb3dfcHVkKQogCQkJCQk6IGthc2FuX2FsbG9jX3plcm9lZF9wYWdl
KG5vZGUpOwotCQlfX3BnZF9wb3B1bGF0ZShwZ2RwLCBwdWRfcGh5cywgUE1EX1RZUEVfVEFCTEUp
OworCQlfX3A0ZF9wb3B1bGF0ZShwNGRwLCBwdWRfcGh5cywgUE1EX1RZUEVfVEFCTEUpOwogCX0K
IAotCXJldHVybiBlYXJseSA/IHB1ZF9vZmZzZXRfa2ltZyhwZ2RwLCBhZGRyKSA6IHB1ZF9vZmZz
ZXQocGdkcCwgYWRkcik7CisJcmV0dXJuIGVhcmx5ID8gcHVkX29mZnNldF9raW1nKHA0ZHAsIGFk
ZHIpIDogcHVkX29mZnNldChwNGRwLCBhZGRyKTsKIH0KIAogc3RhdGljIHZvaWQgX19pbml0IGth
c2FuX3B0ZV9wb3B1bGF0ZShwbWRfdCAqcG1kcCwgdW5zaWduZWQgbG9uZyBhZGRyLApAQCAtMTI2
LDExICsxMjYsMTEgQEAgc3RhdGljIHZvaWQgX19pbml0IGthc2FuX3BtZF9wb3B1bGF0ZShwdWRf
dCAqcHVkcCwgdW5zaWduZWQgbG9uZyBhZGRyLAogCX0gd2hpbGUgKHBtZHArKywgYWRkciA9IG5l
eHQsIGFkZHIgIT0gZW5kICYmIHBtZF9ub25lKFJFQURfT05DRSgqcG1kcCkpKTsKIH0KIAotc3Rh
dGljIHZvaWQgX19pbml0IGthc2FuX3B1ZF9wb3B1bGF0ZShwZ2RfdCAqcGdkcCwgdW5zaWduZWQg
bG9uZyBhZGRyLAorc3RhdGljIHZvaWQgX19pbml0IGthc2FuX3B1ZF9wb3B1bGF0ZShwNGRfdCAq
cDRkcCwgdW5zaWduZWQgbG9uZyBhZGRyLAogCQkJCSAgICAgIHVuc2lnbmVkIGxvbmcgZW5kLCBp
bnQgbm9kZSwgYm9vbCBlYXJseSkKIHsKIAl1bnNpZ25lZCBsb25nIG5leHQ7Ci0JcHVkX3QgKnB1
ZHAgPSBrYXNhbl9wdWRfb2Zmc2V0KHBnZHAsIGFkZHIsIG5vZGUsIGVhcmx5KTsKKwlwdWRfdCAq
cHVkcCA9IGthc2FuX3B1ZF9vZmZzZXQocDRkcCwgYWRkciwgbm9kZSwgZWFybHkpOwogCiAJZG8g
ewogCQluZXh0ID0gcHVkX2FkZHJfZW5kKGFkZHIsIGVuZCk7CkBAIC0xMzgsNiArMTM4LDE4IEBA
IHN0YXRpYyB2b2lkIF9faW5pdCBrYXNhbl9wdWRfcG9wdWxhdGUocGdkX3QgKnBnZHAsIHVuc2ln
bmVkIGxvbmcgYWRkciwKIAl9IHdoaWxlIChwdWRwKyssIGFkZHIgPSBuZXh0LCBhZGRyICE9IGVu
ZCAmJiBwdWRfbm9uZShSRUFEX09OQ0UoKnB1ZHApKSk7CiB9CiAKK3N0YXRpYyB2b2lkIF9faW5p
dCBrYXNhbl9wNGRfcG9wdWxhdGUocGdkX3QgKnBnZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKKwkJ
CQkgICAgICB1bnNpZ25lZCBsb25nIGVuZCwgaW50IG5vZGUsIGJvb2wgZWFybHkpCit7CisJdW5z
aWduZWQgbG9uZyBuZXh0OworCXA0ZF90ICpwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsK
KworCWRvIHsKKwkJbmV4dCA9IHA0ZF9hZGRyX2VuZChhZGRyLCBlbmQpOworCQlrYXNhbl9wdWRf
cG9wdWxhdGUocDRkcCwgYWRkciwgbmV4dCwgbm9kZSwgZWFybHkpOworCX0gd2hpbGUgKHA0ZHAr
KywgYWRkciA9IG5leHQsIGFkZHIgIT0gZW5kKTsKK30KKwogc3RhdGljIHZvaWQgX19pbml0IGth
c2FuX3BnZF9wb3B1bGF0ZSh1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgZW5kLAog
CQkJCSAgICAgIGludCBub2RlLCBib29sIGVhcmx5KQogewpAQCAtMTQ3LDcgKzE1OSw3IEBAIHN0
YXRpYyB2b2lkIF9faW5pdCBrYXNhbl9wZ2RfcG9wdWxhdGUodW5zaWduZWQgbG9uZyBhZGRyLCB1
bnNpZ25lZCBsb25nIGVuZCwKIAlwZ2RwID0gcGdkX29mZnNldF9rKGFkZHIpOwogCWRvIHsKIAkJ
bmV4dCA9IHBnZF9hZGRyX2VuZChhZGRyLCBlbmQpOwotCQlrYXNhbl9wdWRfcG9wdWxhdGUocGdk
cCwgYWRkciwgbmV4dCwgbm9kZSwgZWFybHkpOworCQlrYXNhbl9wNGRfcG9wdWxhdGUocGdkcCwg
YWRkciwgbmV4dCwgbm9kZSwgZWFybHkpOwogCX0gd2hpbGUgKHBnZHArKywgYWRkciA9IG5leHQs
IGFkZHIgIT0gZW5kKTsKIH0KIApkaWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9tbS9tbXUuYyBiL2Fy
Y2gvYXJtNjQvbW0vbW11LmMKaW5kZXggYTM3NGU0ZjUxYTYyLi5jNGMyZTM2YjgwYWIgMTAwNjQ0
Ci0tLSBhL2FyY2gvYXJtNjQvbW0vbW11LmMKKysrIGIvYXJjaC9hcm02NC9tbS9tbXUuYwpAQCAt
MjkwLDE4ICsyOTAsMTkgQEAgc3RhdGljIHZvaWQgYWxsb2NfaW5pdF9wdWQocGdkX3QgKnBnZHAs
IHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBlbmQsCiB7CiAJdW5zaWduZWQgbG9u
ZyBuZXh0OwogCXB1ZF90ICpwdWRwOwotCXBnZF90IHBnZCA9IFJFQURfT05DRSgqcGdkcCk7CisJ
cDRkX3QgKnA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGFkZHIpOworCXA0ZF90IHA0ZCA9IFJFQURf
T05DRSgqcDRkcCk7CiAKLQlpZiAocGdkX25vbmUocGdkKSkgeworCWlmIChwNGRfbm9uZShwNGQp
KSB7CiAJCXBoeXNfYWRkcl90IHB1ZF9waHlzOwogCQlCVUdfT04oIXBndGFibGVfYWxsb2MpOwog
CQlwdWRfcGh5cyA9IHBndGFibGVfYWxsb2MoUFVEX1NISUZUKTsKLQkJX19wZ2RfcG9wdWxhdGUo
cGdkcCwgcHVkX3BoeXMsIFBVRF9UWVBFX1RBQkxFKTsKLQkJcGdkID0gUkVBRF9PTkNFKCpwZ2Rw
KTsKKwkJX19wNGRfcG9wdWxhdGUocDRkcCwgcHVkX3BoeXMsIFBVRF9UWVBFX1RBQkxFKTsKKwkJ
cDRkID0gUkVBRF9PTkNFKCpwNGRwKTsKIAl9Ci0JQlVHX09OKHBnZF9iYWQocGdkKSk7CisJQlVH
X09OKHA0ZF9iYWQocDRkKSk7CiAKLQlwdWRwID0gcHVkX3NldF9maXhtYXBfb2Zmc2V0KHBnZHAs
IGFkZHIpOworCXB1ZHAgPSBwdWRfc2V0X2ZpeG1hcF9vZmZzZXQocDRkcCwgYWRkcik7CiAJZG8g
ewogCQlwdWRfdCBvbGRfcHVkID0gUkVBRF9PTkNFKCpwdWRwKTsKIApAQCAtNjQ4LDYgKzY0OSw3
IEBAIHN0YXRpYyB2b2lkIF9faW5pdCBtYXBfa2VybmVsKHBnZF90ICpwZ2RwKQogCQkJUkVBRF9P
TkNFKCpwZ2Rfb2Zmc2V0X2soRklYQUREUl9TVEFSVCkpKTsKIAl9IGVsc2UgaWYgKENPTkZJR19Q
R1RBQkxFX0xFVkVMUyA+IDMpIHsKIAkJcGdkX3QgKmJtX3BnZHA7CisJCXA0ZF90ICpibV9wNGRw
OwogCQlwdWRfdCAqYm1fcHVkcDsKIAkJLyoKIAkJICogVGhlIGZpeG1hcCBzaGFyZXMgaXRzIHRv
cCBsZXZlbCBwZ2QgZW50cnkgd2l0aCB0aGUga2VybmVsCkBAIC02NTcsNyArNjU5LDggQEAgc3Rh
dGljIHZvaWQgX19pbml0IG1hcF9rZXJuZWwocGdkX3QgKnBnZHApCiAJCSAqLwogCQlCVUdfT04o
IUlTX0VOQUJMRUQoQ09ORklHX0FSTTY0XzE2S19QQUdFUykpOwogCQlibV9wZ2RwID0gcGdkX29m
ZnNldF9yYXcocGdkcCwgRklYQUREUl9TVEFSVCk7Ci0JCWJtX3B1ZHAgPSBwdWRfc2V0X2ZpeG1h
cF9vZmZzZXQoYm1fcGdkcCwgRklYQUREUl9TVEFSVCk7CisJCWJtX3A0ZHAgPSBwNGRfb2Zmc2V0
KGJtX3BnZHAsIEZJWEFERFJfU1RBUlQpOworCQlibV9wdWRwID0gcHVkX3NldF9maXhtYXBfb2Zm
c2V0KGJtX3A0ZHAsIEZJWEFERFJfU1RBUlQpOwogCQlwdWRfcG9wdWxhdGUoJmluaXRfbW0sIGJt
X3B1ZHAsIGxtX2FsaWFzKGJtX3BtZCkpOwogCQlwdWRfY2xlYXJfZml4bWFwKCk7CiAJfSBlbHNl
IHsKQEAgLTY5MSw2ICs2OTQsNyBAQCB2b2lkIF9faW5pdCBwYWdpbmdfaW5pdCh2b2lkKQogaW50
IGtlcm5fYWRkcl92YWxpZCh1bnNpZ25lZCBsb25nIGFkZHIpCiB7CiAJcGdkX3QgKnBnZHA7CisJ
cDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1ZHAsIHB1ZDsKIAlwbWRfdCAqcG1kcCwgcG1kOwogCXB0
ZV90ICpwdGVwLCBwdGU7CkBAIC03MDIsNyArNzA2LDExIEBAIGludCBrZXJuX2FkZHJfdmFsaWQo
dW5zaWduZWQgbG9uZyBhZGRyKQogCWlmIChwZ2Rfbm9uZShSRUFEX09OQ0UoKnBnZHApKSkKIAkJ
cmV0dXJuIDA7CiAKLQlwdWRwID0gcHVkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlwNGRwID0gcDRk
X29mZnNldChwZ2RwLCBhZGRyKTsKKwlpZiAocDRkX25vbmUoUkVBRF9PTkNFKCpwNGRwKSkpCisJ
CXJldHVybiAwOworCisJcHVkcCA9IHB1ZF9vZmZzZXQocDRkcCwgYWRkcik7CiAJcHVkID0gUkVB
RF9PTkNFKCpwdWRwKTsKIAlpZiAocHVkX25vbmUocHVkKSkKIAkJcmV0dXJuIDA7CkBAIC0xMDQ1
LDYgKzEwNTMsNyBAQCBpbnQgX19tZW1pbml0IHZtZW1tYXBfcG9wdWxhdGUodW5zaWduZWQgbG9u
ZyBzdGFydCwgdW5zaWduZWQgbG9uZyBlbmQsIGludCBub2RlLAogCXVuc2lnbmVkIGxvbmcgYWRk
ciA9IHN0YXJ0OwogCXVuc2lnbmVkIGxvbmcgbmV4dDsKIAlwZ2RfdCAqcGdkcDsKKwlwNGRfdCAq
cDRkcDsKIAlwdWRfdCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIApAQCAtMTA1NSw3ICsxMDY0LDEx
IEBAIGludCBfX21lbWluaXQgdm1lbW1hcF9wb3B1bGF0ZSh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1
bnNpZ25lZCBsb25nIGVuZCwgaW50IG5vZGUsCiAJCWlmICghcGdkcCkKIAkJCXJldHVybiAtRU5P
TUVNOwogCi0JCXB1ZHAgPSB2bWVtbWFwX3B1ZF9wb3B1bGF0ZShwZ2RwLCBhZGRyLCBub2RlKTsK
KwkJcDRkcCA9IHZtZW1tYXBfcDRkX3BvcHVsYXRlKHBnZHAsIGFkZHIsIG5vZGUpOworCQlpZiAo
IXA0ZHApCisJCQlyZXR1cm4gLUVOT01FTTsKKworCQlwdWRwID0gdm1lbW1hcF9wdWRfcG9wdWxh
dGUocDRkcCwgYWRkciwgbm9kZSk7CiAJCWlmICghcHVkcCkKIAkJCXJldHVybiAtRU5PTUVNOwog
CkBAIC0xMDkwLDExICsxMTAzLDEyIEBAIHZvaWQgdm1lbW1hcF9mcmVlKHVuc2lnbmVkIGxvbmcg
c3RhcnQsIHVuc2lnbmVkIGxvbmcgZW5kLAogc3RhdGljIGlubGluZSBwdWRfdCAqIGZpeG1hcF9w
dWQodW5zaWduZWQgbG9uZyBhZGRyKQogewogCXBnZF90ICpwZ2RwID0gcGdkX29mZnNldF9rKGFk
ZHIpOwotCXBnZF90IHBnZCA9IFJFQURfT05DRSgqcGdkcCk7CisJcDRkX3QgKnA0ZHAgPSBwNGRf
b2Zmc2V0KHBnZHAsIGFkZHIpOworCXA0ZF90IHA0ZCA9IFJFQURfT05DRSgqcDRkcCk7CiAKLQlC
VUdfT04ocGdkX25vbmUocGdkKSB8fCBwZ2RfYmFkKHBnZCkpOworCUJVR19PTihwNGRfbm9uZShw
NGQpIHx8IHA0ZF9iYWQocDRkKSk7CiAKLQlyZXR1cm4gcHVkX29mZnNldF9raW1nKHBnZHAsIGFk
ZHIpOworCXJldHVybiBwdWRfb2Zmc2V0X2tpbWcocDRkcCwgYWRkcik7CiB9CiAKIHN0YXRpYyBp
bmxpbmUgcG1kX3QgKiBmaXhtYXBfcG1kKHVuc2lnbmVkIGxvbmcgYWRkcikKQEAgLTExMjAsMjUg
KzExMzQsMjcgQEAgc3RhdGljIGlubGluZSBwdGVfdCAqIGZpeG1hcF9wdGUodW5zaWduZWQgbG9u
ZyBhZGRyKQogICovCiB2b2lkIF9faW5pdCBlYXJseV9maXhtYXBfaW5pdCh2b2lkKQogewotCXBn
ZF90ICpwZ2RwLCBwZ2Q7CisJcGdkX3QgKnBnZHA7CisJcDRkX3QgKnA0ZHAsIHA0ZDsKIAlwdWRf
dCAqcHVkcDsKIAlwbWRfdCAqcG1kcDsKIAl1bnNpZ25lZCBsb25nIGFkZHIgPSBGSVhBRERSX1NU
QVJUOwogCiAJcGdkcCA9IHBnZF9vZmZzZXRfayhhZGRyKTsKLQlwZ2QgPSBSRUFEX09OQ0UoKnBn
ZHApOworCXA0ZHAgPSBwNGRfb2Zmc2V0KHBnZHAsIGFkZHIpOworCXA0ZCA9IFJFQURfT05DRSgq
cDRkcCk7CiAJaWYgKENPTkZJR19QR1RBQkxFX0xFVkVMUyA+IDMgJiYKLQkgICAgIShwZ2Rfbm9u
ZShwZ2QpIHx8IHBnZF9wYWdlX3BhZGRyKHBnZCkgPT0gX19wYV9zeW1ib2woYm1fcHVkKSkpIHsK
KwkgICAgIShwNGRfbm9uZShwNGQpIHx8IHA0ZF9wYWdlX3BhZGRyKHA0ZCkgPT0gX19wYV9zeW1i
b2woYm1fcHVkKSkpIHsKIAkJLyoKIAkJICogV2Ugb25seSBlbmQgdXAgaGVyZSBpZiB0aGUga2Vy
bmVsIG1hcHBpbmcgYW5kIHRoZSBmaXhtYXAKIAkJICogc2hhcmUgdGhlIHRvcCBsZXZlbCBwZ2Qg
ZW50cnksIHdoaWNoIHNob3VsZCBvbmx5IGhhcHBlbiBvbgogCQkgKiAxNmsvNCBsZXZlbHMgY29u
ZmlndXJhdGlvbnMuCiAJCSAqLwogCQlCVUdfT04oIUlTX0VOQUJMRUQoQ09ORklHX0FSTTY0XzE2
S19QQUdFUykpOwotCQlwdWRwID0gcHVkX29mZnNldF9raW1nKHBnZHAsIGFkZHIpOworCQlwdWRw
ID0gcHVkX29mZnNldF9raW1nKHA0ZHAsIGFkZHIpOwogCX0gZWxzZSB7Ci0JCWlmIChwZ2Rfbm9u
ZShwZ2QpKQotCQkJX19wZ2RfcG9wdWxhdGUocGdkcCwgX19wYV9zeW1ib2woYm1fcHVkKSwgUFVE
X1RZUEVfVEFCTEUpOworCQlpZiAocDRkX25vbmUocDRkKSkKKwkJCV9fcDRkX3BvcHVsYXRlKHA0
ZHAsIF9fcGFfc3ltYm9sKGJtX3B1ZCksIFBVRF9UWVBFX1RBQkxFKTsKIAkJcHVkcCA9IGZpeG1h
cF9wdWQoYWRkcik7CiAJfQogCWlmIChwdWRfbm9uZShSRUFEX09OQ0UoKnB1ZHApKSkKZGlmZiAt
LWdpdCBhL2FyY2gvYXJtNjQvbW0vcGFnZWF0dHIuYyBiL2FyY2gvYXJtNjQvbW0vcGFnZWF0dHIu
YwppbmRleCAyNTBjNDkwMDhkNzMuLjVhMzEwOTkxZmY3MyAxMDA2NDQKLS0tIGEvYXJjaC9hcm02
NC9tbS9wYWdlYXR0ci5jCisrKyBiL2FyY2gvYXJtNjQvbW0vcGFnZWF0dHIuYwpAQCAtMTk4LDYg
KzE5OCw3IEBAIHZvaWQgX19rZXJuZWxfbWFwX3BhZ2VzKHN0cnVjdCBwYWdlICpwYWdlLCBpbnQg
bnVtcGFnZXMsIGludCBlbmFibGUpCiBib29sIGtlcm5lbF9wYWdlX3ByZXNlbnQoc3RydWN0IHBh
Z2UgKnBhZ2UpCiB7CiAJcGdkX3QgKnBnZHA7CisJcDRkX3QgKnA0ZHA7CiAJcHVkX3QgKnB1ZHAs
IHB1ZDsKIAlwbWRfdCAqcG1kcCwgcG1kOwogCXB0ZV90ICpwdGVwOwpAQCAtMjEwLDcgKzIxMSwx
MSBAQCBib29sIGtlcm5lbF9wYWdlX3ByZXNlbnQoc3RydWN0IHBhZ2UgKnBhZ2UpCiAJaWYgKHBn
ZF9ub25lKFJFQURfT05DRSgqcGdkcCkpKQogCQlyZXR1cm4gZmFsc2U7CiAKLQlwdWRwID0gcHVk
X29mZnNldChwZ2RwLCBhZGRyKTsKKwlwNGRwID0gcDRkX29mZnNldChwZ2RwLCBhZGRyKTsKKwlp
ZiAocDRkX25vbmUoUkVBRF9PTkNFKCpwNGRwKSkpCisJCXJldHVybiBmYWxzZTsKKworCXB1ZHAg
PSBwdWRfb2Zmc2V0KHA0ZHAsIGFkZHIpOwogCXB1ZCA9IFJFQURfT05DRSgqcHVkcCk7CiAJaWYg
KHB1ZF9ub25lKHB1ZCkpCiAJCXJldHVybiBmYWxzZTsKZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2Fy
bS9tbXUuYyBiL3ZpcnQva3ZtL2FybS9tbXUuYwppbmRleCBlM2I5ZWUyNjg4MjMuLjQ4ZDQyODhj
NWYxYiAxMDA2NDQKLS0tIGEvdmlydC9rdm0vYXJtL21tdS5jCisrKyBiL3ZpcnQva3ZtL2FybS9t
bXUuYwpAQCAtMTU4LDEzICsxNTgsMjIgQEAgc3RhdGljIHZvaWQgKm1tdV9tZW1vcnlfY2FjaGVf
YWxsb2Moc3RydWN0IGt2bV9tbXVfbWVtb3J5X2NhY2hlICptYykKIAogc3RhdGljIHZvaWQgY2xl
YXJfc3RhZ2UyX3BnZF9lbnRyeShzdHJ1Y3Qga3ZtICprdm0sIHBnZF90ICpwZ2QsIHBoeXNfYWRk
cl90IGFkZHIpCiB7Ci0JcHVkX3QgKnB1ZF90YWJsZSBfX21heWJlX3VudXNlZCA9IHN0YWdlMl9w
dWRfb2Zmc2V0KGt2bSwgcGdkLCAwVUwpOworCXA0ZF90ICpwNGRfdGFibGUgX19tYXliZV91bnVz
ZWQgPSBzdGFnZTJfcDRkX29mZnNldChrdm0sIHBnZCwgMFVMKTsKIAlzdGFnZTJfcGdkX2NsZWFy
KGt2bSwgcGdkKTsKIAlrdm1fdGxiX2ZsdXNoX3ZtaWRfaXBhKGt2bSwgYWRkcik7Ci0Jc3RhZ2Uy
X3B1ZF9mcmVlKGt2bSwgcHVkX3RhYmxlKTsKKwlzdGFnZTJfcDRkX2ZyZWUoa3ZtLCBwNGRfdGFi
bGUpOwogCXB1dF9wYWdlKHZpcnRfdG9fcGFnZShwZ2QpKTsKIH0KIAorc3RhdGljIHZvaWQgY2xl
YXJfc3RhZ2UyX3A0ZF9lbnRyeShzdHJ1Y3Qga3ZtICprdm0sIHA0ZF90ICpwNGQsIHBoeXNfYWRk
cl90IGFkZHIpCit7CisJcHVkX3QgKnB1ZF90YWJsZSBfX21heWJlX3VudXNlZCA9IHN0YWdlMl9w
dWRfb2Zmc2V0KGt2bSwgcDRkLCAwKTsKKwlzdGFnZTJfcDRkX2NsZWFyKGt2bSwgcDRkKTsKKwlr
dm1fdGxiX2ZsdXNoX3ZtaWRfaXBhKGt2bSwgYWRkcik7CisJc3RhZ2UyX3B1ZF9mcmVlKGt2bSwg
cHVkX3RhYmxlKTsKKwlwdXRfcGFnZSh2aXJ0X3RvX3BhZ2UocDRkKSk7Cit9CisKIHN0YXRpYyB2
b2lkIGNsZWFyX3N0YWdlMl9wdWRfZW50cnkoc3RydWN0IGt2bSAqa3ZtLCBwdWRfdCAqcHVkLCBw
aHlzX2FkZHJfdCBhZGRyKQogewogCXBtZF90ICpwbWRfdGFibGUgX19tYXliZV91bnVzZWQgPSBz
dGFnZTJfcG1kX29mZnNldChrdm0sIHB1ZCwgMCk7CkBAIC0yMDgsMTIgKzIxNywyMCBAQCBzdGF0
aWMgaW5saW5lIHZvaWQga3ZtX3B1ZF9wb3B1bGF0ZShwdWRfdCAqcHVkcCwgcG1kX3QgKnBtZHAp
CiAJZHNiKGlzaHN0KTsKIH0KIAotc3RhdGljIGlubGluZSB2b2lkIGt2bV9wZ2RfcG9wdWxhdGUo
cGdkX3QgKnBnZHAsIHB1ZF90ICpwdWRwKQorc3RhdGljIGlubGluZSB2b2lkIGt2bV9wNGRfcG9w
dWxhdGUocDRkX3QgKnA0ZHAsIHB1ZF90ICpwdWRwKQogewotCVdSSVRFX09OQ0UoKnBnZHAsIGt2
bV9ta19wZ2QocHVkcCkpOworCVdSSVRFX09OQ0UoKnA0ZHAsIGt2bV9ta19wNGQocHVkcCkpOwog
CWRzYihpc2hzdCk7CiB9CiAKK3N0YXRpYyBpbmxpbmUgdm9pZCBrdm1fcGdkX3BvcHVsYXRlKHBn
ZF90ICpwZ2RwLCBwNGRfdCAqcDRkcCkKK3sKKyNpZm5kZWYgX19QQUdFVEFCTEVfUDREX0ZPTERF
RAorCVdSSVRFX09OQ0UoKnBnZHAsIGt2bV9ta19wZ2QocDRkcCkpOworCWRzYihpc2hzdCk7Cisj
ZW5kaWYKK30KKwogLyoKICAqIFVubWFwcGluZyB2cyBkY2FjaGUgbWFuYWdlbWVudDoKICAqCkBA
IC0yOTMsMTMgKzMxMCwxMyBAQCBzdGF0aWMgdm9pZCB1bm1hcF9zdGFnZTJfcG1kcyhzdHJ1Y3Qg
a3ZtICprdm0sIHB1ZF90ICpwdWQsCiAJCWNsZWFyX3N0YWdlMl9wdWRfZW50cnkoa3ZtLCBwdWQs
IHN0YXJ0X2FkZHIpOwogfQogCi1zdGF0aWMgdm9pZCB1bm1hcF9zdGFnZTJfcHVkcyhzdHJ1Y3Qg
a3ZtICprdm0sIHBnZF90ICpwZ2QsCitzdGF0aWMgdm9pZCB1bm1hcF9zdGFnZTJfcHVkcyhzdHJ1
Y3Qga3ZtICprdm0sIHA0ZF90ICpwNGQsCiAJCSAgICAgICBwaHlzX2FkZHJfdCBhZGRyLCBwaHlz
X2FkZHJfdCBlbmQpCiB7CiAJcGh5c19hZGRyX3QgbmV4dCwgc3RhcnRfYWRkciA9IGFkZHI7CiAJ
cHVkX3QgKnB1ZCwgKnN0YXJ0X3B1ZDsKIAotCXN0YXJ0X3B1ZCA9IHB1ZCA9IHN0YWdlMl9wdWRf
b2Zmc2V0KGt2bSwgcGdkLCBhZGRyKTsKKwlzdGFydF9wdWQgPSBwdWQgPSBzdGFnZTJfcHVkX29m
ZnNldChrdm0sIHA0ZCwgYWRkcik7CiAJZG8gewogCQluZXh0ID0gc3RhZ2UyX3B1ZF9hZGRyX2Vu
ZChrdm0sIGFkZHIsIGVuZCk7CiAJCWlmICghc3RhZ2UyX3B1ZF9ub25lKGt2bSwgKnB1ZCkpIHsK
QEAgLTMxNyw2ICszMzQsMjMgQEAgc3RhdGljIHZvaWQgdW5tYXBfc3RhZ2UyX3B1ZHMoc3RydWN0
IGt2bSAqa3ZtLCBwZ2RfdCAqcGdkLAogCX0gd2hpbGUgKHB1ZCsrLCBhZGRyID0gbmV4dCwgYWRk
ciAhPSBlbmQpOwogCiAJaWYgKHN0YWdlMl9wdWRfdGFibGVfZW1wdHkoa3ZtLCBzdGFydF9wdWQp
KQorCQljbGVhcl9zdGFnZTJfcDRkX2VudHJ5KGt2bSwgcDRkLCBzdGFydF9hZGRyKTsKK30KKwor
c3RhdGljIHZvaWQgdW5tYXBfc3RhZ2UyX3A0ZHMoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGdk
LAorCQkgICAgICAgcGh5c19hZGRyX3QgYWRkciwgcGh5c19hZGRyX3QgZW5kKQoreworCXBoeXNf
YWRkcl90IG5leHQsIHN0YXJ0X2FkZHIgPSBhZGRyOworCXA0ZF90ICpwNGQsICpzdGFydF9wNGQ7
CisKKwlzdGFydF9wNGQgPSBwNGQgPSBzdGFnZTJfcDRkX29mZnNldChrdm0sIHBnZCwgYWRkcik7
CisJZG8geworCQluZXh0ID0gc3RhZ2UyX3A0ZF9hZGRyX2VuZChrdm0sIGFkZHIsIGVuZCk7CisJ
CWlmICghc3RhZ2UyX3A0ZF9ub25lKGt2bSwgKnA0ZCkpCisJCQl1bm1hcF9zdGFnZTJfcHVkcyhr
dm0sIHA0ZCwgYWRkciwgbmV4dCk7CisJfSB3aGlsZSAocDRkKyssIGFkZHIgPSBuZXh0LCBhZGRy
ICE9IGVuZCk7CisKKwlpZiAoc3RhZ2UyX3A0ZF90YWJsZV9lbXB0eShrdm0sIHN0YXJ0X3A0ZCkp
CiAJCWNsZWFyX3N0YWdlMl9wZ2RfZW50cnkoa3ZtLCBwZ2QsIHN0YXJ0X2FkZHIpOwogfQogCkBA
IC0zNTEsNyArMzg1LDcgQEAgc3RhdGljIHZvaWQgdW5tYXBfc3RhZ2UyX3JhbmdlKHN0cnVjdCBr
dm0gKmt2bSwgcGh5c19hZGRyX3Qgc3RhcnQsIHU2NCBzaXplKQogCQkJYnJlYWs7CiAJCW5leHQg
PSBzdGFnZTJfcGdkX2FkZHJfZW5kKGt2bSwgYWRkciwgZW5kKTsKIAkJaWYgKCFzdGFnZTJfcGdk
X25vbmUoa3ZtLCAqcGdkKSkKLQkJCXVubWFwX3N0YWdlMl9wdWRzKGt2bSwgcGdkLCBhZGRyLCBu
ZXh0KTsKKwkJCXVubWFwX3N0YWdlMl9wNGRzKGt2bSwgcGdkLCBhZGRyLCBuZXh0KTsKIAkJLyoK
IAkJICogSWYgdGhlIHJhbmdlIGlzIHRvbyBsYXJnZSwgcmVsZWFzZSB0aGUga3ZtLT5tbXVfbG9j
awogCQkgKiB0byBwcmV2ZW50IHN0YXJ2YXRpb24gYW5kIGxvY2t1cCBkZXRlY3RvciB3YXJuaW5n
cy4KQEAgLTM5MSwxMyArNDI1LDEzIEBAIHN0YXRpYyB2b2lkIHN0YWdlMl9mbHVzaF9wbWRzKHN0
cnVjdCBrdm0gKmt2bSwgcHVkX3QgKnB1ZCwKIAl9IHdoaWxlIChwbWQrKywgYWRkciA9IG5leHQs
IGFkZHIgIT0gZW5kKTsKIH0KIAotc3RhdGljIHZvaWQgc3RhZ2UyX2ZsdXNoX3B1ZHMoc3RydWN0
IGt2bSAqa3ZtLCBwZ2RfdCAqcGdkLAorc3RhdGljIHZvaWQgc3RhZ2UyX2ZsdXNoX3B1ZHMoc3Ry
dWN0IGt2bSAqa3ZtLCBwNGRfdCAqcDRkLAogCQkJICAgICAgcGh5c19hZGRyX3QgYWRkciwgcGh5
c19hZGRyX3QgZW5kKQogewogCXB1ZF90ICpwdWQ7CiAJcGh5c19hZGRyX3QgbmV4dDsKIAotCXB1
ZCA9IHN0YWdlMl9wdWRfb2Zmc2V0KGt2bSwgcGdkLCBhZGRyKTsKKwlwdWQgPSBzdGFnZTJfcHVk
X29mZnNldChrdm0sIHA0ZCwgYWRkcik7CiAJZG8gewogCQluZXh0ID0gc3RhZ2UyX3B1ZF9hZGRy
X2VuZChrdm0sIGFkZHIsIGVuZCk7CiAJCWlmICghc3RhZ2UyX3B1ZF9ub25lKGt2bSwgKnB1ZCkp
IHsKQEAgLTQwOSw2ICs0NDMsMjAgQEAgc3RhdGljIHZvaWQgc3RhZ2UyX2ZsdXNoX3B1ZHMoc3Ry
dWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGdkLAogCX0gd2hpbGUgKHB1ZCsrLCBhZGRyID0gbmV4dCwg
YWRkciAhPSBlbmQpOwogfQogCitzdGF0aWMgdm9pZCBzdGFnZTJfZmx1c2hfcDRkcyhzdHJ1Y3Qg
a3ZtICprdm0sIHBnZF90ICpwZ2QsCisJCQkgICAgICBwaHlzX2FkZHJfdCBhZGRyLCBwaHlzX2Fk
ZHJfdCBlbmQpCit7CisJcDRkX3QgKnA0ZDsKKwlwaHlzX2FkZHJfdCBuZXh0OworCisJcDRkID0g
c3RhZ2UyX3A0ZF9vZmZzZXQoa3ZtLCBwZ2QsIGFkZHIpOworCWRvIHsKKwkJbmV4dCA9IHN0YWdl
Ml9wNGRfYWRkcl9lbmQoa3ZtLCBhZGRyLCBlbmQpOworCQlpZiAoIXN0YWdlMl9wNGRfbm9uZShr
dm0sICpwNGQpKQorCQkJc3RhZ2UyX2ZsdXNoX3B1ZHMoa3ZtLCBwNGQsIGFkZHIsIG5leHQpOwor
CX0gd2hpbGUgKHA0ZCsrLCBhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQpOworfQorCiBzdGF0aWMg
dm9pZCBzdGFnZTJfZmx1c2hfbWVtc2xvdChzdHJ1Y3Qga3ZtICprdm0sCiAJCQkJIHN0cnVjdCBr
dm1fbWVtb3J5X3Nsb3QgKm1lbXNsb3QpCiB7CkBAIC00MjEsNyArNDY5LDcgQEAgc3RhdGljIHZv
aWQgc3RhZ2UyX2ZsdXNoX21lbXNsb3Qoc3RydWN0IGt2bSAqa3ZtLAogCWRvIHsKIAkJbmV4dCA9
IHN0YWdlMl9wZ2RfYWRkcl9lbmQoa3ZtLCBhZGRyLCBlbmQpOwogCQlpZiAoIXN0YWdlMl9wZ2Rf
bm9uZShrdm0sICpwZ2QpKQotCQkJc3RhZ2UyX2ZsdXNoX3B1ZHMoa3ZtLCBwZ2QsIGFkZHIsIG5l
eHQpOworCQkJc3RhZ2UyX2ZsdXNoX3A0ZHMoa3ZtLCBwZ2QsIGFkZHIsIG5leHQpOwogCX0gd2hp
bGUgKHBnZCsrLCBhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQpOwogfQogCkBAIC00NTEsMTIgKzQ5
OSwyMSBAQCBzdGF0aWMgdm9pZCBzdGFnZTJfZmx1c2hfdm0oc3RydWN0IGt2bSAqa3ZtKQogCiBz
dGF0aWMgdm9pZCBjbGVhcl9oeXBfcGdkX2VudHJ5KHBnZF90ICpwZ2QpCiB7Ci0JcHVkX3QgKnB1
ZF90YWJsZSBfX21heWJlX3VudXNlZCA9IHB1ZF9vZmZzZXQocGdkLCAwVUwpOworCXA0ZF90ICpw
NGRfdGFibGUgX19tYXliZV91bnVzZWQgPSBwNGRfb2Zmc2V0KHBnZCwgMFVMKTsKIAlwZ2RfY2xl
YXIocGdkKTsKLQlwdWRfZnJlZShOVUxMLCBwdWRfdGFibGUpOworCXA0ZF9mcmVlKE5VTEwsIHA0
ZF90YWJsZSk7CiAJcHV0X3BhZ2UodmlydF90b19wYWdlKHBnZCkpOwogfQogCitzdGF0aWMgdm9p
ZCBjbGVhcl9oeXBfcDRkX2VudHJ5KHA0ZF90ICpwNGQpCit7CisJcHVkX3QgKnB1ZF90YWJsZSBf
X21heWJlX3VudXNlZCA9IHB1ZF9vZmZzZXQocDRkLCAwKTsKKwlWTV9CVUdfT04ocDRkX2h1Z2Uo
KnA0ZCkpOworCXA0ZF9jbGVhcihwNGQpOworCXB1ZF9mcmVlKE5VTEwsIHB1ZF90YWJsZSk7CisJ
cHV0X3BhZ2UodmlydF90b19wYWdlKHA0ZCkpOworfQorCiBzdGF0aWMgdm9pZCBjbGVhcl9oeXBf
cHVkX2VudHJ5KHB1ZF90ICpwdWQpCiB7CiAJcG1kX3QgKnBtZF90YWJsZSBfX21heWJlX3VudXNl
ZCA9IHBtZF9vZmZzZXQocHVkLCAwKTsKQEAgLTUwOCwxMiArNTY1LDEyIEBAIHN0YXRpYyB2b2lk
IHVubWFwX2h5cF9wbWRzKHB1ZF90ICpwdWQsIHBoeXNfYWRkcl90IGFkZHIsIHBoeXNfYWRkcl90
IGVuZCkKIAkJY2xlYXJfaHlwX3B1ZF9lbnRyeShwdWQpOwogfQogCi1zdGF0aWMgdm9pZCB1bm1h
cF9oeXBfcHVkcyhwZ2RfdCAqcGdkLCBwaHlzX2FkZHJfdCBhZGRyLCBwaHlzX2FkZHJfdCBlbmQp
CitzdGF0aWMgdm9pZCB1bm1hcF9oeXBfcHVkcyhwNGRfdCAqcDRkLCBwaHlzX2FkZHJfdCBhZGRy
LCBwaHlzX2FkZHJfdCBlbmQpCiB7CiAJcGh5c19hZGRyX3QgbmV4dDsKIAlwdWRfdCAqcHVkLCAq
c3RhcnRfcHVkOwogCi0Jc3RhcnRfcHVkID0gcHVkID0gcHVkX29mZnNldChwZ2QsIGFkZHIpOwor
CXN0YXJ0X3B1ZCA9IHB1ZCA9IHB1ZF9vZmZzZXQocDRkLCBhZGRyKTsKIAlkbyB7CiAJCW5leHQg
PSBwdWRfYWRkcl9lbmQoYWRkciwgZW5kKTsKIAkJLyogSHlwIGRvZXNuJ3QgdXNlIGh1Z2UgcHVk
cyAqLwpAQCAtNTIyLDYgKzU3OSwyMyBAQCBzdGF0aWMgdm9pZCB1bm1hcF9oeXBfcHVkcyhwZ2Rf
dCAqcGdkLCBwaHlzX2FkZHJfdCBhZGRyLCBwaHlzX2FkZHJfdCBlbmQpCiAJfSB3aGlsZSAocHVk
KyssIGFkZHIgPSBuZXh0LCBhZGRyICE9IGVuZCk7CiAKIAlpZiAoaHlwX3B1ZF90YWJsZV9lbXB0
eShzdGFydF9wdWQpKQorCQljbGVhcl9oeXBfcDRkX2VudHJ5KHA0ZCk7Cit9CisKK3N0YXRpYyB2
b2lkIHVubWFwX2h5cF9wNGRzKHBnZF90ICpwZ2QsIHBoeXNfYWRkcl90IGFkZHIsIHBoeXNfYWRk
cl90IGVuZCkKK3sKKwlwaHlzX2FkZHJfdCBuZXh0OworCXA0ZF90ICpwNGQsICpzdGFydF9wNGQ7
CisKKwlzdGFydF9wNGQgPSBwNGQgPSBwNGRfb2Zmc2V0KHBnZCwgYWRkcik7CisJZG8geworCQlu
ZXh0ID0gcDRkX2FkZHJfZW5kKGFkZHIsIGVuZCk7CisJCS8qIEh5cCBkb2Vzbid0IHVzZSBodWdl
IHA0ZHMgKi8KKwkJaWYgKCFwNGRfbm9uZSgqcDRkKSkKKwkJCXVubWFwX2h5cF9wdWRzKHA0ZCwg
YWRkciwgbmV4dCk7CisJfSB3aGlsZSAocDRkKyssIGFkZHIgPSBuZXh0LCBhZGRyICE9IGVuZCk7
CisKKwlpZiAoaHlwX3A0ZF90YWJsZV9lbXB0eShzdGFydF9wNGQpKQogCQljbGVhcl9oeXBfcGdk
X2VudHJ5KHBnZCk7CiB9CiAKQEAgLTU0NSw3ICs2MTksNyBAQCBzdGF0aWMgdm9pZCBfX3VubWFw
X2h5cF9yYW5nZShwZ2RfdCAqcGdkcCwgdW5zaWduZWQgbG9uZyBwdHJzX3Blcl9wZ2QsCiAJZG8g
ewogCQluZXh0ID0gcGdkX2FkZHJfZW5kKGFkZHIsIGVuZCk7CiAJCWlmICghcGdkX25vbmUoKnBn
ZCkpCi0JCQl1bm1hcF9oeXBfcHVkcyhwZ2QsIGFkZHIsIG5leHQpOworCQkJdW5tYXBfaHlwX3A0
ZHMocGdkLCBhZGRyLCBuZXh0KTsKIAl9IHdoaWxlIChwZ2QrKywgYWRkciA9IG5leHQsIGFkZHIg
IT0gZW5kKTsKIH0KIApAQCAtNjU1LDcgKzcyOSw3IEBAIHN0YXRpYyBpbnQgY3JlYXRlX2h5cF9w
bWRfbWFwcGluZ3MocHVkX3QgKnB1ZCwgdW5zaWduZWQgbG9uZyBzdGFydCwKIAlyZXR1cm4gMDsK
IH0KIAotc3RhdGljIGludCBjcmVhdGVfaHlwX3B1ZF9tYXBwaW5ncyhwZ2RfdCAqcGdkLCB1bnNp
Z25lZCBsb25nIHN0YXJ0LAorc3RhdGljIGludCBjcmVhdGVfaHlwX3B1ZF9tYXBwaW5ncyhwNGRf
dCAqcDRkLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAogCQkJCSAgIHVuc2lnbmVkIGxvbmcgZW5kLCB1
bnNpZ25lZCBsb25nIHBmbiwKIAkJCQkgICBwZ3Byb3RfdCBwcm90KQogewpAQCAtNjY2LDcgKzc0
MCw3IEBAIHN0YXRpYyBpbnQgY3JlYXRlX2h5cF9wdWRfbWFwcGluZ3MocGdkX3QgKnBnZCwgdW5z
aWduZWQgbG9uZyBzdGFydCwKIAogCWFkZHIgPSBzdGFydDsKIAlkbyB7Ci0JCXB1ZCA9IHB1ZF9v
ZmZzZXQocGdkLCBhZGRyKTsKKwkJcHVkID0gcHVkX29mZnNldChwNGQsIGFkZHIpOwogCiAJCWlm
IChwdWRfbm9uZV9vcl9jbGVhcl9iYWQocHVkKSkgewogCQkJcG1kID0gcG1kX2FsbG9jX29uZShO
VUxMLCBhZGRyKTsKQEAgLTY4OCwxMiArNzYyLDQ1IEBAIHN0YXRpYyBpbnQgY3JlYXRlX2h5cF9w
dWRfbWFwcGluZ3MocGdkX3QgKnBnZCwgdW5zaWduZWQgbG9uZyBzdGFydCwKIAlyZXR1cm4gMDsK
IH0KIAorc3RhdGljIGludCBjcmVhdGVfaHlwX3A0ZF9tYXBwaW5ncyhwZ2RfdCAqcGdkLCB1bnNp
Z25lZCBsb25nIHN0YXJ0LAorCQkJCSAgIHVuc2lnbmVkIGxvbmcgZW5kLCB1bnNpZ25lZCBsb25n
IHBmbiwKKwkJCQkgICBwZ3Byb3RfdCBwcm90KQoreworCXA0ZF90ICpwNGQ7CisJcHVkX3QgKnB1
ZDsKKwl1bnNpZ25lZCBsb25nIGFkZHIsIG5leHQ7CisJaW50IHJldDsKKworCWFkZHIgPSBzdGFy
dDsKKwlkbyB7CisJCXA0ZCA9IHA0ZF9vZmZzZXQocGdkLCBhZGRyKTsKKworCQlpZiAocDRkX25v
bmUoKnA0ZCkpIHsKKwkJCXB1ZCA9IHB1ZF9hbGxvY19vbmUoTlVMTCwgYWRkcik7CisJCQlpZiAo
IXB1ZCkgeworCQkJCWt2bV9lcnIoIkNhbm5vdCBhbGxvY2F0ZSBIeXAgcHVkXG4iKTsKKwkJCQly
ZXR1cm4gLUVOT01FTTsKKwkJCX0KKwkJCWt2bV9wNGRfcG9wdWxhdGUocDRkLCBwdWQpOworCQkJ
Z2V0X3BhZ2UodmlydF90b19wYWdlKHA0ZCkpOworCQl9CisKKwkJbmV4dCA9IHA0ZF9hZGRyX2Vu
ZChhZGRyLCBlbmQpOworCQlyZXQgPSBjcmVhdGVfaHlwX3B1ZF9tYXBwaW5ncyhwNGQsIGFkZHIs
IG5leHQsIHBmbiwgcHJvdCk7CisJCWlmIChyZXQpCisJCQlyZXR1cm4gcmV0OworCQlwZm4gKz0g
KG5leHQgLSBhZGRyKSA+PiBQQUdFX1NISUZUOworCX0gd2hpbGUgKGFkZHIgPSBuZXh0LCBhZGRy
ICE9IGVuZCk7CisKKwlyZXR1cm4gMDsKK30KKwogc3RhdGljIGludCBfX2NyZWF0ZV9oeXBfbWFw
cGluZ3MocGdkX3QgKnBnZHAsIHVuc2lnbmVkIGxvbmcgcHRyc19wZXJfcGdkLAogCQkJCSB1bnNp
Z25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCwKIAkJCQkgdW5zaWduZWQgbG9uZyBw
Zm4sIHBncHJvdF90IHByb3QpCiB7CiAJcGdkX3QgKnBnZDsKLQlwdWRfdCAqcHVkOworCXA0ZF90
ICpwNGQ7CiAJdW5zaWduZWQgbG9uZyBhZGRyLCBuZXh0OwogCWludCBlcnIgPSAwOwogCkBAIC03
MDQsMTggKzgxMSwxOCBAQCBzdGF0aWMgaW50IF9fY3JlYXRlX2h5cF9tYXBwaW5ncyhwZ2RfdCAq
cGdkcCwgdW5zaWduZWQgbG9uZyBwdHJzX3Blcl9wZ2QsCiAJCXBnZCA9IHBnZHAgKyBrdm1fcGdk
X2luZGV4KGFkZHIsIHB0cnNfcGVyX3BnZCk7CiAKIAkJaWYgKHBnZF9ub25lKCpwZ2QpKSB7Ci0J
CQlwdWQgPSBwdWRfYWxsb2Nfb25lKE5VTEwsIGFkZHIpOwotCQkJaWYgKCFwdWQpIHsKLQkJCQlr
dm1fZXJyKCJDYW5ub3QgYWxsb2NhdGUgSHlwIHB1ZFxuIik7CisJCQlwNGQgPSBwNGRfYWxsb2Nf
b25lKE5VTEwsIGFkZHIpOworCQkJaWYgKCFwNGQpIHsKKwkJCQlrdm1fZXJyKCJDYW5ub3QgYWxs
b2NhdGUgSHlwIHA0ZFxuIik7CiAJCQkJZXJyID0gLUVOT01FTTsKIAkJCQlnb3RvIG91dDsKIAkJ
CX0KLQkJCWt2bV9wZ2RfcG9wdWxhdGUocGdkLCBwdWQpOworCQkJa3ZtX3BnZF9wb3B1bGF0ZShw
Z2QsIHA0ZCk7CiAJCQlnZXRfcGFnZSh2aXJ0X3RvX3BhZ2UocGdkKSk7CiAJCX0KIAogCQluZXh0
ID0gcGdkX2FkZHJfZW5kKGFkZHIsIGVuZCk7Ci0JCWVyciA9IGNyZWF0ZV9oeXBfcHVkX21hcHBp
bmdzKHBnZCwgYWRkciwgbmV4dCwgcGZuLCBwcm90KTsKKwkJZXJyID0gY3JlYXRlX2h5cF9wNGRf
bWFwcGluZ3MocGdkLCBhZGRyLCBuZXh0LCBwZm4sIHByb3QpOwogCQlpZiAoZXJyKQogCQkJZ290
byBvdXQ7CiAJCXBmbiArPSAobmV4dCAtIGFkZHIpID4+IFBBR0VfU0hJRlQ7CkBAIC0xMDEyLDIy
ICsxMTE5LDQwIEBAIHZvaWQga3ZtX2ZyZWVfc3RhZ2UyX3BnZChzdHJ1Y3Qga3ZtICprdm0pCiAJ
CWZyZWVfcGFnZXNfZXhhY3QocGdkLCBzdGFnZTJfcGdkX3NpemUoa3ZtKSk7CiB9CiAKLXN0YXRp
YyBwdWRfdCAqc3RhZ2UyX2dldF9wdWQoc3RydWN0IGt2bSAqa3ZtLCBzdHJ1Y3Qga3ZtX21tdV9t
ZW1vcnlfY2FjaGUgKmNhY2hlLAorc3RhdGljIHA0ZF90ICpzdGFnZTJfZ2V0X3A0ZChzdHJ1Y3Qg
a3ZtICprdm0sIHN0cnVjdCBrdm1fbW11X21lbW9yeV9jYWNoZSAqY2FjaGUsCiAJCQkgICAgIHBo
eXNfYWRkcl90IGFkZHIpCiB7CiAJcGdkX3QgKnBnZDsKLQlwdWRfdCAqcHVkOworCXA0ZF90ICpw
NGQ7CiAKIAlwZ2QgPSBrdm0tPmFyY2gucGdkICsgc3RhZ2UyX3BnZF9pbmRleChrdm0sIGFkZHIp
OwogCWlmIChzdGFnZTJfcGdkX25vbmUoa3ZtLCAqcGdkKSkgewogCQlpZiAoIWNhY2hlKQogCQkJ
cmV0dXJuIE5VTEw7Ci0JCXB1ZCA9IG1tdV9tZW1vcnlfY2FjaGVfYWxsb2MoY2FjaGUpOwotCQlz
dGFnZTJfcGdkX3BvcHVsYXRlKGt2bSwgcGdkLCBwdWQpOworCQlwNGQgPSBtbXVfbWVtb3J5X2Nh
Y2hlX2FsbG9jKGNhY2hlKTsKKwkJc3RhZ2UyX3BnZF9wb3B1bGF0ZShrdm0sIHBnZCwgcDRkKTsK
IAkJZ2V0X3BhZ2UodmlydF90b19wYWdlKHBnZCkpOwogCX0KIAotCXJldHVybiBzdGFnZTJfcHVk
X29mZnNldChrdm0sIHBnZCwgYWRkcik7CisJcmV0dXJuIHN0YWdlMl9wNGRfb2Zmc2V0KGt2bSwg
cGdkLCBhZGRyKTsKK30KKworc3RhdGljIHB1ZF90ICpzdGFnZTJfZ2V0X3B1ZChzdHJ1Y3Qga3Zt
ICprdm0sIHN0cnVjdCBrdm1fbW11X21lbW9yeV9jYWNoZSAqY2FjaGUsCisJCQkgICAgIHBoeXNf
YWRkcl90IGFkZHIpCit7CisJcDRkX3QgKnA0ZDsKKwlwdWRfdCAqcHVkOworCisJcDRkID0gc3Rh
Z2UyX2dldF9wNGQoa3ZtLCBjYWNoZSwgYWRkcik7CisJaWYgKHN0YWdlMl9wNGRfbm9uZShrdm0s
ICpwNGQpKSB7CisJCWlmICghY2FjaGUpCisJCQlyZXR1cm4gTlVMTDsKKwkJcHVkID0gbW11X21l
bW9yeV9jYWNoZV9hbGxvYyhjYWNoZSk7CisJCXN0YWdlMl9wNGRfcG9wdWxhdGUoa3ZtLCBwNGQs
IHB1ZCk7CisJCWdldF9wYWdlKHZpcnRfdG9fcGFnZShwNGQpKTsKKwl9CisKKwlyZXR1cm4gc3Rh
Z2UyX3B1ZF9vZmZzZXQoa3ZtLCBwNGQsIGFkZHIpOwogfQogCiBzdGF0aWMgcG1kX3QgKnN0YWdl
Ml9nZXRfcG1kKHN0cnVjdCBrdm0gKmt2bSwgc3RydWN0IGt2bV9tbXVfbWVtb3J5X2NhY2hlICpj
YWNoZSwKQEAgLTE0NjEsMTggKzE1ODYsMTggQEAgc3RhdGljIHZvaWQgc3RhZ2UyX3dwX3BtZHMo
c3RydWN0IGt2bSAqa3ZtLCBwdWRfdCAqcHVkLAogfQogCiAvKioKLSAqIHN0YWdlMl93cF9wdWRz
IC0gd3JpdGUgcHJvdGVjdCBQR0QgcmFuZ2UKKyAqIHN0YWdlMl93cF9wdWRzIC0gd3JpdGUgcHJv
dGVjdCBQNEQgcmFuZ2UKICAqIEBwZ2Q6CXBvaW50ZXIgdG8gcGdkIGVudHJ5CiAgKiBAYWRkcjoJ
cmFuZ2Ugc3RhcnQgYWRkcmVzcwogICogQGVuZDoJcmFuZ2UgZW5kIGFkZHJlc3MKICAqLwotc3Rh
dGljIHZvaWQgIHN0YWdlMl93cF9wdWRzKHN0cnVjdCBrdm0gKmt2bSwgcGdkX3QgKnBnZCwKK3N0
YXRpYyB2b2lkICBzdGFnZTJfd3BfcHVkcyhzdHJ1Y3Qga3ZtICprdm0sIHA0ZF90ICpwNGQsCiAJ
CQkgICAgcGh5c19hZGRyX3QgYWRkciwgcGh5c19hZGRyX3QgZW5kKQogewogCXB1ZF90ICpwdWQ7
CiAJcGh5c19hZGRyX3QgbmV4dDsKIAotCXB1ZCA9IHN0YWdlMl9wdWRfb2Zmc2V0KGt2bSwgcGdk
LCBhZGRyKTsKKwlwdWQgPSBzdGFnZTJfcHVkX29mZnNldChrdm0sIHA0ZCwgYWRkcik7CiAJZG8g
ewogCQluZXh0ID0gc3RhZ2UyX3B1ZF9hZGRyX2VuZChrdm0sIGFkZHIsIGVuZCk7CiAJCWlmICgh
c3RhZ2UyX3B1ZF9ub25lKGt2bSwgKnB1ZCkpIHsKQEAgLTE0ODYsNiArMTYxMSwyNiBAQCBzdGF0
aWMgdm9pZCAgc3RhZ2UyX3dwX3B1ZHMoc3RydWN0IGt2bSAqa3ZtLCBwZ2RfdCAqcGdkLAogCX0g
d2hpbGUgKHB1ZCsrLCBhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQpOwogfQogCisvKioKKyAqIHN0
YWdlMl93cF9wNGRzIC0gd3JpdGUgcHJvdGVjdCBQR0QgcmFuZ2UKKyAqIEBwZ2Q6CXBvaW50ZXIg
dG8gcGdkIGVudHJ5CisgKiBAYWRkcjoJcmFuZ2Ugc3RhcnQgYWRkcmVzcworICogQGVuZDoJcmFu
Z2UgZW5kIGFkZHJlc3MKKyAqLworc3RhdGljIHZvaWQgIHN0YWdlMl93cF9wNGRzKHN0cnVjdCBr
dm0gKmt2bSwgcGdkX3QgKnBnZCwKKwkJCSAgICBwaHlzX2FkZHJfdCBhZGRyLCBwaHlzX2FkZHJf
dCBlbmQpCit7CisJcDRkX3QgKnA0ZDsKKwlwaHlzX2FkZHJfdCBuZXh0OworCisJcDRkID0gc3Rh
Z2UyX3A0ZF9vZmZzZXQoa3ZtLCBwZ2QsIGFkZHIpOworCWRvIHsKKwkJbmV4dCA9IHN0YWdlMl9w
NGRfYWRkcl9lbmQoa3ZtLCBhZGRyLCBlbmQpOworCQlpZiAoIXN0YWdlMl9wNGRfbm9uZShrdm0s
ICpwNGQpKQorCQkJc3RhZ2UyX3dwX3B1ZHMoa3ZtLCBwNGQsIGFkZHIsIG5leHQpOworCX0gd2hp
bGUgKHA0ZCsrLCBhZGRyID0gbmV4dCwgYWRkciAhPSBlbmQpOworfQorCiAvKioKICAqIHN0YWdl
Ml93cF9yYW5nZSgpIC0gd3JpdGUgcHJvdGVjdCBzdGFnZTIgbWVtb3J5IHJlZ2lvbiByYW5nZQog
ICogQGt2bToJVGhlIEtWTSBwb2ludGVyCkBAIC0xNTEzLDcgKzE2NTgsNyBAQCBzdGF0aWMgdm9p
ZCBzdGFnZTJfd3BfcmFuZ2Uoc3RydWN0IGt2bSAqa3ZtLCBwaHlzX2FkZHJfdCBhZGRyLCBwaHlz
X2FkZHJfdCBlbmQpCiAJCQlicmVhazsKIAkJbmV4dCA9IHN0YWdlMl9wZ2RfYWRkcl9lbmQoa3Zt
LCBhZGRyLCBlbmQpOwogCQlpZiAoc3RhZ2UyX3BnZF9wcmVzZW50KGt2bSwgKnBnZCkpCi0JCQlz
dGFnZTJfd3BfcHVkcyhrdm0sIHBnZCwgYWRkciwgbmV4dCk7CisJCQlzdGFnZTJfd3BfcDRkcyhr
dm0sIHBnZCwgYWRkciwgbmV4dCk7CiAJfSB3aGlsZSAocGdkKyssIGFkZHIgPSBuZXh0LCBhZGRy
ICE9IGVuZCk7CiB9CiAKLS0gCjIuMjUuMQoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX18KT3BlblJJU0MgbWFpbGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxp
YnJlY29yZXMub3JnCmh0dHBzOi8vbGlzdHMubGlicmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJp
c2MK
