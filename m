Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id EA8F82460D2
	for <lists+openrisc@lfdr.de>; Mon, 17 Aug 2020 10:46:40 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 9664420E99;
	Mon, 17 Aug 2020 10:46:40 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 999A320D76
 for <openrisc@lists.librecores.org>; Sun,  2 Aug 2020 18:38:17 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id A660620738;
 Sun,  2 Aug 2020 16:38:05 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1596386296;
 bh=ZSm6d6pynDsYaspcmFkA9i9QoTs5yDO6OGxrC7T3jZs=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=wlz0jLSt/yYcm77PhcOHueJKHmXGUdcAwt5zWgDfghUZQqofxnmBbVGi+oCHfmwIN
 SvA7WmPU2Aaoo8BT9DtKHLs4vlJxytzaJyGC2Et8AJJq3m2NzkXqZUhldg9blFC8ZG
 +G9gvYl9Rq/waJcSbTeR3DYHP02mbGksAohjl2as=
From: Mike Rapoport <rppt@kernel.org>
To: Andrew Morton <akpm@linux-foundation.org>
Date: Sun,  2 Aug 2020 19:35:55 +0300
Message-Id: <20200802163601.8189-12-rppt@kernel.org>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200802163601.8189-1-rppt@kernel.org>
References: <20200802163601.8189-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Mon, 17 Aug 2020 10:45:38 +0200
Subject: [OpenRISC] [PATCH v2 11/17] arch,
 mm: replace for_each_memblock() with for_each_mem_pfn_range()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Thomas Gleixner <tglx@linutronix.de>,
 Emil Renner Berthing <kernel@esmil.dk>, linux-sh@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>,
 Benjamin Herrenschmidt <benh@kernel.crashing.org>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-mips@vger.kernel.org,
 Max Filippov <jcmvbkbc@gmail.com>, Paul Mackerras <paulus@samba.org>,
 sparclinux@vger.kernel.org, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Christoph Hellwig <hch@lst.de>,
 Marek Szyprowski <m.szyprowski@samsung.com>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Michael Ellerman <mpe@ellerman.id.au>,
 x86@kernel.org, Russell King <linux@armlinux.org.uk>,
 Mike Rapoport <rppt@linux.ibm.com>, clang-built-linux@googlegroups.com,
 Ingo Molnar <mingo@redhat.com>, linux-arm-kernel@lists.infradead.org,
 Catalin Marinas <catalin.marinas@arm.com>,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 openrisc@lists.librecores.org, Borislav Petkov <bp@alien8.de>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Hari Bathini <hbathini@linux.ibm.com>, Michal Simek <monstr@monstr.eu>,
 Yoshinori Sato <ysato@users.sourceforge.jp>, linux-mm@kvack.org,
 linux-kernel@vger.kernel.org, iommu@lists.linux-foundation.org,
 Palmer Dabbelt <palmer@dabbelt.com>, linuxppc-dev@lists.ozlabs.org,
 Mike Rapoport <rppt@kernel.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlcmUgYXJlIHNldmVy
YWwgb2NjdXJyZW5jZXMgb2YgdGhlIGZvbGxvd2luZyBwYXR0ZXJuOgoKCWZvcl9lYWNoX21lbWJs
b2NrKG1lbW9yeSwgcmVnKSB7CgkJc3RhcnRfcGZuID0gbWVtYmxvY2tfcmVnaW9uX21lbW9yeV9i
YXNlX3BmbihyZWcpOwoJCWVuZF9wZm4gPSBtZW1ibG9ja19yZWdpb25fbWVtb3J5X2VuZF9wZm4o
cmVnKTsKCgkJLyogZG8gc29tZXRoaW5nIHdpdGggc3RhcnRfcGZuIGFuZCBlbmRfcGZuICovCgl9
CgpSYXRoZXIgdGhhbiBpdGVyYXRlIG92ZXIgYWxsIG1lbWJsb2NrLm1lbW9yeSByZWdpb25zIGFu
ZCBlYWNoIHRpbWUgcXVlcnkKZm9yIHRoZWlyIHN0YXJ0IGFuZCBlbmQgUEZOcywgdXNlIGZvcl9l
YWNoX21lbV9wZm5fcmFuZ2UoKSBpdGVyYXRvciB0byBnZXQKc2ltcGxlciBhbmQgY2xlYXJlciBj
b2RlLgoKU2lnbmVkLW9mZi1ieTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgot
LS0KIGFyY2gvYXJtL21tL2luaXQuYyAgICAgICAgICAgfCAxMSArKysrLS0tLS0tLQogYXJjaC9h
cm02NC9tbS9pbml0LmMgICAgICAgICB8IDExICsrKystLS0tLS0tCiBhcmNoL3Bvd2VycGMva2Vy
bmVsL2ZhZHVtcC5jIHwgMTEgKysrKysrLS0tLS0KIGFyY2gvcG93ZXJwYy9tbS9tZW0uYyAgICAg
ICAgfCAxNSArKysrKysrKy0tLS0tLS0KIGFyY2gvcG93ZXJwYy9tbS9udW1hLmMgICAgICAgfCAg
NyArKy0tLS0tCiBhcmNoL3MzOTAvbW0vcGFnZS1zdGF0ZXMuYyAgIHwgIDYgKystLS0tCiBhcmNo
L3NoL21tL2luaXQuYyAgICAgICAgICAgIHwgIDkgKysrLS0tLS0tCiBtbS9tZW1ibG9jay5jICAg
ICAgICAgICAgICAgIHwgIDYgKystLS0tCiBtbS9zcGFyc2UuYyAgICAgICAgICAgICAgICAgIHwg
MTAgKysrKy0tLS0tLQogOSBmaWxlcyBjaGFuZ2VkLCAzNSBpbnNlcnRpb25zKCspLCA1MSBkZWxl
dGlvbnMoLSkKCmRpZmYgLS1naXQgYS9hcmNoL2FybS9tbS9pbml0LmMgYi9hcmNoL2FybS9tbS9p
bml0LmMKaW5kZXggNjI2YWYzNDhlYjhmLi5kNjMwNTczMjc3ZDEgMTAwNjQ0Ci0tLSBhL2FyY2gv
YXJtL21tL2luaXQuYworKysgYi9hcmNoL2FybS9tbS9pbml0LmMKQEAgLTMwNCwxNiArMzA0LDE0
IEBAIGZyZWVfbWVtbWFwKHVuc2lnbmVkIGxvbmcgc3RhcnRfcGZuLCB1bnNpZ25lZCBsb25nIGVu
ZF9wZm4pCiAgKi8KIHN0YXRpYyB2b2lkIF9faW5pdCBmcmVlX3VudXNlZF9tZW1tYXAodm9pZCkK
IHsKLQl1bnNpZ25lZCBsb25nIHN0YXJ0LCBwcmV2X2VuZCA9IDA7Ci0Jc3RydWN0IG1lbWJsb2Nr
X3JlZ2lvbiAqcmVnOworCXVuc2lnbmVkIGxvbmcgc3RhcnQsIGVuZCwgcHJldl9lbmQgPSAwOwor
CWludCBpOwogCiAJLyoKIAkgKiBUaGlzIHJlbGllcyBvbiBlYWNoIGJhbmsgYmVpbmcgaW4gYWRk
cmVzcyBvcmRlci4KIAkgKiBUaGUgYmFua3MgYXJlIHNvcnRlZCBwcmV2aW91c2x5IGluIGJvb3Rt
ZW1faW5pdCgpLgogCSAqLwotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXN0
YXJ0ID0gbWVtYmxvY2tfcmVnaW9uX21lbW9yeV9iYXNlX3BmbihyZWcpOwotCisJZm9yX2VhY2hf
bWVtX3Bmbl9yYW5nZShpLCBNQVhfTlVNTk9ERVMsICZzdGFydCwgJmVuZCwgTlVMTCkgewogI2lm
ZGVmIENPTkZJR19TUEFSU0VNRU0KIAkJLyoKIAkJICogVGFrZSBjYXJlIG5vdCB0byBmcmVlIG1l
bW1hcCBlbnRyaWVzIHRoYXQgZG9uJ3QgZXhpc3QKQEAgLTM0MSw4ICszMzksNyBAQCBzdGF0aWMg
dm9pZCBfX2luaXQgZnJlZV91bnVzZWRfbWVtbWFwKHZvaWQpCiAJCSAqIG1lbW1hcCBlbnRyaWVz
IGFyZSB2YWxpZCBmcm9tIHRoZSBiYW5rIGVuZCBhbGlnbmVkIHRvCiAJCSAqIE1BWF9PUkRFUl9O
Ul9QQUdFUy4KIAkJICovCi0JCXByZXZfZW5kID0gQUxJR04obWVtYmxvY2tfcmVnaW9uX21lbW9y
eV9lbmRfcGZuKHJlZyksCi0JCQkJIE1BWF9PUkRFUl9OUl9QQUdFUyk7CisJCXByZXZfZW5kID0g
QUxJR04oZW5kLCBNQVhfT1JERVJfTlJfUEFHRVMpOwogCX0KIAogI2lmZGVmIENPTkZJR19TUEFS
U0VNRU0KZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQvbW0vaW5pdC5jIGIvYXJjaC9hcm02NC9tbS9p
bml0LmMKaW5kZXggMWU5M2NmYzdjNDdhLi4yOTFiNTgwNTQ1N2QgMTAwNjQ0Ci0tLSBhL2FyY2gv
YXJtNjQvbW0vaW5pdC5jCisrKyBiL2FyY2gvYXJtNjQvbW0vaW5pdC5jCkBAIC00NzMsMTIgKzQ3
MywxMCBAQCBzdGF0aWMgaW5saW5lIHZvaWQgZnJlZV9tZW1tYXAodW5zaWduZWQgbG9uZyBzdGFy
dF9wZm4sIHVuc2lnbmVkIGxvbmcgZW5kX3BmbikKICAqLwogc3RhdGljIHZvaWQgX19pbml0IGZy
ZWVfdW51c2VkX21lbW1hcCh2b2lkKQogewotCXVuc2lnbmVkIGxvbmcgc3RhcnQsIHByZXZfZW5k
ID0gMDsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7Ci0KLQlmb3JfZWFjaF9tZW1ibG9j
ayhtZW1vcnksIHJlZykgewotCQlzdGFydCA9IF9fcGh5c190b19wZm4ocmVnLT5iYXNlKTsKKwl1
bnNpZ25lZCBsb25nIHN0YXJ0LCBlbmQsIHByZXZfZW5kID0gMDsKKwlpbnQgaTsKIAorCWZvcl9l
YWNoX21lbV9wZm5fcmFuZ2UoaSwgTUFYX05VTU5PREVTLCAmc3RhcnQsICZlbmQsIE5VTEwpIHsK
ICNpZmRlZiBDT05GSUdfU1BBUlNFTUVNCiAJCS8qCiAJCSAqIFRha2UgY2FyZSBub3QgdG8gZnJl
ZSBtZW1tYXAgZW50cmllcyB0aGF0IGRvbid0IGV4aXN0IGR1ZQpAQCAtNDk4LDggKzQ5Niw3IEBA
IHN0YXRpYyB2b2lkIF9faW5pdCBmcmVlX3VudXNlZF9tZW1tYXAodm9pZCkKIAkJICogbWVtbWFw
IGVudHJpZXMgYXJlIHZhbGlkIGZyb20gdGhlIGJhbmsgZW5kIGFsaWduZWQgdG8KIAkJICogTUFY
X09SREVSX05SX1BBR0VTLgogCQkgKi8KLQkJcHJldl9lbmQgPSBBTElHTihfX3BoeXNfdG9fcGZu
KHJlZy0+YmFzZSArIHJlZy0+c2l6ZSksCi0JCQkJIE1BWF9PUkRFUl9OUl9QQUdFUyk7CisJCXBy
ZXZfZW5kID0gQUxJR04oZW5kLCBNQVhfT1JERVJfTlJfUEFHRVMpOwogCX0KIAogI2lmZGVmIENP
TkZJR19TUEFSU0VNRU0KZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9rZXJuZWwvZmFkdW1wLmMg
Yi9hcmNoL3Bvd2VycGMva2VybmVsL2ZhZHVtcC5jCmluZGV4IDc4YWI5YTZlZTZhYy4uZmM4NWNi
YzY2ODM5IDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMva2VybmVsL2ZhZHVtcC5jCisrKyBiL2Fy
Y2gvcG93ZXJwYy9rZXJuZWwvZmFkdW1wLmMKQEAgLTEyMTYsMTQgKzEyMTYsMTUgQEAgc3RhdGlj
IHZvaWQgZmFkdW1wX2ZyZWVfcmVzZXJ2ZWRfbWVtb3J5KHVuc2lnbmVkIGxvbmcgc3RhcnRfcGZu
LAogICovCiBzdGF0aWMgdm9pZCBmYWR1bXBfcmVsZWFzZV9yZXNlcnZlZF9hcmVhKHU2NCBzdGFy
dCwgdTY0IGVuZCkKIHsKLQl1NjQgdHN0YXJ0LCB0ZW5kLCBzcGZuLCBlcGZuOwotCXN0cnVjdCBt
ZW1ibG9ja19yZWdpb24gKnJlZzsKKwl1NjQgdHN0YXJ0LCB0ZW5kLCBzcGZuLCBlcGZuLCByZWdf
c3BmbiwgcmVnX2VwZm4sIGk7CiAKIAlzcGZuID0gUEhZU19QRk4oc3RhcnQpOwogCWVwZm4gPSBQ
SFlTX1BGTihlbmQpOwotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXRzdGFy
dCA9IG1heF90KHU2NCwgc3BmbiwgbWVtYmxvY2tfcmVnaW9uX21lbW9yeV9iYXNlX3BmbihyZWcp
KTsKLQkJdGVuZCAgID0gbWluX3QodTY0LCBlcGZuLCBtZW1ibG9ja19yZWdpb25fbWVtb3J5X2Vu
ZF9wZm4ocmVnKSk7CisKKwlmb3JfZWFjaF9tZW1fcGZuX3JhbmdlKGksIE1BWF9OVU1OT0RFUywg
JnJlZ19zcGZuLCAmcmVnX2VwZm4sIE5VTEwpIHsKKwkJdHN0YXJ0ID0gbWF4X3QodTY0LCBzcGZu
LCByZWdfc3Bmbik7CisJCXRlbmQgICA9IG1pbl90KHU2NCwgZXBmbiwgcmVnX2VwZm4pOworCiAJ
CWlmICh0c3RhcnQgPCB0ZW5kKSB7CiAJCQlmYWR1bXBfZnJlZV9yZXNlcnZlZF9tZW1vcnkodHN0
YXJ0LCB0ZW5kKTsKIApkaWZmIC0tZ2l0IGEvYXJjaC9wb3dlcnBjL21tL21lbS5jIGIvYXJjaC9w
b3dlcnBjL21tL21lbS5jCmluZGV4IGMyYzExZWI4ZGNmYy4uMTM2NGRkNTMyMTA3IDEwMDY0NAot
LS0gYS9hcmNoL3Bvd2VycGMvbW0vbWVtLmMKKysrIGIvYXJjaC9wb3dlcnBjL21tL21lbS5jCkBA
IC0xOTIsMTUgKzE5MiwxNiBAQCB2b2lkIF9faW5pdCBpbml0bWVtX2luaXQodm9pZCkKIC8qIG1h
cmsgcGFnZXMgdGhhdCBkb24ndCBleGlzdCBhcyBub3NhdmUgKi8KIHN0YXRpYyBpbnQgX19pbml0
IG1hcmtfbm9ucmFtX25vc2F2ZSh2b2lkKQogewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJl
ZywgKnByZXYgPSBOVUxMOworCXVuc2lnbmVkIGxvbmcgc3BmbiwgZXBmbiwgcHJldiA9IDA7CisJ
aW50IGk7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewotCQlpZiAocHJldiAm
JgotCQkgICAgbWVtYmxvY2tfcmVnaW9uX21lbW9yeV9lbmRfcGZuKHByZXYpIDwgbWVtYmxvY2tf
cmVnaW9uX21lbW9yeV9iYXNlX3BmbihyZWcpKQotCQkJcmVnaXN0ZXJfbm9zYXZlX3JlZ2lvbiht
ZW1ibG9ja19yZWdpb25fbWVtb3J5X2VuZF9wZm4ocHJldiksCi0JCQkJCSAgICAgICBtZW1ibG9j
a19yZWdpb25fbWVtb3J5X2Jhc2VfcGZuKHJlZykpOwotCQlwcmV2ID0gcmVnOworCWZvcl9lYWNo
X21lbV9wZm5fcmFuZ2UoaSwgTUFYX05VTU5PREVTLCAmc3BmbiwgJmVwZm4sIE5VTEwpIHsKKwkJ
aWYgKHByZXYgJiYgcHJldiA8IHNwZm4pCisJCQlyZWdpc3Rlcl9ub3NhdmVfcmVnaW9uKHByZXYs
IHNwZm4pOworCisJCXByZXYgPSBlcGZuOwogCX0KKwogCXJldHVybiAwOwogfQogI2Vsc2UgLyog
Q09ORklHX05FRURfTVVMVElQTEVfTk9ERVMgKi8KZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9t
bS9udW1hLmMgYi9hcmNoL3Bvd2VycGMvbW0vbnVtYS5jCmluZGV4IDlmY2YyZDE5NTgzMC4uYmFl
MmQ5ZWRkNTJjIDEwMDY0NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vbnVtYS5jCisrKyBiL2FyY2gv
cG93ZXJwYy9tbS9udW1hLmMKQEAgLTgwMCwxNyArODAwLDE0IEBAIHN0YXRpYyB2b2lkIF9faW5p
dCBzZXR1cF9ub25udW1hKHZvaWQpCiAJdW5zaWduZWQgbG9uZyB0b3RhbF9yYW0gPSBtZW1ibG9j
a19waHlzX21lbV9zaXplKCk7CiAJdW5zaWduZWQgbG9uZyBzdGFydF9wZm4sIGVuZF9wZm47CiAJ
dW5zaWduZWQgaW50IG5pZCA9IDA7Ci0Jc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcmVnOworCWlu
dCBpOwogCiAJcHJpbnRrKEtFUk5fREVCVUcgIlRvcCBvZiBSQU06IDB4JWx4LCBUb3RhbCBSQU06
IDB4JWx4XG4iLAogCSAgICAgICB0b3Bfb2ZfcmFtLCB0b3RhbF9yYW0pOwogCXByaW50ayhLRVJO
X0RFQlVHICJNZW1vcnkgaG9sZSBzaXplOiAlbGRNQlxuIiwKIAkgICAgICAgKHRvcF9vZl9yYW0g
LSB0b3RhbF9yYW0pID4+IDIwKTsKIAotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7
Ci0JCXN0YXJ0X3BmbiA9IG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfYmFzZV9wZm4ocmVnKTsKLQkJ
ZW5kX3BmbiA9IG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfZW5kX3BmbihyZWcpOwotCisJZm9yX2Vh
Y2hfbWVtX3Bmbl9yYW5nZShpLCBNQVhfTlVNTk9ERVMsICZzdGFydF9wZm4sICZlbmRfcGZuLCBO
VUxMKSB7CiAJCWZha2VfbnVtYV9jcmVhdGVfbmV3X25vZGUoZW5kX3BmbiwgJm5pZCk7CiAJCW1l
bWJsb2NrX3NldF9ub2RlKFBGTl9QSFlTKHN0YXJ0X3BmbiksCiAJCQkJICBQRk5fUEhZUyhlbmRf
cGZuIC0gc3RhcnRfcGZuKSwKZGlmZiAtLWdpdCBhL2FyY2gvczM5MC9tbS9wYWdlLXN0YXRlcy5j
IGIvYXJjaC9zMzkwL21tL3BhZ2Utc3RhdGVzLmMKaW5kZXggZmMxNDE4OTNkMDI4Li41NjdjNjlm
MzA2OWUgMTAwNjQ0Ci0tLSBhL2FyY2gvczM5MC9tbS9wYWdlLXN0YXRlcy5jCisrKyBiL2FyY2gv
czM5MC9tbS9wYWdlLXN0YXRlcy5jCkBAIC0xODMsOSArMTgzLDkgQEAgc3RhdGljIHZvaWQgbWFy
a19rZXJuZWxfcGdkKHZvaWQpCiAKIHZvaWQgX19pbml0IGNtbWFfaW5pdF9ub2RhdCh2b2lkKQog
ewotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnJlZzsKIAlzdHJ1Y3QgcGFnZSAqcGFnZTsKIAl1
bnNpZ25lZCBsb25nIHN0YXJ0LCBlbmQsIGl4OworCWludCBpOwogCiAJaWYgKGNtbWFfZmxhZyA8
IDIpCiAJCXJldHVybjsKQEAgLTE5Myw5ICsxOTMsNyBAQCB2b2lkIF9faW5pdCBjbW1hX2luaXRf
bm9kYXQodm9pZCkKIAltYXJrX2tlcm5lbF9wZ2QoKTsKIAogCS8qIFNldCBhbGwga2VybmVsIHBh
Z2VzIG5vdCB1c2VkIGZvciBwYWdlIHRhYmxlcyB0byBzdGFibGUvbm8tZGF0ICovCi0JZm9yX2Vh
Y2hfbWVtYmxvY2sobWVtb3J5LCByZWcpIHsKLQkJc3RhcnQgPSBtZW1ibG9ja19yZWdpb25fbWVt
b3J5X2Jhc2VfcGZuKHJlZyk7Ci0JCWVuZCA9IG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfZW5kX3Bm
bihyZWcpOworCWZvcl9lYWNoX21lbV9wZm5fcmFuZ2UoaSwgTUFYX05VTU5PREVTLCAmc3RhcnQs
ICZlbmQsIE5VTEwpIHsKIAkJcGFnZSA9IHBmbl90b19wYWdlKHN0YXJ0KTsKIAkJZm9yIChpeCA9
IHN0YXJ0OyBpeCA8IGVuZDsgaXgrKywgcGFnZSsrKSB7CiAJCQlpZiAoX190ZXN0X2FuZF9jbGVh
cl9iaXQoUEdfYXJjaF8xLCAmcGFnZS0+ZmxhZ3MpKQpkaWZmIC0tZ2l0IGEvYXJjaC9zaC9tbS9p
bml0LmMgYi9hcmNoL3NoL21tL2luaXQuYwppbmRleCA2MmI4ZjAzZmZjODAuLjU4NmVhNTAwZGNj
NyAxMDA2NDQKLS0tIGEvYXJjaC9zaC9tbS9pbml0LmMKKysrIGIvYXJjaC9zaC9tbS9pbml0LmMK
QEAgLTIyNCwxNSArMjI0LDEyIEBAIHZvaWQgX19pbml0IGFsbG9jYXRlX3BnZGF0KHVuc2lnbmVk
IGludCBuaWQpCiAKIHN0YXRpYyB2b2lkIF9faW5pdCBkb19pbml0X2Jvb3RtZW0odm9pZCkKIHsK
LQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJdW5zaWduZWQgbG9uZyBzdGFydF9wZm4s
IGVuZF9wZm47CisJaW50IGk7CiAKIAkvKiBBZGQgYWN0aXZlIHJlZ2lvbnMgd2l0aCB2YWxpZCBQ
Rk5zLiAqLwotCWZvcl9lYWNoX21lbWJsb2NrKG1lbW9yeSwgcmVnKSB7Ci0JCXVuc2lnbmVkIGxv
bmcgc3RhcnRfcGZuLCBlbmRfcGZuOwotCQlzdGFydF9wZm4gPSBtZW1ibG9ja19yZWdpb25fbWVt
b3J5X2Jhc2VfcGZuKHJlZyk7Ci0JCWVuZF9wZm4gPSBtZW1ibG9ja19yZWdpb25fbWVtb3J5X2Vu
ZF9wZm4ocmVnKTsKKwlmb3JfZWFjaF9tZW1fcGZuX3JhbmdlKGksIE1BWF9OVU1OT0RFUywgJnN0
YXJ0X3BmbiwgJmVuZF9wZm4sIE5VTEwpCiAJCV9fYWRkX2FjdGl2ZV9yYW5nZSgwLCBzdGFydF9w
Zm4sIGVuZF9wZm4pOwotCX0KIAogCS8qIEFsbCBvZiBzeXN0ZW0gUkFNIHNpdHMgaW4gbm9kZSAw
IGZvciB0aGUgbm9uLU5VTUEgY2FzZSAqLwogCWFsbG9jYXRlX3BnZGF0KDApOwpkaWZmIC0tZ2l0
IGEvbW0vbWVtYmxvY2suYyBiL21tL21lbWJsb2NrLmMKaW5kZXggODI0OTM4ODQ5ZjZkLi5jMWE0
Yzg3OTg5NzMgMTAwNjQ0Ci0tLSBhL21tL21lbWJsb2NrLmMKKysrIGIvbW0vbWVtYmxvY2suYwpA
QCAtMTY1OSwxMiArMTY1OSwxMCBAQCBwaHlzX2FkZHJfdCBfX2luaXRfbWVtYmxvY2sgbWVtYmxv
Y2tfcmVzZXJ2ZWRfc2l6ZSh2b2lkKQogcGh5c19hZGRyX3QgX19pbml0IG1lbWJsb2NrX21lbV9z
aXplKHVuc2lnbmVkIGxvbmcgbGltaXRfcGZuKQogewogCXVuc2lnbmVkIGxvbmcgcGFnZXMgPSAw
OwotCXN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnI7CiAJdW5zaWduZWQgbG9uZyBzdGFydF9wZm4s
IGVuZF9wZm47CisJaW50IGk7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHIpIHsKLQkJ
c3RhcnRfcGZuID0gbWVtYmxvY2tfcmVnaW9uX21lbW9yeV9iYXNlX3BmbihyKTsKLQkJZW5kX3Bm
biA9IG1lbWJsb2NrX3JlZ2lvbl9tZW1vcnlfZW5kX3BmbihyKTsKKwlmb3JfZWFjaF9tZW1fcGZu
X3JhbmdlKGksIE1BWF9OVU1OT0RFUywgJnN0YXJ0X3BmbiwgJmVuZF9wZm4sIE5VTEwpIHsKIAkJ
c3RhcnRfcGZuID0gbWluX3QodW5zaWduZWQgbG9uZywgc3RhcnRfcGZuLCBsaW1pdF9wZm4pOwog
CQllbmRfcGZuID0gbWluX3QodW5zaWduZWQgbG9uZywgZW5kX3BmbiwgbGltaXRfcGZuKTsKIAkJ
cGFnZXMgKz0gZW5kX3BmbiAtIHN0YXJ0X3BmbjsKZGlmZiAtLWdpdCBhL21tL3NwYXJzZS5jIGIv
bW0vc3BhcnNlLmMKaW5kZXggYjJiOWEzZTM0Njk2Li5jMmJhNDEyYTMxNDEgMTAwNjQ0Ci0tLSBh
L21tL3NwYXJzZS5jCisrKyBiL21tL3NwYXJzZS5jCkBAIC0yOTIsMTMgKzI5MiwxMSBAQCB2b2lk
IF9faW5pdCBtZW1vcnlfcHJlc2VudChpbnQgbmlkLCB1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNp
Z25lZCBsb25nIGVuZCkKICAqLwogdm9pZCBfX2luaXQgbWVtYmxvY2tzX3ByZXNlbnQodm9pZCkK
IHsKLQlzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyZWc7CisJdW5zaWduZWQgbG9uZyBzdGFydCwg
ZW5kOworCWludCBpLCBuaWQ7CiAKLQlmb3JfZWFjaF9tZW1ibG9jayhtZW1vcnksIHJlZykgewot
CQltZW1vcnlfcHJlc2VudChtZW1ibG9ja19nZXRfcmVnaW9uX25vZGUocmVnKSwKLQkJCSAgICAg
ICBtZW1ibG9ja19yZWdpb25fbWVtb3J5X2Jhc2VfcGZuKHJlZyksCi0JCQkgICAgICAgbWVtYmxv
Y2tfcmVnaW9uX21lbW9yeV9lbmRfcGZuKHJlZykpOwotCX0KKwlmb3JfZWFjaF9tZW1fcGZuX3Jh
bmdlKGksIE1BWF9OVU1OT0RFUywgJnN0YXJ0LCAmZW5kLCAmbmlkKQorCQltZW1vcnlfcHJlc2Vu
dChuaWQsIHN0YXJ0LCBlbmQpOwogfQogCiAvKgotLSAKMi4yNi4yCgpfX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpPcGVuUklTQyBtYWlsaW5nIGxpc3QKT3Bl
blJJU0NAbGlzdHMubGlicmVjb3Jlcy5vcmcKaHR0cHM6Ly9saXN0cy5saWJyZWNvcmVzLm9yZy9s
aXN0aW5mby9vcGVucmlzYwo=
