Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 1560A1C05D9
	for <lists+openrisc@lfdr.de>; Thu, 30 Apr 2020 21:09:53 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 267F7202F7;
	Thu, 30 Apr 2020 21:09:47 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 2F3C020ABD
 for <openrisc@lists.librecores.org>; Wed, 29 Apr 2020 14:16:18 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 7E53921973;
 Wed, 29 Apr 2020 12:16:03 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1588162576;
 bh=khO6M0PCZCvxuChmGRirp+z0yfPDyNK839SI/IM+AUg=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=wtq87ctxwV4SeKVcZ9rG9Ex1sM4YINHx9CUpXjq9oBJfndQnJL7lbj8MvWisJo7DV
 5PTjjdhP8ALGahsQGnqm6Oxl1erp1GkdhsYhRZ0SpO1zQQW6fHsyga9v6l9epK6ryJ
 fALAKor8AFFj/TKwvhQdLluT1ziB3+45iQVhIUGU=
From: Mike Rapoport <rppt@kernel.org>
To: linux-kernel@vger.kernel.org
Date: Wed, 29 Apr 2020 15:11:24 +0300
Message-Id: <20200429121126.17989-19-rppt@kernel.org>
X-Mailer: git-send-email 2.26.1
In-Reply-To: <20200429121126.17989-1-rppt@kernel.org>
References: <20200429121126.17989-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Thu, 30 Apr 2020 21:09:13 +0200
Subject: [OpenRISC] [PATCH v2 18/20] mm: clean up free_area_init_node() and
 its helpers
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 linux-doc@vger.kernel.org, Catalin Marinas <catalin.marinas@arm.com>,
 Heiko Carstens <heiko.carstens@de.ibm.com>, Michal Hocko <mhocko@kernel.org>,
 "James E.J. Bottomley" <James.Bottomley@HansenPartnership.com>,
 Max Filippov <jcmvbkbc@gmail.com>, Guo Ren <guoren@kernel.org>,
 linux-csky@vger.kernel.org, linux-parisc@vger.kernel.org,
 sparclinux@vger.kernel.org, linux-hexagon@vger.kernel.org,
 linux-riscv@lists.infradead.org, Mike Rapoport <rppt@linux.ibm.com>,
 Greg Ungerer <gerg@linux-m68k.org>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Jonathan Corbet <corbet@lwn.net>,
 linux-sh@vger.kernel.org, Michael Ellerman <mpe@ellerman.id.au>,
 Helge Deller <deller@gmx.de>, x86@kernel.org,
 Russell King <linux@armlinux.org.uk>, Ley Foon Tan <ley.foon.tan@intel.com>,
 Yoshinori Sato <ysato@users.sourceforge.jp>,
 linux-arm-kernel@lists.infradead.org, Mark Salter <msalter@redhat.com>,
 Matt Turner <mattst88@gmail.com>, linux-snps-arc@lists.infradead.org,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 linux-alpha@vger.kernel.org, linux-um@lists.infradead.org,
 linux-m68k@lists.linux-m68k.org, Tony Luck <tony.luck@intel.com>,
 Qian Cai <cai@lca.pw>, Greentime Hu <green.hu@gmail.com>,
 Paul Walmsley <paul.walmsley@sifive.com>, Guan Xuetao <gxt@pku.edu.cn>,
 Hoan Tran <Hoan@os.amperecomputing.com>, Michal Simek <monstr@monstr.eu>,
 Thomas Bogendoerfer <tsbogend@alpha.franken.de>,
 Brian Cain <bcain@codeaurora.org>, Nick Hu <nickhu@andestech.com>,
 linux-mm@kvack.org, Vineet Gupta <vgupta@synopsys.com>,
 linux-mips@vger.kernel.org, openrisc@lists.librecores.org,
 Richard Weinberger <richard@nod.at>, Andrew Morton <akpm@linux-foundation.org>,
 linuxppc-dev@lists.ozlabs.org, "David S. Miller" <davem@davemloft.net>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlIGZyZWVfYXJlYV9p
bml0X25vZGUoKSBub3cgYWx3YXlzIHVzZXMgbWVtYmxvY2sgaW5mbyBhbmQgdGhlIHpvbmUgUEZO
CmxpbWl0cyBzbyBpdCBkb2VzIG5vdCBuZWVkIHRoZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBm
dW5jdGlvbnMgdG8KY2FsY3VsYXRlIHRoZSB6b25lIHNwYW5uZWQgYW5kIGFic2VudCBwYWdlcy4g
VGhlIHJlbW92YWwgb2YgdGhlIGNvbXBhdF8KdmVyc2lvbnMgb2Ygem9uZV97YWJzY2VudCxzcGFu
bmVkfV9wYWdlc19pbl9ub2RlKCkgaW4gdHVybiwgbWFrZXMgem9uZV9zaXplCmFuZCB6aG9sZV9z
aXplIHBhcmFtZXRlcnMgdW51c2VkLgoKVGhlIG5vZGVfc3RhcnRfcGZuIGlzIGRldGVybWluZWQg
YnkgZ2V0X3Bmbl9yYW5nZV9mb3JfbmlkKCksIHNvIHRoZXJlIGlzIG5vCm5lZWQgdG8gcGFzcyBp
dCB0byBmcmVlX2FyZWFfaW5pdF9ub2RlKCkuCgpBcyB0aGUgcmVzdWx0LCB0aGUgb25seSByZXF1
aXJlZCBwYXJhbWV0ZXIgdG8gZnJlZV9hcmVhX2luaXRfbm9kZSgpIGlzIHRoZQpub2RlIElELCBh
bGwgdGhlIHJlc3QgYXJlIHJlbW92ZWQgYWxvbmcgd2l0aCBubyBsb25nZXIgdXNlZApjb21wYXRf
em9uZV97YWJzY2VudCxzcGFubmVkfV9wYWdlc19pbl9ub2RlKCkgaGVscGVycy4KClNpZ25lZC1v
ZmYtYnk6IE1pa2UgUmFwb3BvcnQgPHJwcHRAbGludXguaWJtLmNvbT4KLS0tCiBhcmNoL3g4Ni9t
bS9udW1hLmMgfCAgIDIgKy0KIGluY2x1ZGUvbGludXgvbW0uaCB8ICAgNyArLS0KIG1tL3BhZ2Vf
YWxsb2MuYyAgICB8IDExMCArKysrKysrKystLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0KIDMgZmlsZXMgY2hhbmdlZCwgMjQgaW5zZXJ0aW9ucygrKSwgOTUgZGVsZXRpb25zKC0p
CgpkaWZmIC0tZ2l0IGEvYXJjaC94ODYvbW0vbnVtYS5jIGIvYXJjaC94ODYvbW0vbnVtYS5jCmlu
ZGV4IGZlMDI0YjJhYzc5Ni4uMGUxYjk5ZjQ5MWU0IDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9tbS9u
dW1hLmMKKysrIGIvYXJjaC94ODYvbW0vbnVtYS5jCkBAIC03NDIsNyArNzQyLDcgQEAgc3RhdGlj
IHZvaWQgX19pbml0IGluaXRfbWVtb3J5X2xlc3Nfbm9kZShpbnQgbmlkKQogCiAJLyogQWxsb2Nh
dGUgYW5kIGluaXRpYWxpemUgbm9kZSBkYXRhLiBNZW1vcnktbGVzcyBub2RlIGlzIG5vdyBvbmxp
bmUuKi8KIAlhbGxvY19ub2RlX2RhdGEobmlkKTsKLQlmcmVlX2FyZWFfaW5pdF9ub2RlKG5pZCwg
em9uZXNfc2l6ZSwgMCwgemhvbGVzX3NpemUpOworCWZyZWVfYXJlYV9pbml0X25vZGUobmlkKTsK
IAogCS8qCiAJICogQWxsIHpvbmVsaXN0cyB3aWxsIGJlIGJ1aWx0IGxhdGVyIGluIHN0YXJ0X2tl
cm5lbCgpIGFmdGVyIHBlciBjcHUKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvbW0uaCBiL2lu
Y2x1ZGUvbGludXgvbW0uaAppbmRleCAxYzJlY2I0MmUwNDMuLjJjMGQ0MmIxMWYzYyAxMDA2NDQK
LS0tIGEvaW5jbHVkZS9saW51eC9tbS5oCisrKyBiL2luY2x1ZGUvbGludXgvbW0uaApAQCAtMjI3
Miw4ICsyMjcyLDcgQEAgc3RhdGljIGlubGluZSBzcGlubG9ja190ICpwdWRfbG9jayhzdHJ1Y3Qg
bW1fc3RydWN0ICptbSwgcHVkX3QgKnB1ZCkKIH0KIAogZXh0ZXJuIHZvaWQgX19pbml0IHBhZ2Vj
YWNoZV9pbml0KHZvaWQpOwotZXh0ZXJuIHZvaWQgX19pbml0IGZyZWVfYXJlYV9pbml0X25vZGUo
aW50IG5pZCwgdW5zaWduZWQgbG9uZyAqIHpvbmVzX3NpemUsCi0JCXVuc2lnbmVkIGxvbmcgem9u
ZV9zdGFydF9wZm4sIHVuc2lnbmVkIGxvbmcgKnpob2xlc19zaXplKTsKK2V4dGVybiB2b2lkIF9f
aW5pdCBmcmVlX2FyZWFfaW5pdF9ub2RlKGludCBuaWQpOwogZXh0ZXJuIHZvaWQgZnJlZV9pbml0
bWVtKHZvaWQpOwogCiAvKgpAQCAtMjM0Niw5ICsyMzQ1LDcgQEAgc3RhdGljIGlubGluZSB1bnNp
Z25lZCBsb25nIGdldF9udW1fcGh5c3BhZ2VzKHZvaWQpCiAvKgogICogVXNpbmcgbWVtYmxvY2sg
bm9kZSBtYXBwaW5ncywgYW4gYXJjaGl0ZWN0dXJlIG1heSBpbml0aWFsaXNlIGl0cwogICogem9u
ZXMsIGFsbG9jYXRlIHRoZSBiYWNraW5nIG1lbV9tYXAgYW5kIGFjY291bnQgZm9yIG1lbW9yeSBo
b2xlcyBpbiBhIG1vcmUKLSAqIGFyY2hpdGVjdHVyZSBpbmRlcGVuZGVudCBtYW5uZXIuIFRoaXMg
aXMgYSBzdWJzdGl0dXRlIGZvciBjcmVhdGluZyB0aGUKLSAqIHpvbmVfc2l6ZXNbXSBhbmQgemhv
bGVzX3NpemVbXSBhcnJheXMgYW5kIHBhc3NpbmcgdGhlbSB0bwotICogZnJlZV9hcmVhX2luaXRf
bm9kZSgpCisgKiBhcmNoaXRlY3R1cmUgaW5kZXBlbmRlbnQgbWFubmVyLgogICoKICAqIEFuIGFy
Y2hpdGVjdHVyZSBpcyBleHBlY3RlZCB0byByZWdpc3RlciByYW5nZSBvZiBwYWdlIGZyYW1lcyBi
YWNrZWQgYnkKICAqIHBoeXNpY2FsIG1lbW9yeSB3aXRoIG1lbWJsb2NrX2FkZFtfbm9kZV0oKSBi
ZWZvcmUgY2FsbGluZwpkaWZmIC0tZ2l0IGEvbW0vcGFnZV9hbGxvYy5jIGIvbW0vcGFnZV9hbGxv
Yy5jCmluZGV4IDk4YTQ3ZjkwMDY1YS4uMzBkMTcxNDUxZDRjIDEwMDY0NAotLS0gYS9tbS9wYWdl
X2FsbG9jLmMKKysrIGIvbW0vcGFnZV9hbGxvYy5jCkBAIC02NDIwLDggKzY0MjAsNyBAQCBzdGF0
aWMgdW5zaWduZWQgbG9uZyBfX2luaXQgem9uZV9zcGFubmVkX3BhZ2VzX2luX25vZGUoaW50IG5p
ZCwKIAkJCQkJdW5zaWduZWQgbG9uZyBub2RlX3N0YXJ0X3BmbiwKIAkJCQkJdW5zaWduZWQgbG9u
ZyBub2RlX2VuZF9wZm4sCiAJCQkJCXVuc2lnbmVkIGxvbmcgKnpvbmVfc3RhcnRfcGZuLAotCQkJ
CQl1bnNpZ25lZCBsb25nICp6b25lX2VuZF9wZm4sCi0JCQkJCXVuc2lnbmVkIGxvbmcgKmlnbm9y
ZWQpCisJCQkJCXVuc2lnbmVkIGxvbmcgKnpvbmVfZW5kX3BmbikKIHsKIAl1bnNpZ25lZCBsb25n
IHpvbmVfbG93ID0gYXJjaF96b25lX2xvd2VzdF9wb3NzaWJsZV9wZm5bem9uZV90eXBlXTsKIAl1
bnNpZ25lZCBsb25nIHpvbmVfaGlnaCA9IGFyY2hfem9uZV9oaWdoZXN0X3Bvc3NpYmxlX3Bmblt6
b25lX3R5cGVdOwpAQCAtNjQ4NSw4ICs2NDg0LDcgQEAgdW5zaWduZWQgbG9uZyBfX2luaXQgYWJz
ZW50X3BhZ2VzX2luX3JhbmdlKHVuc2lnbmVkIGxvbmcgc3RhcnRfcGZuLAogc3RhdGljIHVuc2ln
bmVkIGxvbmcgX19pbml0IHpvbmVfYWJzZW50X3BhZ2VzX2luX25vZGUoaW50IG5pZCwKIAkJCQkJ
dW5zaWduZWQgbG9uZyB6b25lX3R5cGUsCiAJCQkJCXVuc2lnbmVkIGxvbmcgbm9kZV9zdGFydF9w
Zm4sCi0JCQkJCXVuc2lnbmVkIGxvbmcgbm9kZV9lbmRfcGZuLAotCQkJCQl1bnNpZ25lZCBsb25n
ICppZ25vcmVkKQorCQkJCQl1bnNpZ25lZCBsb25nIG5vZGVfZW5kX3BmbikKIHsKIAl1bnNpZ25l
ZCBsb25nIHpvbmVfbG93ID0gYXJjaF96b25lX2xvd2VzdF9wb3NzaWJsZV9wZm5bem9uZV90eXBl
XTsKIAl1bnNpZ25lZCBsb25nIHpvbmVfaGlnaCA9IGFyY2hfem9uZV9oaWdoZXN0X3Bvc3NpYmxl
X3Bmblt6b25lX3R5cGVdOwpAQCAtNjUzMyw0MyArNjUzMSw5IEBAIHN0YXRpYyB1bnNpZ25lZCBs
b25nIF9faW5pdCB6b25lX2Fic2VudF9wYWdlc19pbl9ub2RlKGludCBuaWQsCiAJcmV0dXJuIG5y
X2Fic2VudDsKIH0KIAotc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIF9faW5pdCBjb21wYXRf
em9uZV9zcGFubmVkX3BhZ2VzX2luX25vZGUoaW50IG5pZCwKLQkJCQkJdW5zaWduZWQgbG9uZyB6
b25lX3R5cGUsCi0JCQkJCXVuc2lnbmVkIGxvbmcgbm9kZV9zdGFydF9wZm4sCi0JCQkJCXVuc2ln
bmVkIGxvbmcgbm9kZV9lbmRfcGZuLAotCQkJCQl1bnNpZ25lZCBsb25nICp6b25lX3N0YXJ0X3Bm
biwKLQkJCQkJdW5zaWduZWQgbG9uZyAqem9uZV9lbmRfcGZuLAotCQkJCQl1bnNpZ25lZCBsb25n
ICp6b25lc19zaXplKQotewotCXVuc2lnbmVkIGludCB6b25lOwotCi0JKnpvbmVfc3RhcnRfcGZu
ID0gbm9kZV9zdGFydF9wZm47Ci0JZm9yICh6b25lID0gMDsgem9uZSA8IHpvbmVfdHlwZTsgem9u
ZSsrKQotCQkqem9uZV9zdGFydF9wZm4gKz0gem9uZXNfc2l6ZVt6b25lXTsKLQotCSp6b25lX2Vu
ZF9wZm4gPSAqem9uZV9zdGFydF9wZm4gKyB6b25lc19zaXplW3pvbmVfdHlwZV07Ci0KLQlyZXR1
cm4gem9uZXNfc2l6ZVt6b25lX3R5cGVdOwotfQotCi1zdGF0aWMgaW5saW5lIHVuc2lnbmVkIGxv
bmcgX19pbml0IGNvbXBhdF96b25lX2Fic2VudF9wYWdlc19pbl9ub2RlKGludCBuaWQsCi0JCQkJ
CQl1bnNpZ25lZCBsb25nIHpvbmVfdHlwZSwKLQkJCQkJCXVuc2lnbmVkIGxvbmcgbm9kZV9zdGFy
dF9wZm4sCi0JCQkJCQl1bnNpZ25lZCBsb25nIG5vZGVfZW5kX3BmbiwKLQkJCQkJCXVuc2lnbmVk
IGxvbmcgKnpob2xlc19zaXplKQotewotCWlmICghemhvbGVzX3NpemUpCi0JCXJldHVybiAwOwot
Ci0JcmV0dXJuIHpob2xlc19zaXplW3pvbmVfdHlwZV07Ci19Ci0KIHN0YXRpYyB2b2lkIF9faW5p
dCBjYWxjdWxhdGVfbm9kZV90b3RhbHBhZ2VzKHN0cnVjdCBwZ2xpc3RfZGF0YSAqcGdkYXQsCiAJ
CQkJCQl1bnNpZ25lZCBsb25nIG5vZGVfc3RhcnRfcGZuLAotCQkJCQkJdW5zaWduZWQgbG9uZyBu
b2RlX2VuZF9wZm4sCi0JCQkJCQl1bnNpZ25lZCBsb25nICp6b25lc19zaXplLAotCQkJCQkJdW5z
aWduZWQgbG9uZyAqemhvbGVzX3NpemUsCi0JCQkJCQlib29sIGNvbXBhdCkKKwkJCQkJCXVuc2ln
bmVkIGxvbmcgbm9kZV9lbmRfcGZuKQogewogCXVuc2lnbmVkIGxvbmcgcmVhbHRvdGFscGFnZXMg
PSAwLCB0b3RhbHBhZ2VzID0gMDsKIAllbnVtIHpvbmVfdHlwZSBpOwpAQCAtNjU4MCwzMSArNjU0
NCwxNCBAQCBzdGF0aWMgdm9pZCBfX2luaXQgY2FsY3VsYXRlX25vZGVfdG90YWxwYWdlcyhzdHJ1
Y3QgcGdsaXN0X2RhdGEgKnBnZGF0LAogCQl1bnNpZ25lZCBsb25nIHNwYW5uZWQsIGFic2VudDsK
IAkJdW5zaWduZWQgbG9uZyBzaXplLCByZWFsX3NpemU7CiAKLQkJaWYgKGNvbXBhdCkgewotCQkJ
c3Bhbm5lZCA9IGNvbXBhdF96b25lX3NwYW5uZWRfcGFnZXNfaW5fbm9kZSgKLQkJCQkJCXBnZGF0
LT5ub2RlX2lkLCBpLAotCQkJCQkJbm9kZV9zdGFydF9wZm4sCi0JCQkJCQlub2RlX2VuZF9wZm4s
Ci0JCQkJCQkmem9uZV9zdGFydF9wZm4sCi0JCQkJCQkmem9uZV9lbmRfcGZuLAotCQkJCQkJem9u
ZXNfc2l6ZSk7Ci0JCQlhYnNlbnQgPSBjb21wYXRfem9uZV9hYnNlbnRfcGFnZXNfaW5fbm9kZSgK
LQkJCQkJCXBnZGF0LT5ub2RlX2lkLCBpLAotCQkJCQkJbm9kZV9zdGFydF9wZm4sCi0JCQkJCQlu
b2RlX2VuZF9wZm4sCi0JCQkJCQl6aG9sZXNfc2l6ZSk7Ci0JCX0gZWxzZSB7Ci0JCQlzcGFubmVk
ID0gem9uZV9zcGFubmVkX3BhZ2VzX2luX25vZGUocGdkYXQtPm5vZGVfaWQsIGksCi0JCQkJCQlu
b2RlX3N0YXJ0X3BmbiwKLQkJCQkJCW5vZGVfZW5kX3BmbiwKLQkJCQkJCSZ6b25lX3N0YXJ0X3Bm
biwKLQkJCQkJCSZ6b25lX2VuZF9wZm4sCi0JCQkJCQl6b25lc19zaXplKTsKLQkJCWFic2VudCA9
IHpvbmVfYWJzZW50X3BhZ2VzX2luX25vZGUocGdkYXQtPm5vZGVfaWQsIGksCi0JCQkJCQlub2Rl
X3N0YXJ0X3BmbiwKLQkJCQkJCW5vZGVfZW5kX3BmbiwKLQkJCQkJCXpob2xlc19zaXplKTsKLQkJ
fQorCQlzcGFubmVkID0gem9uZV9zcGFubmVkX3BhZ2VzX2luX25vZGUocGdkYXQtPm5vZGVfaWQs
IGksCisJCQkJCQkgICAgIG5vZGVfc3RhcnRfcGZuLAorCQkJCQkJICAgICBub2RlX2VuZF9wZm4s
CisJCQkJCQkgICAgICZ6b25lX3N0YXJ0X3BmbiwKKwkJCQkJCSAgICAgJnpvbmVfZW5kX3Bmbik7
CisJCWFic2VudCA9IHpvbmVfYWJzZW50X3BhZ2VzX2luX25vZGUocGdkYXQtPm5vZGVfaWQsIGks
CisJCQkJCQkgICBub2RlX3N0YXJ0X3BmbiwKKwkJCQkJCSAgIG5vZGVfZW5kX3Bmbik7CiAKIAkJ
c2l6ZSA9IHNwYW5uZWQ7CiAJCXJlYWxfc2l6ZSA9IHNpemUgLSBhYnNlbnQ7CkBAIC02OTI2LDEw
ICs2ODczLDcgQEAgc3RhdGljIGlubGluZSB2b2lkIHBnZGF0X3NldF9kZWZlcnJlZF9yYW5nZShw
Z19kYXRhX3QgKnBnZGF0KQogc3RhdGljIGlubGluZSB2b2lkIHBnZGF0X3NldF9kZWZlcnJlZF9y
YW5nZShwZ19kYXRhX3QgKnBnZGF0KSB7fQogI2VuZGlmCiAKLXN0YXRpYyB2b2lkIF9faW5pdCBf
X2ZyZWVfYXJlYV9pbml0X25vZGUoaW50IG5pZCwgdW5zaWduZWQgbG9uZyAqem9uZXNfc2l6ZSwK
LQkJCQkJIHVuc2lnbmVkIGxvbmcgbm9kZV9zdGFydF9wZm4sCi0JCQkJCSB1bnNpZ25lZCBsb25n
ICp6aG9sZXNfc2l6ZSwKLQkJCQkJIGJvb2wgY29tcGF0KQordm9pZCBfX2luaXQgZnJlZV9hcmVh
X2luaXRfbm9kZShpbnQgbmlkKQogewogCXBnX2RhdGFfdCAqcGdkYXQgPSBOT0RFX0RBVEEobmlk
KTsKIAl1bnNpZ25lZCBsb25nIHN0YXJ0X3BmbiA9IDA7CkBAIC02OTM4LDE5ICs2ODgyLDE2IEBA
IHN0YXRpYyB2b2lkIF9faW5pdCBfX2ZyZWVfYXJlYV9pbml0X25vZGUoaW50IG5pZCwgdW5zaWdu
ZWQgbG9uZyAqem9uZXNfc2l6ZSwKIAkvKiBwZ19kYXRhX3Qgc2hvdWxkIGJlIHJlc2V0IHRvIHpl
cm8gd2hlbiBpdCdzIGFsbG9jYXRlZCAqLwogCVdBUk5fT04ocGdkYXQtPm5yX3pvbmVzIHx8IHBn
ZGF0LT5rc3dhcGRfY2xhc3N6b25lX2lkeCk7CiAKKwlnZXRfcGZuX3JhbmdlX2Zvcl9uaWQobmlk
LCAmc3RhcnRfcGZuLCAmZW5kX3Bmbik7CisKIAlwZ2RhdC0+bm9kZV9pZCA9IG5pZDsKLQlwZ2Rh
dC0+bm9kZV9zdGFydF9wZm4gPSBub2RlX3N0YXJ0X3BmbjsKKwlwZ2RhdC0+bm9kZV9zdGFydF9w
Zm4gPSBzdGFydF9wZm47CiAJcGdkYXQtPnBlcl9jcHVfbm9kZXN0YXRzID0gTlVMTDsKLQlpZiAo
IWNvbXBhdCkgewotCQlnZXRfcGZuX3JhbmdlX2Zvcl9uaWQobmlkLCAmc3RhcnRfcGZuLCAmZW5k
X3Bmbik7Ci0JCXByX2luZm8oIkluaXRtZW0gc2V0dXAgbm9kZSAlZCBbbWVtICUjMDE4THgtJSMw
MThMeF1cbiIsIG5pZCwKLQkJCSh1NjQpc3RhcnRfcGZuIDw8IFBBR0VfU0hJRlQsCi0JCQllbmRf
cGZuID8gKCh1NjQpZW5kX3BmbiA8PCBQQUdFX1NISUZUKSAtIDEgOiAwKTsKLQl9IGVsc2Ugewot
CQlzdGFydF9wZm4gPSBub2RlX3N0YXJ0X3BmbjsKLQl9Ci0JY2FsY3VsYXRlX25vZGVfdG90YWxw
YWdlcyhwZ2RhdCwgc3RhcnRfcGZuLCBlbmRfcGZuLAotCQkJCSAgem9uZXNfc2l6ZSwgemhvbGVz
X3NpemUsIGNvbXBhdCk7CisKKwlwcl9pbmZvKCJJbml0bWVtIHNldHVwIG5vZGUgJWQgW21lbSAl
IzAxOEx4LSUjMDE4THhdXG4iLCBuaWQsCisJCSh1NjQpc3RhcnRfcGZuIDw8IFBBR0VfU0hJRlQs
CisJCWVuZF9wZm4gPyAoKHU2NCllbmRfcGZuIDw8IFBBR0VfU0hJRlQpIC0gMSA6IDApOworCWNh
bGN1bGF0ZV9ub2RlX3RvdGFscGFnZXMocGdkYXQsIHN0YXJ0X3BmbiwgZW5kX3Bmbik7CiAKIAlh
bGxvY19ub2RlX21lbV9tYXAocGdkYXQpOwogCXBnZGF0X3NldF9kZWZlcnJlZF9yYW5nZShwZ2Rh
dCk7CkBAIC02OTU4LDE0ICs2ODk5LDYgQEAgc3RhdGljIHZvaWQgX19pbml0IF9fZnJlZV9hcmVh
X2luaXRfbm9kZShpbnQgbmlkLCB1bnNpZ25lZCBsb25nICp6b25lc19zaXplLAogCWZyZWVfYXJl
YV9pbml0X2NvcmUocGdkYXQpOwogfQogCi12b2lkIF9faW5pdCBmcmVlX2FyZWFfaW5pdF9ub2Rl
KGludCBuaWQsIHVuc2lnbmVkIGxvbmcgKnpvbmVzX3NpemUsCi0JCQkJdW5zaWduZWQgbG9uZyBu
b2RlX3N0YXJ0X3BmbiwKLQkJCQl1bnNpZ25lZCBsb25nICp6aG9sZXNfc2l6ZSkKLXsKLQlfX2Zy
ZWVfYXJlYV9pbml0X25vZGUobmlkLCB6b25lc19zaXplLCBub2RlX3N0YXJ0X3BmbiwgemhvbGVz
X3NpemUsCi0JCQkgICAgICB0cnVlKTsKLX0KLQogI2lmICFkZWZpbmVkKENPTkZJR19GTEFUX05P
REVfTUVNX01BUCkKIC8qCiAgKiBJbml0aWFsaXplIGFsbCB2YWxpZCBzdHJ1Y3QgcGFnZXMgaW4g
dGhlIHJhbmdlIFtzcGZuLCBlcGZuKSBhbmQgbWFyayB0aGVtCkBAIC03NDkxLDggKzc0MjQsNyBA
QCB2b2lkIF9faW5pdCBmcmVlX2FyZWFfaW5pdCh1bnNpZ25lZCBsb25nICptYXhfem9uZV9wZm4p
CiAJaW5pdF91bmF2YWlsYWJsZV9tZW0oKTsKIAlmb3JfZWFjaF9vbmxpbmVfbm9kZShuaWQpIHsK
IAkJcGdfZGF0YV90ICpwZ2RhdCA9IE5PREVfREFUQShuaWQpOwotCQlfX2ZyZWVfYXJlYV9pbml0
X25vZGUobmlkLCBOVUxMLAotCQkJCSAgICAgIGZpbmRfbWluX3Bmbl9mb3Jfbm9kZShuaWQpLCBO
VUxMLCBmYWxzZSk7CisJCWZyZWVfYXJlYV9pbml0X25vZGUobmlkKTsKIAogCQkvKiBBbnkgbWVt
b3J5IG9uIHRoYXQgbm9kZSAqLwogCQlpZiAocGdkYXQtPm5vZGVfcHJlc2VudF9wYWdlcykKLS0g
CjIuMjYuMQoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18K
T3BlblJJU0MgbWFpbGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxpYnJlY29yZXMub3JnCmh0dHBz
Oi8vbGlzdHMubGlicmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJpc2MK
