Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 3C04E63666
	for <lists+openrisc@lfdr.de>; Tue,  9 Jul 2019 15:06:40 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 2361B2035B;
	Tue,  9 Jul 2019 15:06:40 +0200 (CEST)
Received: from mail-pl1-f180.google.com (mail-pl1-f180.google.com
 [209.85.214.180])
 by mail.librecores.org (Postfix) with ESMTPS id 8A63D20138
 for <openrisc@lists.librecores.org>; Tue,  9 Jul 2019 15:06:38 +0200 (CEST)
Received: by mail-pl1-f180.google.com with SMTP id b3so6758639plr.4
 for <openrisc@lists.librecores.org>; Tue, 09 Jul 2019 06:06:38 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=from:to:cc:subject:date:message-id:in-reply-to:references
 :mime-version:content-transfer-encoding;
 bh=1XEYZdkH2eGFjP8Tf9boC13ta/7bVBxN3VOsnL5A3Bc=;
 b=BvL+4V4lCwWvXWFOkAc9tmaycb39gLquAdK/Usle8Z4sDd+RiaVYvfWHYXNSvski67
 KqQpxGHZJuCOQEcmlpcNSem25BWg2QYknh+nxxqXXJ/eegoM3cuR+T/z28VYcSrZZIhF
 sobRTlkBPWxQop12k+E9qDwIbCNMgz4oEdtjXlvXk7A3DonKFlwFJODFktd++SoqbbRZ
 nw+jV9ThfQbzzzSTkibPTBuUCx4gas4+nOLJjKwPfX4vxfom4tToWI58ZAux5z4dlsW1
 qdPJMWqTYYKqW/K8YktMnCZrH6+lX2IaUES9cZtFdiYXLY29vKuMCc5gjICLzZ8OI/na
 08Qw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
 :references:mime-version:content-transfer-encoding;
 bh=1XEYZdkH2eGFjP8Tf9boC13ta/7bVBxN3VOsnL5A3Bc=;
 b=DDNiKINEnsJQkEbefvmD6XvUA0tsib9B/nBTGDYUAVdmXrT9N20hhCyeghu0A8wagT
 1/M5WlSDIDAdKacmrad2ez79wDcRsDDb19M2rl7W7dbgFbImx+i4NpH/lHK9hyousVnR
 0XtgEaWDgISqvAtJf0Yr7lnOOFNN63uc3kDFY1HW0vavEv/gEz/UEP2mzYSKh+44Uumi
 ZPt19EO4UofMhrgF+2nRs9cSdJTSAaSalHQQoLVc5YjP387BX2rZm3/BLgDCnjd3fA1G
 M4pssZh4VhrDkQJhyYHQ0End6+/rZsrkAxNdEzFIYr7fRPNxM1OcPYXmnx+69nmKdEHW
 okpg==
X-Gm-Message-State: APjAAAUaxn8VGSHsxtlfg6SfvkCZ5UX2b+sIu/Ah2hep0fa+LS7A7N33
 xt8cZXLV4uD1guY9fpq6bs4=
X-Google-Smtp-Source: APXvYqwFjm/URZWCzTeZ7MgwiuNbJTkUPSpttZbzoRIOe7t8qiVvDfTEXZ8czQFpfdL8msXRDSJ9Zg==
X-Received: by 2002:a17:902:44a4:: with SMTP id
 l33mr31979336pld.174.1562677597182; 
 Tue, 09 Jul 2019 06:06:37 -0700 (PDT)
Received: from localhost (g223.61-115-60.ppp.wakwak.ne.jp. [61.115.60.223])
 by smtp.gmail.com with ESMTPSA id k36sm982261pgl.42.2019.07.09.06.06.35
 (version=TLS1_3 cipher=AEAD-AES256-GCM-SHA384 bits=256/256);
 Tue, 09 Jul 2019 06:06:36 -0700 (PDT)
From: Stafford Horne <shorne@gmail.com>
To: GCC patches <gcc-patches@gcc.gnu.org>
Date: Tue,  9 Jul 2019 22:06:22 +0900
Message-Id: <20190709130626.11226-2-shorne@gmail.com>
X-Mailer: git-send-email 2.21.0
In-Reply-To: <20190709130626.11226-1-shorne@gmail.com>
References: <20190709130626.11226-1-shorne@gmail.com>
MIME-Version: 1.0
Subject: [OpenRISC] [PATCH v3 1/5] or1k: Fix code quality for volatile
 memory loads
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Segher Boessenkool <segher@kernel.crashing.org>,
 Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>,
 Openrisc <openrisc@lists.librecores.org>, Jeff Law <law@redhat.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

Vm9sYXRpbGUgbWVtb3J5IGRvZXMgbm90IG1hdGNoIHRoZSBtZW1vcnlfb3BlcmFuZCBwcmVkaWNh
dGUuICBUaGlzCmNhdXNlcyBleHRyYSBleHRlbmQvbWFzayBpbnN0cnVjdGlvbnMgaW5zdHJ1Y3Rp
b25zIHdoZW4gcmVhZGluZwpmcm9tIHZvbGF0aWxlIG1lbW9yeS4gIE9uIE9wZW5SSVNDIGxvYWRp
bmcgdm9sYXRpbGUgbWVtb3J5IGNhbiBiZQp0cmVhdGVkIHRoZSBzYW1lIGFzIHJlZ3VsYXIgbWVt
b3J5IGxvYWRzIHdoaWNoIHN1cHBvcnRzIGNvbWJpbmVkCnNpZ24vemVybyBleHRlbmRzLiAgRml4
aW5nIHRoaXMgZWxpbWluYXRlcyB0aGUgbmVlZCBmb3IgZXh0cmEKZXh0ZW5kL21hc2sgaW5zdHJ1
Y3Rpb25zLgoKVGhpcyBhbHNvIGFkZHMgYSB0ZXN0IHByb3ZpZGVkIGJ5IFJpY2hhcmQgU2VsdmFn
Z2kgd2hpY2ggdW5jb3ZlcmVkIHRoZQppc3N1ZSB3aGlsZSB3ZSB3ZXJlIGxvb2tpbmcgaW50byBh
bm90aGVyIGlzc3VlLgoKZ2NjL0NoYW5nZUxvZzoKCglQUiB0YXJnZXQvOTAzNjMKCSogY29uZmln
L29yMWsvb3Ixay5tZCAoemVyb19leHRlbmQ8bW9kZT5zaTIpOiBVcGRhdGUgcHJlZGljYXRlLgoJ
KGV4dGVuZDxtb2RlPnNpMik6IFVwZGF0ZSBwcmVkaWNhdGUuCgkqIGdjYy9jb25maWcvb3Ixay9w
cmVkaWNhdGVzLm1kICh2b2xhdGlsZV9tZW1fb3BlcmFuZCk6IE5ldy4KCShyZWdfb3JfbWVtX29w
ZXJhbmQpOiBOZXcuCgpnY2MvdGVzdHN1aXRlL0NoYW5nZUxvZzoKCglQUiB0YXJnZXQvOTAzNjMK
CSogZ2NjLnRhcmdldC9vcjFrL3N3YXAtMS5jOiBOZXcgdGVzdC4KCSogZ2NjLnRhcmdldC9vcjFr
L3N3YXAtMi5jOiBOZXcgdGVzdC4KLS0tCkNoYW5nZXMgc2luY2UgdjI6CiAtIEZpeCBjb21tZW50
IGZvcm1hdCBpc3N1ZSwgcG9pbnRlZCBvdXQgYnkgU2VnaGVyCgogZ2NjL2NvbmZpZy9vcjFrL29y
MWsubWQgICAgICAgICAgICAgICAgfCAgNiArLS0KIGdjYy9jb25maWcvb3Ixay9wcmVkaWNhdGVz
Lm1kICAgICAgICAgIHwgMTggKysrKysrKwogZ2NjL3Rlc3RzdWl0ZS9nY2MudGFyZ2V0L29yMWsv
c3dhcC0xLmMgfCA3MCArKysrKysrKysrKysrKysrKysrKysrKysrKwogZ2NjL3Rlc3RzdWl0ZS9n
Y2MudGFyZ2V0L29yMWsvc3dhcC0yLmMgfCA0NyArKysrKysrKysrKysrKysrKwogNCBmaWxlcyBj
aGFuZ2VkLCAxMzggaW5zZXJ0aW9ucygrKSwgMyBkZWxldGlvbnMoLSkKIGNyZWF0ZSBtb2RlIDEw
MDY0NCBnY2MvdGVzdHN1aXRlL2djYy50YXJnZXQvb3Ixay9zd2FwLTEuYwogY3JlYXRlIG1vZGUg
MTAwNjQ0IGdjYy90ZXN0c3VpdGUvZ2NjLnRhcmdldC9vcjFrL3N3YXAtMi5jCgpkaWZmIC0tZ2l0
IGEvZ2NjL2NvbmZpZy9vcjFrL29yMWsubWQgYi9nY2MvY29uZmlnL29yMWsvb3Ixay5tZAppbmRl
eCAyZGFkNTFjZDQ2Yi4uNzU3ZDg5OWM0NDIgMTAwNjQ0Ci0tLSBhL2djYy9jb25maWcvb3Ixay9v
cjFrLm1kCisrKyBiL2djYy9jb25maWcvb3Ixay9vcjFrLm1kCkBAIC0zMjgsMTEgKzMyOCwxMSBA
QAogOzsgU2lnbiBFeHRlbmRpbmcKIDs7IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIAotOzsgWmVybyBleHRl
bnNpb24gY2FuIGFsd2F5cyBiZSBkb25lIHdpdGggQU5EIGFuZCBhbiBleHRlbmRpbmcgbG9hZC4K
Kzs7IFplcm8gZXh0ZW5zaW9uIGNhbiBhbHdheXMgYmUgZG9uZSB3aXRoIEFORCBvciBhbiBleHRl
bmRpbmcgbG9hZC4KIAogKGRlZmluZV9pbnNuICJ6ZXJvX2V4dGVuZDxtb2RlPnNpMiIKICAgWyhz
ZXQgKG1hdGNoX29wZXJhbmQ6U0kgMCAicmVnaXN0ZXJfb3BlcmFuZCIgICAgICAgICAgICAgICAg
ICAgICAiPXIsciIpCi0JKHplcm9fZXh0ZW5kOlNJIChtYXRjaF9vcGVyYW5kOkkxMiAxICJub25p
bW1lZGlhdGVfb3BlcmFuZCIgInIsbSIpKSldCisJKHplcm9fZXh0ZW5kOlNJIChtYXRjaF9vcGVy
YW5kOkkxMiAxICJyZWdfb3JfbWVtX29wZXJhbmQiICJyLG0iKSkpXQogICAiIgogICAiQAogICAg
bC5hbmRpXHQlMCwgJTEsIDx6ZXh0X2FuZGk+CkBAIC0zNDQsNyArMzQ0LDcgQEAKIAogKGRlZmlu
ZV9pbnNuICJleHRlbmQ8bW9kZT5zaTIiCiAgIFsoc2V0IChtYXRjaF9vcGVyYW5kOlNJIDAgInJl
Z2lzdGVyX29wZXJhbmQiICAgICAgICAgICAgICAgICAgICAgICI9cixyIikKLQkoc2lnbl9leHRl
bmQ6U0kgKG1hdGNoX29wZXJhbmQ6STEyIDEgIm5vbmltbWVkaWF0ZV9vcGVyYW5kIiAgInIsbSIp
KSldCisJKHNpZ25fZXh0ZW5kOlNJIChtYXRjaF9vcGVyYW5kOkkxMiAxICJyZWdfb3JfbWVtX29w
ZXJhbmQiICAicixtIikpKV0KICAgIlRBUkdFVF9TRVhUIgogICAiQAogICAgbC5leHQ8bGRzdD5z
XHQlMCwgJTEKZGlmZiAtLWdpdCBhL2djYy9jb25maWcvb3Ixay9wcmVkaWNhdGVzLm1kIGIvZ2Nj
L2NvbmZpZy9vcjFrL3ByZWRpY2F0ZXMubWQKaW5kZXggODc5MjM2YmNhNDkuLmRhZDFjNWQ0YmUz
IDEwMDY0NAotLS0gYS9nY2MvY29uZmlnL29yMWsvcHJlZGljYXRlcy5tZAorKysgYi9nY2MvY29u
ZmlnL29yMWsvcHJlZGljYXRlcy5tZApAQCAtODIsMyArODIsMjEgQEAKIAogKGRlZmluZV9wcmVk
aWNhdGUgImVxdWFsaXR5X2NvbXBhcmlzb25fb3BlcmF0b3IiCiAgIChtYXRjaF9jb2RlICJuZSxl
cSIpKQorCis7OyBCb3Jyb3dlZCBmcm9tIHJzNjAwMAorOzsgUmV0dXJuIHRydWUgaWYgdGhlIG9w
ZXJhbmQgaXMgaW4gdm9sYXRpbGUgbWVtb3J5LiAgTm90ZSB0aGF0IGR1cmluZyB0aGUKKzs7IFJU
TCBnZW5lcmF0aW9uIHBoYXNlLCBtZW1vcnlfb3BlcmFuZCBkb2VzIG5vdCByZXR1cm4gVFJVRSBm
b3Igdm9sYXRpbGUKKzs7IG1lbW9yeSByZWZlcmVuY2VzLiAgU28gdGhpcyBmdW5jdGlvbiBhbGxv
d3MgdXMgdG8gcmVjb2duaXplIHZvbGF0aWxlCis7OyByZWZlcmVuY2VzIHdoZXJlIGl0J3Mgc2Fm
ZS4KKyhkZWZpbmVfcHJlZGljYXRlICJ2b2xhdGlsZV9tZW1fb3BlcmFuZCIKKyAgKGFuZCAobWF0
Y2hfY29kZSAibWVtIikKKyAgICAgICAobWF0Y2hfdGVzdCAiTUVNX1ZPTEFUSUxFX1AgKG9wKSIp
CisgICAgICAgKGlmX3RoZW5fZWxzZSAobWF0Y2hfdGVzdCAicmVsb2FkX2NvbXBsZXRlZCIpCisJ
IChtYXRjaF9vcGVyYW5kIDAgIm1lbW9yeV9vcGVyYW5kIikKKwkgKG1hdGNoX3Rlc3QgIm1lbW9y
eV9hZGRyZXNzX3AgKG1vZGUsIFhFWFAgKG9wLCAwKSkiKSkpKQorCis7OyBSZXR1cm4gdHJ1ZSBp
ZiB0aGUgb3BlcmFuZCBpcyBhIHJlZ2lzdGVyIG9yIG1lbW9yeTsgaW5jbHVkaW5nIHZvbGF0aWxl
Cis7OyBtZW1vcnkuCisoZGVmaW5lX3ByZWRpY2F0ZSAicmVnX29yX21lbV9vcGVyYW5kIgorICAo
aW9yIChtYXRjaF9vcGVyYW5kIDAgIm5vbmltbWVkaWF0ZV9vcGVyYW5kIikKKyAgICAgICAobWF0
Y2hfb3BlcmFuZCAwICJ2b2xhdGlsZV9tZW1fb3BlcmFuZCIpKSkKZGlmZiAtLWdpdCBhL2djYy90
ZXN0c3VpdGUvZ2NjLnRhcmdldC9vcjFrL3N3YXAtMS5jIGIvZ2NjL3Rlc3RzdWl0ZS9nY2MudGFy
Z2V0L29yMWsvc3dhcC0xLmMKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMDAwMDAu
LjRjMTc5ZDFlNDMwCi0tLSAvZGV2L251bGwKKysrIGIvZ2NjL3Rlc3RzdWl0ZS9nY2MudGFyZ2V0
L29yMWsvc3dhcC0xLmMKQEAgLTAsMCArMSw3MCBAQAorLyogeyBkZy1kbyBydW4gfSAqLworLyog
eyBkZy1vcHRpb25zICItT3MgLW1oYXJkLW11bCAtbXNvZnQtZGl2IC1tc29mdC1mbG9hdCIgfSAq
LworCisvKiBOb3RlczoKKworICAgVGhpcyB0ZXN0IGZhaWxlZCBvbiBvcjFrIEdDQyA3LjIuMCwg
YW5kIHBhc3NlcyBvbiBvcjFrIEdDQyA1LjMuMAorICAgYXMgd2VsbCBhcyB0aGUgb3IxayBwb3J0
IHJlbGVhc2VkIGluIEdDQyA5LjEuCisKKyAgIFRoZSBtYWluIHByb2dyYW0gaXMgb3JnYW5pemVk
IGFzIGEgbG9vcCBzdHJ1Y3R1cmUgc28gZ2NjIGRvZXMgbm90CisgICBvcHRpbWl6ZS1hd2F5IHRo
ZSBjYWxscyB0byBzd2FwXzEoKS4gIENvbXBpbGluZyB3aXRoIC1PMiBpcyBzdGlsbCBzbWFydAor
ICAgZW5vdWdoIHRvIG9wdGltaXplLWF3YXkgdGhlIGNhbGxzLCBidXQgdXNpbmcgLU9zIGRvZXMg
bm90LgorICAgVGhlIGJhZCBjb2RlIGlzIG9ubHkgZ2VuZXJhdGVkIHdoZW4gY29tcGlsZWQgd2l0
aCAtT3MuCisKKyAgIFdoZW4gdGhlIGJhZCBjb2RlIGlzIGdlbmVyYXRlZCBhbGwgY29kZSBpcyBv
a2F5IGV4Y2VwdCBmb3IgdGhlIHZlcnkgbGFzdAorICAgaW5zdHJ1Y3Rpb24gKGEgJ2wuYWRkYycg
aW4gdGhlIGwuanIgZGVsYXkgc2xvdCkuCisgICBVcCB0byB0aGF0IHBvaW50IGluIGV4ZWN1dGlv
biwgcjExIGFuZCByMTIgY29udGFpbiB0aGUgY29ycmVjdCAoZXhwZWN0ZWQpCisgICB2YWx1ZXMs
IGJ1dCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBmaW5hbCAibC5hZGRjIiBjb3JydXB0cyByMTEuCisK
KyAgIFRoaXMgdGVzdCBpcyBhZGRlZCB0byBlbnN1cmUgdGhpcyBkb2VzIG5vdCBjb21lIGJhY2su
ICAqLworCisjaW5jbHVkZSA8c3RkaW50Lmg+CisKK3ZvbGF0aWxlIHN0YXRpYyB1aW50OF90IGdf
ZG9zd2FwID0gMTsKKwordWludDY0X3Qgc3dhcF8xICh1aW50NjRfdCB1NjQpIHsKKyAgdWludDMy
X3QgdTY0X2xvLCB1NjRfaGksIHU2NF90bXA7CisKKyAgdTY0X2xvID0gdTY0ICYgMHhGRkZGRkZG
RjsKKyAgdTY0X2hpID0gdTY0ID4+IDMyOworCisgIGlmIChnX2Rvc3dhcCkKKyAgICB7CisgICAg
ICB1NjRfdG1wID0gdTY0X2xvOworICAgICAgdTY0X2xvICA9IHU2NF9oaTsKKyAgICAgIHU2NF9o
aSAgPSB1NjRfdG1wOworICAgIH0KKworICB1NjQgPSB1NjRfbG87CisgIHU2NCArPSAoKHVpbnQ2
NF90KSB1NjRfaGkgPDwgMzIpOworCisgIHJldHVybiB1NjQ7Cit9CisKK2ludCBtYWluICgpIHsK
KyAgaW50IHJldDsKKyAgaW50IGl0ZXI7CisgIHVpbnQ2NF90ICBhYVsyXTsgICAvLyBpbnB1dHMg
dG8gc3dhcCBmdW5jdGlvbgorICB1aW50NjRfdCAgZWVbMl07ICAgLy8gZXhwZWN0ZWQgb3V0cHV0
cyBvZiBzd2FwIGZ1bmN0aW9uCisgIHVpbnQ2NF90ICByclsyXTsgICAvLyBhY3R1YWwgcmVzdWx0
cyBvZiBzd2FwIGZ1bmN0aW9uCisKKyAgZ19kb3N3YXAgPSAxOworCisgIC8vIHBvcHVsYXRlIGlu
cHV0cywgYW5kIGV4cGVjdGVkIG91dHB1dHM6CisgIGFhWzBdID0gMHgxMjM0NTY3ODlhYmNkZWYw
OworICBhYVsxXSA9IDB4MDEyMzQ1Njc4OWFiY2RlZjsKKworICBlZVswXSA9IDB4OUFCQ0RFRjAx
MjM0NTY3ODsKKyAgZWVbMV0gPSAweDg5QUJDREVGMDEyMzQ1Njc7CisKKyAgcmV0ID0gMDsKKyAg
Zm9yIChpdGVyID0gMDsgaXRlciA8IDI7IGl0ZXIrKykKKyAgICB7CisgICAgICBycltpdGVyXSA9
IHN3YXBfMShhYVtpdGVyXSk7CisgICAgICAvLyBlYXJseS1vdXQgaWYgdGhlcmUncyBhIG1pcy1t
YXRjaDoKKyAgICAgIGlmIChlZVtpdGVyXSAhPSBycltpdGVyXSkKKyAgICAgICAgcmV0ID0gMTsK
KyAgICB9CisKKyAgcmV0dXJuIHJldDsKK30KZGlmZiAtLWdpdCBhL2djYy90ZXN0c3VpdGUvZ2Nj
LnRhcmdldC9vcjFrL3N3YXAtMi5jIGIvZ2NjL3Rlc3RzdWl0ZS9nY2MudGFyZ2V0L29yMWsvc3dh
cC0yLmMKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMDAwMDAuLjM3MzBiNGVlMmUz
Ci0tLSAvZGV2L251bGwKKysrIGIvZ2NjL3Rlc3RzdWl0ZS9nY2MudGFyZ2V0L29yMWsvc3dhcC0y
LmMKQEAgLTAsMCArMSw0NyBAQAorLyogeyBkZy1kbyBjb21waWxlIH0gKi8KKy8qIHsgZGctb3B0
aW9ucyAiLU9zIC1taGFyZC1tdWwgLW1zb2Z0LWRpdiAtbXNvZnQtZmxvYXQiIH0gKi8KKworLyog
Tm90ZXM6CisKKyAgIFRoaXMgdGVzdCBmYWlsZWQgb24gb3IxayBHQ0MgNy4yLjAsIGFuZCBwYXNz
ZXMgb24gb3IxayBHQ0MgNS4zLjAKKyAgIGFzIHdlbGwgYXMgdGhlIG9yMWsgcG9ydCByZWxlYXNl
ZCBpbiBHQ0MgOS4xLgorCisgICBUaGUgbWFpbiBwcm9ncmFtIGlzIG9yZ2FuaXplZCBhcyBhIGxv
b3Agc3RydWN0dXJlIHNvIGdjYyBkb2VzIG5vdAorICAgb3B0aW1pemUtYXdheSB0aGUgY2FsbHMg
dG8gc3dhcF8xKCkuICBDb21waWxpbmcgd2l0aCAtTzIgaXMgc3RpbGwgc21hcnQKKyAgIGVub3Vn
aCB0byBvcHRpbWl6ZS1hd2F5IHRoZSBjYWxscywgYnV0IHVzaW5nIC1PcyBkb2VzIG5vdC4KKyAg
IFRoZSBiYWQgY29kZSBpcyBvbmx5IGdlbmVyYXRlZCB3aGVuIGNvbXBpbGVkIHdpdGggLU9zLgor
CisgICBXaGVuIHRoZSBiYWQgY29kZSBpcyBnZW5lcmF0ZWQgYWxsIGNvZGUgaXMgb2theSBleGNl
cHQgZm9yIHRoZSB2ZXJ5IGxhc3QKKyAgIGluc3RydWN0aW9uIChhICdsLmFkZGMnIGluIHRoZSBs
LmpyIGRlbGF5IHNsb3QpLgorICAgVXAgdG8gdGhhdCBwb2ludCBpbiBleGVjdXRpb24sIHIxMSBh
bmQgcjEyIGNvbnRhaW4gdGhlIGNvcnJlY3QgKGV4cGVjdGVkKQorICAgdmFsdWVzLCBidXQgdGhl
IGV4ZWN1dGlvbiBvZiB0aGUgZmluYWwgImwuYWRkYyIgY29ycnVwdHMgcjExLgorCisgICBUaGlz
IHRlc3QgZW5zdXJlcyBhbiBsLmFkZGMgaXMgbm90IGluIHRoZSBvdXRwdXQuICBBbHNvLCB3aGls
ZSBjb25maXJtaW5nCisgICB0aGlzIHRlc3Qgd2UgdW5jb3ZlcmVkIFBSLzkwMzYzLCB3ZSB1c2Ug
aXQgdG8gY2hlY2sgZm9yIHRoYXQgYXMgd2VsbC4gICovCisKKyNpbmNsdWRlIDxzdGRpbnQuaD4K
Kwordm9sYXRpbGUgc3RhdGljIHVpbnQ4X3QgZ19kb3N3YXAgPSAxOworCit1aW50NjRfdCBzd2Fw
XzEgKHVpbnQ2NF90IHU2NCkgeworICB1aW50MzJfdCB1NjRfbG8sIHU2NF9oaSwgdTY0X3RtcDsK
KworICB1NjRfbG8gPSB1NjQgJiAweEZGRkZGRkZGOworICB1NjRfaGkgPSB1NjQgPj4gMzI7CisK
KyAgaWYgKGdfZG9zd2FwKQorICAgIHsKKyAgICAgIHU2NF90bXAgPSB1NjRfbG87CisgICAgICB1
NjRfbG8gID0gdTY0X2hpOworICAgICAgdTY0X2hpICA9IHU2NF90bXA7CisgICAgfQorCisgIHU2
NCA9IHU2NF9sbzsKKyAgdTY0ICs9ICgodWludDY0X3QpIHU2NF9oaSA8PCAzMik7CisKKyAgcmV0
dXJuIHU2NDsKK30KKworLyogQ2hlY2sgdG8gZW5zdXJlIHRoZSB2b2xhdGlsZSBsb2FkIGRvZXMg
bm90IGdldCB6ZXJvIGV4dGVuZGVkLiAgKi8KKy8qIHsgZGctZmluYWwgeyBzY2FuLWFzc2VtYmxl
ci1ub3QgIjB4ZmYiIH0gfSAqLworLyogeyBkZy1maW5hbCB7IHNjYW4tYXNzZW1ibGVyLW5vdCAi
bC5hZGRjIiB9IH0gKi8KLS0gCjIuMjEuMAoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX18KT3BlblJJU0MgbWFpbGluZyBsaXN0Ck9wZW5SSVNDQGxpc3RzLmxp
YnJlY29yZXMub3JnCmh0dHBzOi8vbGlzdHMubGlicmVjb3Jlcy5vcmcvbGlzdGluZm8vb3BlbnJp
c2MK
