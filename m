Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 7175C4B8918
	for <lists+openrisc@lfdr.de>; Wed, 16 Feb 2022 14:17:57 +0100 (CET)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 3434524833;
	Wed, 16 Feb 2022 14:17:57 +0100 (CET)
Received: from dfw.source.kernel.org (dfw.source.kernel.org [139.178.84.217])
 by mail.librecores.org (Postfix) with ESMTPS id DFC2B24822
 for <openrisc@lists.librecores.org>; Wed, 16 Feb 2022 14:17:55 +0100 (CET)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by dfw.source.kernel.org (Postfix) with ESMTPS id BFC62616BD;
 Wed, 16 Feb 2022 13:17:54 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id C3CAEC340F1;
 Wed, 16 Feb 2022 13:17:44 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=k20201202; t=1645017474;
 bh=wEfERj9e8OL/clMCBLXhYlz15Fn6hf3HNftjzVqJD4k=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=VpXwFdxtIILT0+XPLY+lduLRYuwPqnmC2ynzuDLVFCHjri8xgwCmuVp74WnvIYg+j
 g8V3zhnC0Zx8cLhfIYomZSb6FlYME/GzEKPVdM1l+QP5ORLR+jeqJxlZAO3BsGBEEb
 ReiRWWvO8G2nQC5cxE4jgHeBxxTRVMzIx4wmActYFZjJDeaPzJzZY3uNyElEyNTNzW
 9M3XRhEDlGZ+cYtfBrNbspvjMaNB8CW9U4Wxd8H2Z1ekinHHymKnJx6CsAxv9dAFlh
 5ERdIHNif6ws9hw+oS1Apq2XEN/qAcLDkuJLw+UreQQ4SENteKjPxnvSIdUwAOlScA
 ODR950gtL1USw==
From: Arnd Bergmann <arnd@kernel.org>
To: Linus Torvalds <torvalds@linux-foundation.org>,
 Christoph Hellwig <hch@lst.de>, linux-arch@vger.kernel.org,
 linux-mm@kvack.org, linux-api@vger.kernel.org, arnd@arndb.de,
 linux-kernel@vger.kernel.org, viro@zeniv.linux.org.uk
Date: Wed, 16 Feb 2022 14:13:27 +0100
Message-Id: <20220216131332.1489939-14-arnd@kernel.org>
X-Mailer: git-send-email 2.29.2
In-Reply-To: <20220216131332.1489939-1-arnd@kernel.org>
References: <20220216131332.1489939-1-arnd@kernel.org>
MIME-Version: 1.0
Subject: [OpenRISC] [PATCH v2 13/18] uaccess: generalize access_ok()
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: mark.rutland@arm.com, dalias@libc.org, linux-ia64@vger.kernel.org,
 linux-sh@vger.kernel.org, peterz@infradead.org, jcmvbkbc@gmail.com,
 guoren@kernel.org, sparclinux@vger.kernel.org, linux-hexagon@vger.kernel.org,
 linux-riscv@lists.infradead.org, will@kernel.org, ardb@kernel.org,
 linux-s390@vger.kernel.org, bcain@codeaurora.org, mpe@ellerman.id.au,
 deller@gmx.de, x86@kernel.org, linux@armlinux.org.uk,
 linux-csky@vger.kernel.org, mingo@redhat.com,
 linux-snps-arc@lists.infradead.org, linux-xtensa@linux-xtensa.org,
 hca@linux.ibm.com, linux-alpha@vger.kernel.org, linux-um@lists.infradead.org,
 linux-m68k@lists.linux-m68k.org, openrisc@lists.librecores.org,
 green.hu@gmail.com, monstr@monstr.eu, tsbogend@alpha.franken.de,
 linux-parisc@vger.kernel.org, nickhu@andestech.com, linux-mips@vger.kernel.org,
 dinguyen@kernel.org, ebiederm@xmission.com, richard@nod.at,
 akpm@linux-foundation.org, linuxppc-dev@lists.ozlabs.org, davem@davemloft.net
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogQXJuZCBCZXJnbWFubiA8YXJuZEBhcm5kYi5kZT4KClRoZXJlIGFyZSBtYW55IGRpZmZl
cmVudCB3YXlzIHRoYXQgYWNjZXNzX29rKCkgaXMgZGVmaW5lZCBhY3Jvc3MKYXJjaGl0ZWN0dXJl
cywgYnV0IGluIHRoZSBlbmQsIHRoZXkgYWxsIGp1c3QgY29tcGFyZSBhZ2FpbnN0IHRoZQp1c2Vy
X2FkZHJfbWF4KCkgdmFsdWUgb3IgdGhleSBhY2NlcHQgYW55dGhpbmcuCgpQcm92aWRlIG9uZSBk
ZWZpbml0aW9uIHRoYXQgd29ya3MgZm9yIG1vc3QgYXJjaGl0ZWN0dXJlcywgY2hlY2tpbmcKYWdh
aW5zdCBUQVNLX1NJWkVfTUFYIGZvciB1c2VyIHByb2Nlc3NlcyBvciBza2lwcGluZyB0aGUgY2hl
Y2sgaW5zaWRlCm9mIHVhY2Nlc3Nfa2VybmVsKCkgc2VjdGlvbnMuCgpGb3IgYXJjaGl0ZWN0dXJl
cyB3aXRob3V0IENPTkZJR19TRVRfRlMoKSwgdGhpcyBzaG91bGQgYmUgdGhlIGZhc3Rlc3QKY2hl
Y2ssIGFzIGl0IGNvbWVzIGRvd24gdG8gYSBzaW5nbGUgY29tcGFyaXNvbiBvZiBhIHBvaW50ZXIg
YWdhaW5zdCBhCmNvbXBpbGUtdGltZSBjb25zdGFudCwgd2hpbGUgdGhlIGFyY2hpdGVjdHVyZSBz
cGVjaWZpYyB2ZXJzaW9ucyB0ZW5kIHRvCmRvIHNvbWV0aGluZyBtb3JlIGNvbXBsZXggZm9yIGhp
c3RvcmljIHJlYXNvbnMgb3IgZ2V0IHNvbWV0aGluZyB3cm9uZy4KClR5cGUgY2hlY2tpbmcgZm9y
IF9fdXNlciBhbm5vdGF0aW9ucyBpcyBoYW5kbGVkIGluY29uc2lzdGVudGx5IGFjcm9zcwphcmNo
aXRlY3R1cmVzLCBidXQgdGhpcyBpcyBlYXNpbHkgc2ltcGxpZmllZCBhcyB3ZWxsIGJ5IHVzaW5n
IGFuIGlubGluZQpmdW5jdGlvbiB0aGF0IHRha2VzIGEgJ2NvbnN0IHZvaWQgX191c2VyIConIGFy
Z3VtZW50LiBBIGhhbmRmdWwgb2YKY2FsbGVycyBuZWVkIGFuIGV4dHJhIF9fdXNlciBhbm5vdGF0
aW9uIGZvciB0aGlzLgoKU29tZSBhcmNoaXRlY3R1cmVzIGhhZCB0cmljayB0byB1c2UgMzMtYml0
IG9yIDY1LWJpdCBhcml0aG1ldGljIG9uIHRoZQphZGRyZXNzZXMgdG8gY2FsY3VsYXRlIHRoZSBv
dmVyZmxvdywgaG93ZXZlciB0aGlzIHNpbXBsZXIgdmVyc2lvbiB1c2VzCmZld2VyIHJlZ2lzdGVy
cywgd2hpY2ggbWVhbnMgaXQgY2FuIHByb2R1Y2UgYmV0dGVyIG9iamVjdCBjb2RlIGluIHRoZQpl
bmQgZGVzcGl0ZSBuZWVkaW5nIGEgc2Vjb25kIChzdGF0aWNhbGx5IHByZWRpY3RlZCkgYnJhbmNo
LgoKUmV2aWV3ZWQtYnk6IENocmlzdG9waCBIZWxsd2lnIDxoY2hAbHN0LmRlPgpBY2tlZC1ieTog
TWFyayBSdXRsYW5kIDxtYXJrLnJ1dGxhbmRAYXJtLmNvbT4gW2FybTY0LCBhc20tZ2VuZXJpY10K
U2lnbmVkLW9mZi1ieTogQXJuZCBCZXJnbWFubiA8YXJuZEBhcm5kYi5kZT4KLS0tCiBhcmNoL0tj
b25maWcgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDcgKysrKwogYXJjaC9hbHBoYS9pbmNs
dWRlL2FzbS91YWNjZXNzLmggICAgICB8IDM0ICsrKy0tLS0tLS0tLS0tLQogYXJjaC9hcmMvaW5j
bHVkZS9hc20vdWFjY2Vzcy5oICAgICAgICB8IDI5IC0tLS0tLS0tLS0tLS0KIGFyY2gvYXJtL2lu
Y2x1ZGUvYXNtL3VhY2Nlc3MuaCAgICAgICAgfCAyMCArLS0tLS0tLS0KIGFyY2gvYXJtNjQvaW5j
bHVkZS9hc20vdWFjY2Vzcy5oICAgICAgfCAxMSArKy0tLQogYXJjaC9jc2t5L2luY2x1ZGUvYXNt
L3VhY2Nlc3MuaCAgICAgICB8ICA4IC0tLS0KIGFyY2gvaGV4YWdvbi9pbmNsdWRlL2FzbS91YWNj
ZXNzLmggICAgfCAyNSAtLS0tLS0tLS0tLS0KIGFyY2gvaWE2NC9pbmNsdWRlL2FzbS91YWNjZXNz
LmggICAgICAgfCAgNSArLS0KIGFyY2gvbTY4ay9LY29uZmlnLmNwdSAgICAgICAgICAgICAgICAg
fCAgMSArCiBhcmNoL202OGsvaW5jbHVkZS9hc20vdWFjY2Vzcy5oICAgICAgIHwgMTkgKy0tLS0t
LS0tCiBhcmNoL21pY3JvYmxhemUvaW5jbHVkZS9hc20vdWFjY2Vzcy5oIHwgIDggKy0tLQogYXJj
aC9taXBzL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCAgICAgICB8IDI5ICstLS0tLS0tLS0tLS0KIGFy
Y2gvbmRzMzIvaW5jbHVkZS9hc20vdWFjY2Vzcy5oICAgICAgfCAgNyArLS0tCiBhcmNoL25pb3My
L2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCAgICAgIHwgMTEgKy0tLS0KIGFyY2gvb3BlbnJpc2MvaW5j
bHVkZS9hc20vdWFjY2Vzcy5oICAgfCAxOSArLS0tLS0tLS0KIGFyY2gvcGFyaXNjL0tjb25maWcg
ICAgICAgICAgICAgICAgICAgfCAgMSArCiBhcmNoL3BhcmlzYy9pbmNsdWRlL2FzbS91YWNjZXNz
LmggICAgIHwgMTIgKystLS0tCiBhcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vdWFjY2Vzcy5oICAg
IHwgMTEgKy0tLS0KIGFyY2gvcmlzY3YvaW5jbHVkZS9hc20vdWFjY2Vzcy5oICAgICAgfCAzMSAr
LS0tLS0tLS0tLS0tLQogYXJjaC9zMzkwL0tjb25maWcgICAgICAgICAgICAgICAgICAgICB8ICAx
ICsKIGFyY2gvczM5MC9pbmNsdWRlL2FzbS91YWNjZXNzLmggICAgICAgfCAxNCArLS0tLS0tCiBh
cmNoL3NoL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCAgICAgICAgIHwgMjIgKy0tLS0tLS0tLQogYXJj
aC9zcGFyYy9LY29uZmlnICAgICAgICAgICAgICAgICAgICB8ICAxICsKIGFyY2gvc3BhcmMvaW5j
bHVkZS9hc20vdWFjY2Vzcy5oICAgICAgfCAgMyAtLQogYXJjaC9zcGFyYy9pbmNsdWRlL2FzbS91
YWNjZXNzXzMyLmggICB8IDE4ICsrLS0tLS0tCiBhcmNoL3NwYXJjL2luY2x1ZGUvYXNtL3VhY2Nl
c3NfNjQuaCAgIHwgMTIgKy0tLS0tCiBhcmNoL3VtL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCAgICAg
ICAgIHwgIDUgKystCiBhcmNoL3g4Ni9pbmNsdWRlL2FzbS91YWNjZXNzLmggICAgICAgIHwgMTQg
Ky0tLS0tLQogYXJjaC94dGVuc2EvaW5jbHVkZS9hc20vdWFjY2Vzcy5oICAgICB8IDEwICstLS0t
CiBpbmNsdWRlL2FzbS1nZW5lcmljL2FjY2Vzc19vay5oICAgICAgIHwgNTkgKysrKysrKysrKysr
KysrKysrKysrKysrKysrCiBpbmNsdWRlL2FzbS1nZW5lcmljL3VhY2Nlc3MuaCAgICAgICAgIHwg
MjEgKy0tLS0tLS0tLQogaW5jbHVkZS9saW51eC91YWNjZXNzLmggICAgICAgICAgICAgICB8ICA3
IC0tLS0KIDMyIGZpbGVzIGNoYW5nZWQsIDEwOSBpbnNlcnRpb25zKCspLCAzNjYgZGVsZXRpb25z
KC0pCiBjcmVhdGUgbW9kZSAxMDA2NDQgaW5jbHVkZS9hc20tZ2VuZXJpYy9hY2Nlc3Nfb2suaAoK
ZGlmZiAtLWdpdCBhL2FyY2gvS2NvbmZpZyBiL2FyY2gvS2NvbmZpZwppbmRleCA2NzhhODA3MTNi
MjEuLmZhNWRiMzZiZGE2NyAxMDA2NDQKLS0tIGEvYXJjaC9LY29uZmlnCisrKyBiL2FyY2gvS2Nv
bmZpZwpAQCAtODk4LDYgKzg5OCwxMyBAQCBjb25maWcgSEFWRV9TT0ZUSVJRX09OX09XTl9TVEFD
SwogCSAgQXJjaGl0ZWN0dXJlIHByb3ZpZGVzIGEgZnVuY3Rpb24gdG8gcnVuIF9fZG9fc29mdGly
cSgpIG9uIGEKIAkgIHNlcGFyYXRlIHN0YWNrLgogCitjb25maWcgQUxURVJOQVRFX1VTRVJfQURE
UkVTU19TUEFDRQorCWJvb2wKKwloZWxwCisJICBBcmNoaXRlY3R1cmVzIHNldCB0aGlzIHdoZW4g
dGhlIENQVSB1c2VzIHNlcGFyYXRlIGFkZHJlc3MKKwkgIHNwYWNlcyBmb3Iga2VybmVsIGFuZCB1
c2VyIHNwYWNlIHBvaW50ZXJzLiBJbiB0aGlzIGNhc2UsIHRoZQorCSAgYWNjZXNzX29rKCkgY2hl
Y2sgb24gYSBfX3VzZXIgcG9pbnRlciBpcyBza2lwcGVkLgorCiBjb25maWcgUEdUQUJMRV9MRVZF
TFMKIAlpbnQKIAlkZWZhdWx0IDIKZGlmZiAtLWdpdCBhL2FyY2gvYWxwaGEvaW5jbHVkZS9hc20v
dWFjY2Vzcy5oIGIvYXJjaC9hbHBoYS9pbmNsdWRlL2FzbS91YWNjZXNzLmgKaW5kZXggMWI2ZjI1
ZWZhMjQ3Li44MmM1NzQzZmM5Y2QgMTAwNjQ0Ci0tLSBhL2FyY2gvYWxwaGEvaW5jbHVkZS9hc20v
dWFjY2Vzcy5oCisrKyBiL2FyY2gvYWxwaGEvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCkBAIC0yMCwy
OCArMjAsNyBAQAogI2RlZmluZSBnZXRfZnMoKSAgKGN1cnJlbnRfdGhyZWFkX2luZm8oKS0+YWRk
cl9saW1pdCkKICNkZWZpbmUgc2V0X2ZzKHgpIChjdXJyZW50X3RocmVhZF9pbmZvKCktPmFkZHJf
bGltaXQgPSAoeCkpCiAKLSNkZWZpbmUgdWFjY2Vzc19rZXJuZWwoKQkoZ2V0X2ZzKCkuc2VnID09
IEtFUk5FTF9EUy5zZWcpCi0KLS8qCi0gKiBJcyBhIGFkZHJlc3MgdmFsaWQ/IFRoaXMgZG9lcyBh
IHN0cmFpZ2h0Zm9yd2FyZCBjYWxjdWxhdGlvbiByYXRoZXIKLSAqIHRoYW4gdGVzdHMuCi0gKgot
ICogQWRkcmVzcyB2YWxpZCBpZjoKLSAqICAtICJhZGRyIiBkb2Vzbid0IGhhdmUgYW55IGhpZ2gt
Yml0cyBzZXQKLSAqICAtIEFORCAic2l6ZSIgZG9lc24ndCBoYXZlIGFueSBoaWdoLWJpdHMgc2V0
Ci0gKiAgLSBBTkQgImFkZHIrc2l6ZS0oc2l6ZSAhPSAwKSIgZG9lc24ndCBoYXZlIGFueSBoaWdo
LWJpdHMgc2V0Ci0gKiAgLSBPUiB3ZSBhcmUgaW4ga2VybmVsIG1vZGUuCi0gKi8KLSNkZWZpbmUg
X19hY2Nlc3Nfb2soYWRkciwgc2l6ZSkgKHsJCQkJXAotCXVuc2lnbmVkIGxvbmcgX19hb19hID0g
KGFkZHIpLCBfX2FvX2IgPSAoc2l6ZSk7CQlcCi0JdW5zaWduZWQgbG9uZyBfX2FvX2VuZCA9IF9f
YW9fYSArIF9fYW9fYiAtICEhX19hb19iOwlcCi0JKGdldF9mcygpLnNlZyAmIChfX2FvX2EgfCBf
X2FvX2IgfCBfX2FvX2VuZCkpID09IDA7IH0pCi0KLSNkZWZpbmUgYWNjZXNzX29rKGFkZHIsIHNp
emUpCQkJCVwKLSh7CQkJCQkJCVwKLQlfX2Noa191c2VyX3B0cihhZGRyKTsJCQkJXAotCV9fYWNj
ZXNzX29rKCgodW5zaWduZWQgbG9uZykoYWRkcikpLCAoc2l6ZSkpOwlcCi19KQorI2luY2x1ZGUg
PGFzbS1nZW5lcmljL2FjY2Vzc19vay5oPgogCiAvKgogICogVGhlc2UgYXJlIHRoZSBtYWluIHNp
bmdsZS12YWx1ZSB0cmFuc2ZlciByb3V0aW5lcy4gIFRoZXkgYXV0b21hdGljYWxseQpAQCAtMTA1
LDcgKzg0LDcgQEAgZXh0ZXJuIHZvaWQgX19nZXRfdXNlcl91bmtub3duKHZvaWQpOwogCWxvbmcg
X19ndV9lcnIgPSAtRUZBVUxUOwkJCQlcCiAJdW5zaWduZWQgbG9uZyBfX2d1X3ZhbCA9IDA7CQkJ
CVwKIAljb25zdCBfX3R5cGVvZl9fKCoocHRyKSkgX191c2VyICpfX2d1X2FkZHIgPSAocHRyKTsJ
XAotCWlmIChfX2FjY2Vzc19vaygodW5zaWduZWQgbG9uZylfX2d1X2FkZHIsIHNpemUpKSB7CVwK
KwlpZiAoX19hY2Nlc3Nfb2soX19ndV9hZGRyLCBzaXplKSkgewkJCVwKIAkJX19ndV9lcnIgPSAw
OwkJCQkJXAogCQlzd2l0Y2ggKHNpemUpIHsJCQkJCVwKIAkJICBjYXNlIDE6IF9fZ2V0X3VzZXJf
OChfX2d1X2FkZHIpOyBicmVhazsJXApAQCAtMjAwLDcgKzE3OSw3IEBAIGV4dGVybiB2b2lkIF9f
cHV0X3VzZXJfdW5rbm93bih2b2lkKTsKICh7CQkJCQkJCQlcCiAJbG9uZyBfX3B1X2VyciA9IC1F
RkFVTFQ7CQkJCVwKIAlfX3R5cGVvZl9fKCoocHRyKSkgX191c2VyICpfX3B1X2FkZHIgPSAocHRy
KTsJCVwKLQlpZiAoX19hY2Nlc3Nfb2soKHVuc2lnbmVkIGxvbmcpX19wdV9hZGRyLCBzaXplKSkg
ewlcCisJaWYgKF9fYWNjZXNzX29rKF9fcHVfYWRkciwgc2l6ZSkpIHsJCQlcCiAJCV9fcHVfZXJy
ID0gMDsJCQkJCVwKIAkJc3dpdGNoIChzaXplKSB7CQkJCQlcCiAJCSAgY2FzZSAxOiBfX3B1dF91
c2VyXzgoeCwgX19wdV9hZGRyKTsgYnJlYWs7CVwKQEAgLTMxNiwxNyArMjk1LDE0IEBAIHJhd19j
b3B5X3RvX3VzZXIodm9pZCBfX3VzZXIgKnRvLCBjb25zdCB2b2lkICpmcm9tLCB1bnNpZ25lZCBs
b25nIGxlbikKIAogZXh0ZXJuIGxvbmcgX19jbGVhcl91c2VyKHZvaWQgX191c2VyICp0bywgbG9u
ZyBsZW4pOwogCi1leHRlcm4gaW5saW5lIGxvbmcKK3N0YXRpYyBpbmxpbmUgbG9uZwogY2xlYXJf
dXNlcih2b2lkIF9fdXNlciAqdG8sIGxvbmcgbGVuKQogewotCWlmIChfX2FjY2Vzc19vaygodW5z
aWduZWQgbG9uZyl0bywgbGVuKSkKKwlpZiAoX19hY2Nlc3Nfb2sodG8sIGxlbikpCiAJCWxlbiA9
IF9fY2xlYXJfdXNlcih0bywgbGVuKTsKIAlyZXR1cm4gbGVuOwogfQogCi0jZGVmaW5lIHVzZXJf
YWRkcl9tYXgoKSBcCi0gICAgICAgICh1YWNjZXNzX2tlcm5lbCgpID8gfjBVTCA6IFRBU0tfU0la
RSkKLQogZXh0ZXJuIGxvbmcgc3RybmNweV9mcm9tX3VzZXIoY2hhciAqZGVzdCwgY29uc3QgY2hh
ciBfX3VzZXIgKnNyYywgbG9uZyBjb3VudCk7CiBleHRlcm4gX19tdXN0X2NoZWNrIGxvbmcgc3Ry
bmxlbl91c2VyKGNvbnN0IGNoYXIgX191c2VyICpzdHIsIGxvbmcgbik7CiAKZGlmZiAtLWdpdCBh
L2FyY2gvYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gvYXJjL2luY2x1ZGUvYXNtL3Vh
Y2Nlc3MuaAppbmRleCA3ODNiZmRiM2JmYTMuLjMwZjgwYjRiZTJhYiAxMDA2NDQKLS0tIGEvYXJj
aC9hcmMvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2FyY2gvYXJjL2luY2x1ZGUvYXNtL3Vh
Y2Nlc3MuaApAQCAtMjMsMzUgKzIzLDYgQEAKIAogI2luY2x1ZGUgPGxpbnV4L3N0cmluZy5oPgkv
KiBmb3IgZ2VuZXJpYyBzdHJpbmcgZnVuY3Rpb25zICovCiAKLQotI2RlZmluZSBfX2tlcm5lbF9v
awkJKHVhY2Nlc3Nfa2VybmVsKCkpCi0KLS8qCi0gKiBBbGdvcml0aG1pY2FsbHksIGZvciBfX3Vz
ZXJfb2soKSB3ZSB3YW50IGRvOgotICogCShzdGFydCA8IFRBU0tfU0laRSkgJiYgKHN0YXJ0K2xl
biA8IFRBU0tfU0laRSkKLSAqIHdoZXJlIFRBU0tfU0laRSBjb3VsZCBlaXRoZXIgYmUgcmV0cmll
dmVkIGZyb20gdGhyZWFkX2luZm8tPmFkZHJfbGltaXQgb3IKLSAqIGVtaXR0ZWQgZGlyZWN0bHkg
aW4gY29kZS4KLSAqCi0gKiBUaGlzIGNhbiBob3dldmVyIGJlIHJld3JpdHRlbiBhcyBmb2xsb3dz
OgotICoJKGxlbiA8PSBUQVNLX1NJWkUpICYmIChzdGFydCtsZW4gPCBUQVNLX1NJWkUpCi0gKgot
ICogQmVjYXVzZSBpdCBlc3NlbnRpYWxseSBjaGVja3MgaWYgYnVmZmVyIGVuZCBpcyB3aXRoaW4g
bGltaXQgYW5kIEBsZW4gaXMKLSAqIG5vbi1uZ2VhdGl2ZSwgd2hpY2ggaW1wbGllcyB0aGF0IGJ1
ZmZlciBzdGFydCB3aWxsIGJlIHdpdGhpbiBsaW1pdCB0b28uCi0gKgotICogVGhlIHJlYXNvbiBm
b3IgcmV3cml0aW5nIGJlaW5nLCBmb3IgbWFqb3JpdHkgb2YgY2FzZXMsIEBsZW4gaXMgZ2VuZXJh
bGx5Ci0gKiBjb21waWxlIHRpbWUgY29uc3RhbnQsIGNhdXNpbmcgZmlyc3Qgc3ViLWV4cHJlc3Np
b24gdG8gYmUgY29tcGlsZSB0aW1lCi0gKiBzdWJzdW1lZC4KLSAqCi0gKiBUaGUgc2Vjb25kIHBh
cnQgd291bGQgZ2VuZXJhdGUgd2VpcmQgbGFyZ2UgTElNTXMgZS5nLiAoMHg2MDAwXzAwMDAgLSAw
eDEwKSwKLSAqIHNvIHdlIGNoZWNrIGZvciBUQVNLX1NJWkUgdXNpbmcgZ2V0X2ZzKCkgc2luY2Ug
dGhlIGFkZHJfbGltaXQgbG9hZCBmcm9tIG1lbQotICogd291bGQgYWxyZWFkeSBoYXZlIGJlZW4g
ZG9uZSBhdCB0aGlzIGNhbGwgc2l0ZSBmb3IgX19rZXJuZWxfb2soKQotICoKLSAqLwotI2RlZmlu
ZSBfX3VzZXJfb2soYWRkciwgc3opCSgoKHN6KSA8PSBUQVNLX1NJWkUpICYmIFwKLQkJCQkgKChh
ZGRyKSA8PSAoZ2V0X2ZzKCkgLSAoc3opKSkpCi0jZGVmaW5lIF9fYWNjZXNzX29rKGFkZHIsIHN6
KQkodW5saWtlbHkoX19rZXJuZWxfb2spIHx8IFwKLQkJCQkgbGlrZWx5KF9fdXNlcl9vaygoYWRk
ciksIChzeikpKSkKLQogLyoqKioqKioqKioqIFNpbmdsZSBieXRlL2h3b3JkL3dvcmQgY29waWVz
ICoqKioqKioqKioqKioqKioqKi8KIAogI2RlZmluZSBfX2dldF91c2VyX2ZuKHN6LCB1LCBrKQkJ
CQkJXApkaWZmIC0tZ2l0IGEvYXJjaC9hcm0vaW5jbHVkZS9hc20vdWFjY2Vzcy5oIGIvYXJjaC9h
cm0vaW5jbHVkZS9hc20vdWFjY2Vzcy5oCmluZGV4IGQyMGQ3OGMzNGI5NC4uMmZjYmVjOWMzMDZj
IDEwMDY0NAotLS0gYS9hcmNoL2FybS9pbmNsdWRlL2FzbS91YWNjZXNzLmgKKysrIGIvYXJjaC9h
cm0vaW5jbHVkZS9hc20vdWFjY2Vzcy5oCkBAIC01NSwyMSArNTUsNiBAQCBleHRlcm4gaW50IF9f
cHV0X3VzZXJfYmFkKHZvaWQpOwogCiAjaWZkZWYgQ09ORklHX01NVQogCi0vKgotICogV2UgdXNl
IDMzLWJpdCBhcml0aG1ldGljIGhlcmUuICBTdWNjZXNzIHJldHVybnMgemVybywgZmFpbHVyZSBy
ZXR1cm5zCi0gKiBhZGRyX2xpbWl0LiAgV2UgdGFrZSBhZHZhbnRhZ2UgdGhhdCBhZGRyX2xpbWl0
IHdpbGwgYmUgemVybyBmb3IgS0VSTkVMX0RTLAotICogc28gdGhpcyB3aWxsIGFsd2F5cyByZXR1
cm4gc3VjY2VzcyBpbiB0aGF0IGNhc2UuCi0gKi8KLSNkZWZpbmUgX19yYW5nZV9vayhhZGRyLCBz
aXplKSAoeyBcCi0JdW5zaWduZWQgbG9uZyBmbGFnLCByb2tzdW07IFwKLQlfX2Noa191c2VyX3B0
cihhZGRyKTsJXAotCV9fYXNtX18oIi5zeW50YXggdW5pZmllZFxuIiBcCi0JCSJhZGRzICUxLCAl
MiwgJTM7IHNiY3NjYyAlMSwgJTEsICUwOyBtb3ZjYyAlMCwgIzAiIFwKLQkJOiAiPSZyIiAoZmxh
ZyksICI9JnIiIChyb2tzdW0pIFwKLQkJOiAiciIgKGFkZHIpLCAiSXIiIChzaXplKSwgIjAiIChU
QVNLX1NJWkUpIFwKLQkJOiAiY2MiKTsgXAotCWZsYWc7IH0pCi0KIC8qCiAgKiBUaGlzIGlzIGEg
dHlwZTogZWl0aGVyIHVuc2lnbmVkIGxvbmcsIGlmIHRoZSBhcmd1bWVudCBmaXRzIGludG8KICAq
IHRoYXQgdHlwZSwgb3Igb3RoZXJ3aXNlIHVuc2lnbmVkIGxvbmcgbG9uZy4KQEAgLTI0MSwxNSAr
MjI2LDEyIEBAIGV4dGVybiBpbnQgX19wdXRfdXNlcl84KHZvaWQgKiwgdW5zaWduZWQgbG9uZyBs
b25nKTsKIAogI2Vsc2UgLyogQ09ORklHX01NVSAqLwogCi0jZGVmaW5lIF9fYWRkcl9vayhhZGRy
KQkJKCh2b2lkKShhZGRyKSwgMSkKLSNkZWZpbmUgX19yYW5nZV9vayhhZGRyLCBzaXplKQkoKHZv
aWQpKGFkZHIpLCAwKQotCiAjZGVmaW5lIGdldF91c2VyKHgsIHApCV9fZ2V0X3VzZXIoeCwgcCkK
ICNkZWZpbmUgX19wdXRfdXNlcl9jaGVjayBfX3B1dF91c2VyX25vY2hlY2sKIAogI2VuZGlmIC8q
IENPTkZJR19NTVUgKi8KIAotI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgc2l6ZSkJKF9fcmFuZ2Vf
b2soYWRkciwgc2l6ZSkgPT0gMCkKKyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9hY2Nlc3Nfb2suaD4K
IAogI2lmZGVmIENPTkZJR19DUFVfU1BFQ1RSRQogLyoKZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQv
aW5jbHVkZS9hc20vdWFjY2Vzcy5oIGIvYXJjaC9hcm02NC9pbmNsdWRlL2FzbS91YWNjZXNzLmgK
aW5kZXggMTk5YzU1M2I3NDBhLi5lOGRjZTBjYzVlYWEgMTAwNjQ0Ci0tLSBhL2FyY2gvYXJtNjQv
aW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2FyY2gvYXJtNjQvaW5jbHVkZS9hc20vdWFjY2Vz
cy5oCkBAIC0yNiwxMyArMjYsNyBAQAogI2luY2x1ZGUgPGFzbS9tZW1vcnkuaD4KICNpbmNsdWRl
IDxhc20vZXh0YWJsZS5oPgogCi1zdGF0aWMgaW5saW5lIGludCBfX2FjY2Vzc19vayhjb25zdCB2
b2lkIF9fdXNlciAqcHRyLCB1bnNpZ25lZCBsb25nIHNpemUpCi17Ci0JdW5zaWduZWQgbG9uZyBs
aW1pdCA9IFRBU0tfU0laRV9NQVg7Ci0JdW5zaWduZWQgbG9uZyBhZGRyID0gKHVuc2lnbmVkIGxv
bmcpcHRyOwotCi0JcmV0dXJuIChzaXplIDw9IGxpbWl0KSAmJiAoYWRkciA8PSAobGltaXQgLSBz
aXplKSk7Ci19CitzdGF0aWMgaW5saW5lIGludCBfX2FjY2Vzc19vayhjb25zdCB2b2lkIF9fdXNl
ciAqcHRyLCB1bnNpZ25lZCBsb25nIHNpemUpOwogCiAvKgogICogVGVzdCB3aGV0aGVyIGEgYmxv
Y2sgb2YgbWVtb3J5IGlzIGEgdmFsaWQgdXNlciBzcGFjZSBhZGRyZXNzLgpAQCAtNTQsNiArNDgs
OSBAQCBzdGF0aWMgaW5saW5lIGludCBhY2Nlc3Nfb2soY29uc3Qgdm9pZCBfX3VzZXIgKmFkZHIs
IHVuc2lnbmVkIGxvbmcgc2l6ZSkKIAogCXJldHVybiBsaWtlbHkoX19hY2Nlc3Nfb2soYWRkciwg
c2l6ZSkpOwogfQorI2RlZmluZSBhY2Nlc3Nfb2sgYWNjZXNzX29rCisKKyNpbmNsdWRlIDxhc20t
Z2VuZXJpYy9hY2Nlc3Nfb2suaD4KIAogLyoKICAqIFVzZXIgYWNjZXNzIGVuYWJsaW5nL2Rpc2Fi
bGluZy4KZGlmZiAtLWdpdCBhL2FyY2gvY3NreS9pbmNsdWRlL2FzbS91YWNjZXNzLmggYi9hcmNo
L2Nza3kvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCmluZGV4IGFjNWE1NGY1N2Q0MC4uZmVjOGY3N2Zm
Yzk5IDEwMDY0NAotLS0gYS9hcmNoL2Nza3kvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2Fy
Y2gvY3NreS9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAgLTUsMTQgKzUsNiBAQAogCiAjZGVmaW5l
IHVzZXJfYWRkcl9tYXgoKSAoY3VycmVudF90aHJlYWRfaW5mbygpLT5hZGRyX2xpbWl0LnNlZykK
IAotc3RhdGljIGlubGluZSBpbnQgX19hY2Nlc3Nfb2sodW5zaWduZWQgbG9uZyBhZGRyLCB1bnNp
Z25lZCBsb25nIHNpemUpCi17Ci0JdW5zaWduZWQgbG9uZyBsaW1pdCA9IHVzZXJfYWRkcl9tYXgo
KTsKLQotCXJldHVybiAoc2l6ZSA8PSBsaW1pdCkgJiYgKGFkZHIgPD0gKGxpbWl0IC0gc2l6ZSkp
OwotfQotI2RlZmluZSBfX2FjY2Vzc19vayBfX2FjY2Vzc19vawotCiAvKgogICogX19wdXRfdXNl
cl9mbgogICovCmRpZmYgLS1naXQgYS9hcmNoL2hleGFnb24vaW5jbHVkZS9hc20vdWFjY2Vzcy5o
IGIvYXJjaC9oZXhhZ29uL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAppbmRleCA3MTliYTNmM2M0NWMu
LmJmZjc3ZWZjMGQ5YSAxMDA2NDQKLS0tIGEvYXJjaC9oZXhhZ29uL2luY2x1ZGUvYXNtL3VhY2Nl
c3MuaAorKysgYi9hcmNoL2hleGFnb24vaW5jbHVkZS9hc20vdWFjY2Vzcy5oCkBAIC0xMiwzMSAr
MTIsNiBAQAogICovCiAjaW5jbHVkZSA8YXNtL3NlY3Rpb25zLmg+CiAKLS8qCi0gKiBhY2Nlc3Nf
b2s6IC0gQ2hlY2tzIGlmIGEgdXNlciBzcGFjZSBwb2ludGVyIGlzIHZhbGlkCi0gKiBAYWRkcjog
VXNlciBzcGFjZSBwb2ludGVyIHRvIHN0YXJ0IG9mIGJsb2NrIHRvIGNoZWNrCi0gKiBAc2l6ZTog
U2l6ZSBvZiBibG9jayB0byBjaGVjawotICoKLSAqIENvbnRleHQ6IFVzZXIgY29udGV4dCBvbmx5
LiBUaGlzIGZ1bmN0aW9uIG1heSBzbGVlcCBpZiBwYWdlZmF1bHRzIGFyZQotICogICAgICAgICAg
ZW5hYmxlZC4KLSAqCi0gKiBDaGVja3MgaWYgYSBwb2ludGVyIHRvIGEgYmxvY2sgb2YgbWVtb3J5
IGluIHVzZXIgc3BhY2UgaXMgdmFsaWQuCi0gKgotICogUmV0dXJucyB0cnVlIChub256ZXJvKSBp
ZiB0aGUgbWVtb3J5IGJsb2NrICptYXkqIGJlIHZhbGlkLCBmYWxzZSAoemVybykKLSAqIGlmIGl0
IGlzIGRlZmluaXRlbHkgaW52YWxpZC4KLSAqCi0gKi8KLSNkZWZpbmUgdWFjY2Vzc19rZXJuZWwo
KSAoZ2V0X2ZzKCkuc2VnID09IEtFUk5FTF9EUy5zZWcpCi0jZGVmaW5lIHVzZXJfYWRkcl9tYXgo
KSAodWFjY2Vzc19rZXJuZWwoKSA/IH4wVUwgOiBUQVNLX1NJWkUpCi0KLXN0YXRpYyBpbmxpbmUg
aW50IF9fYWNjZXNzX29rKHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBzaXplKQot
ewotCXVuc2lnbmVkIGxvbmcgbGltaXQgPSBUQVNLX1NJWkU7Ci0KLQlyZXR1cm4gKHNpemUgPD0g
bGltaXQpICYmIChhZGRyIDw9IChsaW1pdCAtIHNpemUpKTsKLX0KLSNkZWZpbmUgX19hY2Nlc3Nf
b2sgX19hY2Nlc3Nfb2sKLQogLyoKICAqIFdoZW4gYSBrZXJuZWwtbW9kZSBwYWdlIGZhdWx0IGlz
IHRha2VuLCB0aGUgZmF1bHRpbmcgaW5zdHJ1Y3Rpb24KICAqIGFkZHJlc3MgaXMgY2hlY2tlZCBh
Z2FpbnN0IGEgdGFibGUgb2YgZXhjZXB0aW9uX3RhYmxlX2VudHJpZXMuCmRpZmYgLS1naXQgYS9h
cmNoL2lhNjQvaW5jbHVkZS9hc20vdWFjY2Vzcy5oIGIvYXJjaC9pYTY0L2luY2x1ZGUvYXNtL3Vh
Y2Nlc3MuaAppbmRleCBlMTlkMmRjYzBjZWQuLmUyNDJhM2NjMTMzMCAxMDA2NDQKLS0tIGEvYXJj
aC9pYTY0L2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAorKysgYi9hcmNoL2lhNjQvaW5jbHVkZS9hc20v
dWFjY2Vzcy5oCkBAIC01MCw4ICs1MCw2IEBACiAjZGVmaW5lIGdldF9mcygpICAoY3VycmVudF90
aHJlYWRfaW5mbygpLT5hZGRyX2xpbWl0KQogI2RlZmluZSBzZXRfZnMoeCkgKGN1cnJlbnRfdGhy
ZWFkX2luZm8oKS0+YWRkcl9saW1pdCA9ICh4KSkKIAotI2RlZmluZSB1YWNjZXNzX2tlcm5lbCgp
CShnZXRfZnMoKS5zZWcgPT0gS0VSTkVMX0RTLnNlZykKLQogLyoKICAqIFdoZW4gYWNjZXNzaW5n
IHVzZXIgbWVtb3J5LCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGUgZW50aXJlIGFyZWEgcmVhbGx5
IGlzIGluCiAgKiB1c2VyLWxldmVsIHNwYWNlLiAgSW4gb3JkZXIgdG8gZG8gdGhpcyBlZmZpY2ll
bnRseSwgd2UgbWFrZSBzdXJlIHRoYXQgdGhlIHBhZ2UgYXQKQEAgLTY1LDcgKzYzLDggQEAgc3Rh
dGljIGlubGluZSBpbnQgX19hY2Nlc3Nfb2soY29uc3Qgdm9pZCBfX3VzZXIgKnAsIHVuc2lnbmVk
IGxvbmcgc2l6ZSkKIAlyZXR1cm4gbGlrZWx5KGFkZHIgPD0gc2VnKSAmJgogCSAoc2VnID09IEtF
Uk5FTF9EUy5zZWcgfHwgbGlrZWx5KFJFR0lPTl9PRkZTRVQoYWRkcikgPCBSR05fTUFQX0xJTUlU
KSk7CiB9Ci0jZGVmaW5lIGFjY2Vzc19vayhhZGRyLCBzaXplKQlfX2FjY2Vzc19vaygoYWRkciks
IChzaXplKSkKKyNkZWZpbmUgX19hY2Nlc3Nfb2sgX19hY2Nlc3Nfb2sKKyNpbmNsdWRlIDxhc20t
Z2VuZXJpYy9hY2Nlc3Nfb2suaD4KIAogLyoKICAqIFRoZXNlIGFyZSB0aGUgbWFpbiBzaW5nbGUt
dmFsdWUgdHJhbnNmZXIgcm91dGluZXMuICBUaGV5IGF1dG9tYXRpY2FsbHkKZGlmZiAtLWdpdCBh
L2FyY2gvbTY4ay9LY29uZmlnLmNwdSBiL2FyY2gvbTY4ay9LY29uZmlnLmNwdQppbmRleCAwZDAw
ZWY1MTE3ZGMuLjE2ZWE5YTY3NzIzYyAxMDA2NDQKLS0tIGEvYXJjaC9tNjhrL0tjb25maWcuY3B1
CisrKyBiL2FyY2gvbTY4ay9LY29uZmlnLmNwdQpAQCAtNDUzLDYgKzQ1Myw3IEBAIGNvbmZpZyBD
UFVfSEFTX05PX1VOQUxJR05FRAogCiBjb25maWcgQ1BVX0hBU19BRERSRVNTX1NQQUNFUwogCWJv
b2wKKwlzZWxlY3QgQUxURVJOQVRFX1VTRVJfQUREUkVTU19TUEFDRQogCiBjb25maWcgRlBVCiAJ
Ym9vbApkaWZmIC0tZ2l0IGEvYXJjaC9tNjhrL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gv
bTY4ay9pbmNsdWRlL2FzbS91YWNjZXNzLmgKaW5kZXggOGViNjI1ZTc1NDUyLi42NDkxNDg3MmE1
YzkgMTAwNjQ0Ci0tLSBhL2FyY2gvbTY4ay9pbmNsdWRlL2FzbS91YWNjZXNzLmgKKysrIGIvYXJj
aC9tNjhrL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaApAQCAtMTAsMjQgKzEwLDcgQEAKICNpbmNsdWRl
IDxsaW51eC9jb21waWxlci5oPgogI2luY2x1ZGUgPGxpbnV4L3R5cGVzLmg+CiAjaW5jbHVkZSA8
YXNtL2V4dGFibGUuaD4KLQotLyogV2UgbGV0IHRoZSBNTVUgZG8gYWxsIGNoZWNraW5nICovCi1z
dGF0aWMgaW5saW5lIGludCBhY2Nlc3Nfb2soY29uc3Qgdm9pZCBfX3VzZXIgKnB0ciwKLQkJCSAg
ICB1bnNpZ25lZCBsb25nIHNpemUpCi17Ci0JdW5zaWduZWQgbG9uZyBsaW1pdCA9IFRBU0tfU0la
RTsKLQl1bnNpZ25lZCBsb25nIGFkZHIgPSAodW5zaWduZWQgbG9uZylwdHI7Ci0KLQkvKgotCSAq
IFhYWDogZm9yICFDT05GSUdfQ1BVX0hBU19BRERSRVNTX1NQQUNFUyB0aGlzIHJlYWxseSBuZWVk
cyB0byBjaGVjawotCSAqIGZvciBUQVNLX1NJWkUhCi0JICogUmVtb3ZpbmcgdGhpcyBoZWxwZXIg
aXMgcHJvYmFibHkgc3VmZmljaWVudC4KLQkgKi8KLQlpZiAoSVNfRU5BQkxFRChDT05GSUdfQ1BV
X0hBU19BRERSRVNTX1NQQUNFUykpCi0JCXJldHVybiAxOwotCi0JcmV0dXJuIChzaXplIDw9IGxp
bWl0KSAmJiAoYWRkciA8PSAobGltaXQgLSBzaXplKSk7Ci19CisjaW5jbHVkZSA8YXNtLWdlbmVy
aWMvYWNjZXNzX29rLmg+CiAKIC8qCiAgKiBOb3QgYWxsIHZhcmllbnRzIG9mIHRoZSA2OGsgZmFt
aWx5IHN1cHBvcnQgdGhlIG5vdGlvbiBvZiBhZGRyZXNzIHNwYWNlcy4KZGlmZiAtLWdpdCBhL2Fy
Y2gvbWljcm9ibGF6ZS9pbmNsdWRlL2FzbS91YWNjZXNzLmggYi9hcmNoL21pY3JvYmxhemUvaW5j
bHVkZS9hc20vdWFjY2Vzcy5oCmluZGV4IDNmZTk2OTc5ZDJjNi4uYmY5Yjc2NTdhNjVhIDEwMDY0
NAotLS0gYS9hcmNoL21pY3JvYmxhemUvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2FyY2gv
bWljcm9ibGF6ZS9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAgLTM5LDEzICszOSw3IEBACiAKICMg
ZGVmaW5lIHVhY2Nlc3Nfa2VybmVsKCkJKGdldF9mcygpLnNlZyA9PSBLRVJORUxfRFMuc2VnKQog
Ci1zdGF0aWMgaW5saW5lIGludCBfX2FjY2Vzc19vayh1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2ln
bmVkIGxvbmcgc2l6ZSkKLXsKLQl1bnNpZ25lZCBsb25nIGxpbWl0ID0gdXNlcl9hZGRyX21heCgp
OwotCi0JcmV0dXJuIChzaXplIDw9IGxpbWl0KSAmJiAoYWRkciA8PSAobGltaXQgLSBzaXplKSk7
Ci19Ci0jZGVmaW5lIGFjY2Vzc19vayhhZGRyLCBzaXplKSBfX2FjY2Vzc19vaygodW5zaWduZWQg
bG9uZylhZGRyLCBzaXplKQorI2luY2x1ZGUgPGFzbS1nZW5lcmljL2FjY2Vzc19vay5oPgogCiAj
IGRlZmluZSBfX0ZJWFVQX1NFQ1RJT04JIi5zZWN0aW9uIC5maXh1cCxcImF4XCJcbiIKICMgZGVm
aW5lIF9fRVhfVEFCTEVfU0VDVElPTgkiLnNlY3Rpb24gX19leF90YWJsZSxcImFcIlxuIgpkaWZm
IC0tZ2l0IGEvYXJjaC9taXBzL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gvbWlwcy9pbmNs
dWRlL2FzbS91YWNjZXNzLmgKaW5kZXggZDdjODlkYzM0MjZjLi40MzYyNDg2NTJiMjggMTAwNjQ0
Ci0tLSBhL2FyY2gvbWlwcy9pbmNsdWRlL2FzbS91YWNjZXNzLmgKKysrIGIvYXJjaC9taXBzL2lu
Y2x1ZGUvYXNtL3VhY2Nlc3MuaApAQCAtNDQsMzQgKzQ0LDcgQEAgZXh0ZXJuIHU2NCBfX3VhX2xp
bWl0OwogCiAjZW5kaWYgLyogQ09ORklHXzY0QklUICovCiAKLS8qCi0gKiBhY2Nlc3Nfb2s6IC0g
Q2hlY2tzIGlmIGEgdXNlciBzcGFjZSBwb2ludGVyIGlzIHZhbGlkCi0gKiBAYWRkcjogVXNlciBz
cGFjZSBwb2ludGVyIHRvIHN0YXJ0IG9mIGJsb2NrIHRvIGNoZWNrCi0gKiBAc2l6ZTogU2l6ZSBv
ZiBibG9jayB0byBjaGVjawotICoKLSAqIENvbnRleHQ6IFVzZXIgY29udGV4dCBvbmx5LiBUaGlz
IGZ1bmN0aW9uIG1heSBzbGVlcCBpZiBwYWdlZmF1bHRzIGFyZQotICogICAgICAgICAgZW5hYmxl
ZC4KLSAqCi0gKiBDaGVja3MgaWYgYSBwb2ludGVyIHRvIGEgYmxvY2sgb2YgbWVtb3J5IGluIHVz
ZXIgc3BhY2UgaXMgdmFsaWQuCi0gKgotICogUmV0dXJucyB0cnVlIChub256ZXJvKSBpZiB0aGUg
bWVtb3J5IGJsb2NrIG1heSBiZSB2YWxpZCwgZmFsc2UgKHplcm8pCi0gKiBpZiBpdCBpcyBkZWZp
bml0ZWx5IGludmFsaWQuCi0gKgotICogTm90ZSB0aGF0LCBkZXBlbmRpbmcgb24gYXJjaGl0ZWN0
dXJlLCB0aGlzIGZ1bmN0aW9uIHByb2JhYmx5IGp1c3QKLSAqIGNoZWNrcyB0aGF0IHRoZSBwb2lu
dGVyIGlzIGluIHRoZSB1c2VyIHNwYWNlIHJhbmdlIC0gYWZ0ZXIgY2FsbGluZwotICogdGhpcyBm
dW5jdGlvbiwgbWVtb3J5IGFjY2VzcyBmdW5jdGlvbnMgbWF5IHN0aWxsIHJldHVybiAtRUZBVUxU
LgotICovCi0KLXN0YXRpYyBpbmxpbmUgaW50IF9fYWNjZXNzX29rKGNvbnN0IHZvaWQgX191c2Vy
ICpwLCB1bnNpZ25lZCBsb25nIHNpemUpCi17Ci0JdW5zaWduZWQgbG9uZyBhZGRyID0gKHVuc2ln
bmVkIGxvbmcpcDsKLQl1bnNpZ25lZCBsb25nIGxpbWl0ID0gVEFTS19TSVpFX01BWDsKLQotCXJl
dHVybiAoc2l6ZSA8PSBsaW1pdCkgJiYgKGFkZHIgPD0gKGxpbWl0IC0gc2l6ZSkpOwotfQotCi0j
ZGVmaW5lIGFjY2Vzc19vayhhZGRyLCBzaXplKQkJCQkJXAotCWxpa2VseShfX2FjY2Vzc19vaygo
YWRkciksIChzaXplKSkpCisjaW5jbHVkZSA8YXNtLWdlbmVyaWMvYWNjZXNzX29rLmg+CiAKIC8q
CiAgKiBwdXRfdXNlcjogLSBXcml0ZSBhIHNpbXBsZSB2YWx1ZSBpbnRvIHVzZXIgc3BhY2UuCmRp
ZmYgLS1naXQgYS9hcmNoL25kczMyL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gvbmRzMzIv
aW5jbHVkZS9hc20vdWFjY2Vzcy5oCmluZGV4IDM3YTQwOTgxZGViMy4uODMyZDY0MmE0MDY4IDEw
MDY0NAotLS0gYS9hcmNoL25kczMyL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAorKysgYi9hcmNoL25k
czMyL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaApAQCAtMzgsMTggKzM4LDE1IEBAIGV4dGVybiBpbnQg
Zml4dXBfZXhjZXB0aW9uKHN0cnVjdCBwdF9yZWdzICpyZWdzKTsKIAogI2RlZmluZSBnZXRfZnMo
KQkoY3VycmVudF90aHJlYWRfaW5mbygpLT5hZGRyX2xpbWl0KQogI2RlZmluZSB1c2VyX2FkZHJf
bWF4CWdldF9mcworI2RlZmluZSB1YWNjZXNzX2tlcm5lbCgpIChnZXRfZnMoKSA9PSBLRVJORUxf
RFMpCiAKIHN0YXRpYyBpbmxpbmUgdm9pZCBzZXRfZnMobW1fc2VnbWVudF90IGZzKQogewogCWN1
cnJlbnRfdGhyZWFkX2luZm8oKS0+YWRkcl9saW1pdCA9IGZzOwogfQogCi0jZGVmaW5lIHVhY2Nl
c3Nfa2VybmVsKCkJKGdldF9mcygpID09IEtFUk5FTF9EUykKKyNpbmNsdWRlIDxhc20tZ2VuZXJp
Yy9hY2Nlc3Nfb2suaD4KIAotI2RlZmluZSBfX3JhbmdlX29rKGFkZHIsIHNpemUpIChzaXplIDw9
IGdldF9mcygpICYmIGFkZHIgPD0gKGdldF9mcygpIC1zaXplKSkKLQotI2RlZmluZSBhY2Nlc3Nf
b2soYWRkciwgc2l6ZSkJXAotCV9fcmFuZ2Vfb2soKHVuc2lnbmVkIGxvbmcpYWRkciwgKHVuc2ln
bmVkIGxvbmcpc2l6ZSkKIC8qCiAgKiBTaW5nbGUtdmFsdWUgdHJhbnNmZXIgcm91dGluZXMuICBU
aGV5IGF1dG9tYXRpY2FsbHkgdXNlIHRoZSByaWdodAogICogc2l6ZSBpZiB3ZSBqdXN0IGhhdmUg
dGhlIHJpZ2h0IHBvaW50ZXIgdHlwZS4gIE5vdGUgdGhhdCB0aGUgZnVuY3Rpb25zCmRpZmYgLS1n
aXQgYS9hcmNoL25pb3MyL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gvbmlvczIvaW5jbHVk
ZS9hc20vdWFjY2Vzcy5oCmluZGV4IGE1Y2JlMDdjZjBkYS4uNjY2NGRkYzBlOGU1IDEwMDY0NAot
LS0gYS9hcmNoL25pb3MyL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAorKysgYi9hcmNoL25pb3MyL2lu
Y2x1ZGUvYXNtL3VhY2Nlc3MuaApAQCAtMzAsMTkgKzMwLDEwIEBACiAjZGVmaW5lIGdldF9mcygp
CQkoY3VycmVudF90aHJlYWRfaW5mbygpLT5hZGRyX2xpbWl0KQogI2RlZmluZSBzZXRfZnMoc2Vn
KQkJKGN1cnJlbnRfdGhyZWFkX2luZm8oKS0+YWRkcl9saW1pdCA9IChzZWcpKQogCi0jZGVmaW5l
IHVhY2Nlc3Nfa2VybmVsKCkgKGdldF9mcygpLnNlZyA9PSBLRVJORUxfRFMuc2VnKQotCi0jZGVm
aW5lIF9fYWNjZXNzX29rKGFkZHIsIGxlbikJCQlcCi0JKCgoc2lnbmVkIGxvbmcpKCgobG9uZyln
ZXRfZnMoKS5zZWcpICYJXAotCQkoKGxvbmcpKGFkZHIpIHwgKCgobG9uZykoYWRkcikpICsgKGxl
bikpIHwgKGxlbikpKSkgPT0gMCkKLQotI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgbGVuKQkJXAot
CWxpa2VseShfX2FjY2Vzc19vaygodW5zaWduZWQgbG9uZykoYWRkciksICh1bnNpZ25lZCBsb25n
KShsZW4pKSkKKyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9hY2Nlc3Nfb2suaD4KIAogIyBkZWZpbmUg
X19FWF9UQUJMRV9TRUNUSU9OCSIuc2VjdGlvbiBfX2V4X3RhYmxlLFwiYVwiXG4iCiAKLSNkZWZp
bmUgdXNlcl9hZGRyX21heCgpICh1YWNjZXNzX2tlcm5lbCgpID8gfjBVTCA6IFRBU0tfU0laRSkK
LQogLyoKICAqIFplcm8gVXNlcnNwYWNlCiAgKi8KZGlmZiAtLWdpdCBhL2FyY2gvb3BlbnJpc2Mv
aW5jbHVkZS9hc20vdWFjY2Vzcy5oIGIvYXJjaC9vcGVucmlzYy9pbmNsdWRlL2FzbS91YWNjZXNz
LmgKaW5kZXggMTIwZjUwMDU0NjFiLi44ZjA0OWVjOTliM2UgMTAwNjQ0Ci0tLSBhL2FyY2gvb3Bl
bnJpc2MvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCisrKyBiL2FyY2gvb3BlbnJpc2MvaW5jbHVkZS9h
c20vdWFjY2Vzcy5oCkBAIC00NSwyMSArNDUsNyBAQAogCiAjZGVmaW5lIHVhY2Nlc3Nfa2VybmVs
KCkJKGdldF9mcygpID09IEtFUk5FTF9EUykKIAotLyogRW5zdXJlIHRoYXQgdGhlIHJhbmdlIGZy
b20gYWRkciB0byBhZGRyK3NpemUgaXMgYWxsIHdpdGhpbiB0aGUgcHJvY2VzcycKLSAqIGFkZHJl
c3Mgc3BhY2UKLSAqLwotc3RhdGljIGlubGluZSBpbnQgX19yYW5nZV9vayh1bnNpZ25lZCBsb25n
IGFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKLXsKLQljb25zdCBtbV9zZWdtZW50X3QgZnMgPSBn
ZXRfZnMoKTsKLQotCXJldHVybiBzaXplIDw9IGZzICYmIGFkZHIgPD0gKGZzIC0gc2l6ZSk7Ci19
Ci0KLSNkZWZpbmUgYWNjZXNzX29rKGFkZHIsIHNpemUpCQkJCQkJXAotKHsgCQkJCQkJCQkJXAot
CV9fY2hrX3VzZXJfcHRyKGFkZHIpOwkJCQkJCVwKLQlfX3JhbmdlX29rKCh1bnNpZ25lZCBsb25n
KShhZGRyKSwgKHNpemUpKTsJCQlcCi19KQorI2luY2x1ZGUgPGFzbS1nZW5lcmljL2FjY2Vzc19v
ay5oPgogCiAvKgogICogVGhlc2UgYXJlIHRoZSBtYWluIHNpbmdsZS12YWx1ZSB0cmFuc2ZlciBy
b3V0aW5lcy4gIFRoZXkgYXV0b21hdGljYWxseQpAQCAtMjY4LDkgKzI1NCw2IEBAIGNsZWFyX3Vz
ZXIodm9pZCBfX3VzZXIgKmFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKIAlyZXR1cm4gc2l6ZTsK
IH0KIAotI2RlZmluZSB1c2VyX2FkZHJfbWF4KCkgXAotCSh1YWNjZXNzX2tlcm5lbCgpID8gfjBV
TCA6IFRBU0tfU0laRSkKLQogZXh0ZXJuIGxvbmcgc3RybmNweV9mcm9tX3VzZXIoY2hhciAqZGVz
dCwgY29uc3QgY2hhciBfX3VzZXIgKnNyYywgbG9uZyBjb3VudCk7CiAKIGV4dGVybiBfX211c3Rf
Y2hlY2sgbG9uZyBzdHJubGVuX3VzZXIoY29uc3QgY2hhciBfX3VzZXIgKnN0ciwgbG9uZyBuKTsK
ZGlmZiAtLWdpdCBhL2FyY2gvcGFyaXNjL0tjb25maWcgYi9hcmNoL3BhcmlzYy9LY29uZmlnCmlu
ZGV4IDQzYzFjODgwZGVmNi4uMTUwMzlmZGQ1NDEzIDEwMDY0NAotLS0gYS9hcmNoL3BhcmlzYy9L
Y29uZmlnCisrKyBiL2FyY2gvcGFyaXNjL0tjb25maWcKQEAgLTEsNiArMSw3IEBACiAjIFNQRFgt
TGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wCiBjb25maWcgUEFSSVNDCiAJZGVmX2Jvb2wgeQor
CXNlbGVjdCBBTFRFUk5BVEVfVVNFUl9BRERSRVNTX1NQQUNFCiAJc2VsZWN0IEFSQ0hfMzJCSVRf
T0ZGX1QgaWYgITY0QklUCiAJc2VsZWN0IEFSQ0hfTUlHSFRfSEFWRV9QQ19QQVJQT1JUCiAJc2Vs
ZWN0IEhBVkVfRlVOQ1RJT05fVFJBQ0VSCmRpZmYgLS1naXQgYS9hcmNoL3BhcmlzYy9pbmNsdWRl
L2FzbS91YWNjZXNzLmggYi9hcmNoL3BhcmlzYy9pbmNsdWRlL2FzbS91YWNjZXNzLmgKaW5kZXgg
MDkyNWJiZDZkYjY3Li4xODdmNGJkZmYxM2UgMTAwNjQ0Ci0tLSBhL2FyY2gvcGFyaXNjL2luY2x1
ZGUvYXNtL3VhY2Nlc3MuaAorKysgYi9hcmNoL3BhcmlzYy9pbmNsdWRlL2FzbS91YWNjZXNzLmgK
QEAgLTExLDE1ICsxMSw5IEBACiAjaW5jbHVkZSA8bGludXgvYnVnLmg+CiAjaW5jbHVkZSA8bGlu
dXgvc3RyaW5nLmg+CiAKLS8qCi0gKiBOb3RlIHRoYXQgc2luY2Uga2VybmVsIGFkZHJlc3NlcyBh
cmUgaW4gYSBzZXBhcmF0ZSBhZGRyZXNzIHNwYWNlIG9uCi0gKiBwYXJpc2MsIHdlIGRvbid0IG5l
ZWQgdG8gZG8gYW55dGhpbmcgZm9yIGFjY2Vzc19vaygpLgotICogV2UganVzdCBsZXQgdGhlIHBh
Z2UgZmF1bHQgaGFuZGxlciBkbyB0aGUgcmlnaHQgdGhpbmcuIFRoaXMgYWxzbyBtZWFucwotICog
dGhhdCBwdXRfdXNlciBpcyB0aGUgc2FtZSBhcyBfX3B1dF91c2VyLCBldGMuCi0gKi8KLQotI2Rl
ZmluZSBhY2Nlc3Nfb2sodWFkZHIsIHNpemUpCVwKLQkoICh1YWRkcikgPT0gKHVhZGRyKSApCisj
ZGVmaW5lIFRBU0tfU0laRV9NQVggREVGQVVMVF9UQVNLX1NJWkUKKyNpbmNsdWRlIDxhc20vcGd0
YWJsZS5oPgorI2luY2x1ZGUgPGFzbS1nZW5lcmljL2FjY2Vzc19vay5oPgogCiAjZGVmaW5lIHB1
dF91c2VyIF9fcHV0X3VzZXIKICNkZWZpbmUgZ2V0X3VzZXIgX19nZXRfdXNlcgpkaWZmIC0tZ2l0
IGEvYXJjaC9wb3dlcnBjL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gvcG93ZXJwYy9pbmNs
dWRlL2FzbS91YWNjZXNzLmgKaW5kZXggYTAwMzJjMmU3NTUwLi4yZTgzMjE3ZjUyZGUgMTAwNjQ0
Ci0tLSBhL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS91YWNjZXNzLmgKKysrIGIvYXJjaC9wb3dl
cnBjL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaApAQCAtMTEsMTggKzExLDkgQEAKICNpZmRlZiBfX3Bv
d2VycGM2NF9fCiAvKiBXZSB1c2UgVEFTS19TSVpFX1VTRVI2NCBhcyBUQVNLX1NJWkUgaXMgbm90
IGNvbnN0YW50ICovCiAjZGVmaW5lIFRBU0tfU0laRV9NQVgJCVRBU0tfU0laRV9VU0VSNjQKLSNl
bHNlCi0jZGVmaW5lIFRBU0tfU0laRV9NQVgJCVRBU0tfU0laRQogI2VuZGlmCiAKLXN0YXRpYyBp
bmxpbmUgYm9vbCBfX2FjY2Vzc19vayh1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcg
c2l6ZSkKLXsKLQlyZXR1cm4gYWRkciA8IFRBU0tfU0laRV9NQVggJiYgc2l6ZSA8PSBUQVNLX1NJ
WkVfTUFYIC0gYWRkcjsKLX0KLQotI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgc2l6ZSkJCVwKLQko
X19jaGtfdXNlcl9wdHIoYWRkciksCQlcCi0JIF9fYWNjZXNzX29rKCh1bnNpZ25lZCBsb25nKShh
ZGRyKSwgKHNpemUpKSkKKyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9hY2Nlc3Nfb2suaD4KIAogLyoK
ICAqIFRoZXNlIGFyZSB0aGUgbWFpbiBzaW5nbGUtdmFsdWUgdHJhbnNmZXIgcm91dGluZXMuICBU
aGV5IGF1dG9tYXRpY2FsbHkKZGlmZiAtLWdpdCBhL2FyY2gvcmlzY3YvaW5jbHVkZS9hc20vdWFj
Y2Vzcy5oIGIvYXJjaC9yaXNjdi9pbmNsdWRlL2FzbS91YWNjZXNzLmgKaW5kZXggNDQwN2I5ZTQ4
ZDJjLi44NTU0NTBiZWQ5ZjUgMTAwNjQ0Ci0tLSBhL2FyY2gvcmlzY3YvaW5jbHVkZS9hc20vdWFj
Y2Vzcy5oCisrKyBiL2FyY2gvcmlzY3YvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCkBAIC0yMSw0MiAr
MjEsMTMgQEAKICNpbmNsdWRlIDxhc20vYnl0ZW9yZGVyLmg+CiAjaW5jbHVkZSA8YXNtL2V4dGFi
bGUuaD4KICNpbmNsdWRlIDxhc20vYXNtLmg+CisjaW5jbHVkZSA8YXNtLWdlbmVyaWMvYWNjZXNz
X29rLmg+CiAKICNkZWZpbmUgX19lbmFibGVfdXNlcl9hY2Nlc3MoKQkJCQkJCQlcCiAJX19hc21f
XyBfX3ZvbGF0aWxlX18gKCJjc3JzIHNzdGF0dXMsICUwIiA6IDogInIiIChTUl9TVU0pIDogIm1l
bW9yeSIpCiAjZGVmaW5lIF9fZGlzYWJsZV91c2VyX2FjY2VzcygpCQkJCQkJCVwKIAlfX2FzbV9f
IF9fdm9sYXRpbGVfXyAoImNzcmMgc3N0YXR1cywgJTAiIDogOiAiciIgKFNSX1NVTSkgOiAibWVt
b3J5IikKIAotLyoqCi0gKiBhY2Nlc3Nfb2s6IC0gQ2hlY2tzIGlmIGEgdXNlciBzcGFjZSBwb2lu
dGVyIGlzIHZhbGlkCi0gKiBAYWRkcjogVXNlciBzcGFjZSBwb2ludGVyIHRvIHN0YXJ0IG9mIGJs
b2NrIHRvIGNoZWNrCi0gKiBAc2l6ZTogU2l6ZSBvZiBibG9jayB0byBjaGVjawotICoKLSAqIENv
bnRleHQ6IFVzZXIgY29udGV4dCBvbmx5LiAgVGhpcyBmdW5jdGlvbiBtYXkgc2xlZXAuCi0gKgot
ICogQ2hlY2tzIGlmIGEgcG9pbnRlciB0byBhIGJsb2NrIG9mIG1lbW9yeSBpbiB1c2VyIHNwYWNl
IGlzIHZhbGlkLgotICoKLSAqIFJldHVybnMgdHJ1ZSAobm9uemVybykgaWYgdGhlIG1lbW9yeSBi
bG9jayBtYXkgYmUgdmFsaWQsIGZhbHNlICh6ZXJvKQotICogaWYgaXQgaXMgZGVmaW5pdGVseSBp
bnZhbGlkLgotICoKLSAqIE5vdGUgdGhhdCwgZGVwZW5kaW5nIG9uIGFyY2hpdGVjdHVyZSwgdGhp
cyBmdW5jdGlvbiBwcm9iYWJseSBqdXN0Ci0gKiBjaGVja3MgdGhhdCB0aGUgcG9pbnRlciBpcyBp
biB0aGUgdXNlciBzcGFjZSByYW5nZSAtIGFmdGVyIGNhbGxpbmcKLSAqIHRoaXMgZnVuY3Rpb24s
IG1lbW9yeSBhY2Nlc3MgZnVuY3Rpb25zIG1heSBzdGlsbCByZXR1cm4gLUVGQVVMVC4KLSAqLwot
I2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgc2l6ZSkgKHsJCQkJCVwKLQlfX2Noa191c2VyX3B0cihh
ZGRyKTsJCQkJCQlcCi0JbGlrZWx5KF9fYWNjZXNzX29rKCh1bnNpZ25lZCBsb25nIF9fZm9yY2Up
KGFkZHIpLCAoc2l6ZSkpKTsJXAotfSkKLQotLyoKLSAqIEVuc3VyZSB0aGF0IHRoZSByYW5nZSBb
YWRkciwgYWRkcitzaXplKSBpcyB3aXRoaW4gdGhlIHByb2Nlc3MncwotICogYWRkcmVzcyBzcGFj
ZQotICovCi1zdGF0aWMgaW5saW5lIGludCBfX2FjY2Vzc19vayh1bnNpZ25lZCBsb25nIGFkZHIs
IHVuc2lnbmVkIGxvbmcgc2l6ZSkKLXsKLQlyZXR1cm4gc2l6ZSA8PSBUQVNLX1NJWkUgJiYgYWRk
ciA8PSBUQVNLX1NJWkUgLSBzaXplOwotfQotCiAvKgogICogVGhlIGV4Y2VwdGlvbiB0YWJsZSBj
b25zaXN0cyBvZiBwYWlycyBvZiBhZGRyZXNzZXM6IHRoZSBmaXJzdCBpcyB0aGUKICAqIGFkZHJl
c3Mgb2YgYW4gaW5zdHJ1Y3Rpb24gdGhhdCBpcyBhbGxvd2VkIHRvIGZhdWx0LCBhbmQgdGhlIHNl
Y29uZCBpcwpkaWZmIC0tZ2l0IGEvYXJjaC9zMzkwL0tjb25maWcgYi9hcmNoL3MzOTAvS2NvbmZp
ZwppbmRleCBiZTlmMzlmZDA2ZGYuLmZiNDhhNjJhYTk4NSAxMDA2NDQKLS0tIGEvYXJjaC9zMzkw
L0tjb25maWcKKysrIGIvYXJjaC9zMzkwL0tjb25maWcKQEAgLTU1LDYgKzU1LDcgQEAgY29uZmln
IFMzOTAKIAkjIE5vdGU6IGtlZXAgdGhpcyBsaXN0IHNvcnRlZCBhbHBoYWJldGljYWxseQogCSMK
IAlpbXBseSBJTUFfU0VDVVJFX0FORF9PUl9UUlVTVEVEX0JPT1QKKwlzZWxlY3QgQUxURVJOQVRF
X1VTRVJfQUREUkVTU19TUEFDRQogCXNlbGVjdCBBUkNIXzMyQklUX1VTVEFUX0ZfVElOT0RFCiAJ
c2VsZWN0IEFSQ0hfQklORk1UX0VMRl9TVEFURQogCXNlbGVjdCBBUkNIX0VOQUJMRV9NRU1PUllf
SE9UUExVRyBpZiBTUEFSU0VNRU0KZGlmZiAtLWdpdCBhL2FyY2gvczM5MC9pbmNsdWRlL2FzbS91
YWNjZXNzLmggYi9hcmNoL3MzOTAvaW5jbHVkZS9hc20vdWFjY2Vzcy5oCmluZGV4IDI5MzMyZWRm
NDZmMC4uNWNiMjU4Y2Q5ZDI5IDEwMDY0NAotLS0gYS9hcmNoL3MzOTAvaW5jbHVkZS9hc20vdWFj
Y2Vzcy5oCisrKyBiL2FyY2gvczM5MC9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAgLTE3LDIyICsx
NywxMCBAQAogI2luY2x1ZGUgPGFzbS9jdGxfcmVnLmg+CiAjaW5jbHVkZSA8YXNtL2V4dGFibGUu
aD4KICNpbmNsdWRlIDxhc20vZmFjaWxpdHkuaD4KKyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9hY2Nl
c3Nfb2suaD4KIAogdm9pZCBkZWJ1Z191c2VyX2FzY2UoaW50IGV4aXQpOwogCi1zdGF0aWMgaW5s
aW5lIGludCBfX3JhbmdlX29rKHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBzaXpl
KQotewotCXJldHVybiAxOwotfQotCi0jZGVmaW5lIF9fYWNjZXNzX29rKGFkZHIsIHNpemUpCQkJ
CVwKLSh7CQkJCQkJCVwKLQlfX2Noa191c2VyX3B0cihhZGRyKTsJCQkJXAotCV9fcmFuZ2Vfb2so
KHVuc2lnbmVkIGxvbmcpKGFkZHIpLCAoc2l6ZSkpOwlcCi19KQotCi0jZGVmaW5lIGFjY2Vzc19v
ayhhZGRyLCBzaXplKSBfX2FjY2Vzc19vayhhZGRyLCBzaXplKQotCiB1bnNpZ25lZCBsb25nIF9f
bXVzdF9jaGVjawogcmF3X2NvcHlfZnJvbV91c2VyKHZvaWQgKnRvLCBjb25zdCB2b2lkIF9fdXNl
ciAqZnJvbSwgdW5zaWduZWQgbG9uZyBuKTsKIApkaWZmIC0tZ2l0IGEvYXJjaC9zaC9pbmNsdWRl
L2FzbS91YWNjZXNzLmggYi9hcmNoL3NoL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAppbmRleCA4ODY3
YmIwNGIwMGUuLmNjZDIxOWQ3NDg1MSAxMDA2NDQKLS0tIGEvYXJjaC9zaC9pbmNsdWRlL2FzbS91
YWNjZXNzLmgKKysrIGIvYXJjaC9zaC9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAgLTUsMjggKzUs
MTAgQEAKICNpbmNsdWRlIDxhc20vc2VnbWVudC5oPgogI2luY2x1ZGUgPGFzbS9leHRhYmxlLmg+
CiAKLSNkZWZpbmUgX19hZGRyX29rKGFkZHIpIFwKLQkoKHVuc2lnbmVkIGxvbmcgX19mb3JjZSko
YWRkcikgPCBjdXJyZW50X3RocmVhZF9pbmZvKCktPmFkZHJfbGltaXQuc2VnKQotCi0vKgotICog
X19hY2Nlc3Nfb2s6IENoZWNrIGlmIGFkZHJlc3Mgd2l0aCBzaXplIGlzIE9LIG9yIG5vdC4KLSAq
Ci0gKiBVaGh1aCwgdGhpcyBuZWVkcyAzMy1iaXQgYXJpdGhtZXRpYy4gV2UgaGF2ZSBhIGNhcnJ5
Li4KLSAqCi0gKiBzdW0gOj0gYWRkciArIHNpemU7ICBjYXJyeT8gLS0+IGZsYWcgPSB0cnVlOwot
ICogaWYgKHN1bSA+PSBhZGRyX2xpbWl0KSBmbGFnID0gdHJ1ZTsKLSAqLwotI2RlZmluZSBfX2Fj
Y2Vzc19vayhhZGRyLCBzaXplKQkoewkJCQlcCi0JdW5zaWduZWQgbG9uZyBfX2FvX2EgPSAoYWRk
ciksIF9fYW9fYiA9IChzaXplKTsJCVwKLQl1bnNpZ25lZCBsb25nIF9fYW9fZW5kID0gX19hb19h
ICsgX19hb19iIC0gISFfX2FvX2I7CVwKLQlfX2FvX2VuZCA+PSBfX2FvX2EgJiYgX19hZGRyX29r
KF9fYW9fZW5kKTsgfSkKLQotI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgc2l6ZSkJXAotCShfX2No
a191c2VyX3B0cihhZGRyKSwJCVwKLQkgX19hY2Nlc3Nfb2soKHVuc2lnbmVkIGxvbmcgX19mb3Jj
ZSkoYWRkciksIChzaXplKSkpCi0KICNkZWZpbmUgdXNlcl9hZGRyX21heCgpCShjdXJyZW50X3Ro
cmVhZF9pbmZvKCktPmFkZHJfbGltaXQuc2VnKQogCisjaW5jbHVkZSA8YXNtLWdlbmVyaWMvYWNj
ZXNzX29rLmg+CisKIC8qCiAgKiBVaCwgdGhlc2Ugc2hvdWxkIGJlY29tZSB0aGUgbWFpbiBzaW5n
bGUtdmFsdWUgdHJhbnNmZXIgcm91dGluZXMgLi4uCiAgKiBUaGV5IGF1dG9tYXRpY2FsbHkgdXNl
IHRoZSByaWdodCBzaXplIGlmIHdlIGp1c3QgaGF2ZSB0aGUgcmlnaHQKZGlmZiAtLWdpdCBhL2Fy
Y2gvc3BhcmMvS2NvbmZpZyBiL2FyY2gvc3BhcmMvS2NvbmZpZwppbmRleCAxY2FiMWIyODRmMWEu
LjlmNmY5YmNlNTI5MiAxMDA2NDQKLS0tIGEvYXJjaC9zcGFyYy9LY29uZmlnCisrKyBiL2FyY2gv
c3BhcmMvS2NvbmZpZwpAQCAtNjIsNiArNjIsNyBAQCBjb25maWcgU1BBUkMzMgogCiBjb25maWcg
U1BBUkM2NAogCWRlZl9ib29sIDY0QklUCisJc2VsZWN0IEFMVEVSTkFURV9VU0VSX0FERFJFU1Nf
U1BBQ0UKIAlzZWxlY3QgSEFWRV9GVU5DVElPTl9UUkFDRVIKIAlzZWxlY3QgSEFWRV9GVU5DVElP
Tl9HUkFQSF9UUkFDRVIKIAlzZWxlY3QgSEFWRV9LUkVUUFJPQkVTCmRpZmYgLS1naXQgYS9hcmNo
L3NwYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaCBiL2FyY2gvc3BhcmMvaW5jbHVkZS9hc20vdWFj
Y2Vzcy5oCmluZGV4IDM5MDA5NDIwMGZjNC4uZWU3NWY2OWUzZmNkIDEwMDY0NAotLS0gYS9hcmNo
L3NwYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAorKysgYi9hcmNoL3NwYXJjL2luY2x1ZGUvYXNt
L3VhY2Nlc3MuaApAQCAtMTAsOSArMTAsNiBAQAogI2luY2x1ZGUgPGFzbS91YWNjZXNzXzMyLmg+
CiAjZW5kaWYKIAotI2RlZmluZSB1c2VyX2FkZHJfbWF4KCkgXAotCSh1YWNjZXNzX2tlcm5lbCgp
ID8gfjBVTCA6IFRBU0tfU0laRSkKLQogbG9uZyBzdHJuY3B5X2Zyb21fdXNlcihjaGFyICpkZXN0
LCBjb25zdCBjaGFyIF9fdXNlciAqc3JjLCBsb25nIGNvdW50KTsKIAogI2VuZGlmCmRpZmYgLS1n
aXQgYS9hcmNoL3NwYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3NfMzIuaCBiL2FyY2gvc3BhcmMvaW5j
bHVkZS9hc20vdWFjY2Vzc18zMi5oCmluZGV4IDRhMTIzNDZiYjY5Yy4uMzY3NzQ3MTE2MjYwIDEw
MDY0NAotLS0gYS9hcmNoL3NwYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3NfMzIuaAorKysgYi9hcmNo
L3NwYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3NfMzIuaApAQCAtMjUsMTcgKzI1LDcgQEAKICNkZWZp
bmUgZ2V0X2ZzKCkJKGN1cnJlbnQtPnRocmVhZC5jdXJyZW50X2RzKQogI2RlZmluZSBzZXRfZnMo
dmFsKQkoKGN1cnJlbnQtPnRocmVhZC5jdXJyZW50X2RzKSA9ICh2YWwpKQogCi0jZGVmaW5lIHVh
Y2Nlc3Nfa2VybmVsKCkgKGdldF9mcygpLnNlZyA9PSBLRVJORUxfRFMuc2VnKQotCi0vKiBXZSBo
YXZlIHRoZXJlIGEgbmljZSBub3QtbWFwcGVkIHBhZ2UgYXQgUEFHRV9PRkZTRVQgLSBQQUdFX1NJ
WkUsIHNvIHRoYXQgdGhpcyB0ZXN0Ci0gKiBjYW4gYmUgZmFpcmx5IGxpZ2h0d2VpZ2h0LgotICog
Tm8gb25lIGNhbiByZWFkL3dyaXRlIGFueXRoaW5nIGZyb20gdXNlcmxhbmQgaW4gdGhlIGtlcm5l
bCBzcGFjZSBieSBzZXR0aW5nCi0gKiBsYXJnZSBzaXplIGFuZCBhZGRyZXNzIG5lYXIgdG8gUEFH
RV9PRkZTRVQgLSBhIGZhdWx0IHdpbGwgYnJlYWsgaGlzIGludGVudGlvbnMuCi0gKi8KLSNkZWZp
bmUgX191c2VyX29rKGFkZHIsIHNpemUpICh7ICh2b2lkKShzaXplKTsgKGFkZHIpIDwgU1RBQ0tf
VE9QOyB9KQotI2RlZmluZSBfX2tlcm5lbF9vayAodWFjY2Vzc19rZXJuZWwoKSkKLSNkZWZpbmUg
X19hY2Nlc3Nfb2soYWRkciwgc2l6ZSkgKF9fdXNlcl9vaygoYWRkcikgJiBnZXRfZnMoKS5zZWcs
IChzaXplKSkpCi0jZGVmaW5lIGFjY2Vzc19vayhhZGRyLCBzaXplKSBfX2FjY2Vzc19vaygodW5z
aWduZWQgbG9uZykoYWRkciksIHNpemUpCisjaW5jbHVkZSA8YXNtLWdlbmVyaWMvYWNjZXNzX29r
Lmg+CiAKIC8qIFVoLCB0aGVzZSBzaG91bGQgYmVjb21lIHRoZSBtYWluIHNpbmdsZS12YWx1ZSB0
cmFuc2ZlciByb3V0aW5lcy4uCiAgKiBUaGV5IGF1dG9tYXRpY2FsbHkgdXNlIHRoZSByaWdodCBz
aXplIGlmIHdlIGp1c3QgaGF2ZSB0aGUgcmlnaHQKQEAgLTQ3LDEzICszNywxMyBAQAogICogYW5k
IGhpZGUgYWxsIHRoZSB1Z2xpbmVzcyBmcm9tIHRoZSB1c2VyLgogICovCiAjZGVmaW5lIHB1dF91
c2VyKHgsIHB0cikgKHsgXAotCXVuc2lnbmVkIGxvbmcgX19wdV9hZGRyID0gKHVuc2lnbmVkIGxv
bmcpKHB0cik7IFwKKwl2b2lkIF9fdXNlciAqX19wdV9hZGRyID0gKHB0cik7IFwKIAlfX2Noa191
c2VyX3B0cihwdHIpOyBcCiAJX19wdXRfdXNlcl9jaGVjaygoX190eXBlb2ZfXygqKHB0cikpKSh4
KSwgX19wdV9hZGRyLCBzaXplb2YoKihwdHIpKSk7IFwKIH0pCiAKICNkZWZpbmUgZ2V0X3VzZXIo
eCwgcHRyKSAoeyBcCi0JdW5zaWduZWQgbG9uZyBfX2d1X2FkZHIgPSAodW5zaWduZWQgbG9uZyko
cHRyKTsgXAorCWNvbnN0IHZvaWQgX191c2VyICpfX2d1X2FkZHIgPSAocHRyKTsgXAogCV9fY2hr
X3VzZXJfcHRyKHB0cik7IFwKIAlfX2dldF91c2VyX2NoZWNrKCh4KSwgX19ndV9hZGRyLCBzaXpl
b2YoKihwdHIpKSwgX190eXBlb2ZfXygqKHB0cikpKTsgXAogfSkKQEAgLTIzMiw3ICsyMjIsNyBA
QCBzdGF0aWMgaW5saW5lIHVuc2lnbmVkIGxvbmcgX19jbGVhcl91c2VyKHZvaWQgX191c2VyICph
ZGRyLCB1bnNpZ25lZCBsb25nIHNpemUpCiAKIHN0YXRpYyBpbmxpbmUgdW5zaWduZWQgbG9uZyBj
bGVhcl91c2VyKHZvaWQgX191c2VyICphZGRyLCB1bnNpZ25lZCBsb25nIG4pCiB7Ci0JaWYgKG4g
JiYgX19hY2Nlc3Nfb2soKHVuc2lnbmVkIGxvbmcpIGFkZHIsIG4pKQorCWlmIChuICYmIF9fYWNj
ZXNzX29rKGFkZHIsIG4pKQogCQlyZXR1cm4gX19jbGVhcl91c2VyKGFkZHIsIG4pOwogCWVsc2UK
IAkJcmV0dXJuIG47CmRpZmYgLS1naXQgYS9hcmNoL3NwYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3Nf
NjQuaCBiL2FyY2gvc3BhcmMvaW5jbHVkZS9hc20vdWFjY2Vzc182NC5oCmluZGV4IDVjMTJmYjQ2
YmM2MS4uNTliOWE1NDVkZjIzIDEwMDY0NAotLS0gYS9hcmNoL3NwYXJjL2luY2x1ZGUvYXNtL3Vh
Y2Nlc3NfNjQuaAorKysgYi9hcmNoL3NwYXJjL2luY2x1ZGUvYXNtL3VhY2Nlc3NfNjQuaApAQCAt
MzEsNyArMzEsNyBAQAogCiAjZGVmaW5lIGdldF9mcygpICgobW1fc2VnbWVudF90KXsoY3VycmVu
dF90aHJlYWRfaW5mbygpLT5jdXJyZW50X2RzKX0pCiAKLSNkZWZpbmUgdWFjY2Vzc19rZXJuZWwo
KSAoZ2V0X2ZzKCkuc2VnID09IEtFUk5FTF9EUy5zZWcpCisjaW5jbHVkZSA8YXNtLWdlbmVyaWMv
YWNjZXNzX29rLmg+CiAKICNkZWZpbmUgc2V0X2ZzKHZhbCkJCQkJCQkJCVwKIGRvIHsJCQkJCQkJ
CQkJXApAQCAtNjEsMTYgKzYxLDYgQEAgc3RhdGljIGlubGluZSBib29sIF9fY2hrX3JhbmdlX25v
dF9vayh1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSwgdW4KIAlfX2Noa19y
YW5nZV9ub3Rfb2soKHVuc2lnbmVkIGxvbmcgX19mb3JjZSkoYWRkciksIHNpemUsIGxpbWl0KTsg
XAogfSkKIAotc3RhdGljIGlubGluZSBpbnQgX19hY2Nlc3Nfb2soY29uc3Qgdm9pZCBfX3VzZXIg
KiBhZGRyLCB1bnNpZ25lZCBsb25nIHNpemUpCi17Ci0JcmV0dXJuIDE7Ci19Ci0KLXN0YXRpYyBp
bmxpbmUgaW50IGFjY2Vzc19vayhjb25zdCB2b2lkIF9fdXNlciAqIGFkZHIsIHVuc2lnbmVkIGxv
bmcgc2l6ZSkKLXsKLQlyZXR1cm4gMTsKLX0KLQogdm9pZCBfX3JldGxfZWZhdWx0KHZvaWQpOwog
CiAvKiBVaCwgdGhlc2Ugc2hvdWxkIGJlY29tZSB0aGUgbWFpbiBzaW5nbGUtdmFsdWUgdHJhbnNm
ZXIgcm91dGluZXMuLgpkaWZmIC0tZ2l0IGEvYXJjaC91bS9pbmNsdWRlL2FzbS91YWNjZXNzLmgg
Yi9hcmNoL3VtL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAppbmRleCAxZWNmYzk2YmNjNTAuLjdkOWQ2
MGU0MWU0ZSAxMDA2NDQKLS0tIGEvYXJjaC91bS9pbmNsdWRlL2FzbS91YWNjZXNzLmgKKysrIGIv
YXJjaC91bS9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAgLTI1LDcgKzI1LDcgQEAKIGV4dGVybiB1
bnNpZ25lZCBsb25nIHJhd19jb3B5X2Zyb21fdXNlcih2b2lkICp0bywgY29uc3Qgdm9pZCBfX3Vz
ZXIgKmZyb20sIHVuc2lnbmVkIGxvbmcgbik7CiBleHRlcm4gdW5zaWduZWQgbG9uZyByYXdfY29w
eV90b191c2VyKHZvaWQgX191c2VyICp0bywgY29uc3Qgdm9pZCAqZnJvbSwgdW5zaWduZWQgbG9u
ZyBuKTsKIGV4dGVybiB1bnNpZ25lZCBsb25nIF9fY2xlYXJfdXNlcih2b2lkIF9fdXNlciAqbWVt
LCB1bnNpZ25lZCBsb25nIGxlbik7Ci1zdGF0aWMgaW5saW5lIGludCBfX2FjY2Vzc19vayh1bnNp
Z25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSk7CitzdGF0aWMgaW5saW5lIGludCBf
X2FjY2Vzc19vayhjb25zdCB2b2lkIF9fdXNlciAqcHRyLCB1bnNpZ25lZCBsb25nIHNpemUpOwog
CiAvKiBUZWFjaCBhc20tZ2VuZXJpYy91YWNjZXNzLmggdGhhdCB3ZSBoYXZlIEMgZnVuY3Rpb25z
IGZvciB0aGVzZS4gKi8KICNkZWZpbmUgX19hY2Nlc3Nfb2sgX19hY2Nlc3Nfb2sKQEAgLTM2LDgg
KzM2LDkgQEAgc3RhdGljIGlubGluZSBpbnQgX19hY2Nlc3Nfb2sodW5zaWduZWQgbG9uZyBhZGRy
LCB1bnNpZ25lZCBsb25nIHNpemUpOwogCiAjaW5jbHVkZSA8YXNtLWdlbmVyaWMvdWFjY2Vzcy5o
PgogCi1zdGF0aWMgaW5saW5lIGludCBfX2FjY2Vzc19vayh1bnNpZ25lZCBsb25nIGFkZHIsIHVu
c2lnbmVkIGxvbmcgc2l6ZSkKK3N0YXRpYyBpbmxpbmUgaW50IF9fYWNjZXNzX29rKGNvbnN0IHZv
aWQgX191c2VyICpwdHIsIHVuc2lnbmVkIGxvbmcgc2l6ZSkKIHsKKwl1bnNpZ25lZCBsb25nIGFk
ZHIgPSAodW5zaWduZWQgbG9uZylwdHI7CiAJcmV0dXJuIF9fYWRkcl9yYW5nZV9ub3dyYXAoYWRk
ciwgc2l6ZSkgJiYKIAkJKF9fdW5kZXJfdGFza19zaXplKGFkZHIsIHNpemUpIHx8CiAJCSBfX2Fj
Y2Vzc19va192c3lzY2FsbChhZGRyLCBzaXplKSk7CmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9pbmNs
dWRlL2FzbS91YWNjZXNzLmggYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS91YWNjZXNzLmgKaW5kZXgg
MjAxZWZjZWM2NmI3Li5mNzhlMmIzNTAxYTEgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2luY2x1ZGUv
YXNtL3VhY2Nlc3MuaAorKysgYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAgLTEy
LDE4ICsxMiw2IEBACiAjaW5jbHVkZSA8YXNtL3NtYXAuaD4KICNpbmNsdWRlIDxhc20vZXh0YWJs
ZS5oPgogCi0vKgotICogVGVzdCB3aGV0aGVyIGEgYmxvY2sgb2YgbWVtb3J5IGlzIGEgdmFsaWQg
dXNlciBzcGFjZSBhZGRyZXNzLgotICogUmV0dXJucyAwIGlmIHRoZSByYW5nZSBpcyB2YWxpZCwg
bm9uemVybyBvdGhlcndpc2UuCi0gKi8KLXN0YXRpYyBpbmxpbmUgYm9vbCBfX2FjY2Vzc19vayh2
b2lkIF9fdXNlciAqcHRyLCB1bnNpZ25lZCBsb25nIHNpemUpCi17Ci0JdW5zaWduZWQgbG9uZyBs
aW1pdCA9IFRBU0tfU0laRV9NQVg7Ci0JdW5zaWduZWQgbG9uZyBhZGRyID0gcHRyOwotCi0JcmV0
dXJuIChzaXplIDw9IGxpbWl0KSAmJiAoYWRkciA8PSAobGltaXQgLSBzaXplKSk7Ci19Ci0KICNp
ZmRlZiBDT05GSUdfREVCVUdfQVRPTUlDX1NMRUVQCiBzdGF0aWMgaW5saW5lIGJvb2wgcGFnZWZh
dWx0X2Rpc2FibGVkKHZvaWQpOwogIyBkZWZpbmUgV0FSTl9PTl9JTl9JUlEoKQlcCkBAIC01NSw2
ICs0Myw4IEBAIHN0YXRpYyBpbmxpbmUgYm9vbCBwYWdlZmF1bHRfZGlzYWJsZWQodm9pZCk7CiAJ
bGlrZWx5KF9fYWNjZXNzX29rKGFkZHIsIHNpemUpKTsJCQkJXAogfSkKIAorI2luY2x1ZGUgPGFz
bS1nZW5lcmljL2FjY2Vzc19vay5oPgorCiBleHRlcm4gaW50IF9fZ2V0X3VzZXJfMSh2b2lkKTsK
IGV4dGVybiBpbnQgX19nZXRfdXNlcl8yKHZvaWQpOwogZXh0ZXJuIGludCBfX2dldF91c2VyXzQo
dm9pZCk7CmRpZmYgLS1naXQgYS9hcmNoL3h0ZW5zYS9pbmNsdWRlL2FzbS91YWNjZXNzLmggYi9h
cmNoL3h0ZW5zYS9pbmNsdWRlL2FzbS91YWNjZXNzLmgKaW5kZXggNzViZDhmYmY1MmJhLi4wZWRk
OWU0YjIzZDAgMTAwNjQ0Ci0tLSBhL2FyY2gveHRlbnNhL2luY2x1ZGUvYXNtL3VhY2Nlc3MuaAor
KysgYi9hcmNoL3h0ZW5zYS9pbmNsdWRlL2FzbS91YWNjZXNzLmgKQEAgLTM1LDE1ICszNSw3IEBA
CiAjZGVmaW5lIGdldF9mcygpCShjdXJyZW50LT50aHJlYWQuY3VycmVudF9kcykKICNkZWZpbmUg
c2V0X2ZzKHZhbCkJKGN1cnJlbnQtPnRocmVhZC5jdXJyZW50X2RzID0gKHZhbCkpCiAKLSNkZWZp
bmUgdWFjY2Vzc19rZXJuZWwoKSAoZ2V0X2ZzKCkuc2VnID09IEtFUk5FTF9EUy5zZWcpCi0KLSNk
ZWZpbmUgX19rZXJuZWxfb2sgKHVhY2Nlc3Nfa2VybmVsKCkpCi0jZGVmaW5lIF9fdXNlcl9vayhh
ZGRyLCBzaXplKSBcCi0JCSgoKHNpemUpIDw9IFRBU0tfU0laRSkmJigoYWRkcikgPD0gVEFTS19T
SVpFLShzaXplKSkpCi0jZGVmaW5lIF9fYWNjZXNzX29rKGFkZHIsIHNpemUpIChfX2tlcm5lbF9v
ayB8fCBfX3VzZXJfb2soKGFkZHIpLCAoc2l6ZSkpKQotI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwg
c2l6ZSkgX19hY2Nlc3Nfb2soKHVuc2lnbmVkIGxvbmcpKGFkZHIpLCAoc2l6ZSkpCi0KLSNkZWZp
bmUgdXNlcl9hZGRyX21heCgpICh1YWNjZXNzX2tlcm5lbCgpID8gfjBVTCA6IFRBU0tfU0laRSkK
KyNpbmNsdWRlIDxhc20tZ2VuZXJpYy9hY2Nlc3Nfb2suaD4KIAogLyoKICAqIFRoZXNlIGFyZSB0
aGUgbWFpbiBzaW5nbGUtdmFsdWUgdHJhbnNmZXIgcm91dGluZXMuICBUaGV5CmRpZmYgLS1naXQg
YS9pbmNsdWRlL2FzbS1nZW5lcmljL2FjY2Vzc19vay5oIGIvaW5jbHVkZS9hc20tZ2VuZXJpYy9h
Y2Nlc3Nfb2suaApuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwMDAuLjFhYWQ4
OTY0ZDJlZAotLS0gL2Rldi9udWxsCisrKyBiL2luY2x1ZGUvYXNtLWdlbmVyaWMvYWNjZXNzX29r
LmgKQEAgLTAsMCArMSw1OSBAQAorLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAg
Ki8KKyNpZm5kZWYgX19BU01fR0VORVJJQ19BQ0NFU1NfT0tfSF9fCisjZGVmaW5lIF9fQVNNX0dF
TkVSSUNfQUNDRVNTX09LX0hfXworCisvKgorICogQ2hlY2tpbmcgd2hldGhlciBhIHBvaW50ZXIg
aXMgdmFsaWQgZm9yIHVzZXIgc3BhY2UgYWNjZXNzLgorICogVGhlc2UgZGVmaW5pdGlvbnMgd29y
ayBvbiBtb3N0IGFyY2hpdGVjdHVyZXMsIGJ1dCBvdmVycmlkZXMgY2FuCisgKiBiZSB1c2VkIHdo
ZXJlIG5lY2Vzc2FyeS4KKyAqLworCisvKgorICogYXJjaGl0ZWN0dXJlcyB3aXRoIGNvbXBhdCB0
YXNrcyBoYXZlIGEgdmFyaWFibGUgVEFTS19TSVpFIGFuZCBzaG91bGQKKyAqIG92ZXJyaWRlIHRo
aXMgdG8gYSBjb25zdGFudC4KKyAqLworI2lmbmRlZiBUQVNLX1NJWkVfTUFYCisjZGVmaW5lIFRB
U0tfU0laRV9NQVgJCQlUQVNLX1NJWkUKKyNlbmRpZgorCisjaWZuZGVmIHVhY2Nlc3Nfa2VybmVs
CisjaWZkZWYgQ09ORklHX1NFVF9GUworI2RlZmluZSB1YWNjZXNzX2tlcm5lbCgpCQkoZ2V0X2Zz
KCkuc2VnID09IEtFUk5FTF9EUy5zZWcpCisjZWxzZQorI2RlZmluZSB1YWNjZXNzX2tlcm5lbCgp
CQkoMCkKKyNlbmRpZgorI2VuZGlmCisKKyNpZm5kZWYgdXNlcl9hZGRyX21heAorI2RlZmluZSB1
c2VyX2FkZHJfbWF4KCkJCQkodWFjY2Vzc19rZXJuZWwoKSA/IH4wVUwgOiBUQVNLX1NJWkVfTUFY
KQorI2VuZGlmCisKKyNpZm5kZWYgX19hY2Nlc3Nfb2sKKy8qCisgKiAnc2l6ZScgaXMgYSBjb21w
aWxlLXRpbWUgY29uc3RhbnQgZm9yIG1vc3QgY2FsbGVycywgc28gb3B0aW1pemUgZm9yCisgKiB0
aGlzIGNhc2UgdG8gdHVybiB0aGUgY2hlY2sgaW50byBhIHNpbmdsZSBjb21wYXJpc29uIGFnYWlu
c3QgYSBjb25zdGFudAorICogbGltaXQgYW5kIGNhdGNoIGFsbCBwb3NzaWJsZSBvdmVyZmxvd3Mu
CisgKiBPbiBhcmNoaXRlY3R1cmVzIHdpdGggc2VwYXJhdGUgdXNlciBhZGRyZXNzIHNwYWNlICht
NjhrLCBzMzkwLCBwYXJpc2MsCisgKiBzcGFyYzY0KSBvciB0aG9zZSB3aXRob3V0IGFuIE1NVSwg
dGhpcyBzaG91bGQgYWx3YXlzIHJldHVybiB0cnVlLgorICoKKyAqIFRoaXMgdmVyc2lvbiB3YXMg
b3JpZ2luYWxseSBjb250cmlidXRlZCBieSBKb25hcyBCb25uIGZvciB0aGUKKyAqIE9wZW5SSVND
IGFyY2hpdGVjdHVyZSwgYW5kIHdhcyBmb3VuZCB0byBiZSB0aGUgbW9zdCBlZmZpY2llbnQKKyAq
IGZvciBjb25zdGFudCAnc2l6ZScgYW5kICdsaW1pdCcgdmFsdWVzLgorICovCitzdGF0aWMgaW5s
aW5lIGludCBfX2FjY2Vzc19vayhjb25zdCB2b2lkIF9fdXNlciAqcHRyLCB1bnNpZ25lZCBsb25n
IHNpemUpCit7CisJdW5zaWduZWQgbG9uZyBsaW1pdCA9IHVzZXJfYWRkcl9tYXgoKTsKKwl1bnNp
Z25lZCBsb25nIGFkZHIgPSAodW5zaWduZWQgbG9uZylwdHI7CisKKwlpZiAoSVNfRU5BQkxFRChD
T05GSUdfQUxURVJOQVRFX1VTRVJfQUREUkVTU19TUEFDRSkpCisJCXJldHVybiB0cnVlOworCisJ
cmV0dXJuIChzaXplIDw9IGxpbWl0KSAmJiAoYWRkciA8PSAobGltaXQgLSBzaXplKSk7Cit9Cisj
ZW5kaWYKKworI2lmbmRlZiBhY2Nlc3Nfb2sKKyNkZWZpbmUgYWNjZXNzX29rKGFkZHIsIHNpemUp
IGxpa2VseShfX2FjY2Vzc19vayhhZGRyLCBzaXplKSkKKyNlbmRpZgorCisjZW5kaWYKZGlmZiAt
LWdpdCBhL2luY2x1ZGUvYXNtLWdlbmVyaWMvdWFjY2Vzcy5oIGIvaW5jbHVkZS9hc20tZ2VuZXJp
Yy91YWNjZXNzLmgKaW5kZXggMDg3MGZhMTFhN2M1Li5lYmM2ODVkYzhkNzQgMTAwNjQ0Ci0tLSBh
L2luY2x1ZGUvYXNtLWdlbmVyaWMvdWFjY2Vzcy5oCisrKyBiL2luY2x1ZGUvYXNtLWdlbmVyaWMv
dWFjY2Vzcy5oCkBAIC0xMTQsMjggKzExNCw5IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBzZXRfZnMo
bW1fc2VnbWVudF90IGZzKQogfQogI2VuZGlmCiAKLSNpZm5kZWYgdWFjY2Vzc19rZXJuZWwKLSNk
ZWZpbmUgdWFjY2Vzc19rZXJuZWwoKSAoZ2V0X2ZzKCkuc2VnID09IEtFUk5FTF9EUy5zZWcpCi0j
ZW5kaWYKLQotI2lmbmRlZiB1c2VyX2FkZHJfbWF4Ci0jZGVmaW5lIHVzZXJfYWRkcl9tYXgoKSAo
dWFjY2Vzc19rZXJuZWwoKSA/IH4wVUwgOiBUQVNLX1NJWkUpCi0jZW5kaWYKLQogI2VuZGlmIC8q
IENPTkZJR19TRVRfRlMgKi8KIAotI2RlZmluZSBhY2Nlc3Nfb2soYWRkciwgc2l6ZSkgX19hY2Nl
c3Nfb2soKHVuc2lnbmVkIGxvbmcpKGFkZHIpLChzaXplKSkKLQotLyoKLSAqIFRoZSBhcmNoaXRl
Y3R1cmUgc2hvdWxkIHJlYWxseSBvdmVycmlkZSB0aGlzIGlmIHBvc3NpYmxlLCBhdCBsZWFzdAot
ICogZG9pbmcgYSBjaGVjayBvbiB0aGUgZ2V0X2ZzKCkKLSAqLwotI2lmbmRlZiBfX2FjY2Vzc19v
awotc3RhdGljIGlubGluZSBpbnQgX19hY2Nlc3Nfb2sodW5zaWduZWQgbG9uZyBhZGRyLCB1bnNp
Z25lZCBsb25nIHNpemUpCi17Ci0JcmV0dXJuIDE7Ci19Ci0jZW5kaWYKKyNpbmNsdWRlIDxhc20t
Z2VuZXJpYy9hY2Nlc3Nfb2suaD4KIAogLyoKICAqIFRoZXNlIGFyZSB0aGUgbWFpbiBzaW5nbGUt
dmFsdWUgdHJhbnNmZXIgcm91dGluZXMuICBUaGV5IGF1dG9tYXRpY2FsbHkKZGlmZiAtLWdpdCBh
L2luY2x1ZGUvbGludXgvdWFjY2Vzcy5oIGIvaW5jbHVkZS9saW51eC91YWNjZXNzLmgKaW5kZXgg
NjdlOWJjOTRkYzQwLi4yYzMxNjY3ZTYyZTAgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgvdWFj
Y2Vzcy5oCisrKyBiL2luY2x1ZGUvbGludXgvdWFjY2Vzcy5oCkBAIC0zMywxMyArMzMsNiBAQCB0
eXBlZGVmIHN0cnVjdCB7CiAJLyogZW1wdHkgZHVtbXkgKi8KIH0gbW1fc2VnbWVudF90OwogCi0j
aWZuZGVmIFRBU0tfU0laRV9NQVgKLSNkZWZpbmUgVEFTS19TSVpFX01BWAkJCVRBU0tfU0laRQot
I2VuZGlmCi0KLSNkZWZpbmUgdWFjY2Vzc19rZXJuZWwoKQkJKGZhbHNlKQotI2RlZmluZSB1c2Vy
X2FkZHJfbWF4KCkJCQkoVEFTS19TSVpFX01BWCkKLQogc3RhdGljIGlubGluZSBtbV9zZWdtZW50
X3QgZm9yY2VfdWFjY2Vzc19iZWdpbih2b2lkKQogewogCXJldHVybiAobW1fc2VnbWVudF90KSB7
IH07Ci0tIAoyLjI5LjIKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fCk9wZW5SSVNDIG1haWxpbmcgbGlzdApPcGVuUklTQ0BsaXN0cy5saWJyZWNvcmVzLm9y
ZwpodHRwczovL2xpc3RzLmxpYnJlY29yZXMub3JnL2xpc3RpbmZvL29wZW5yaXNjCg==
