Return-Path: <openrisc-bounces@lists.librecores.org>
X-Original-To: lists+openrisc@lfdr.de
Delivered-To: lists+openrisc@lfdr.de
Received: from mail.librecores.org (lists.librecores.org [88.198.125.70])
	by mail.lfdr.de (Postfix) with ESMTP id 5EF7E1C05C1
	for <lists+openrisc@lfdr.de>; Thu, 30 Apr 2020 21:09:31 +0200 (CEST)
Received: from [172.31.1.100] (localhost.localdomain [127.0.0.1])
	by mail.librecores.org (Postfix) with ESMTP id 2406820305;
	Thu, 30 Apr 2020 21:09:31 +0200 (CEST)
Received: from mail.kernel.org (mail.kernel.org [198.145.29.99])
 by mail.librecores.org (Postfix) with ESMTPS id 85B87209FC
 for <openrisc@lists.librecores.org>; Wed, 29 Apr 2020 14:12:49 +0200 (CEST)
Received: from aquarius.haifa.ibm.com (nesher1.haifa.il.ibm.com [195.110.40.7])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 by mail.kernel.org (Postfix) with ESMTPSA id 928EF2087E;
 Wed, 29 Apr 2020 12:12:34 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
 s=default; t=1588162368;
 bh=h6D443mAoYC3BUPkXAn9+thDFmMOVQYixW+6lmj1Ba4=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=iedayUjV6jBxyuFY4aYpPV9s8EJaV3A4O58izklP5K+ueSR/fA+gpuDE7IQqXfxd1
 JuBAeI6UamdavkJnpyuz7gYe6oEku6NenSVV8jq3NatCsUwAvnEzLO0bxmGfMUFFjh
 OPE443tLva48hWJ+zi2SUwoXqv9eqNOyPzYMhezw=
From: Mike Rapoport <rppt@kernel.org>
To: linux-kernel@vger.kernel.org
Date: Wed, 29 Apr 2020 15:11:09 +0300
Message-Id: <20200429121126.17989-4-rppt@kernel.org>
X-Mailer: git-send-email 2.26.1
In-Reply-To: <20200429121126.17989-1-rppt@kernel.org>
References: <20200429121126.17989-1-rppt@kernel.org>
MIME-Version: 1.0
X-Mailman-Approved-At: Thu, 30 Apr 2020 21:09:13 +0200
Subject: [OpenRISC] [PATCH v2 03/20] mm: remove
 CONFIG_HAVE_MEMBLOCK_NODE_MAP option
X-BeenThere: openrisc@lists.librecores.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: Discussion around the OpenRISC processor
 <openrisc.lists.librecores.org>
List-Unsubscribe: <https://lists.librecores.org/options/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=unsubscribe>
List-Archive: <http://lists.librecores.org/pipermail/openrisc/>
List-Post: <mailto:openrisc@lists.librecores.org>
List-Help: <mailto:openrisc-request@lists.librecores.org?subject=help>
List-Subscribe: <https://lists.librecores.org/listinfo/openrisc>,
 <mailto:openrisc-request@lists.librecores.org?subject=subscribe>
Cc: Rich Felker <dalias@libc.org>, linux-ia64@vger.kernel.org,
 linux-doc@vger.kernel.org, Catalin Marinas <catalin.marinas@arm.com>,
 Heiko Carstens <heiko.carstens@de.ibm.com>, Michal Hocko <mhocko@kernel.org>,
 "James E.J. Bottomley" <James.Bottomley@HansenPartnership.com>,
 Max Filippov <jcmvbkbc@gmail.com>, Guo Ren <guoren@kernel.org>,
 linux-csky@vger.kernel.org, linux-parisc@vger.kernel.org,
 sparclinux@vger.kernel.org, linux-hexagon@vger.kernel.org,
 linux-riscv@lists.infradead.org, Mike Rapoport <rppt@linux.ibm.com>,
 Greg Ungerer <gerg@linux-m68k.org>, linux-arch@vger.kernel.org,
 linux-s390@vger.kernel.org, linux-c6x-dev@linux-c6x.org,
 Baoquan He <bhe@redhat.com>, Jonathan Corbet <corbet@lwn.net>,
 linux-sh@vger.kernel.org, Michael Ellerman <mpe@ellerman.id.au>,
 Helge Deller <deller@gmx.de>, x86@kernel.org,
 Russell King <linux@armlinux.org.uk>, Ley Foon Tan <ley.foon.tan@intel.com>,
 Yoshinori Sato <ysato@users.sourceforge.jp>,
 linux-arm-kernel@lists.infradead.org, Mark Salter <msalter@redhat.com>,
 Matt Turner <mattst88@gmail.com>, linux-snps-arc@lists.infradead.org,
 uclinux-h8-devel@lists.sourceforge.jp, linux-xtensa@linux-xtensa.org,
 linux-alpha@vger.kernel.org, linux-um@lists.infradead.org,
 linux-m68k@lists.linux-m68k.org, Tony Luck <tony.luck@intel.com>,
 Qian Cai <cai@lca.pw>, Greentime Hu <green.hu@gmail.com>,
 Paul Walmsley <paul.walmsley@sifive.com>, Guan Xuetao <gxt@pku.edu.cn>,
 Hoan Tran <Hoan@os.amperecomputing.com>, Michal Simek <monstr@monstr.eu>,
 Thomas Bogendoerfer <tsbogend@alpha.franken.de>,
 Brian Cain <bcain@codeaurora.org>, Nick Hu <nickhu@andestech.com>,
 linux-mm@kvack.org, Vineet Gupta <vgupta@synopsys.com>,
 linux-mips@vger.kernel.org, openrisc@lists.librecores.org,
 Richard Weinberger <richard@nod.at>, Andrew Morton <akpm@linux-foundation.org>,
 linuxppc-dev@lists.ozlabs.org, "David S. Miller" <davem@davemloft.net>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: openrisc-bounces@lists.librecores.org
Sender: "OpenRISC" <openrisc-bounces@lists.librecores.org>

RnJvbTogTWlrZSBSYXBvcG9ydCA8cnBwdEBsaW51eC5pYm0uY29tPgoKVGhlIENPTkZJR19IQVZF
X01FTUJMT0NLX05PREVfTUFQIGlzIHVzZWQgdG8gZGlmZmVyZW50aWF0ZSBpbml0aWFsaXphdGlv
bgpvZiBub2RlcyBhbmQgem9uZXMgc3RydWN0dXJlcyBiZXR3ZWVuIHRoZSBzeXN0ZW1zIHRoYXQg
aGF2ZSByZWdpb24gdG8gbm9kZQptYXBwaW5nIGluIG1lbWJsb2NrIGFuZCB0aG9zZSB0aGF0IGRv
bid0LgoKQ3VycmVudGx5IGFsbCB0aGUgTlVNQSBhcmNoaXRlY3R1cmVzIGVuYWJsZSB0aGlzIG9w
dGlvbiBhbmQgZm9yIHRoZQpub24tTlVNQSBzeXN0ZW1zIHdlIGNhbiBwcmVzdW1lIHRoYXQgYWxs
IHRoZSBtZW1vcnkgYmVsb25ncyB0byBub2RlIDAgYW5kCnRoZXJlZm9yZSB0aGUgY29tcGlsZSB0
aW1lIGNvbmZpZ3VyYXRpb24gb3B0aW9uIGlzIG5vdCByZXF1aXJlZC4KClRoZSByZW1haW5pbmcg
ZmV3IGFyY2hpdGVjdHVyZXMgdGhhdCB1c2UgRElTQ09OVElHTUVNIHdpdGhvdXQgTlVNQSBhcmUK
ZWFzaWx5IHVwZGF0ZWQgdG8gdXNlIG1lbWJsb2NrX2FkZF9ub2RlKCkgaW5zdGVhZCBvZiBtZW1i
bG9ja19hZGQoKSBhbmQKdGh1cyBoYXZlIHByb3BlciBjb3JyZXNwb25kZW5jZSBvZiBtZW1ibG9j
ayByZWdpb25zIHRvIE5VTUEgbm9kZXMuCgpTdGlsbCwgZnJlZV9hcmVhX2luaXRfbm9kZSgpIG11
c3QgaGF2ZSBhIGJhY2t3YXJkIGNvbXBhdGlibGUgdmVyc2lvbgpiZWNhdXNlIGl0cyBzZW1hbnRp
Y3Mgd2l0aCBhbmQgd2l0aG91dCBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUCBpcwpkaWZm
ZXJlbnQuIE9uY2UgYWxsIHRoZSBhcmNoaXRlY3R1cmVzIHdpbGwgdXNlIHRoZSBuZXcgc2VtYW50
aWNzLCB0aGUKZW50aXJlIGNvbXBhdGliaWxpdHkgbGF5ZXIgY2FuIGJlIGRyb3BwZWQuCgpUbyBh
dm9pZCBhZGRpdGlvbiBvZiBleHRyYSBydW4gdGltZSBtZW1vcnkgdG8gc3RvcmUgbm9kZSBpZCBm
b3IKYXJjaGl0ZWN0dXJlcyB0aGF0IGtlZXAgbWVtYmxvY2sgYnV0IGhhdmUgb25seSBhIHNpbmds
ZSBub2RlLCB0aGUgbm9kZSBpZApmaWVsZCBvZiB0aGUgbWVtYmxvY2tfcmVnaW9uIGlzIGd1YXJk
ZWQgYnkgQ09ORklHX05FRURfTVVMVElQTEVfTk9ERVMgYW5kCnRoZSBjb3JyZXNwb25kaW5nIGFj
Y2Vzc29ycyBwcmVzdW1lIHRoYXQgaW4gdGhvc2UgY2FzZXMgaXQgaXMgYWx3YXlzIDAuCgpTaWdu
ZWQtb2ZmLWJ5OiBNaWtlIFJhcG9wb3J0IDxycHB0QGxpbnV4LmlibS5jb20+Ci0tLQogLi4uL3Zt
L251bWEtbWVtYmxvY2svYXJjaC1zdXBwb3J0LnR4dCAgICAgICAgIHwgIDM0IC0tLS0tLQogYXJj
aC9hbHBoYS9tbS9udW1hLmMgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICA0ICstCiBhcmNo
L2FybTY0L0tjb25maWcgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIDEgLQogYXJjaC9p
YTY0L0tjb25maWcgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAxIC0KIGFyY2gvbTY4
ay9tbS9tb3Rvcm9sYS5jICAgICAgICAgICAgICAgICAgICAgICB8ICAgNCArLQogYXJjaC9taWNy
b2JsYXplL0tjb25maWcgICAgICAgICAgICAgICAgICAgICAgIHwgICAxIC0KIGFyY2gvbWlwcy9L
Y29uZmlnICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgMSAtCiBhcmNoL3Bvd2VycGMv
S2NvbmZpZyAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIDEgLQogYXJjaC9yaXNjdi9LY29u
ZmlnICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAxIC0KIGFyY2gvczM5MC9LY29uZmln
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgMSAtCiBhcmNoL3NoL0tjb25maWcgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIDEgLQogYXJjaC9zcGFyYy9LY29uZmlnICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAxIC0KIGFyY2gveDg2L0tjb25maWcgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICB8ICAgMSAtCiBpbmNsdWRlL2xpbnV4L21lbWJsb2NrLmgg
ICAgICAgICAgICAgICAgICAgICAgfCAgIDggKy0KIGluY2x1ZGUvbGludXgvbW0uaCAgICAgICAg
ICAgICAgICAgICAgICAgICAgICB8ICAxMiArLQogaW5jbHVkZS9saW51eC9tbXpvbmUuaCAgICAg
ICAgICAgICAgICAgICAgICAgIHwgICAyICstCiBtbS9LY29uZmlnICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgfCAgIDMgLQogbW0vbWVtYmxvY2suYyAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIHwgIDExICstCiBtbS9tZW1vcnlfaG90cGx1Zy5jICAgICAgICAgICAg
ICAgICAgICAgICAgICAgfCAgIDQgLQogbW0vcGFnZV9hbGxvYy5jICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIHwgMTAzICsrKysrKysrKystLS0tLS0tLQogMjAgZmlsZXMgY2hhbmdlZCwg
NzQgaW5zZXJ0aW9ucygrKSwgMTIxIGRlbGV0aW9ucygtKQogZGVsZXRlIG1vZGUgMTAwNjQ0IERv
Y3VtZW50YXRpb24vZmVhdHVyZXMvdm0vbnVtYS1tZW1ibG9jay9hcmNoLXN1cHBvcnQudHh0Cgpk
aWZmIC0tZ2l0IGEvRG9jdW1lbnRhdGlvbi9mZWF0dXJlcy92bS9udW1hLW1lbWJsb2NrL2FyY2gt
c3VwcG9ydC50eHQgYi9Eb2N1bWVudGF0aW9uL2ZlYXR1cmVzL3ZtL251bWEtbWVtYmxvY2svYXJj
aC1zdXBwb3J0LnR4dApkZWxldGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMzAwNGJlYjBmZDcx
Li4wMDAwMDAwMDAwMDAKLS0tIGEvRG9jdW1lbnRhdGlvbi9mZWF0dXJlcy92bS9udW1hLW1lbWJs
b2NrL2FyY2gtc3VwcG9ydC50eHQKKysrIC9kZXYvbnVsbApAQCAtMSwzNCArMCwwIEBACi0jCi0j
IEZlYXR1cmUgbmFtZTogICAgICAgICAgbnVtYS1tZW1ibG9jawotIyAgICAgICAgIEtjb25maWc6
ICAgICAgIEhBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKLSMgICAgICAgICBkZXNjcmlwdGlvbjogICBh
cmNoIHN1cHBvcnRzIE5VTUEgYXdhcmUgbWVtYmxvY2tzCi0jCi0gICAgLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0KLSAgICB8ICAgICAgICAgYXJjaCB8c3RhdHVzfAotICAgIC0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tCi0gICAgfCAgICAgICBhbHBoYTogfCBUT0RPIHwKLSAgICB8ICAgICAgICAgYXJj
OiB8ICAuLiAgfAotICAgIHwgICAgICAgICBhcm06IHwgIC4uICB8Ci0gICAgfCAgICAgICBhcm02
NDogfCAgb2sgIHwKLSAgICB8ICAgICAgICAgYzZ4OiB8ICAuLiAgfAotICAgIHwgICAgICAgIGNz
a3k6IHwgIC4uICB8Ci0gICAgfCAgICAgICBoODMwMDogfCAgLi4gIHwKLSAgICB8ICAgICBoZXhh
Z29uOiB8ICAuLiAgfAotICAgIHwgICAgICAgIGlhNjQ6IHwgIG9rICB8Ci0gICAgfCAgICAgICAg
bTY4azogfCAgLi4gIHwKLSAgICB8ICBtaWNyb2JsYXplOiB8ICBvayAgfAotICAgIHwgICAgICAg
IG1pcHM6IHwgIG9rICB8Ci0gICAgfCAgICAgICBuZHMzMjogfCBUT0RPIHwKLSAgICB8ICAgICAg
IG5pb3MyOiB8ICAuLiAgfAotICAgIHwgICAgb3BlbnJpc2M6IHwgIC4uICB8Ci0gICAgfCAgICAg
IHBhcmlzYzogfCAgLi4gIHwKLSAgICB8ICAgICBwb3dlcnBjOiB8ICBvayAgfAotICAgIHwgICAg
ICAgcmlzY3Y6IHwgIG9rICB8Ci0gICAgfCAgICAgICAgczM5MDogfCAgb2sgIHwKLSAgICB8ICAg
ICAgICAgIHNoOiB8ICBvayAgfAotICAgIHwgICAgICAgc3BhcmM6IHwgIG9rICB8Ci0gICAgfCAg
ICAgICAgICB1bTogfCAgLi4gIHwKLSAgICB8ICAgdW5pY29yZTMyOiB8ICAuLiAgfAotICAgIHwg
ICAgICAgICB4ODY6IHwgIG9rICB8Ci0gICAgfCAgICAgIHh0ZW5zYTogfCAgLi4gIHwKLSAgICAt
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpkaWZmIC0tZ2l0IGEvYXJjaC9hbHBoYS9tbS9udW1hLmMg
Yi9hcmNoL2FscGhhL21tL251bWEuYwppbmRleCBkMGI3MzM3MWU5ODUuLmEyNGNkMTNlNzFjYiAx
MDA2NDQKLS0tIGEvYXJjaC9hbHBoYS9tbS9udW1hLmMKKysrIGIvYXJjaC9hbHBoYS9tbS9udW1h
LmMKQEAgLTE0NCw4ICsxNDQsOCBAQCBzZXR1cF9tZW1vcnlfbm9kZShpbnQgbmlkLCB2b2lkICpr
ZXJuZWxfZW5kKQogCWlmICghbmlkICYmIChub2RlX21heF9wZm4gPCBlbmRfa2VybmVsX3BmbiB8
fCBub2RlX21pbl9wZm4gPiBzdGFydF9rZXJuZWxfcGZuKSkKIAkJcGFuaWMoImtlcm5lbCBsb2Fk
ZWQgb3V0IG9mIHJhbSIpOwogCi0JbWVtYmxvY2tfYWRkKFBGTl9QSFlTKG5vZGVfbWluX3Bmbiks
Ci0JCSAgICAgKG5vZGVfbWF4X3BmbiAtIG5vZGVfbWluX3BmbikgPDwgUEFHRV9TSElGVCk7CisJ
bWVtYmxvY2tfYWRkX25vZGUoUEZOX1BIWVMobm9kZV9taW5fcGZuKSwKKwkJCSAgKG5vZGVfbWF4
X3BmbiAtIG5vZGVfbWluX3BmbikgPDwgUEFHRV9TSElGVCwgbmlkKTsKIAogCS8qIFpvbmUgc3Rh
cnQgcGh5cy1hZGRyIG11c3QgYmUgMl4oTUFYX09SREVSLTEpIGFsaWduZWQuCiAJICAgTm90ZSB0
aGF0IHdlIHJvdW5kIHRoaXMgZG93biwgbm90IHVwIC0gbm9kZSBtZW1vcnkKZGlmZiAtLWdpdCBh
L2FyY2gvYXJtNjQvS2NvbmZpZyBiL2FyY2gvYXJtNjQvS2NvbmZpZwppbmRleCA0MGZiMDVkOTZj
NjAuLjk1NzE1MTAxM2QxMCAxMDA2NDQKLS0tIGEvYXJjaC9hcm02NC9LY29uZmlnCisrKyBiL2Fy
Y2gvYXJtNjQvS2NvbmZpZwpAQCAtMTU2LDcgKzE1Niw2IEBAIGNvbmZpZyBBUk02NAogCXNlbGVj
dCBIQVZFX0dDQ19QTFVHSU5TCiAJc2VsZWN0IEhBVkVfSFdfQlJFQUtQT0lOVCBpZiBQRVJGX0VW
RU5UUwogCXNlbGVjdCBIQVZFX0lSUV9USU1FX0FDQ09VTlRJTkcKLQlzZWxlY3QgSEFWRV9NRU1C
TE9DS19OT0RFX01BUCBpZiBOVU1BCiAJc2VsZWN0IEhBVkVfTk1JCiAJc2VsZWN0IEhBVkVfUEFU
QV9QTEFURk9STQogCXNlbGVjdCBIQVZFX1BFUkZfRVZFTlRTCmRpZmYgLS1naXQgYS9hcmNoL2lh
NjQvS2NvbmZpZyBiL2FyY2gvaWE2NC9LY29uZmlnCmluZGV4IGJhYjdjZDg3ODQ2NC4uODhiMDVi
NTI1NmE5IDEwMDY0NAotLS0gYS9hcmNoL2lhNjQvS2NvbmZpZworKysgYi9hcmNoL2lhNjQvS2Nv
bmZpZwpAQCAtMzEsNyArMzEsNiBAQCBjb25maWcgSUE2NAogCXNlbGVjdCBIQVZFX0ZVTkNUSU9O
X1RSQUNFUgogCXNlbGVjdCBUVFkKIAlzZWxlY3QgSEFWRV9BUkNIX1RSQUNFSE9PSwotCXNlbGVj
dCBIQVZFX01FTUJMT0NLX05PREVfTUFQCiAJc2VsZWN0IEhBVkVfVklSVF9DUFVfQUNDT1VOVElO
RwogCXNlbGVjdCBETUFfTk9OQ09IRVJFTlRfTU1BUAogCXNlbGVjdCBBUkNIX0hBU19TWU5DX0RN
QV9GT1JfQ1BVCmRpZmYgLS1naXQgYS9hcmNoL202OGsvbW0vbW90b3JvbGEuYyBiL2FyY2gvbTY4
ay9tbS9tb3Rvcm9sYS5jCmluZGV4IGZjMTYxOTBlYzJkNi4uODRhYjU5NjNjYWJiIDEwMDY0NAot
LS0gYS9hcmNoL202OGsvbW0vbW90b3JvbGEuYworKysgYi9hcmNoL202OGsvbW0vbW90b3JvbGEu
YwpAQCAtMzg2LDcgKzM4Niw3IEBAIHZvaWQgX19pbml0IHBhZ2luZ19pbml0KHZvaWQpCiAKIAlt
aW5fYWRkciA9IG02OGtfbWVtb3J5WzBdLmFkZHI7CiAJbWF4X2FkZHIgPSBtaW5fYWRkciArIG02
OGtfbWVtb3J5WzBdLnNpemU7Ci0JbWVtYmxvY2tfYWRkKG02OGtfbWVtb3J5WzBdLmFkZHIsIG02
OGtfbWVtb3J5WzBdLnNpemUpOworCW1lbWJsb2NrX2FkZF9ub2RlKG02OGtfbWVtb3J5WzBdLmFk
ZHIsIG02OGtfbWVtb3J5WzBdLnNpemUsIDApOwogCWZvciAoaSA9IDE7IGkgPCBtNjhrX251bV9t
ZW1vcnk7KSB7CiAJCWlmIChtNjhrX21lbW9yeVtpXS5hZGRyIDwgbWluX2FkZHIpIHsKIAkJCXBy
aW50aygiSWdub3JpbmcgbWVtb3J5IGNodW5rIGF0IDB4JWx4OjB4JWx4IGJlZm9yZSB0aGUgZmly
c3QgY2h1bmtcbiIsCkBAIC0zOTcsNyArMzk3LDcgQEAgdm9pZCBfX2luaXQgcGFnaW5nX2luaXQo
dm9pZCkKIAkJCQkobTY4a19udW1fbWVtb3J5IC0gaSkgKiBzaXplb2Yoc3RydWN0IG02OGtfbWVt
X2luZm8pKTsKIAkJCWNvbnRpbnVlOwogCQl9Ci0JCW1lbWJsb2NrX2FkZChtNjhrX21lbW9yeVtp
XS5hZGRyLCBtNjhrX21lbW9yeVtpXS5zaXplKTsKKwkJbWVtYmxvY2tfYWRkX25vZGUobTY4a19t
ZW1vcnlbaV0uYWRkciwgbTY4a19tZW1vcnlbaV0uc2l6ZSwgaSk7CiAJCWFkZHIgPSBtNjhrX21l
bW9yeVtpXS5hZGRyICsgbTY4a19tZW1vcnlbaV0uc2l6ZTsKIAkJaWYgKGFkZHIgPiBtYXhfYWRk
cikKIAkJCW1heF9hZGRyID0gYWRkcjsKZGlmZiAtLWdpdCBhL2FyY2gvbWljcm9ibGF6ZS9LY29u
ZmlnIGIvYXJjaC9taWNyb2JsYXplL0tjb25maWcKaW5kZXggOTYwNmMyNDRiNWI4Li5kMjYyYWMw
Yzg3MTQgMTAwNjQ0Ci0tLSBhL2FyY2gvbWljcm9ibGF6ZS9LY29uZmlnCisrKyBiL2FyY2gvbWlj
cm9ibGF6ZS9LY29uZmlnCkBAIC0zMiw3ICszMiw2IEBAIGNvbmZpZyBNSUNST0JMQVpFCiAJc2Vs
ZWN0IEhBVkVfRlRSQUNFX01DT1VOVF9SRUNPUkQKIAlzZWxlY3QgSEFWRV9GVU5DVElPTl9HUkFQ
SF9UUkFDRVIKIAlzZWxlY3QgSEFWRV9GVU5DVElPTl9UUkFDRVIKLQlzZWxlY3QgSEFWRV9NRU1C
TE9DS19OT0RFX01BUAogCXNlbGVjdCBIQVZFX09QUk9GSUxFCiAJc2VsZWN0IEhBVkVfUENJCiAJ
c2VsZWN0IElSUV9ET01BSU4KZGlmZiAtLWdpdCBhL2FyY2gvbWlwcy9LY29uZmlnIGIvYXJjaC9t
aXBzL0tjb25maWcKaW5kZXggNjkwNzE4YjM3MDFhLi45NGE5MWI1Yjc3NTkgMTAwNjQ0Ci0tLSBh
L2FyY2gvbWlwcy9LY29uZmlnCisrKyBiL2FyY2gvbWlwcy9LY29uZmlnCkBAIC03Miw3ICs3Miw2
IEBAIGNvbmZpZyBNSVBTCiAJc2VsZWN0IEhBVkVfS1BST0JFUwogCXNlbGVjdCBIQVZFX0tSRVRQ
Uk9CRVMKIAlzZWxlY3QgSEFWRV9MRF9ERUFEX0NPREVfREFUQV9FTElNSU5BVElPTgotCXNlbGVj
dCBIQVZFX01FTUJMT0NLX05PREVfTUFQCiAJc2VsZWN0IEhBVkVfTU9EX0FSQ0hfU1BFQ0lGSUMK
IAlzZWxlY3QgSEFWRV9OTUkKIAlzZWxlY3QgSEFWRV9PUFJPRklMRQpkaWZmIC0tZ2l0IGEvYXJj
aC9wb3dlcnBjL0tjb25maWcgYi9hcmNoL3Bvd2VycGMvS2NvbmZpZwppbmRleCA5MjRjNTQxYTky
NjAuLjVmODZiMjJiN2QyYyAxMDA2NDQKLS0tIGEvYXJjaC9wb3dlcnBjL0tjb25maWcKKysrIGIv
YXJjaC9wb3dlcnBjL0tjb25maWcKQEAgLTIxMCw3ICsyMTAsNiBAQCBjb25maWcgUFBDCiAJc2Vs
ZWN0IEhBVkVfS1JFVFBST0JFUwogCXNlbGVjdCBIQVZFX0xEX0RFQURfQ09ERV9EQVRBX0VMSU1J
TkFUSU9OCiAJc2VsZWN0IEhBVkVfTElWRVBBVENICQkJaWYgSEFWRV9EWU5BTUlDX0ZUUkFDRV9X
SVRIX1JFR1MKLQlzZWxlY3QgSEFWRV9NRU1CTE9DS19OT0RFX01BUAogCXNlbGVjdCBIQVZFX01P
RF9BUkNIX1NQRUNJRklDCiAJc2VsZWN0IEhBVkVfTk1JCQkJCWlmIFBFUkZfRVZFTlRTIHx8IChQ
UEM2NCAmJiBQUENfQk9PSzNTKQogCXNlbGVjdCBIQVZFX0hBUkRMT0NLVVBfREVURUNUT1JfQVJD
SAlpZiAoUFBDNjQgJiYgUFBDX0JPT0szUykKZGlmZiAtLWdpdCBhL2FyY2gvcmlzY3YvS2NvbmZp
ZyBiL2FyY2gvcmlzY3YvS2NvbmZpZwppbmRleCA2MmY3YmZlYjcwOWUuLmUyMjg1OGU4Zjg4ZSAx
MDA2NDQKLS0tIGEvYXJjaC9yaXNjdi9LY29uZmlnCisrKyBiL2FyY2gvcmlzY3YvS2NvbmZpZwpA
QCAtMzIsNyArMzIsNiBAQCBjb25maWcgUklTQ1YKIAlzZWxlY3QgSEFWRV9BUkNIX0FVRElUU1lT
Q0FMTAogCXNlbGVjdCBIQVZFX0FSQ0hfU0VDQ09NUF9GSUxURVIKIAlzZWxlY3QgSEFWRV9BU01f
TU9EVkVSU0lPTlMKLQlzZWxlY3QgSEFWRV9NRU1CTE9DS19OT0RFX01BUAogCXNlbGVjdCBIQVZF
X0RNQV9DT05USUdVT1VTIGlmIE1NVQogCXNlbGVjdCBIQVZFX0ZVVEVYX0NNUFhDSEcgaWYgRlVU
RVgKIAlzZWxlY3QgSEFWRV9QRVJGX0VWRU5UUwpkaWZmIC0tZ2l0IGEvYXJjaC9zMzkwL0tjb25m
aWcgYi9hcmNoL3MzOTAvS2NvbmZpZwppbmRleCAyMTY3YmNlOTkzZmYuLmQ2ZGM2OTMzYWRjMiAx
MDA2NDQKLS0tIGEvYXJjaC9zMzkwL0tjb25maWcKKysrIGIvYXJjaC9zMzkwL0tjb25maWcKQEAg
LTE2Miw3ICsxNjIsNiBAQCBjb25maWcgUzM5MAogCXNlbGVjdCBIQVZFX0xJVkVQQVRDSAogCXNl
bGVjdCBIQVZFX1BFUkZfUkVHUwogCXNlbGVjdCBIQVZFX1BFUkZfVVNFUl9TVEFDS19EVU1QCi0J
c2VsZWN0IEhBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKIAlzZWxlY3QgSEFWRV9NRU1CTE9DS19QSFlT
X01BUAogCXNlbGVjdCBNTVVfR0FUSEVSX05PX0dBVEhFUgogCXNlbGVjdCBIQVZFX01PRF9BUkNI
X1NQRUNJRklDCmRpZmYgLS1naXQgYS9hcmNoL3NoL0tjb25maWcgYi9hcmNoL3NoL0tjb25maWcK
aW5kZXggYjRmMGUzN2I4M2ViLi5iZTdjNGY2OTkxMTMgMTAwNjQ0Ci0tLSBhL2FyY2gvc2gvS2Nv
bmZpZworKysgYi9hcmNoL3NoL0tjb25maWcKQEAgLTksNyArOSw2IEBAIGNvbmZpZyBTVVBFUkgK
IAlzZWxlY3QgQ0xLREVWX0xPT0tVUAogCXNlbGVjdCBETUFfREVDTEFSRV9DT0hFUkVOVAogCXNl
bGVjdCBIQVZFX0lERSBpZiBIQVNfSU9QT1JUX01BUAotCXNlbGVjdCBIQVZFX01FTUJMT0NLX05P
REVfTUFQCiAJc2VsZWN0IEhBVkVfT1BST0ZJTEUKIAlzZWxlY3QgSEFWRV9BUkNIX1RSQUNFSE9P
SwogCXNlbGVjdCBIQVZFX1BFUkZfRVZFTlRTCmRpZmYgLS1naXQgYS9hcmNoL3NwYXJjL0tjb25m
aWcgYi9hcmNoL3NwYXJjL0tjb25maWcKaW5kZXggZGE1MTVmZGFkODNkLi43OTUyMDZiN2I1NTIg
MTAwNjQ0Ci0tLSBhL2FyY2gvc3BhcmMvS2NvbmZpZworKysgYi9hcmNoL3NwYXJjL0tjb25maWcK
QEAgLTY1LDcgKzY1LDYgQEAgY29uZmlnIFNQQVJDNjQKIAlzZWxlY3QgSEFWRV9LUkVUUFJPQkVT
CiAJc2VsZWN0IEhBVkVfS1BST0JFUwogCXNlbGVjdCBNTVVfR0FUSEVSX1JDVV9UQUJMRV9GUkVF
IGlmIFNNUAotCXNlbGVjdCBIQVZFX01FTUJMT0NLX05PREVfTUFQCiAJc2VsZWN0IEhBVkVfQVJD
SF9UUkFOU1BBUkVOVF9IVUdFUEFHRQogCXNlbGVjdCBIQVZFX0RZTkFNSUNfRlRSQUNFCiAJc2Vs
ZWN0IEhBVkVfRlRSQUNFX01DT1VOVF9SRUNPUkQKZGlmZiAtLWdpdCBhL2FyY2gveDg2L0tjb25m
aWcgYi9hcmNoL3g4Ni9LY29uZmlnCmluZGV4IDExOTdiNTU5NmQ1YS4uZjhiZjIxOGExNjljIDEw
MDY0NAotLS0gYS9hcmNoL3g4Ni9LY29uZmlnCisrKyBiL2FyY2gveDg2L0tjb25maWcKQEAgLTE5
MCw3ICsxOTAsNiBAQCBjb25maWcgWDg2CiAJc2VsZWN0IEhBVkVfS1JFVFBST0JFUwogCXNlbGVj
dCBIQVZFX0tWTQogCXNlbGVjdCBIQVZFX0xJVkVQQVRDSAkJCWlmIFg4Nl82NAotCXNlbGVjdCBI
QVZFX01FTUJMT0NLX05PREVfTUFQCiAJc2VsZWN0IEhBVkVfTUlYRURfQlJFQUtQT0lOVFNfUkVH
UwogCXNlbGVjdCBIQVZFX01PRF9BUkNIX1NQRUNJRklDCiAJc2VsZWN0IEhBVkVfTU9WRV9QTUQK
ZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvbWVtYmxvY2suaCBiL2luY2x1ZGUvbGludXgvbWVt
YmxvY2suaAppbmRleCA2YmMzN2E3MzFkMjcuLjQ1YWJmYzU0ZGEzNyAxMDA2NDQKLS0tIGEvaW5j
bHVkZS9saW51eC9tZW1ibG9jay5oCisrKyBiL2luY2x1ZGUvbGludXgvbWVtYmxvY2suaApAQCAt
NTAsNyArNTAsNyBAQCBzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uIHsKIAlwaHlzX2FkZHJfdCBiYXNl
OwogCXBoeXNfYWRkcl90IHNpemU7CiAJZW51bSBtZW1ibG9ja19mbGFncyBmbGFnczsKLSNpZmRl
ZiBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUAorI2lmZGVmIENPTkZJR19ORUVEX01VTFRJ
UExFX05PREVTCiAJaW50IG5pZDsKICNlbmRpZgogfTsKQEAgLTIxNSw3ICsyMTUsNiBAQCBzdGF0
aWMgaW5saW5lIGJvb2wgbWVtYmxvY2tfaXNfbm9tYXAoc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAq
bSkKIAlyZXR1cm4gbS0+ZmxhZ3MgJiBNRU1CTE9DS19OT01BUDsKIH0KIAotI2lmZGVmIENPTkZJ
R19IQVZFX01FTUJMT0NLX05PREVfTUFQCiBpbnQgbWVtYmxvY2tfc2VhcmNoX3Bmbl9uaWQodW5z
aWduZWQgbG9uZyBwZm4sIHVuc2lnbmVkIGxvbmcgKnN0YXJ0X3BmbiwKIAkJCSAgICB1bnNpZ25l
ZCBsb25nICAqZW5kX3Bmbik7CiB2b2lkIF9fbmV4dF9tZW1fcGZuX3JhbmdlKGludCAqaWR4LCBp
bnQgbmlkLCB1bnNpZ25lZCBsb25nICpvdXRfc3RhcnRfcGZuLApAQCAtMjM0LDcgKzIzMyw2IEBA
IHZvaWQgX19uZXh0X21lbV9wZm5fcmFuZ2UoaW50ICppZHgsIGludCBuaWQsIHVuc2lnbmVkIGxv
bmcgKm91dF9zdGFydF9wZm4sCiAjZGVmaW5lIGZvcl9lYWNoX21lbV9wZm5fcmFuZ2UoaSwgbmlk
LCBwX3N0YXJ0LCBwX2VuZCwgcF9uaWQpCQlcCiAJZm9yIChpID0gLTEsIF9fbmV4dF9tZW1fcGZu
X3JhbmdlKCZpLCBuaWQsIHBfc3RhcnQsIHBfZW5kLCBwX25pZCk7IFwKIAkgICAgIGkgPj0gMDsg
X19uZXh0X21lbV9wZm5fcmFuZ2UoJmksIG5pZCwgcF9zdGFydCwgcF9lbmQsIHBfbmlkKSkKLSNl
bmRpZiAvKiBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUCAqLwogCiAjaWZkZWYgQ09ORklH
X0RFRkVSUkVEX1NUUlVDVF9QQUdFX0lOSVQKIHZvaWQgX19uZXh0X21lbV9wZm5fcmFuZ2VfaW5f
em9uZSh1NjQgKmlkeCwgc3RydWN0IHpvbmUgKnpvbmUsCkBAIC0zMTAsMTAgKzMwOCwxMCBAQCB2
b2lkIF9fbmV4dF9tZW1fcGZuX3JhbmdlX2luX3pvbmUodTY0ICppZHgsIHN0cnVjdCB6b25lICp6
b25lLAogCWZvcl9lYWNoX21lbV9yYW5nZV9yZXYoaSwgJm1lbWJsb2NrLm1lbW9yeSwgJm1lbWJs
b2NrLnJlc2VydmVkLAlcCiAJCQkgICAgICAgbmlkLCBmbGFncywgcF9zdGFydCwgcF9lbmQsIHBf
bmlkKQogCi0jaWZkZWYgQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKIGludCBtZW1ibG9j
a19zZXRfbm9kZShwaHlzX2FkZHJfdCBiYXNlLCBwaHlzX2FkZHJfdCBzaXplLAogCQkgICAgICBz
dHJ1Y3QgbWVtYmxvY2tfdHlwZSAqdHlwZSwgaW50IG5pZCk7CiAKKyNpZmRlZiBDT05GSUdfTkVF
RF9NVUxUSVBMRV9OT0RFUwogc3RhdGljIGlubGluZSB2b2lkIG1lbWJsb2NrX3NldF9yZWdpb25f
bm9kZShzdHJ1Y3QgbWVtYmxvY2tfcmVnaW9uICpyLCBpbnQgbmlkKQogewogCXItPm5pZCA9IG5p
ZDsKQEAgLTMzMiw3ICszMzAsNyBAQCBzdGF0aWMgaW5saW5lIGludCBtZW1ibG9ja19nZXRfcmVn
aW9uX25vZGUoY29uc3Qgc3RydWN0IG1lbWJsb2NrX3JlZ2lvbiAqcikKIHsKIAlyZXR1cm4gMDsK
IH0KLSNlbmRpZiAvKiBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUCAqLworI2VuZGlmIC8q
IENPTkZJR19ORUVEX01VTFRJUExFX05PREVTICovCiAKIC8qIEZsYWdzIGZvciBtZW1ibG9jayBh
bGxvY2F0aW9uIEFQSXMgKi8KICNkZWZpbmUgTUVNQkxPQ0tfQUxMT0NfQU5ZV0hFUkUJKH4ocGh5
c19hZGRyX3QpMCkKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvbW0uaCBiL2luY2x1ZGUvbGlu
dXgvbW0uaAppbmRleCBhNDA0MDI2ZDE0ZDQuLjU5MDNiYmJkYjMzNiAxMDA2NDQKLS0tIGEvaW5j
bHVkZS9saW51eC9tbS5oCisrKyBiL2luY2x1ZGUvbGludXgvbW0uaApAQCAtMjM0NCw5ICsyMzQ0
LDggQEAgc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIGdldF9udW1fcGh5c3BhZ2VzKHZvaWQp
CiAJcmV0dXJuIHBoeXNfcGFnZXM7CiB9CiAKLSNpZmRlZiBDT05GSUdfSEFWRV9NRU1CTE9DS19O
T0RFX01BUAogLyoKLSAqIFdpdGggQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAgc2V0LCBh
biBhcmNoaXRlY3R1cmUgbWF5IGluaXRpYWxpc2UgaXRzCisgKiBVc2luZyBtZW1ibG9jayBub2Rl
IG1hcHBpbmdzLCBhbiBhcmNoaXRlY3R1cmUgbWF5IGluaXRpYWxpc2UgaXRzCiAgKiB6b25lcywg
YWxsb2NhdGUgdGhlIGJhY2tpbmcgbWVtX21hcCBhbmQgYWNjb3VudCBmb3IgbWVtb3J5IGhvbGVz
IGluIGEgbW9yZQogICogYXJjaGl0ZWN0dXJlIGluZGVwZW5kZW50IG1hbm5lci4gVGhpcyBpcyBh
IHN1YnN0aXR1dGUgZm9yIGNyZWF0aW5nIHRoZQogICogem9uZV9zaXplc1tdIGFuZCB6aG9sZXNf
c2l6ZVtdIGFycmF5cyBhbmQgcGFzc2luZyB0aGVtIHRvCkBAIC0yMzY3LDkgKzIzNjYsNiBAQCBz
dGF0aWMgaW5saW5lIHVuc2lnbmVkIGxvbmcgZ2V0X251bV9waHlzcGFnZXModm9pZCkKICAqIHJl
Z2lzdGVyZWQgcGh5c2ljYWwgcGFnZSByYW5nZS4gIFNpbWlsYXJseQogICogc3BhcnNlX21lbW9y
eV9wcmVzZW50X3dpdGhfYWN0aXZlX3JlZ2lvbnMoKSBjYWxscyBtZW1vcnlfcHJlc2VudCgpIGZv
cgogICogZWFjaCByYW5nZSB3aGVuIFNQQVJTRU1FTSBpcyBlbmFibGVkLgotICoKLSAqIFNlZSBt
bS9wYWdlX2FsbG9jLmMgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gZWFjaCBmdW5jdGlvbiBleHBv
c2VkIGJ5Ci0gKiBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUC4KICAqLwogZXh0ZXJuIHZv
aWQgZnJlZV9hcmVhX2luaXRfbm9kZXModW5zaWduZWQgbG9uZyAqbWF4X3pvbmVfcGZuKTsKIHVu
c2lnbmVkIGxvbmcgbm9kZV9tYXBfcGZuX2FsaWdubWVudCh2b2lkKTsKQEAgLTIzODQsMTMgKzIz
ODAsOSBAQCBleHRlcm4gdm9pZCBmcmVlX2Jvb3RtZW1fd2l0aF9hY3RpdmVfcmVnaW9ucyhpbnQg
bmlkLAogCQkJCQkJdW5zaWduZWQgbG9uZyBtYXhfbG93X3Bmbik7CiBleHRlcm4gdm9pZCBzcGFy
c2VfbWVtb3J5X3ByZXNlbnRfd2l0aF9hY3RpdmVfcmVnaW9ucyhpbnQgbmlkKTsKIAotI2VuZGlm
IC8qIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQICovCi0KLSNpZiAhZGVmaW5lZChDT05G
SUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUCkgJiYgXAotICAgICFkZWZpbmVkKENPTkZJR19IQVZF
X0FSQ0hfRUFSTFlfUEZOX1RPX05JRCkKKyNpZm5kZWYgQ09ORklHX05FRURfTVVMVElQTEVfTk9E
RVMKIHN0YXRpYyBpbmxpbmUgaW50IGVhcmx5X3Bmbl90b19uaWQodW5zaWduZWQgbG9uZyBwZm4p
CiB7Ci0JQlVJTERfQlVHX09OKElTX0VOQUJMRUQoQ09ORklHX05VTUEpKTsKIAlyZXR1cm4gMDsK
IH0KICNlbHNlCmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L21tem9uZS5oIGIvaW5jbHVkZS9s
aW51eC9tbXpvbmUuaAppbmRleCA3YjViNmViYTQwMmYuLmZmYzJhM2Q2MDM2YiAxMDA2NDQKLS0t
IGEvaW5jbHVkZS9saW51eC9tbXpvbmUuaAorKysgYi9pbmNsdWRlL2xpbnV4L21tem9uZS5oCkBA
IC04NzQsNyArODc0LDcgQEAgZXh0ZXJuIGludCBtb3ZhYmxlX3pvbmU7CiAjaWZkZWYgQ09ORklH
X0hJR0hNRU0KIHN0YXRpYyBpbmxpbmUgaW50IHpvbmVfbW92YWJsZV9pc19oaWdobWVtKHZvaWQp
CiB7Ci0jaWZkZWYgQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKKyNpZmRlZiBDT05GSUdf
TkVFRF9NVUxUSVBMRV9OT0RFUwogCXJldHVybiBtb3ZhYmxlX3pvbmUgPT0gWk9ORV9ISUdITUVN
OwogI2Vsc2UKIAlyZXR1cm4gKFpPTkVfTU9WQUJMRSAtIDEpID09IFpPTkVfSElHSE1FTTsKZGlm
ZiAtLWdpdCBhL21tL0tjb25maWcgYi9tbS9LY29uZmlnCmluZGV4IGMxYWNjMzRjMWMzNS4uYWFh
NWJkYWExYzhhIDEwMDY0NAotLS0gYS9tbS9LY29uZmlnCisrKyBiL21tL0tjb25maWcKQEAgLTEy
Niw5ICsxMjYsNiBAQCBjb25maWcgU1BBUlNFTUVNX1ZNRU1NQVAKIAkgIHBmbl90b19wYWdlIGFu
ZCBwYWdlX3RvX3BmbiBvcGVyYXRpb25zLiAgVGhpcyBpcyB0aGUgbW9zdAogCSAgZWZmaWNpZW50
IG9wdGlvbiB3aGVuIHN1ZmZpY2llbnQga2VybmVsIHJlc291cmNlcyBhcmUgYXZhaWxhYmxlLgog
Ci1jb25maWcgSEFWRV9NRU1CTE9DS19OT0RFX01BUAotCWJvb2wKLQogY29uZmlnIEhBVkVfTUVN
QkxPQ0tfUEhZU19NQVAKIAlib29sCiAKZGlmZiAtLWdpdCBhL21tL21lbWJsb2NrLmMgYi9tbS9t
ZW1ibG9jay5jCmluZGV4IDQzZTJmZDMwMDZjMS4uNzQzNjU5ZDg4ZmM0IDEwMDY0NAotLS0gYS9t
bS9tZW1ibG9jay5jCisrKyBiL21tL21lbWJsb2NrLmMKQEAgLTYyMCw3ICs2MjAsNyBAQCBzdGF0
aWMgaW50IF9faW5pdF9tZW1ibG9jayBtZW1ibG9ja19hZGRfcmFuZ2Uoc3RydWN0IG1lbWJsb2Nr
X3R5cGUgKnR5cGUsCiAJCSAqIGFyZWEsIGluc2VydCB0aGF0IHBvcnRpb24uCiAJCSAqLwogCQlp
ZiAocmJhc2UgPiBiYXNlKSB7Ci0jaWZkZWYgQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAK
KyNpZmRlZiBDT05GSUdfTkVFRF9NVUxUSVBMRV9OT0RFUwogCQkJV0FSTl9PTihuaWQgIT0gbWVt
YmxvY2tfZ2V0X3JlZ2lvbl9ub2RlKHJnbikpOwogI2VuZGlmCiAJCQlXQVJOX09OKGZsYWdzICE9
IHJnbi0+ZmxhZ3MpOwpAQCAtMTE5Nyw3ICsxMTk3LDYgQEAgdm9pZCBfX2luaXRfbWVtYmxvY2sg
X19uZXh0X21lbV9yYW5nZV9yZXYodTY0ICppZHgsIGludCBuaWQsCiAJKmlkeCA9IFVMTE9OR19N
QVg7CiB9CiAKLSNpZmRlZiBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUAogLyoKICAqIENv
bW1vbiBpdGVyYXRvciBpbnRlcmZhY2UgdXNlZCB0byBkZWZpbmUgZm9yX2VhY2hfbWVtX3Bmbl9y
YW5nZSgpLgogICovCkBAIC0xMjQ3LDYgKzEyNDYsNyBAQCB2b2lkIF9faW5pdF9tZW1ibG9jayBf
X25leHRfbWVtX3Bmbl9yYW5nZShpbnQgKmlkeCwgaW50IG5pZCwKIGludCBfX2luaXRfbWVtYmxv
Y2sgbWVtYmxvY2tfc2V0X25vZGUocGh5c19hZGRyX3QgYmFzZSwgcGh5c19hZGRyX3Qgc2l6ZSwK
IAkJCQkgICAgICBzdHJ1Y3QgbWVtYmxvY2tfdHlwZSAqdHlwZSwgaW50IG5pZCkKIHsKKyNpZmRl
ZiBDT05GSUdfTkVFRF9NVUxUSVBMRV9OT0RFUwogCWludCBzdGFydF9yZ24sIGVuZF9yZ247CiAJ
aW50IGksIHJldDsKIApAQCAtMTI1OCw5ICsxMjU4LDEwIEBAIGludCBfX2luaXRfbWVtYmxvY2sg
bWVtYmxvY2tfc2V0X25vZGUocGh5c19hZGRyX3QgYmFzZSwgcGh5c19hZGRyX3Qgc2l6ZSwKIAkJ
bWVtYmxvY2tfc2V0X3JlZ2lvbl9ub2RlKCZ0eXBlLT5yZWdpb25zW2ldLCBuaWQpOwogCiAJbWVt
YmxvY2tfbWVyZ2VfcmVnaW9ucyh0eXBlKTsKKyNlbmRpZgogCXJldHVybiAwOwogfQotI2VuZGlm
IC8qIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQICovCisKICNpZmRlZiBDT05GSUdfREVG
RVJSRURfU1RSVUNUX1BBR0VfSU5JVAogLyoqCiAgKiBfX25leHRfbWVtX3Bmbl9yYW5nZV9pbl96
b25lIC0gaXRlcmF0b3IgZm9yIGZvcl9lYWNoXypfcmFuZ2VfaW5fem9uZSgpCkBAIC0xNzk5LDcg
KzE4MDAsNiBAQCBib29sIF9faW5pdF9tZW1ibG9jayBtZW1ibG9ja19pc19tYXBfbWVtb3J5KHBo
eXNfYWRkcl90IGFkZHIpCiAJcmV0dXJuICFtZW1ibG9ja19pc19ub21hcCgmbWVtYmxvY2subWVt
b3J5LnJlZ2lvbnNbaV0pOwogfQogCi0jaWZkZWYgQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9N
QVAKIGludCBfX2luaXRfbWVtYmxvY2sgbWVtYmxvY2tfc2VhcmNoX3Bmbl9uaWQodW5zaWduZWQg
bG9uZyBwZm4sCiAJCQkgdW5zaWduZWQgbG9uZyAqc3RhcnRfcGZuLCB1bnNpZ25lZCBsb25nICpl
bmRfcGZuKQogewpAQCAtMTgxNCw3ICsxODE0LDYgQEAgaW50IF9faW5pdF9tZW1ibG9jayBtZW1i
bG9ja19zZWFyY2hfcGZuX25pZCh1bnNpZ25lZCBsb25nIHBmbiwKIAogCXJldHVybiBtZW1ibG9j
a19nZXRfcmVnaW9uX25vZGUoJnR5cGUtPnJlZ2lvbnNbbWlkXSk7CiB9Ci0jZW5kaWYKIAogLyoq
CiAgKiBtZW1ibG9ja19pc19yZWdpb25fbWVtb3J5IC0gY2hlY2sgaWYgYSByZWdpb24gaXMgYSBz
dWJzZXQgb2YgbWVtb3J5CkBAIC0xOTA1LDcgKzE5MDQsNyBAQCBzdGF0aWMgdm9pZCBfX2luaXRf
bWVtYmxvY2sgbWVtYmxvY2tfZHVtcChzdHJ1Y3QgbWVtYmxvY2tfdHlwZSAqdHlwZSkKIAkJc2l6
ZSA9IHJnbi0+c2l6ZTsKIAkJZW5kID0gYmFzZSArIHNpemUgLSAxOwogCQlmbGFncyA9IHJnbi0+
ZmxhZ3M7Ci0jaWZkZWYgQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKKyNpZmRlZiBDT05G
SUdfTkVFRF9NVUxUSVBMRV9OT0RFUwogCQlpZiAobWVtYmxvY2tfZ2V0X3JlZ2lvbl9ub2RlKHJn
bikgIT0gTUFYX05VTU5PREVTKQogCQkJc25wcmludGYobmlkX2J1Ziwgc2l6ZW9mKG5pZF9idWYp
LCAiIG9uIG5vZGUgJWQiLAogCQkJCSBtZW1ibG9ja19nZXRfcmVnaW9uX25vZGUocmduKSk7CmRp
ZmYgLS1naXQgYS9tbS9tZW1vcnlfaG90cGx1Zy5jIGIvbW0vbWVtb3J5X2hvdHBsdWcuYwppbmRl
eCBmYzBhYWQwYmMxZjUuLmU2N2RjNTAxNTc2YSAxMDA2NDQKLS0tIGEvbW0vbWVtb3J5X2hvdHBs
dWcuYworKysgYi9tbS9tZW1vcnlfaG90cGx1Zy5jCkBAIC0xMzcyLDExICsxMzcyLDcgQEAgY2hl
Y2tfcGFnZXNfaXNvbGF0ZWRfY2IodW5zaWduZWQgbG9uZyBzdGFydF9wZm4sIHVuc2lnbmVkIGxv
bmcgbnJfcGFnZXMsCiAKIHN0YXRpYyBpbnQgX19pbml0IGNtZGxpbmVfcGFyc2VfbW92YWJsZV9u
b2RlKGNoYXIgKnApCiB7Ci0jaWZkZWYgQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKIAlt
b3ZhYmxlX25vZGVfZW5hYmxlZCA9IHRydWU7Ci0jZWxzZQotCXByX3dhcm4oIm1vdmFibGVfbm9k
ZSBwYXJhbWV0ZXIgZGVwZW5kcyBvbiBDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUCB0byB3
b3JrIHByb3Blcmx5XG4iKTsKLSNlbmRpZgogCXJldHVybiAwOwogfQogZWFybHlfcGFyYW0oIm1v
dmFibGVfbm9kZSIsIGNtZGxpbmVfcGFyc2VfbW92YWJsZV9ub2RlKTsKZGlmZiAtLWdpdCBhL21t
L3BhZ2VfYWxsb2MuYyBiL21tL3BhZ2VfYWxsb2MuYwppbmRleCBhODAyZWU0N2U3MTUuLjQ1MzBl
OWNmZDlmNyAxMDA2NDQKLS0tIGEvbW0vcGFnZV9hbGxvYy5jCisrKyBiL21tL3BhZ2VfYWxsb2Mu
YwpAQCAtMzM1LDcgKzMzNSw2IEBAIHN0YXRpYyB1bnNpZ25lZCBsb25nIG5yX2tlcm5lbF9wYWdl
cyBfX2luaXRkYXRhOwogc3RhdGljIHVuc2lnbmVkIGxvbmcgbnJfYWxsX3BhZ2VzIF9faW5pdGRh
dGE7CiBzdGF0aWMgdW5zaWduZWQgbG9uZyBkbWFfcmVzZXJ2ZSBfX2luaXRkYXRhOwogCi0jaWZk
ZWYgQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKIHN0YXRpYyB1bnNpZ25lZCBsb25nIGFy
Y2hfem9uZV9sb3dlc3RfcG9zc2libGVfcGZuW01BWF9OUl9aT05FU10gX19pbml0ZGF0YTsKIHN0
YXRpYyB1bnNpZ25lZCBsb25nIGFyY2hfem9uZV9oaWdoZXN0X3Bvc3NpYmxlX3BmbltNQVhfTlJf
Wk9ORVNdIF9faW5pdGRhdGE7CiBzdGF0aWMgdW5zaWduZWQgbG9uZyByZXF1aXJlZF9rZXJuZWxj
b3JlIF9faW5pdGRhdGE7CkBAIC0zNDgsNyArMzQ3LDYgQEAgc3RhdGljIGJvb2wgbWlycm9yZWRf
a2VybmVsY29yZSBfX21lbWluaXRkYXRhOwogLyogbW92YWJsZV96b25lIGlzIHRoZSAicmVhbCIg
em9uZSBwYWdlcyBpbiBaT05FX01PVkFCTEUgYXJlIHRha2VuIGZyb20gKi8KIGludCBtb3ZhYmxl
X3pvbmU7CiBFWFBPUlRfU1lNQk9MKG1vdmFibGVfem9uZSk7Ci0jZW5kaWYgLyogQ09ORklHX0hB
VkVfTUVNQkxPQ0tfTk9ERV9NQVAgKi8KIAogI2lmIE1BWF9OVU1OT0RFUyA+IDEKIHVuc2lnbmVk
IGludCBucl9ub2RlX2lkcyBfX3JlYWRfbW9zdGx5ID0gTUFYX05VTU5PREVTOwpAQCAtMTQ5OSw4
ICsxNDk3LDcgQEAgdm9pZCBfX2ZyZWVfcGFnZXNfY29yZShzdHJ1Y3QgcGFnZSAqcGFnZSwgdW5z
aWduZWQgaW50IG9yZGVyKQogCV9fZnJlZV9wYWdlcyhwYWdlLCBvcmRlcik7CiB9CiAKLSNpZiBk
ZWZpbmVkKENPTkZJR19IQVZFX0FSQ0hfRUFSTFlfUEZOX1RPX05JRCkgfHwgXAotCWRlZmluZWQo
Q09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVApCisjaWZkZWYgQ09ORklHX05FRURfTVVMVElQ
TEVfTk9ERVMKIAogc3RhdGljIHN0cnVjdCBtbWluaXRfcGZubmlkX2NhY2hlIGVhcmx5X3Bmbm5p
ZF9jYWNoZSBfX21lbWluaXRkYXRhOwogCkBAIC0xNTQyLDcgKzE1MzksNyBAQCBpbnQgX19tZW1p
bml0IGVhcmx5X3Bmbl90b19uaWQodW5zaWduZWQgbG9uZyBwZm4pCiAKIAlyZXR1cm4gbmlkOwog
fQotI2VuZGlmCisjZW5kaWYgLyogQ09ORklHX05FRURfTVVMVElQTEVfTk9ERVMgKi8KIAogI2lm
ZGVmIENPTkZJR19OT0RFU19TUEFOX09USEVSX05PREVTCiAvKiBPbmx5IHNhZmUgdG8gdXNlIGVh
cmx5IGluIGJvb3Qgd2hlbiBpbml0aWFsaXNhdGlvbiBpcyBzaW5nbGUtdGhyZWFkZWQgKi8KQEAg
LTU5MjQsNyArNTkyMSw2IEBAIHZvaWQgX19yZWYgYnVpbGRfYWxsX3pvbmVsaXN0cyhwZ19kYXRh
X3QgKnBnZGF0KQogc3RhdGljIGJvb2wgX19tZW1pbml0CiBvdmVybGFwX21lbW1hcF9pbml0KHVu
c2lnbmVkIGxvbmcgem9uZSwgdW5zaWduZWQgbG9uZyAqcGZuKQogewotI2lmZGVmIENPTkZJR19I
QVZFX01FTUJMT0NLX05PREVfTUFQCiAJc3RhdGljIHN0cnVjdCBtZW1ibG9ja19yZWdpb24gKnI7
CiAKIAlpZiAobWlycm9yZWRfa2VybmVsY29yZSAmJiB6b25lID09IFpPTkVfTU9WQUJMRSkgewpA
QCAtNTk0MCw3ICs1OTM2LDYgQEAgb3ZlcmxhcF9tZW1tYXBfaW5pdCh1bnNpZ25lZCBsb25nIHpv
bmUsIHVuc2lnbmVkIGxvbmcgKnBmbikKIAkJCXJldHVybiB0cnVlOwogCQl9CiAJfQotI2VuZGlm
CiAJcmV0dXJuIGZhbHNlOwogfQogCkBAIC02MzIzLDggKzYzMTgsNiBAQCB2b2lkIF9fbWVtaW5p
dCBpbml0X2N1cnJlbnRseV9lbXB0eV96b25lKHN0cnVjdCB6b25lICp6b25lLAogCXpvbmUtPmlu
aXRpYWxpemVkID0gMTsKIH0KIAotI2lmZGVmIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQ
Ci0KIC8qKgogICogZnJlZV9ib290bWVtX3dpdGhfYWN0aXZlX3JlZ2lvbnMgLSBDYWxsIG1lbWJs
b2NrX2ZyZWVfZWFybHlfbmlkIGZvciBlYWNoIGFjdGl2ZSByYW5nZQogICogQG5pZDogVGhlIG5v
ZGUgdG8gZnJlZSBtZW1vcnkgb24uIElmIE1BWF9OVU1OT0RFUywgYWxsIG5vZGVzIGFyZSBmcmVl
ZC4KQEAgLTY1NzUsOCArNjU2OCw3IEBAIHN0YXRpYyB1bnNpZ25lZCBsb25nIF9faW5pdCB6b25l
X2Fic2VudF9wYWdlc19pbl9ub2RlKGludCBuaWQsCiAJcmV0dXJuIG5yX2Fic2VudDsKIH0KIAot
I2Vsc2UgLyogQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAgKi8KLXN0YXRpYyBpbmxpbmUg
dW5zaWduZWQgbG9uZyBfX2luaXQgem9uZV9zcGFubmVkX3BhZ2VzX2luX25vZGUoaW50IG5pZCwK
K3N0YXRpYyBpbmxpbmUgdW5zaWduZWQgbG9uZyBfX2luaXQgY29tcGF0X3pvbmVfc3Bhbm5lZF9w
YWdlc19pbl9ub2RlKGludCBuaWQsCiAJCQkJCXVuc2lnbmVkIGxvbmcgem9uZV90eXBlLAogCQkJ
CQl1bnNpZ25lZCBsb25nIG5vZGVfc3RhcnRfcGZuLAogCQkJCQl1bnNpZ25lZCBsb25nIG5vZGVf
ZW5kX3BmbiwKQEAgLTY1OTUsNyArNjU4Nyw3IEBAIHN0YXRpYyBpbmxpbmUgdW5zaWduZWQgbG9u
ZyBfX2luaXQgem9uZV9zcGFubmVkX3BhZ2VzX2luX25vZGUoaW50IG5pZCwKIAlyZXR1cm4gem9u
ZXNfc2l6ZVt6b25lX3R5cGVdOwogfQogCi1zdGF0aWMgaW5saW5lIHVuc2lnbmVkIGxvbmcgX19p
bml0IHpvbmVfYWJzZW50X3BhZ2VzX2luX25vZGUoaW50IG5pZCwKK3N0YXRpYyBpbmxpbmUgdW5z
aWduZWQgbG9uZyBfX2luaXQgY29tcGF0X3pvbmVfYWJzZW50X3BhZ2VzX2luX25vZGUoaW50IG5p
ZCwKIAkJCQkJCXVuc2lnbmVkIGxvbmcgem9uZV90eXBlLAogCQkJCQkJdW5zaWduZWQgbG9uZyBu
b2RlX3N0YXJ0X3BmbiwKIAkJCQkJCXVuc2lnbmVkIGxvbmcgbm9kZV9lbmRfcGZuLApAQCAtNjYw
NywxMyArNjU5OSwxMiBAQCBzdGF0aWMgaW5saW5lIHVuc2lnbmVkIGxvbmcgX19pbml0IHpvbmVf
YWJzZW50X3BhZ2VzX2luX25vZGUoaW50IG5pZCwKIAlyZXR1cm4gemhvbGVzX3NpemVbem9uZV90
eXBlXTsKIH0KIAotI2VuZGlmIC8qIENPTkZJR19IQVZFX01FTUJMT0NLX05PREVfTUFQICovCi0K
IHN0YXRpYyB2b2lkIF9faW5pdCBjYWxjdWxhdGVfbm9kZV90b3RhbHBhZ2VzKHN0cnVjdCBwZ2xp
c3RfZGF0YSAqcGdkYXQsCiAJCQkJCQl1bnNpZ25lZCBsb25nIG5vZGVfc3RhcnRfcGZuLAogCQkJ
CQkJdW5zaWduZWQgbG9uZyBub2RlX2VuZF9wZm4sCiAJCQkJCQl1bnNpZ25lZCBsb25nICp6b25l
c19zaXplLAotCQkJCQkJdW5zaWduZWQgbG9uZyAqemhvbGVzX3NpemUpCisJCQkJCQl1bnNpZ25l
ZCBsb25nICp6aG9sZXNfc2l6ZSwKKwkJCQkJCWJvb2wgY29tcGF0KQogewogCXVuc2lnbmVkIGxv
bmcgcmVhbHRvdGFscGFnZXMgPSAwLCB0b3RhbHBhZ2VzID0gMDsKIAllbnVtIHpvbmVfdHlwZSBp
OwpAQCAtNjYyMSwxNyArNjYxMiwzOCBAQCBzdGF0aWMgdm9pZCBfX2luaXQgY2FsY3VsYXRlX25v
ZGVfdG90YWxwYWdlcyhzdHJ1Y3QgcGdsaXN0X2RhdGEgKnBnZGF0LAogCWZvciAoaSA9IDA7IGkg
PCBNQVhfTlJfWk9ORVM7IGkrKykgewogCQlzdHJ1Y3Qgem9uZSAqem9uZSA9IHBnZGF0LT5ub2Rl
X3pvbmVzICsgaTsKIAkJdW5zaWduZWQgbG9uZyB6b25lX3N0YXJ0X3Bmbiwgem9uZV9lbmRfcGZu
OworCQl1bnNpZ25lZCBsb25nIHNwYW5uZWQsIGFic2VudDsKIAkJdW5zaWduZWQgbG9uZyBzaXpl
LCByZWFsX3NpemU7CiAKLQkJc2l6ZSA9IHpvbmVfc3Bhbm5lZF9wYWdlc19pbl9ub2RlKHBnZGF0
LT5ub2RlX2lkLCBpLAotCQkJCQkJICBub2RlX3N0YXJ0X3BmbiwKLQkJCQkJCSAgbm9kZV9lbmRf
cGZuLAotCQkJCQkJICAmem9uZV9zdGFydF9wZm4sCi0JCQkJCQkgICZ6b25lX2VuZF9wZm4sCi0J
CQkJCQkgIHpvbmVzX3NpemUpOwotCQlyZWFsX3NpemUgPSBzaXplIC0gem9uZV9hYnNlbnRfcGFn
ZXNfaW5fbm9kZShwZ2RhdC0+bm9kZV9pZCwgaSwKLQkJCQkJCSAgbm9kZV9zdGFydF9wZm4sIG5v
ZGVfZW5kX3BmbiwKLQkJCQkJCSAgemhvbGVzX3NpemUpOworCQlpZiAoY29tcGF0KSB7CisJCQlz
cGFubmVkID0gY29tcGF0X3pvbmVfc3Bhbm5lZF9wYWdlc19pbl9ub2RlKAorCQkJCQkJcGdkYXQt
Pm5vZGVfaWQsIGksCisJCQkJCQlub2RlX3N0YXJ0X3BmbiwKKwkJCQkJCW5vZGVfZW5kX3BmbiwK
KwkJCQkJCSZ6b25lX3N0YXJ0X3BmbiwKKwkJCQkJCSZ6b25lX2VuZF9wZm4sCisJCQkJCQl6b25l
c19zaXplKTsKKwkJCWFic2VudCA9IGNvbXBhdF96b25lX2Fic2VudF9wYWdlc19pbl9ub2RlKAor
CQkJCQkJcGdkYXQtPm5vZGVfaWQsIGksCisJCQkJCQlub2RlX3N0YXJ0X3BmbiwKKwkJCQkJCW5v
ZGVfZW5kX3BmbiwKKwkJCQkJCXpob2xlc19zaXplKTsKKwkJfSBlbHNlIHsKKwkJCXNwYW5uZWQg
PSB6b25lX3NwYW5uZWRfcGFnZXNfaW5fbm9kZShwZ2RhdC0+bm9kZV9pZCwgaSwKKwkJCQkJCW5v
ZGVfc3RhcnRfcGZuLAorCQkJCQkJbm9kZV9lbmRfcGZuLAorCQkJCQkJJnpvbmVfc3RhcnRfcGZu
LAorCQkJCQkJJnpvbmVfZW5kX3BmbiwKKwkJCQkJCXpvbmVzX3NpemUpOworCQkJYWJzZW50ID0g
em9uZV9hYnNlbnRfcGFnZXNfaW5fbm9kZShwZ2RhdC0+bm9kZV9pZCwgaSwKKwkJCQkJCW5vZGVf
c3RhcnRfcGZuLAorCQkJCQkJbm9kZV9lbmRfcGZuLAorCQkJCQkJemhvbGVzX3NpemUpOworCQl9
CisKKwkJc2l6ZSA9IHNwYW5uZWQ7CisJCXJlYWxfc2l6ZSA9IHNpemUgLSBhYnNlbnQ7CisKIAkJ
aWYgKHNpemUpCiAJCQl6b25lLT56b25lX3N0YXJ0X3BmbiA9IHpvbmVfc3RhcnRfcGZuOwogCQll
bHNlCkBAIC02OTMxLDEwICs2OTQzLDggQEAgc3RhdGljIHZvaWQgX19yZWYgYWxsb2Nfbm9kZV9t
ZW1fbWFwKHN0cnVjdCBwZ2xpc3RfZGF0YSAqcGdkYXQpCiAJICovCiAJaWYgKHBnZGF0ID09IE5P
REVfREFUQSgwKSkgewogCQltZW1fbWFwID0gTk9ERV9EQVRBKDApLT5ub2RlX21lbV9tYXA7Ci0j
aWYgZGVmaW5lZChDT05GSUdfSEFWRV9NRU1CTE9DS19OT0RFX01BUCkgfHwgZGVmaW5lZChDT05G
SUdfRkxBVE1FTSkKIAkJaWYgKHBhZ2VfdG9fcGZuKG1lbV9tYXApICE9IHBnZGF0LT5ub2RlX3N0
YXJ0X3BmbikKIAkJCW1lbV9tYXAgLT0gb2Zmc2V0OwotI2VuZGlmIC8qIENPTkZJR19IQVZFX01F
TUJMT0NLX05PREVfTUFQICovCiAJfQogI2VuZGlmCiB9CkBAIC02OTUxLDkgKzY5NjEsMTAgQEAg
c3RhdGljIGlubGluZSB2b2lkIHBnZGF0X3NldF9kZWZlcnJlZF9yYW5nZShwZ19kYXRhX3QgKnBn
ZGF0KQogc3RhdGljIGlubGluZSB2b2lkIHBnZGF0X3NldF9kZWZlcnJlZF9yYW5nZShwZ19kYXRh
X3QgKnBnZGF0KSB7fQogI2VuZGlmCiAKLXZvaWQgX19pbml0IGZyZWVfYXJlYV9pbml0X25vZGUo
aW50IG5pZCwgdW5zaWduZWQgbG9uZyAqem9uZXNfc2l6ZSwKLQkJCQkgICB1bnNpZ25lZCBsb25n
IG5vZGVfc3RhcnRfcGZuLAotCQkJCSAgIHVuc2lnbmVkIGxvbmcgKnpob2xlc19zaXplKQorc3Rh
dGljIHZvaWQgX19pbml0IF9fZnJlZV9hcmVhX2luaXRfbm9kZShpbnQgbmlkLCB1bnNpZ25lZCBs
b25nICp6b25lc19zaXplLAorCQkJCQkgdW5zaWduZWQgbG9uZyBub2RlX3N0YXJ0X3BmbiwKKwkJ
CQkJIHVuc2lnbmVkIGxvbmcgKnpob2xlc19zaXplLAorCQkJCQkgYm9vbCBjb21wYXQpCiB7CiAJ
cGdfZGF0YV90ICpwZ2RhdCA9IE5PREVfREFUQShuaWQpOwogCXVuc2lnbmVkIGxvbmcgc3RhcnRf
cGZuID0gMDsKQEAgLTY5NjUsMTYgKzY5NzYsMTYgQEAgdm9pZCBfX2luaXQgZnJlZV9hcmVhX2lu
aXRfbm9kZShpbnQgbmlkLCB1bnNpZ25lZCBsb25nICp6b25lc19zaXplLAogCXBnZGF0LT5ub2Rl
X2lkID0gbmlkOwogCXBnZGF0LT5ub2RlX3N0YXJ0X3BmbiA9IG5vZGVfc3RhcnRfcGZuOwogCXBn
ZGF0LT5wZXJfY3B1X25vZGVzdGF0cyA9IE5VTEw7Ci0jaWZkZWYgQ09ORklHX0hBVkVfTUVNQkxP
Q0tfTk9ERV9NQVAKLQlnZXRfcGZuX3JhbmdlX2Zvcl9uaWQobmlkLCAmc3RhcnRfcGZuLCAmZW5k
X3Bmbik7Ci0JcHJfaW5mbygiSW5pdG1lbSBzZXR1cCBub2RlICVkIFttZW0gJSMwMThMeC0lIzAx
OEx4XVxuIiwgbmlkLAotCQkodTY0KXN0YXJ0X3BmbiA8PCBQQUdFX1NISUZULAotCQllbmRfcGZu
ID8gKCh1NjQpZW5kX3BmbiA8PCBQQUdFX1NISUZUKSAtIDEgOiAwKTsKLSNlbHNlCi0Jc3RhcnRf
cGZuID0gbm9kZV9zdGFydF9wZm47Ci0jZW5kaWYKKwlpZiAoIWNvbXBhdCkgeworCQlnZXRfcGZu
X3JhbmdlX2Zvcl9uaWQobmlkLCAmc3RhcnRfcGZuLCAmZW5kX3Bmbik7CisJCXByX2luZm8oIklu
aXRtZW0gc2V0dXAgbm9kZSAlZCBbbWVtICUjMDE4THgtJSMwMThMeF1cbiIsIG5pZCwKKwkJCSh1
NjQpc3RhcnRfcGZuIDw8IFBBR0VfU0hJRlQsCisJCQllbmRfcGZuID8gKCh1NjQpZW5kX3BmbiA8
PCBQQUdFX1NISUZUKSAtIDEgOiAwKTsKKwl9IGVsc2UgeworCQlzdGFydF9wZm4gPSBub2RlX3N0
YXJ0X3BmbjsKKwl9CiAJY2FsY3VsYXRlX25vZGVfdG90YWxwYWdlcyhwZ2RhdCwgc3RhcnRfcGZu
LCBlbmRfcGZuLAotCQkJCSAgem9uZXNfc2l6ZSwgemhvbGVzX3NpemUpOworCQkJCSAgem9uZXNf
c2l6ZSwgemhvbGVzX3NpemUsIGNvbXBhdCk7CiAKIAlhbGxvY19ub2RlX21lbV9tYXAocGdkYXQp
OwogCXBnZGF0X3NldF9kZWZlcnJlZF9yYW5nZShwZ2RhdCk7CkBAIC02OTgyLDYgKzY5OTMsMTQg
QEAgdm9pZCBfX2luaXQgZnJlZV9hcmVhX2luaXRfbm9kZShpbnQgbmlkLCB1bnNpZ25lZCBsb25n
ICp6b25lc19zaXplLAogCWZyZWVfYXJlYV9pbml0X2NvcmUocGdkYXQpOwogfQogCit2b2lkIF9f
aW5pdCBmcmVlX2FyZWFfaW5pdF9ub2RlKGludCBuaWQsIHVuc2lnbmVkIGxvbmcgKnpvbmVzX3Np
emUsCisJCQkJdW5zaWduZWQgbG9uZyBub2RlX3N0YXJ0X3BmbiwKKwkJCQl1bnNpZ25lZCBsb25n
ICp6aG9sZXNfc2l6ZSkKK3sKKwlfX2ZyZWVfYXJlYV9pbml0X25vZGUobmlkLCB6b25lc19zaXpl
LCBub2RlX3N0YXJ0X3BmbiwgemhvbGVzX3NpemUsCisJCQkgICAgICB0cnVlKTsKK30KKwogI2lm
ICFkZWZpbmVkKENPTkZJR19GTEFUX05PREVfTUVNX01BUCkKIC8qCiAgKiBJbml0aWFsaXplIGFs
bCB2YWxpZCBzdHJ1Y3QgcGFnZXMgaW4gdGhlIHJhbmdlIFtzcGZuLCBlcGZuKSBhbmQgbWFyayB0
aGVtCkBAIC03MDY1LDggKzcwODQsNiBAQCBzdGF0aWMgaW5saW5lIHZvaWQgX19pbml0IGluaXRf
dW5hdmFpbGFibGVfbWVtKHZvaWQpCiB9CiAjZW5kaWYgLyogIUNPTkZJR19GTEFUX05PREVfTUVN
X01BUCAqLwogCi0jaWZkZWYgQ09ORklHX0hBVkVfTUVNQkxPQ0tfTk9ERV9NQVAKLQogI2lmIE1B
WF9OVU1OT0RFUyA+IDEKIC8qCiAgKiBGaWd1cmUgb3V0IHRoZSBudW1iZXIgb2YgcG9zc2libGUg
bm9kZSBpZHMuCkBAIC03NDk1LDggKzc1MTIsOCBAQCB2b2lkIF9faW5pdCBmcmVlX2FyZWFfaW5p
dF9ub2Rlcyh1bnNpZ25lZCBsb25nICptYXhfem9uZV9wZm4pCiAJaW5pdF91bmF2YWlsYWJsZV9t
ZW0oKTsKIAlmb3JfZWFjaF9vbmxpbmVfbm9kZShuaWQpIHsKIAkJcGdfZGF0YV90ICpwZ2RhdCA9
IE5PREVfREFUQShuaWQpOwotCQlmcmVlX2FyZWFfaW5pdF9ub2RlKG5pZCwgTlVMTCwKLQkJCQlm
aW5kX21pbl9wZm5fZm9yX25vZGUobmlkKSwgTlVMTCk7CisJCV9fZnJlZV9hcmVhX2luaXRfbm9k
ZShuaWQsIE5VTEwsCisJCQkJICAgICAgZmluZF9taW5fcGZuX2Zvcl9ub2RlKG5pZCksIE5VTEws
IGZhbHNlKTsKIAogCQkvKiBBbnkgbWVtb3J5IG9uIHRoYXQgbm9kZSAqLwogCQlpZiAocGdkYXQt
Pm5vZGVfcHJlc2VudF9wYWdlcykKQEAgLTc1NjEsOCArNzU3OCw2IEBAIHN0YXRpYyBpbnQgX19p
bml0IGNtZGxpbmVfcGFyc2VfbW92YWJsZWNvcmUoY2hhciAqcCkKIGVhcmx5X3BhcmFtKCJrZXJu
ZWxjb3JlIiwgY21kbGluZV9wYXJzZV9rZXJuZWxjb3JlKTsKIGVhcmx5X3BhcmFtKCJtb3ZhYmxl
Y29yZSIsIGNtZGxpbmVfcGFyc2VfbW92YWJsZWNvcmUpOwogCi0jZW5kaWYgLyogQ09ORklHX0hB
VkVfTUVNQkxPQ0tfTk9ERV9NQVAgKi8KLQogdm9pZCBhZGp1c3RfbWFuYWdlZF9wYWdlX2NvdW50
KHN0cnVjdCBwYWdlICpwYWdlLCBsb25nIGNvdW50KQogewogCWF0b21pY19sb25nX2FkZChjb3Vu
dCwgJnBhZ2Vfem9uZShwYWdlKS0+bWFuYWdlZF9wYWdlcyk7Ci0tIAoyLjI2LjEKCl9fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCk9wZW5SSVNDIG1haWxpbmcg
bGlzdApPcGVuUklTQ0BsaXN0cy5saWJyZWNvcmVzLm9yZwpodHRwczovL2xpc3RzLmxpYnJlY29y
ZXMub3JnL2xpc3RpbmZvL29wZW5yaXNjCg==
